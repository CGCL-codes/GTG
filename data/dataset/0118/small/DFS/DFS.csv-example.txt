####### sample 1 #######

>> task:

DFS

>> graph:

[(<8>, <12>), (<8>, <11>), (<8>, <9>), (<8>, <4>), (<8>, <7>), (<12>, <5>), (<12>, <1>), (<12>, <2>), (<12>, <11>), (<12>, <14>), (<11>, <5>), (<11>, <6>), (<11>, <2>), (<11>, <3>), (<11>, <4>), (<11>, <7>), (<11>, <10>), (<9>, <6>), (<9>, <2>), (<9>, <4>), (<9>, <7>), (<9>, <10>), (<4>, <1>), (<4>, <6>), (<7>, <5>), (<7>, <2>), (<7>, <10>), (<5>, <3>), (<5>, <14>), (<5>, <10>), (<3>, <2>), (<3>, <10>), (<14>, <10>), (<10>, <6>), (<1>, <13>), (<1>, <0>), (<13>, <0>)]

>> graph_adj:

{<8>: [<12>, <11>, <9>, <4>, <7>],
<12>: [<8>, <5>, <1>, <2>, <11>, <14>],
<11>: [<8>, <5>, <12>, <6>, <2>, <3>, <4>, <7>, <10>],
<9>: [<8>, <6>, <2>, <4>, <7>, <10>],
<4>: [<8>, <1>, <6>, <11>, <9>],
<7>: [<8>, <5>, <2>, <11>, <9>, <10>],
<5>: [<12>, <11>, <3>, <14>, <7>, <10>],
<3>: [<5>, <2>, <11>, <10>],
<14>: [<5>, <12>, <10>],
<10>: [<5>, <6>, <11>, <3>, <9>, <14>, <7>],
<1>: [<12>, <13>, <4>, <0>],
<13>: [<1>, <0>],
<0>: [<1>, <13>],
<2>: [<12>, <11>, <3>, <9>, <7>],
<6>: [<11>, <9>, <4>, <10>]}

>> graph_nl:

Node <8> is connected to nodes <12>, <11>, <9>, <4>, <7>.
Node <12> is connected to nodes <8>, <5>, <1>, <2>, <11>, <14>.
Node <11> is connected to nodes <8>, <5>, <12>, <6>, <2>, <3>, <4>, <7>, <10>.
Node <9> is connected to nodes <8>, <6>, <2>, <4>, <7>, <10>.
Node <4> is connected to nodes <8>, <1>, <6>, <11>, <9>.
Node <7> is connected to nodes <8>, <5>, <2>, <11>, <9>, <10>.
Node <5> is connected to nodes <12>, <11>, <3>, <14>, <7>, <10>.
Node <3> is connected to nodes <5>, <2>, <11>, <10>.
Node <14> is connected to nodes <5>, <12>, <10>.
Node <10> is connected to nodes <5>, <6>, <11>, <3>, <9>, <14>, <7>.
Node <1> is connected to nodes <12>, <13>, <4>, <0>.
Node <13> is connected to nodes <1>, <0>.
Node <0> is connected to nodes <1>, <13>.
Node <2> is connected to nodes <12>, <11>, <3>, <9>, <7>.
Node <6> is connected to nodes <11>, <9>, <4>, <10>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>, <14>]

>> num_nodes:

15

>> num_edges:

37

>> directed:

False

>> question:

Start from node <10>, output a sequence of traversal in depth-first search (DFS) order.

>> answer:

[<10>, <7>, <9>, <4>, <11>, <3>, <2>, <12>, <14>, <5>, <1>, <0>, <13>, <8>, <6>]

>> steps:

Let's run depth-first search (DFS) step by step.
Visit node <10>. Neighors of node <10>: [<5>, <6>, <11>, <3>, <9>, <14>, <7>].
Visit node <7>. Neighors of node <7>: [<8>, <5>, <2>, <11>, <9>, <10>].
Visit node <9>. Neighors of node <9>: [<8>, <6>, <2>, <4>, <7>, <10>].
Visit node <4>. Neighors of node <4>: [<8>, <1>, <6>, <11>, <9>].
Visit node <11>. Neighors of node <11>: [<8>, <5>, <12>, <6>, <2>, <3>, <4>, <7>, <10>].
Visit node <3>. Neighors of node <3>: [<5>, <2>, <11>, <10>].
Visit node <2>. Neighors of node <2>: [<12>, <11>, <3>, <9>, <7>].
Visit node <12>. Neighors of node <12>: [<8>, <5>, <1>, <2>, <11>, <14>].
Visit node <14>. Neighors of node <14>: [<5>, <12>, <10>].
Visit node <5>. Neighors of node <5>: [<12>, <11>, <3>, <14>, <7>, <10>].
Visit node <1>. Neighors of node <1>: [<12>, <13>, <4>, <0>].
Visit node <0>. Neighors of node <0>: [<1>, <13>].
Visit node <13>. Neighors of node <13>: [<1>, <0>].
Visit node <8>. Neighors of node <8>: [<12>, <11>, <9>, <4>, <7>].
Visit node <6>. Neighors of node <6>: [<11>, <9>, <4>, <10>].
So the DFS traversal is 

>> choices:

('[[<10>, <7>, <9>, <4>, <11>, <1>, <0>, <13>, <8>, <6>, <3>, <2>, <12>, <14>, <5>], [<10>, <12>, <13>, <11>, <5>, <14>, <6>, <0>, <4>, <2>, <9>, <3>, <8>, <7>, <1>], [<10>, <7>, <9>, <4>, <11>, <3>, <2>, <5>, <8>, <14>, <6>, <1>, <12>, <0>, <13>], [<10>, <7>, <9>, <4>, <11>, <3>, <2>, <12>, <14>, <5>, <1>, <0>, <13>, <8>, <6>]]',)

>> label:

3

####### sample 2 #######

>> task:

DFS

>> graph:

[(<10>, <4>), (<10>, <2>), (<4>, <0>), (<2>, <12>), (<2>, <4>), (<12>, <6>), (<12>, <0>), (<12>, <5>), (<12>, <11>), (<6>, <4>), (<6>, <12>), (<0>, <9>), (<0>, <4>), (<0>, <2>), (<0>, <10>), (<0>, <3>), (<5>, <1>), (<11>, <6>), (<11>, <4>), (<3>, <8>), (<3>, <11>), (<3>, <10>), (<8>, <6>), (<9>, <1>), (<9>, <2>), (<9>, <6>), (<9>, <0>), (<9>, <5>), (<1>, <4>), (<1>, <10>), (<1>, <6>), (<7>, <12>), (<7>, <8>)]

>> graph_adj:

{<10>: [<4>, <2>],
<4>: [<0>],
<2>: [<12>, <4>],
<12>: [<6>, <0>, <5>, <11>],
<6>: [<4>, <12>],
<0>: [<9>, <4>, <2>, <10>, <3>],
<5>: [<1>],
<11>: [<6>, <4>],
<3>: [<8>, <11>, <10>],
<8>: [<6>],
<9>: [<1>, <2>, <6>, <0>, <5>],
<1>: [<4>, <10>, <6>],
<7>: [<12>, <8>]}

>> graph_nl:

Node <10> is connected to nodes <4>, <2>.
Node <4> is connected to node <0>.
Node <2> is connected to nodes <12>, <4>.
Node <12> is connected to nodes <6>, <0>, <5>, <11>.
Node <6> is connected to nodes <4>, <12>.
Node <0> is connected to nodes <9>, <4>, <2>, <10>, <3>.
Node <5> is connected to node <1>.
Node <11> is connected to nodes <6>, <4>.
Node <3> is connected to nodes <8>, <11>, <10>.
Node <8> is connected to node <6>.
Node <9> is connected to nodes <1>, <2>, <6>, <0>, <5>.
Node <1> is connected to nodes <4>, <10>, <6>.
Node <7> is connected to nodes <12>, <8>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>]

>> num_nodes:

13

>> num_edges:

33

>> directed:

True

>> question:

Start from node <4>, output a sequence of traversal in depth-first search (DFS) order.

>> answer:

[<4>, <0>, <3>, <10>, <2>, <12>, <11>, <6>, <5>, <1>, <8>, <9>]

>> steps:

Let's run depth-first search (DFS) step by step.
Visit node <4>. Neighors of node <4>: [<0>].
Visit node <0>. Neighors of node <0>: [<9>, <4>, <2>, <10>, <3>].
Visit node <3>. Neighors of node <3>: [<8>, <11>, <10>].
Visit node <10>. Neighors of node <10>: [<4>, <2>].
Visit node <2>. Neighors of node <2>: [<12>, <4>].
Visit node <12>. Neighors of node <12>: [<6>, <0>, <5>, <11>].
Visit node <11>. Neighors of node <11>: [<6>, <4>].
Visit node <6>. Neighors of node <6>: [<4>, <12>].
Visit node <5>. Neighors of node <5>: [<1>].
Visit node <1>. Neighors of node <1>: [<4>, <10>, <6>].
Visit node <8>. Neighors of node <8>: [<6>].
Visit node <9>. Neighors of node <9>: [<1>, <2>, <6>, <0>, <5>].
So the DFS traversal is 

>> choices:

('[[<4>, <0>, <6>, <1>, <8>, <3>, <11>, <10>, <12>, <9>, <5>, <2>], [<4>, <0>, <3>, <10>, <2>, <12>, <9>, <11>, <6>, <5>, <1>, <8>], [<4>, <0>, <3>, <10>, <5>, <1>, <8>, <9>, <2>, <12>, <11>, <6>], [<4>, <0>, <3>, <10>, <2>, <12>, <11>, <6>, <5>, <1>, <8>, <9>]]',)

>> label:

3

####### sample 3 #######

>> task:

DFS

>> graph:

[(<4>, <9>), (<4>, <3>), (<4>, <2>), (<9>, <1>), (<9>, <3>), (<9>, <2>), (<9>, <6>), (<3>, <5>), (<3>, <7>), (<3>, <0>), (<3>, <1>), (<2>, <5>), (<2>, <0>), (<2>, <1>), (<2>, <6>), (<5>, <0>), (<5>, <1>), (<5>, <8>), (<5>, <6>), (<0>, <8>), (<0>, <6>), (<1>, <8>), (<1>, <6>), (<8>, <6>), (<6>, <7>)]

>> graph_adj:

{<4>: [<9>, <3>, <2>],
<9>: [<4>, <1>, <3>, <2>, <6>],
<3>: [<4>, <5>, <9>, <7>, <0>, <1>],
<2>: [<4>, <5>, <9>, <0>, <1>, <6>],
<5>: [<0>, <1>, <3>, <8>, <2>, <6>],
<0>: [<5>, <3>, <8>, <2>, <6>],
<1>: [<5>, <9>, <3>, <8>, <2>, <6>],
<8>: [<5>, <0>, <1>, <6>],
<6>: [<5>, <9>, <7>, <0>, <1>, <8>, <2>],
<7>: [<3>, <6>]}

>> graph_nl:

Node <4> is connected to nodes <9>, <3>, <2>.
Node <9> is connected to nodes <4>, <1>, <3>, <2>, <6>.
Node <3> is connected to nodes <4>, <5>, <9>, <7>, <0>, <1>.
Node <2> is connected to nodes <4>, <5>, <9>, <0>, <1>, <6>.
Node <5> is connected to nodes <0>, <1>, <3>, <8>, <2>, <6>.
Node <0> is connected to nodes <5>, <3>, <8>, <2>, <6>.
Node <1> is connected to nodes <5>, <9>, <3>, <8>, <2>, <6>.
Node <8> is connected to nodes <5>, <0>, <1>, <6>.
Node <6> is connected to nodes <5>, <9>, <7>, <0>, <1>, <8>, <2>.
Node <7> is connected to nodes <3>, <6>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>]

>> num_nodes:

10

>> num_edges:

25

>> directed:

False

>> question:

Start from node <1>, output a sequence of traversal in depth-first search (DFS) order.

>> answer:

[<1>, <6>, <2>, <0>, <8>, <5>, <3>, <7>, <9>, <4>]

>> steps:

Let's run depth-first search (DFS) step by step.
Visit node <1>. Neighors of node <1>: [<5>, <9>, <3>, <8>, <2>, <6>].
Visit node <6>. Neighors of node <6>: [<5>, <9>, <7>, <0>, <1>, <8>, <2>].
Visit node <2>. Neighors of node <2>: [<4>, <5>, <9>, <0>, <1>, <6>].
Visit node <0>. Neighors of node <0>: [<5>, <3>, <8>, <2>, <6>].
Visit node <8>. Neighors of node <8>: [<5>, <0>, <1>, <6>].
Visit node <5>. Neighors of node <5>: [<0>, <1>, <3>, <8>, <2>, <6>].
Visit node <3>. Neighors of node <3>: [<4>, <5>, <9>, <7>, <0>, <1>].
Visit node <7>. Neighors of node <7>: [<3>, <6>].
Visit node <9>. Neighors of node <9>: [<4>, <1>, <3>, <2>, <6>].
Visit node <4>. Neighors of node <4>: [<9>, <3>, <2>].
So the DFS traversal is 

>> choices:

('[[<1>, <4>, <7>, <3>, <8>, <9>, <6>, <2>, <0>, <5>], [<1>, <6>, <2>, <7>, <9>, <4>, <0>, <8>, <5>, <3>], [<1>, <6>, <2>, <0>, <8>, <3>, <4>, <9>, <5>, <7>], [<1>, <6>, <2>, <0>, <8>, <5>, <3>, <7>, <9>, <4>]]',)

>> label:

3

####### sample 4 #######

>> task:

DFS

>> graph:

[(<1>, <12>), (<1>, <10>), (<1>, <11>), (<1>, <13>), (<1>, <6>), (<1>, <2>), (<1>, <7>), (<1>, <0>), (<12>, <4>), (<13>, <9>), (<13>, <8>), (<6>, <3>), (<2>, <5>)]

>> graph_adj:

{<1>: [<12>, <10>, <11>, <13>, <6>, <2>, <7>, <0>],
<12>: [<1>, <4>],
<10>: [<1>],
<11>: [<1>],
<13>: [<1>, <9>, <8>],
<6>: [<1>, <3>],
<2>: [<1>, <5>],
<7>: [<1>],
<0>: [<1>],
<4>: [<12>],
<9>: [<13>],
<8>: [<13>],
<5>: [<2>],
<3>: [<6>]}

>> graph_nl:

Node <1> is connected to nodes <12>, <10>, <11>, <13>, <6>, <2>, <7>, <0>.
Node <12> is connected to nodes <1>, <4>.
Node <10> is connected to node <1>.
Node <11> is connected to node <1>.
Node <13> is connected to nodes <1>, <9>, <8>.
Node <6> is connected to nodes <1>, <3>.
Node <2> is connected to nodes <1>, <5>.
Node <7> is connected to node <1>.
Node <0> is connected to node <1>.
Node <4> is connected to node <12>.
Node <9> is connected to node <13>.
Node <8> is connected to node <13>.
Node <5> is connected to node <2>.
Node <3> is connected to node <6>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>]

>> num_nodes:

14

>> num_edges:

13

>> directed:

False

>> question:

Start from node <3>, output a sequence of traversal in depth-first search (DFS) order.

>> answer:

[<3>, <6>, <1>, <0>, <7>, <2>, <5>, <13>, <8>, <9>, <11>, <10>, <12>, <4>]

>> steps:

Let's run depth-first search (DFS) step by step.
Visit node <3>. Neighors of node <3>: [<6>].
Visit node <6>. Neighors of node <6>: [<1>, <3>].
Visit node <1>. Neighors of node <1>: [<12>, <10>, <11>, <13>, <6>, <2>, <7>, <0>].
Visit node <0>. Neighors of node <0>: [<1>].
Visit node <7>. Neighors of node <7>: [<1>].
Visit node <2>. Neighors of node <2>: [<1>, <5>].
Visit node <5>. Neighors of node <5>: [<2>].
Visit node <13>. Neighors of node <13>: [<1>, <9>, <8>].
Visit node <8>. Neighors of node <8>: [<13>].
Visit node <9>. Neighors of node <9>: [<13>].
Visit node <11>. Neighors of node <11>: [<1>].
Visit node <10>. Neighors of node <10>: [<1>].
Visit node <12>. Neighors of node <12>: [<1>, <4>].
Visit node <4>. Neighors of node <4>: [<12>].
So the DFS traversal is 

>> choices:

('[[<3>, <6>, <1>, <0>, <11>, <10>, <12>, <4>, <7>, <2>, <5>, <13>, <8>, <9>], [<3>, <6>, <1>, <0>, <7>, <2>, <5>, <13>, <8>, <9>, <11>, <10>, <12>, <4>], [<3>, <11>, <2>, <9>, <7>, <10>, <5>, <0>, <6>, <12>, <13>, <1>, <8>, <4>], [<3>, <6>, <1>, <0>, <7>, <2>, <5>, <8>, <9>, <4>, <12>, <13>, <11>, <10>]]',)

>> label:

1

####### sample 5 #######

>> task:

DFS

>> graph:

[(<0>, <4>), (<0>, <7>), (<4>, <3>), (<4>, <7>), (<7>, <2>), (<3>, <0>), (<3>, <6>), (<3>, <5>), (<6>, <1>), (<1>, <6>), (<1>, <3>), (<5>, <1>), (<5>, <7>), (<5>, <2>), (<5>, <4>)]

>> graph_adj:

{<0>: [<4>, <7>],
<4>: [<3>, <7>],
<7>: [<2>],
<3>: [<0>, <6>, <5>],
<6>: [<1>],
<1>: [<6>, <3>],
<5>: [<1>, <7>, <2>, <4>],
<2>: []}

>> graph_nl:

Node <0> is connected to nodes <4>, <7>.
Node <4> is connected to nodes <3>, <7>.
Node <7> is connected to node <2>.
Node <3> is connected to nodes <0>, <6>, <5>.
Node <6> is connected to node <1>.
Node <1> is connected to nodes <6>, <3>.
Node <5> is connected to nodes <1>, <7>, <2>, <4>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>]

>> num_nodes:

8

>> num_edges:

15

>> directed:

True

>> question:

Start from node <6>, output a sequence of traversal in depth-first search (DFS) order.

>> answer:

[<6>, <1>, <3>, <5>, <4>, <7>, <2>, <0>]

>> steps:

Let's run depth-first search (DFS) step by step.
Visit node <6>. Neighors of node <6>: [<1>].
Visit node <1>. Neighors of node <1>: [<6>, <3>].
Visit node <3>. Neighors of node <3>: [<0>, <6>, <5>].
Visit node <5>. Neighors of node <5>: [<1>, <7>, <2>, <4>].
Visit node <4>. Neighors of node <4>: [<3>, <7>].
Visit node <7>. Neighors of node <7>: [<2>].
Visit node <2>. Neighors of node <2>: [].
Visit node <0>. Neighors of node <0>: [<4>, <7>].
So the DFS traversal is 

>> choices:

('[[<6>, <1>, <3>, <5>, <4>, <7>, <2>, <0>], [<6>, <1>, <3>, <5>, <2>, <0>, <4>, <7>], [<6>, <1>, <2>, <0>, <3>, <5>, <4>, <7>], [<6>, <7>, <5>, <2>, <4>, <3>, <0>, <1>]]',)

>> label:

0

####### sample 6 #######

>> task:

DFS

>> graph:

[(<7>, <5>), (<7>, <0>), (<7>, <1>), (<7>, <3>), (<7>, <10>), (<7>, <4>), (<5>, <3>), (<5>, <11>), (<5>, <8>), (<5>, <10>), (<0>, <3>), (<1>, <6>), (<1>, <9>), (<3>, <11>), (<3>, <12>), (<3>, <2>), (<3>, <9>), (<4>, <9>), (<8>, <9>), (<12>, <9>), (<2>, <9>), (<9>, <6>)]

>> graph_adj:

{<7>: [<5>, <0>, <1>, <3>, <10>, <4>],
<5>: [<7>, <3>, <11>, <8>, <10>],
<0>: [<7>, <3>],
<1>: [<7>, <6>, <9>],
<3>: [<7>, <5>, <11>, <12>, <2>, <9>, <0>],
<10>: [<7>, <5>],
<4>: [<7>, <9>],
<11>: [<5>, <3>],
<8>: [<5>, <9>],
<12>: [<3>, <9>],
<2>: [<3>, <9>],
<9>: [<3>, <1>, <6>, <2>, <8>, <4>, <12>],
<6>: [<1>, <9>]}

>> graph_nl:

Node <7> is connected to nodes <5>, <0>, <1>, <3>, <10>, <4>.
Node <5> is connected to nodes <7>, <3>, <11>, <8>, <10>.
Node <0> is connected to nodes <7>, <3>.
Node <1> is connected to nodes <7>, <6>, <9>.
Node <3> is connected to nodes <7>, <5>, <11>, <12>, <2>, <9>, <0>.
Node <10> is connected to nodes <7>, <5>.
Node <4> is connected to nodes <7>, <9>.
Node <11> is connected to nodes <5>, <3>.
Node <8> is connected to nodes <5>, <9>.
Node <12> is connected to nodes <3>, <9>.
Node <2> is connected to nodes <3>, <9>.
Node <9> is connected to nodes <3>, <1>, <6>, <2>, <8>, <4>, <12>.
Node <6> is connected to nodes <1>, <9>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>]

>> num_nodes:

13

>> num_edges:

22

>> directed:

False

>> question:

Start from node <11>, output a sequence of traversal in depth-first search (DFS) order.

>> answer:

[<11>, <3>, <0>, <7>, <4>, <9>, <12>, <8>, <5>, <10>, <2>, <6>, <1>]

>> steps:

Let's run depth-first search (DFS) step by step.
Visit node <11>. Neighors of node <11>: [<5>, <3>].
Visit node <3>. Neighors of node <3>: [<7>, <5>, <11>, <12>, <2>, <9>, <0>].
Visit node <0>. Neighors of node <0>: [<7>, <3>].
Visit node <7>. Neighors of node <7>: [<5>, <0>, <1>, <3>, <10>, <4>].
Visit node <4>. Neighors of node <4>: [<7>, <9>].
Visit node <9>. Neighors of node <9>: [<3>, <1>, <6>, <2>, <8>, <4>, <12>].
Visit node <12>. Neighors of node <12>: [<3>, <9>].
Visit node <8>. Neighors of node <8>: [<5>, <9>].
Visit node <5>. Neighors of node <5>: [<7>, <3>, <11>, <8>, <10>].
Visit node <10>. Neighors of node <10>: [<7>, <5>].
Visit node <2>. Neighors of node <2>: [<3>, <9>].
Visit node <6>. Neighors of node <6>: [<1>, <9>].
Visit node <1>. Neighors of node <1>: [<7>, <6>, <9>].
So the DFS traversal is 

>> choices:

('[[<11>, <3>, <0>, <7>, <4>, <9>, <1>, <12>, <2>, <6>, <8>, <10>, <5>], [<11>, <3>, <0>, <7>, <10>, <2>, <6>, <1>, <4>, <9>, <12>, <8>, <5>], [<11>, <10>, <6>, <9>, <2>, <5>, <7>, <3>, <12>, <4>, <0>, <8>, <1>], [<11>, <3>, <0>, <7>, <4>, <9>, <12>, <8>, <5>, <10>, <2>, <6>, <1>]]',)

>> label:

3

####### sample 7 #######

>> task:

DFS

>> graph:

[(<5>, <2>), (<5>, <11>), (<5>, <14>), (<5>, <0>), (<5>, <4>), (<5>, <8>), (<2>, <12>), (<2>, <14>), (<2>, <3>), (<2>, <0>), (<2>, <10>), (<2>, <7>), (<2>, <8>), (<11>, <6>), (<11>, <9>), (<11>, <12>), (<11>, <14>), (<11>, <4>), (<11>, <13>), (<11>, <7>), (<11>, <8>), (<11>, <1>), (<14>, <9>), (<14>, <3>), (<14>, <0>), (<14>, <4>), (<14>, <8>), (<14>, <1>), (<0>, <6>), (<0>, <9>), (<0>, <3>), (<0>, <10>), (<0>, <13>), (<0>, <8>), (<0>, <1>), (<4>, <6>), (<4>, <12>), (<4>, <3>), (<4>, <13>), (<4>, <7>), (<4>, <8>), (<8>, <6>), (<8>, <9>), (<8>, <3>), (<8>, <7>), (<12>, <6>), (<12>, <10>), (<12>, <7>), (<12>, <1>), (<3>, <6>), (<3>, <9>), (<3>, <1>), (<10>, <6>), (<10>, <7>), (<7>, <6>), (<6>, <9>), (<6>, <13>), (<9>, <13>)]

>> graph_adj:

{<5>: [<2>, <11>, <14>, <0>, <4>, <8>],
<2>: [<5>, <12>, <14>, <3>, <0>, <10>, <7>, <8>],
<11>: [<5>, <6>, <9>, <12>, <14>, <4>, <13>, <7>, <8>, <1>],
<14>: [<5>, <2>, <11>, <9>, <3>, <0>, <4>, <8>, <1>],
<0>: [<5>, <2>, <6>, <9>, <14>, <3>, <10>, <13>, <8>, <1>],
<4>: [<5>, <11>, <6>, <12>, <14>, <3>, <13>, <7>, <8>],
<8>: [<5>, <2>, <11>, <6>, <9>, <14>, <3>, <0>, <4>, <7>],
<12>: [<2>, <11>, <6>, <10>, <4>, <7>, <1>],
<3>: [<2>, <6>, <9>, <14>, <0>, <4>, <8>, <1>],
<10>: [<2>, <6>, <12>, <0>, <7>],
<7>: [<2>, <11>, <6>, <12>, <10>, <4>, <8>],
<6>: [<11>, <9>, <12>, <3>, <0>, <10>, <4>, <13>, <7>, <8>],
<9>: [<11>, <6>, <14>, <3>, <0>, <13>, <8>],
<13>: [<11>, <6>, <9>, <0>, <4>],
<1>: [<11>, <12>, <14>, <3>, <0>]}

>> graph_nl:

Node <5> is connected to nodes <2>, <11>, <14>, <0>, <4>, <8>.
Node <2> is connected to nodes <5>, <12>, <14>, <3>, <0>, <10>, <7>, <8>.
Node <11> is connected to nodes <5>, <6>, <9>, <12>, <14>, <4>, <13>, <7>, <8>, <1>.
Node <14> is connected to nodes <5>, <2>, <11>, <9>, <3>, <0>, <4>, <8>, <1>.
Node <0> is connected to nodes <5>, <2>, <6>, <9>, <14>, <3>, <10>, <13>, <8>, <1>.
Node <4> is connected to nodes <5>, <11>, <6>, <12>, <14>, <3>, <13>, <7>, <8>.
Node <8> is connected to nodes <5>, <2>, <11>, <6>, <9>, <14>, <3>, <0>, <4>, <7>.
Node <12> is connected to nodes <2>, <11>, <6>, <10>, <4>, <7>, <1>.
Node <3> is connected to nodes <2>, <6>, <9>, <14>, <0>, <4>, <8>, <1>.
Node <10> is connected to nodes <2>, <6>, <12>, <0>, <7>.
Node <7> is connected to nodes <2>, <11>, <6>, <12>, <10>, <4>, <8>.
Node <6> is connected to nodes <11>, <9>, <12>, <3>, <0>, <10>, <4>, <13>, <7>, <8>.
Node <9> is connected to nodes <11>, <6>, <14>, <3>, <0>, <13>, <8>.
Node <13> is connected to nodes <11>, <6>, <9>, <0>, <4>.
Node <1> is connected to nodes <11>, <12>, <14>, <3>, <0>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>, <14>]

>> num_nodes:

15

>> num_edges:

58

>> directed:

False

>> question:

Start from node <7>, output a sequence of traversal in depth-first search (DFS) order.

>> answer:

[<7>, <8>, <4>, <13>, <0>, <1>, <3>, <14>, <9>, <6>, <10>, <12>, <11>, <5>, <2>]

>> steps:

Let's run depth-first search (DFS) step by step.
Visit node <7>. Neighors of node <7>: [<2>, <11>, <6>, <12>, <10>, <4>, <8>].
Visit node <8>. Neighors of node <8>: [<5>, <2>, <11>, <6>, <9>, <14>, <3>, <0>, <4>, <7>].
Visit node <4>. Neighors of node <4>: [<5>, <11>, <6>, <12>, <14>, <3>, <13>, <7>, <8>].
Visit node <13>. Neighors of node <13>: [<11>, <6>, <9>, <0>, <4>].
Visit node <0>. Neighors of node <0>: [<5>, <2>, <6>, <9>, <14>, <3>, <10>, <13>, <8>, <1>].
Visit node <1>. Neighors of node <1>: [<11>, <12>, <14>, <3>, <0>].
Visit node <3>. Neighors of node <3>: [<2>, <6>, <9>, <14>, <0>, <4>, <8>, <1>].
Visit node <14>. Neighors of node <14>: [<5>, <2>, <11>, <9>, <3>, <0>, <4>, <8>, <1>].
Visit node <9>. Neighors of node <9>: [<11>, <6>, <14>, <3>, <0>, <13>, <8>].
Visit node <6>. Neighors of node <6>: [<11>, <9>, <12>, <3>, <0>, <10>, <4>, <13>, <7>, <8>].
Visit node <10>. Neighors of node <10>: [<2>, <6>, <12>, <0>, <7>].
Visit node <12>. Neighors of node <12>: [<2>, <11>, <6>, <10>, <4>, <7>, <1>].
Visit node <11>. Neighors of node <11>: [<5>, <6>, <9>, <12>, <14>, <4>, <13>, <7>, <8>, <1>].
Visit node <5>. Neighors of node <5>: [<2>, <11>, <14>, <0>, <4>, <8>].
Visit node <2>. Neighors of node <2>: [<5>, <12>, <14>, <3>, <0>, <10>, <7>, <8>].
So the DFS traversal is 

>> choices:

('[[<7>, <8>, <4>, <13>, <0>, <1>, <3>, <14>, <9>, <6>, <10>, <12>, <11>, <5>, <2>], [<7>, <8>, <4>, <13>, <0>, <1>, <3>, <12>, <14>, <6>, <9>, <5>, <11>, <2>, <10>], [<7>, <0>, <2>, <3>, <8>, <4>, <6>, <11>, <10>, <1>, <9>, <14>, <5>, <12>, <13>], [<7>, <8>, <4>, <13>, <0>, <10>, <12>, <11>, <5>, <2>, <1>, <3>, <14>, <9>, <6>]]',)

>> label:

0

####### sample 8 #######

>> task:

DFS

>> graph:

[(<6>, <2>), (<6>, <4>), (<6>, <10>), (<6>, <11>), (<2>, <5>), (<4>, <10>), (<10>, <5>), (<10>, <8>), (<10>, <11>), (<10>, <7>), (<11>, <8>), (<5>, <0>), (<0>, <9>), (<3>, <1>), (<3>, <8>), (<1>, <8>), (<1>, <7>), (<8>, <7>)]

>> graph_adj:

{<6>: [<2>, <4>, <10>, <11>],
<2>: [<6>, <5>],
<4>: [<6>, <10>],
<10>: [<6>, <5>, <4>, <8>, <11>, <7>],
<11>: [<6>, <10>, <8>],
<5>: [<2>, <10>, <0>],
<0>: [<5>, <9>],
<3>: [<1>, <8>],
<1>: [<3>, <8>, <7>],
<8>: [<3>, <1>, <10>, <11>, <7>],
<7>: [<1>, <10>, <8>],
<9>: [<0>]}

>> graph_nl:

Node <6> is connected to nodes <2>, <4>, <10>, <11>.
Node <2> is connected to nodes <6>, <5>.
Node <4> is connected to nodes <6>, <10>.
Node <10> is connected to nodes <6>, <5>, <4>, <8>, <11>, <7>.
Node <11> is connected to nodes <6>, <10>, <8>.
Node <5> is connected to nodes <2>, <10>, <0>.
Node <0> is connected to nodes <5>, <9>.
Node <3> is connected to nodes <1>, <8>.
Node <1> is connected to nodes <3>, <8>, <7>.
Node <8> is connected to nodes <3>, <1>, <10>, <11>, <7>.
Node <7> is connected to nodes <1>, <10>, <8>.
Node <9> is connected to node <0>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>]

>> num_nodes:

12

>> num_edges:

18

>> directed:

False

>> question:

Start from node <11>, output a sequence of traversal in depth-first search (DFS) order.

>> answer:

[<11>, <8>, <7>, <10>, <4>, <6>, <2>, <5>, <0>, <9>, <1>, <3>]

>> steps:

Let's run depth-first search (DFS) step by step.
Visit node <11>. Neighors of node <11>: [<6>, <10>, <8>].
Visit node <8>. Neighors of node <8>: [<3>, <1>, <10>, <11>, <7>].
Visit node <7>. Neighors of node <7>: [<1>, <10>, <8>].
Visit node <10>. Neighors of node <10>: [<6>, <5>, <4>, <8>, <11>, <7>].
Visit node <4>. Neighors of node <4>: [<6>, <10>].
Visit node <6>. Neighors of node <6>: [<2>, <4>, <10>, <11>].
Visit node <2>. Neighors of node <2>: [<6>, <5>].
Visit node <5>. Neighors of node <5>: [<2>, <10>, <0>].
Visit node <0>. Neighors of node <0>: [<5>, <9>].
Visit node <9>. Neighors of node <9>: [<0>].
Visit node <1>. Neighors of node <1>: [<3>, <8>, <7>].
Visit node <3>. Neighors of node <3>: [<1>, <8>].
So the DFS traversal is 

>> choices:

('[[<11>, <9>, <6>, <2>, <3>, <5>, <7>, <10>, <8>, <4>, <0>, <1>], [<11>, <8>, <7>, <10>, <0>, <9>, <1>, <3>, <4>, <6>, <2>, <5>], [<11>, <8>, <7>, <10>, <4>, <6>, <2>, <5>, <0>, <9>, <1>, <3>], [<11>, <8>, <7>, <10>, <4>, <6>, <9>, <0>, <3>, <2>, <5>, <1>]]',)

>> label:

2

####### sample 9 #######

>> task:

DFS

>> graph:

[(<8>, <12>), (<8>, <11>), (<11>, <7>), (<11>, <13>), (<11>, <5>), (<11>, <2>), (<11>, <0>), (<7>, <3>), (<13>, <6>), (<5>, <10>), (<2>, <1>), (<2>, <4>), (<2>, <9>)]

>> graph_adj:

{<8>: [<12>, <11>],
<12>: [<8>],
<11>: [<8>, <7>, <13>, <5>, <2>, <0>],
<7>: [<11>, <3>],
<3>: [<7>],
<13>: [<11>, <6>],
<5>: [<11>, <10>],
<2>: [<11>, <1>, <4>, <9>],
<0>: [<11>],
<6>: [<13>],
<1>: [<2>],
<4>: [<2>],
<9>: [<2>],
<10>: [<5>]}

>> graph_nl:

Node <8> is connected to nodes <12>, <11>.
Node <12> is connected to node <8>.
Node <11> is connected to nodes <8>, <7>, <13>, <5>, <2>, <0>.
Node <7> is connected to nodes <11>, <3>.
Node <3> is connected to node <7>.
Node <13> is connected to nodes <11>, <6>.
Node <5> is connected to nodes <11>, <10>.
Node <2> is connected to nodes <11>, <1>, <4>, <9>.
Node <0> is connected to node <11>.
Node <6> is connected to node <13>.
Node <1> is connected to node <2>.
Node <4> is connected to node <2>.
Node <9> is connected to node <2>.
Node <10> is connected to node <5>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>]

>> num_nodes:

14

>> num_edges:

13

>> directed:

False

>> question:

Start from node <4>, output a sequence of traversal in depth-first search (DFS) order.

>> answer:

[<4>, <2>, <9>, <1>, <11>, <0>, <5>, <10>, <13>, <6>, <7>, <3>, <8>, <12>]

>> steps:

Let's run depth-first search (DFS) step by step.
Visit node <4>. Neighors of node <4>: [<2>].
Visit node <2>. Neighors of node <2>: [<11>, <1>, <4>, <9>].
Visit node <9>. Neighors of node <9>: [<2>].
Visit node <1>. Neighors of node <1>: [<2>].
Visit node <11>. Neighors of node <11>: [<8>, <7>, <13>, <5>, <2>, <0>].
Visit node <0>. Neighors of node <0>: [<11>].
Visit node <5>. Neighors of node <5>: [<11>, <10>].
Visit node <10>. Neighors of node <10>: [<5>].
Visit node <13>. Neighors of node <13>: [<11>, <6>].
Visit node <6>. Neighors of node <6>: [<13>].
Visit node <7>. Neighors of node <7>: [<11>, <3>].
Visit node <3>. Neighors of node <3>: [<7>].
Visit node <8>. Neighors of node <8>: [<12>, <11>].
Visit node <12>. Neighors of node <12>: [<8>].
So the DFS traversal is 

>> choices:

('[[<4>, <2>, <9>, <1>, <7>, <3>, <8>, <12>, <11>, <0>, <5>, <10>, <13>, <6>], [<4>, <12>, <13>, <11>, <1>, <10>, <5>, <0>, <7>, <9>, <2>, <3>, <8>, <6>], [<4>, <2>, <9>, <1>, <11>, <0>, <5>, <12>, <10>, <7>, <6>, <13>, <3>, <8>], [<4>, <2>, <9>, <1>, <11>, <0>, <5>, <10>, <13>, <6>, <7>, <3>, <8>, <12>]]',)

>> label:

3

####### sample 10 #######

>> task:

DFS

>> graph:

[(<6>, <4>), (<6>, <3>), (<6>, <8>), (<6>, <5>), (<4>, <11>), (<4>, <8>), (<3>, <11>), (<3>, <13>), (<8>, <1>), (<8>, <13>), (<5>, <12>), (<11>, <8>), (<11>, <9>), (<11>, <0>), (<10>, <0>), (<0>, <6>), (<0>, <4>), (<0>, <11>), (<0>, <5>), (<12>, <11>), (<9>, <0>), (<9>, <6>), (<1>, <4>), (<1>, <11>), (<2>, <1>), (<7>, <6>), (<7>, <4>), (<7>, <11>), (<7>, <9>), (<7>, <0>)]

>> graph_adj:

{<6>: [<4>, <3>, <8>, <5>],
<4>: [<11>, <8>],
<3>: [<11>, <13>],
<8>: [<1>, <13>],
<5>: [<12>],
<11>: [<8>, <9>, <0>],
<10>: [<0>],
<0>: [<6>, <4>, <11>, <5>],
<12>: [<11>],
<13>: [],
<9>: [<0>, <6>],
<1>: [<4>, <11>],
<2>: [<1>],
<7>: [<6>, <4>, <11>, <9>, <0>]}

>> graph_nl:

Node <6> is connected to nodes <4>, <3>, <8>, <5>.
Node <4> is connected to nodes <11>, <8>.
Node <3> is connected to nodes <11>, <13>.
Node <8> is connected to nodes <1>, <13>.
Node <5> is connected to node <12>.
Node <11> is connected to nodes <8>, <9>, <0>.
Node <10> is connected to node <0>.
Node <0> is connected to nodes <6>, <4>, <11>, <5>.
Node <12> is connected to node <11>.
Node <9> is connected to nodes <0>, <6>.
Node <1> is connected to nodes <4>, <11>.
Node <2> is connected to node <1>.
Node <7> is connected to nodes <6>, <4>, <11>, <9>, <0>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>]

>> num_nodes:

14

>> num_edges:

30

>> directed:

True

>> question:

Start from node <9>, output a sequence of traversal in depth-first search (DFS) order.

>> answer:

[<9>, <6>, <5>, <12>, <11>, <0>, <4>, <8>, <13>, <1>, <3>]

>> steps:

Let's run depth-first search (DFS) step by step.
Visit node <9>. Neighors of node <9>: [<0>, <6>].
Visit node <6>. Neighors of node <6>: [<4>, <3>, <8>, <5>].
Visit node <5>. Neighors of node <5>: [<12>].
Visit node <12>. Neighors of node <12>: [<11>].
Visit node <11>. Neighors of node <11>: [<8>, <9>, <0>].
Visit node <0>. Neighors of node <0>: [<6>, <4>, <11>, <5>].
Visit node <4>. Neighors of node <4>: [<11>, <8>].
Visit node <8>. Neighors of node <8>: [<1>, <13>].
Visit node <13>. Neighors of node <13>: [].
Visit node <1>. Neighors of node <1>: [<4>, <11>].
Visit node <3>. Neighors of node <3>: [<11>, <13>].
So the DFS traversal is 

>> choices:

('[[<9>, <6>, <5>, <13>, <1>, <3>, <12>, <11>, <0>, <4>, <8>], [<9>, <6>, <5>, <12>, <11>, <0>, <4>, <8>, <13>, <1>, <3>], [<9>, <6>, <5>, <12>, <11>, <1>, <8>, <4>, <0>, <13>, <3>], [<9>, <0>, <8>, <4>, <12>, <6>, <13>, <3>, <5>, <1>, <11>]]',)

>> label:

1

