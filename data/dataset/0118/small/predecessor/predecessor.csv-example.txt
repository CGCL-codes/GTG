####### sample 1 #######

>> task:

predecessor

>> graph:

[(<11>, <0>), (<11>, <5>), (<0>, <8>), (<0>, <9>), (<5>, <11>), (<5>, <7>), (<5>, <0>), (<5>, <4>), (<3>, <10>), (<3>, <8>), (<3>, <1>), (<10>, <6>), (<8>, <9>), (<8>, <1>), (<1>, <0>), (<1>, <9>), (<6>, <7>), (<7>, <9>), (<7>, <11>), (<7>, <10>), (<2>, <11>), (<4>, <5>)]

>> graph_adj:

{<11>: [<0>, <5>],
<0>: [<8>, <9>],
<5>: [<11>, <7>, <0>, <4>],
<3>: [<10>, <8>, <1>],
<10>: [<6>],
<8>: [<9>, <1>],
<1>: [<0>, <9>],
<6>: [<7>],
<7>: [<9>, <11>, <10>],
<9>: [],
<2>: [<11>],
<4>: [<5>]}

>> graph_nl:

Node <11> is connected to nodes <0>, <5>.
Node <0> is connected to nodes <8>, <9>.
Node <5> is connected to nodes <11>, <7>, <0>, <4>.
Node <3> is connected to nodes <10>, <8>, <1>.
Node <10> is connected to node <6>.
Node <8> is connected to nodes <9>, <1>.
Node <1> is connected to nodes <0>, <9>.
Node <6> is connected to node <7>.
Node <7> is connected to nodes <9>, <11>, <10>.
Node <2> is connected to node <11>.
Node <4> is connected to node <5>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>]

>> num_nodes:

12

>> num_edges:

22

>> directed:

True

>> question:

Which are the predecessor nodes of node <1>? A predecessor of n is a node m such that there exists a directed edge from m to n.

>> answer:

[<3>, <8>]

>> steps:

Let's solve it step by step.
Nodes [<3>, <8>] connect to node <1>, so the predecessor nodes of node <1> are 

>> choices:

('[[<3>, <8>], [], [<7>, <4>, <10>, <1>, <8>], [<6>, <11>, <8>, <10>, <5>, <3>, <1>, <0>]]',)

>> label:

0

####### sample 2 #######

>> task:

predecessor

>> graph:

[(<5>, <0>), (<0>, <7>), (<0>, <2>), (<10>, <4>), (<10>, <9>), (<4>, <12>), (<9>, <7>), (<9>, <4>), (<2>, <4>), (<1>, <3>), (<1>, <4>), (<1>, <8>), (<3>, <0>), (<3>, <5>), (<3>, <1>), (<8>, <12>), (<8>, <9>), (<11>, <1>), (<6>, <10>), (<6>, <2>)]

>> graph_adj:

{<5>: [<0>],
<0>: [<7>, <2>],
<10>: [<4>, <9>],
<4>: [<12>],
<9>: [<7>, <4>],
<2>: [<4>],
<1>: [<3>, <4>, <8>],
<3>: [<0>, <5>, <1>],
<8>: [<12>, <9>],
<11>: [<1>],
<12>: [],
<7>: [],
<6>: [<10>, <2>]}

>> graph_nl:

Node <5> is connected to node <0>.
Node <0> is connected to nodes <7>, <2>.
Node <10> is connected to nodes <4>, <9>.
Node <4> is connected to node <12>.
Node <9> is connected to nodes <7>, <4>.
Node <2> is connected to node <4>.
Node <1> is connected to nodes <3>, <4>, <8>.
Node <3> is connected to nodes <0>, <5>, <1>.
Node <8> is connected to nodes <12>, <9>.
Node <11> is connected to node <1>.
Node <6> is connected to nodes <10>, <2>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>]

>> num_nodes:

13

>> num_edges:

20

>> directed:

True

>> question:

Which are the predecessor nodes of node <5>? A predecessor of n is a node m such that there exists a directed edge from m to n.

>> answer:

[<3>]

>> steps:

Let's solve it step by step.
Nodes [<3>] connect to node <5>, so the predecessor nodes of node <5> are 

>> choices:

('[[<3>], [<5>, <10>, <4>, <6>, <9>, <1>, <12>, <11>, <7>, <3>, <0>], [<7>, <12>, <2>, <3>, <9>, <11>, <10>, <8>, <5>, <0>, <6>, <1>], [<7>]]',)

>> label:

0

####### sample 3 #######

>> task:

predecessor

>> graph:

[(<3>, <2>), (<3>, <6>), (<3>, <4>), (<2>, <6>), (<2>, <0>), (<2>, <4>), (<6>, <4>), (<6>, <1>), (<6>, <3>), (<4>, <1>), (<4>, <3>), (<4>, <2>), (<4>, <6>), (<4>, <5>), (<4>, <7>), (<0>, <4>), (<0>, <1>), (<0>, <2>), (<0>, <6>), (<0>, <5>), (<1>, <3>), (<1>, <5>), (<1>, <0>), (<1>, <7>), (<5>, <1>), (<5>, <3>), (<5>, <2>), (<5>, <6>), (<7>, <4>), (<7>, <1>), (<7>, <6>)]

>> graph_adj:

{<3>: [<2>, <6>, <4>],
<2>: [<6>, <0>, <4>],
<6>: [<4>, <1>, <3>],
<4>: [<1>, <3>, <2>, <6>, <5>, <7>],
<0>: [<4>, <1>, <2>, <6>, <5>],
<1>: [<3>, <5>, <0>, <7>],
<5>: [<1>, <3>, <2>, <6>],
<7>: [<4>, <1>, <6>]}

>> graph_nl:

Node <3> is connected to nodes <2>, <6>, <4>.
Node <2> is connected to nodes <6>, <0>, <4>.
Node <6> is connected to nodes <4>, <1>, <3>.
Node <4> is connected to nodes <1>, <3>, <2>, <6>, <5>, <7>.
Node <0> is connected to nodes <4>, <1>, <2>, <6>, <5>.
Node <1> is connected to nodes <3>, <5>, <0>, <7>.
Node <5> is connected to nodes <1>, <3>, <2>, <6>.
Node <7> is connected to nodes <4>, <1>, <6>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>]

>> num_nodes:

8

>> num_edges:

31

>> directed:

True

>> question:

Which are the predecessor nodes of node <6>? A predecessor of n is a node m such that there exists a directed edge from m to n.

>> answer:

[<3>, <2>, <5>, <0>, <7>, <4>]

>> steps:

Let's solve it step by step.
Nodes [<3>, <2>, <5>, <0>, <7>, <4>] connect to node <6>, so the predecessor nodes of node <6> are 

>> choices:

('[[<1>, <5>, <6>, <0>, <2>, <3>, <7>], [], [<0>, <4>, <7>, <2>], [<3>, <2>, <5>, <0>, <7>, <4>]]',)

>> label:

3

####### sample 4 #######

>> task:

predecessor

>> graph:

[(<4>, <7>), (<4>, <3>), (<4>, <0>), (<7>, <1>), (<7>, <5>), (<3>, <2>), (<3>, <7>), (<0>, <4>), (<0>, <3>), (<1>, <7>), (<1>, <6>), (<1>, <4>), (<6>, <3>), (<6>, <2>), (<6>, <0>), (<5>, <6>), (<5>, <2>), (<5>, <1>), (<2>, <5>), (<2>, <7>), (<2>, <3>)]

>> graph_adj:

{<4>: [<7>, <3>, <0>],
<7>: [<1>, <5>],
<3>: [<2>, <7>],
<0>: [<4>, <3>],
<1>: [<7>, <6>, <4>],
<6>: [<3>, <2>, <0>],
<5>: [<6>, <2>, <1>],
<2>: [<5>, <7>, <3>]}

>> graph_nl:

Node <4> is connected to nodes <7>, <3>, <0>.
Node <7> is connected to nodes <1>, <5>.
Node <3> is connected to nodes <2>, <7>.
Node <0> is connected to nodes <4>, <3>.
Node <1> is connected to nodes <7>, <6>, <4>.
Node <6> is connected to nodes <3>, <2>, <0>.
Node <5> is connected to nodes <6>, <2>, <1>.
Node <2> is connected to nodes <5>, <7>, <3>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>]

>> num_nodes:

8

>> num_edges:

21

>> directed:

True

>> question:

Which are the predecessor nodes of node <7>? A predecessor of n is a node m such that there exists a directed edge from m to n.

>> answer:

[<4>, <1>, <3>, <2>]

>> steps:

Let's solve it step by step.
Nodes [<4>, <1>, <3>, <2>] connect to node <7>, so the predecessor nodes of node <7> are 

>> choices:

('[[<0>, <1>, <6>, <2>, <7>, <3>, <5>], [<4>, <6>, <0>, <3>], [<7>, <3>], [<4>, <1>, <3>, <2>]]',)

>> label:

3

####### sample 5 #######

>> task:

predecessor

>> graph:

[(<6>, <8>), (<6>, <12>), (<6>, <2>), (<8>, <4>), (<8>, <10>), (<12>, <5>), (<12>, <6>), (<12>, <3>), (<12>, <13>), (<2>, <11>), (<2>, <14>), (<3>, <8>), (<3>, <4>), (<3>, <5>), (<3>, <6>), (<4>, <5>), (<4>, <13>), (<5>, <3>), (<5>, <14>), (<5>, <7>), (<0>, <12>), (<0>, <7>), (<0>, <11>), (<0>, <10>), (<0>, <3>), (<7>, <10>), (<7>, <6>), (<7>, <8>), (<7>, <1>), (<7>, <14>), (<7>, <12>), (<11>, <6>), (<11>, <3>), (<11>, <0>), (<11>, <13>), (<11>, <2>), (<10>, <0>), (<10>, <1>), (<10>, <14>), (<10>, <9>), (<10>, <2>), (<13>, <9>), (<13>, <12>), (<13>, <3>), (<13>, <8>), (<9>, <3>), (<9>, <1>), (<1>, <11>), (<1>, <10>), (<1>, <6>), (<1>, <3>), (<1>, <13>), (<14>, <6>), (<14>, <3>), (<14>, <0>), (<14>, <1>)]

>> graph_adj:

{<6>: [<8>, <12>, <2>],
<8>: [<4>, <10>],
<12>: [<5>, <6>, <3>, <13>],
<2>: [<11>, <14>],
<3>: [<8>, <4>, <5>, <6>],
<4>: [<5>, <13>],
<5>: [<3>, <14>, <7>],
<0>: [<12>, <7>, <11>, <10>, <3>],
<7>: [<10>, <6>, <8>, <1>, <14>, <12>],
<11>: [<6>, <3>, <0>, <13>, <2>],
<10>: [<0>, <1>, <14>, <9>, <2>],
<13>: [<9>, <12>, <3>, <8>],
<9>: [<3>, <1>],
<1>: [<11>, <10>, <6>, <3>, <13>],
<14>: [<6>, <3>, <0>, <1>]}

>> graph_nl:

Node <6> is connected to nodes <8>, <12>, <2>.
Node <8> is connected to nodes <4>, <10>.
Node <12> is connected to nodes <5>, <6>, <3>, <13>.
Node <2> is connected to nodes <11>, <14>.
Node <3> is connected to nodes <8>, <4>, <5>, <6>.
Node <4> is connected to nodes <5>, <13>.
Node <5> is connected to nodes <3>, <14>, <7>.
Node <0> is connected to nodes <12>, <7>, <11>, <10>, <3>.
Node <7> is connected to nodes <10>, <6>, <8>, <1>, <14>, <12>.
Node <11> is connected to nodes <6>, <3>, <0>, <13>, <2>.
Node <10> is connected to nodes <0>, <1>, <14>, <9>, <2>.
Node <13> is connected to nodes <9>, <12>, <3>, <8>.
Node <9> is connected to nodes <3>, <1>.
Node <1> is connected to nodes <11>, <10>, <6>, <3>, <13>.
Node <14> is connected to nodes <6>, <3>, <0>, <1>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>, <14>]

>> num_nodes:

15

>> num_edges:

56

>> directed:

True

>> question:

Which are the predecessor nodes of node <6>? A predecessor of n is a node m such that there exists a directed edge from m to n.

>> answer:

[<3>, <1>, <14>, <12>, <7>, <11>]

>> steps:

Let's solve it step by step.
Nodes [<3>, <1>, <14>, <12>, <7>, <11>] connect to node <6>, so the predecessor nodes of node <6> are 

>> choices:

('[[<6>, <5>], [<3>, <1>, <14>, <12>, <7>, <11>], [<14>, <5>], [<10>, <11>, <3>, <0>, <14>, <7>, <13>, <6>, <8>, <9>]]',)

>> label:

1

####### sample 6 #######

>> task:

predecessor

>> graph:

[(<7>, <2>), (<7>, <0>), (<2>, <4>), (<2>, <8>), (<0>, <4>), (<5>, <2>), (<5>, <3>), (<5>, <0>), (<3>, <4>), (<8>, <1>), (<8>, <4>), (<1>, <0>), (<1>, <2>), (<4>, <0>), (<4>, <7>), (<4>, <5>), (<4>, <1>), (<6>, <0>), (<6>, <7>)]

>> graph_adj:

{<7>: [<2>, <0>],
<2>: [<4>, <8>],
<0>: [<4>],
<5>: [<2>, <3>, <0>],
<3>: [<4>],
<8>: [<1>, <4>],
<1>: [<0>, <2>],
<4>: [<0>, <7>, <5>, <1>],
<6>: [<0>, <7>]}

>> graph_nl:

Node <7> is connected to nodes <2>, <0>.
Node <2> is connected to nodes <4>, <8>.
Node <0> is connected to node <4>.
Node <5> is connected to nodes <2>, <3>, <0>.
Node <3> is connected to node <4>.
Node <8> is connected to nodes <1>, <4>.
Node <1> is connected to nodes <0>, <2>.
Node <4> is connected to nodes <0>, <7>, <5>, <1>.
Node <6> is connected to nodes <0>, <7>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>]

>> num_nodes:

9

>> num_edges:

19

>> directed:

True

>> question:

Which are the predecessor nodes of node <0>? A predecessor of n is a node m such that there exists a directed edge from m to n.

>> answer:

[<7>, <5>, <6>, <1>, <4>]

>> steps:

Let's solve it step by step.
Nodes [<7>, <5>, <6>, <1>, <4>] connect to node <0>, so the predecessor nodes of node <0> are 

>> choices:

('[[], [<0>, <5>, <1>, <2>, <7>, <8>, <3>, <6>], [<1>], [<7>, <5>, <6>, <1>, <4>]]',)

>> label:

3

####### sample 7 #######

>> task:

predecessor

>> graph:

[(<0>, <1>), (<0>, <2>), (<1>, <4>), (<1>, <0>), (<1>, <3>), (<2>, <0>), (<2>, <9>), (<2>, <8>), (<2>, <6>), (<2>, <7>), (<2>, <4>), (<9>, <3>), (<9>, <5>), (<9>, <7>), (<3>, <5>), (<3>, <4>), (<3>, <8>), (<5>, <1>), (<5>, <7>), (<5>, <4>), (<5>, <2>), (<7>, <4>), (<7>, <0>), (<7>, <9>), (<8>, <6>), (<8>, <5>), (<8>, <7>), (<8>, <9>), (<6>, <5>), (<6>, <1>), (<6>, <4>), (<6>, <9>), (<6>, <8>), (<4>, <2>), (<4>, <9>), (<4>, <8>), (<4>, <1>)]

>> graph_adj:

{<0>: [<1>, <2>],
<1>: [<4>, <0>, <3>],
<2>: [<0>, <9>, <8>, <6>, <7>, <4>],
<9>: [<3>, <5>, <7>],
<3>: [<5>, <4>, <8>],
<5>: [<1>, <7>, <4>, <2>],
<7>: [<4>, <0>, <9>],
<8>: [<6>, <5>, <7>, <9>],
<6>: [<5>, <1>, <4>, <9>, <8>],
<4>: [<2>, <9>, <8>, <1>]}

>> graph_nl:

Node <0> is connected to nodes <1>, <2>.
Node <1> is connected to nodes <4>, <0>, <3>.
Node <2> is connected to nodes <0>, <9>, <8>, <6>, <7>, <4>.
Node <9> is connected to nodes <3>, <5>, <7>.
Node <3> is connected to nodes <5>, <4>, <8>.
Node <5> is connected to nodes <1>, <7>, <4>, <2>.
Node <7> is connected to nodes <4>, <0>, <9>.
Node <8> is connected to nodes <6>, <5>, <7>, <9>.
Node <6> is connected to nodes <5>, <1>, <4>, <9>, <8>.
Node <4> is connected to nodes <2>, <9>, <8>, <1>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>]

>> num_nodes:

10

>> num_edges:

37

>> directed:

True

>> question:

Which are the predecessor nodes of node <3>? A predecessor of n is a node m such that there exists a directed edge from m to n.

>> answer:

[<9>, <1>]

>> steps:

Let's solve it step by step.
Nodes [<9>, <1>] connect to node <3>, so the predecessor nodes of node <3> are 

>> choices:

('[[<1>, <8>, <6>, <3>, <2>, <9>, <5>, <4>], [<3>, <5>, <1>, <9>, <6>, <0>, <8>], [<9>, <1>], [<5>, <7>, <8>]]',)

>> label:

2

####### sample 8 #######

>> task:

predecessor

>> graph:

[(<8>, <9>), (<8>, <1>), (<8>, <5>), (<8>, <6>), (<9>, <5>), (<9>, <0>), (<9>, <8>), (<1>, <4>), (<1>, <8>), (<5>, <4>), (<5>, <0>), (<6>, <9>), (<6>, <1>), (<6>, <5>), (<6>, <7>), (<0>, <4>), (<0>, <2>), (<4>, <0>), (<4>, <3>), (<4>, <6>), (<3>, <6>), (<3>, <8>), (<3>, <2>), (<2>, <0>), (<2>, <7>), (<2>, <4>), (<7>, <6>), (<7>, <9>), (<7>, <4>), (<7>, <0>)]

>> graph_adj:

{<8>: [<9>, <1>, <5>, <6>],
<9>: [<5>, <0>, <8>],
<1>: [<4>, <8>],
<5>: [<4>, <0>],
<6>: [<9>, <1>, <5>, <7>],
<0>: [<4>, <2>],
<4>: [<0>, <3>, <6>],
<3>: [<6>, <8>, <2>],
<2>: [<0>, <7>, <4>],
<7>: [<6>, <9>, <4>, <0>]}

>> graph_nl:

Node <8> is connected to nodes <9>, <1>, <5>, <6>.
Node <9> is connected to nodes <5>, <0>, <8>.
Node <1> is connected to nodes <4>, <8>.
Node <5> is connected to nodes <4>, <0>.
Node <6> is connected to nodes <9>, <1>, <5>, <7>.
Node <0> is connected to nodes <4>, <2>.
Node <4> is connected to nodes <0>, <3>, <6>.
Node <3> is connected to nodes <6>, <8>, <2>.
Node <2> is connected to nodes <0>, <7>, <4>.
Node <7> is connected to nodes <6>, <9>, <4>, <0>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>]

>> num_nodes:

10

>> num_edges:

30

>> directed:

True

>> question:

Which are the predecessor nodes of node <6>? A predecessor of n is a node m such that there exists a directed edge from m to n.

>> answer:

[<8>, <4>, <3>, <7>]

>> steps:

Let's solve it step by step.
Nodes [<8>, <4>, <3>, <7>] connect to node <6>, so the predecessor nodes of node <6> are 

>> choices:

('[[<6>], [<4>, <0>, <5>, <1>, <2>, <8>, <6>, <9>, <7>], [<8>, <4>], [<8>, <4>, <3>, <7>]]',)

>> label:

3

####### sample 9 #######

>> task:

predecessor

>> graph:

[(<3>, <11>), (<11>, <3>), (<11>, <10>), (<11>, <1>), (<11>, <0>), (<11>, <4>), (<10>, <0>), (<10>, <2>), (<10>, <11>), (<10>, <8>), (<10>, <3>), (<0>, <11>), (<0>, <5>), (<2>, <11>), (<2>, <1>), (<2>, <4>), (<8>, <10>), (<8>, <0>), (<8>, <2>), (<8>, <9>), (<8>, <11>), (<5>, <4>), (<5>, <7>), (<5>, <2>), (<5>, <6>), (<5>, <3>), (<4>, <11>), (<4>, <8>), (<4>, <1>), (<4>, <5>), (<7>, <2>), (<7>, <11>), (<7>, <1>), (<6>, <9>), (<6>, <8>), (<6>, <5>), (<6>, <4>), (<9>, <11>), (<9>, <10>), (<9>, <7>)]

>> graph_adj:

{<3>: [<11>],
<11>: [<3>, <10>, <1>, <0>, <4>],
<10>: [<0>, <2>, <11>, <8>, <3>],
<0>: [<11>, <5>],
<2>: [<11>, <1>, <4>],
<8>: [<10>, <0>, <2>, <9>, <11>],
<5>: [<4>, <7>, <2>, <6>, <3>],
<4>: [<11>, <8>, <1>, <5>],
<7>: [<2>, <11>, <1>],
<6>: [<9>, <8>, <5>, <4>],
<1>: [],
<9>: [<11>, <10>, <7>]}

>> graph_nl:

Node <3> is connected to node <11>.
Node <11> is connected to nodes <3>, <10>, <1>, <0>, <4>.
Node <10> is connected to nodes <0>, <2>, <11>, <8>, <3>.
Node <0> is connected to nodes <11>, <5>.
Node <2> is connected to nodes <11>, <1>, <4>.
Node <8> is connected to nodes <10>, <0>, <2>, <9>, <11>.
Node <5> is connected to nodes <4>, <7>, <2>, <6>, <3>.
Node <4> is connected to nodes <11>, <8>, <1>, <5>.
Node <7> is connected to nodes <2>, <11>, <1>.
Node <6> is connected to nodes <9>, <8>, <5>, <4>.
Node <9> is connected to nodes <11>, <10>, <7>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>]

>> num_nodes:

12

>> num_edges:

40

>> directed:

True

>> question:

Which are the predecessor nodes of node <8>? A predecessor of n is a node m such that there exists a directed edge from m to n.

>> answer:

[<10>, <4>, <6>]

>> steps:

Let's solve it step by step.
Nodes [<10>, <4>, <6>] connect to node <8>, so the predecessor nodes of node <8> are 

>> choices:

('[[<1>, <10>, <8>, <3>, <11>], [<10>, <4>, <6>], [], [<0>, <8>, <5>, <4>, <7>, <10>]]',)

>> label:

1

####### sample 10 #######

>> task:

predecessor

>> graph:

[(<8>, <4>), (<8>, <10>), (<4>, <7>), (<4>, <0>), (<7>, <9>), (<0>, <10>), (<0>, <5>), (<0>, <6>), (<11>, <3>), (<3>, <10>), (<9>, <3>), (<9>, <10>), (<2>, <10>), (<2>, <4>), (<12>, <2>), (<13>, <8>), (<13>, <3>), (<13>, <7>), (<13>, <2>), (<13>, <12>), (<5>, <11>), (<5>, <10>), (<5>, <13>), (<6>, <4>), (<6>, <3>), (<6>, <2>), (<6>, <9>), (<1>, <10>), (<1>, <13>)]

>> graph_adj:

{<8>: [<4>, <10>],
<4>: [<7>, <0>],
<10>: [],
<7>: [<9>],
<0>: [<10>, <5>, <6>],
<11>: [<3>],
<3>: [<10>],
<9>: [<3>, <10>],
<2>: [<10>, <4>],
<12>: [<2>],
<13>: [<8>, <3>, <7>, <2>, <12>],
<5>: [<11>, <10>, <13>],
<6>: [<4>, <3>, <2>, <9>],
<1>: [<10>, <13>]}

>> graph_nl:

Node <8> is connected to nodes <4>, <10>.
Node <4> is connected to nodes <7>, <0>.
Node <7> is connected to node <9>.
Node <0> is connected to nodes <10>, <5>, <6>.
Node <11> is connected to node <3>.
Node <3> is connected to node <10>.
Node <9> is connected to nodes <3>, <10>.
Node <2> is connected to nodes <10>, <4>.
Node <12> is connected to node <2>.
Node <13> is connected to nodes <8>, <3>, <7>, <2>, <12>.
Node <5> is connected to nodes <11>, <10>, <13>.
Node <6> is connected to nodes <4>, <3>, <2>, <9>.
Node <1> is connected to nodes <10>, <13>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>]

>> num_nodes:

14

>> num_edges:

29

>> directed:

True

>> question:

Which are the predecessor nodes of node <0>? A predecessor of n is a node m such that there exists a directed edge from m to n.

>> answer:

[<4>]

>> steps:

Let's solve it step by step.
Nodes [<4>] connect to node <0>, so the predecessor nodes of node <0> are 

>> choices:

('[[<4>], [<9>, <8>, <0>, <2>, <6>, <3>, <7>], [], [<1>, <7>, <10>, <11>]]',)

>> label:

0

