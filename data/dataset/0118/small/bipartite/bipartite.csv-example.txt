####### sample 1 #######

>> task:

bipartite

>> graph:

[(<0>, <5>), (<0>, <6>), (<0>, <8>), (<1>, <7>), (<1>, <8>), (<1>, <9>), (<2>, <7>), (<2>, <9>), (<3>, <4>), (<3>, <7>), (<3>, <9>)]

>> graph_adj:

{<0>: [<5>, <6>, <8>],
<1>: [<7>, <8>, <9>],
<2>: [<7>, <9>],
<3>: [<4>, <7>, <9>],
<4>: [<3>],
<5>: [<0>],
<6>: [<0>],
<7>: [<1>, <2>, <3>],
<8>: [<0>, <1>],
<9>: [<1>, <2>, <3>]}

>> graph_nl:

Node <0> is connected to nodes <5>, <6>, <8>.
Node <1> is connected to nodes <7>, <8>, <9>.
Node <2> is connected to nodes <7>, <9>.
Node <3> is connected to nodes <4>, <7>, <9>.
Node <4> is connected to node <3>.
Node <5> is connected to node <0>.
Node <6> is connected to node <0>.
Node <7> is connected to nodes <1>, <2>, <3>.
Node <8> is connected to nodes <0>, <1>.
Node <9> is connected to nodes <1>, <2>, <3>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>]

>> num_nodes:

10

>> num_edges:

11

>> directed:

False

>> question:

Find a maximum matching in the bipartite graph.
Nodes set 1 contains: <0> <1> <2> <3>.
Nodes set 2 contains: <4> <5> <6> <7> <8> <9>.

>> answer:

[(<0>, <5>), (<1>, <8>), (<2>, <7>), (<3>, <4>)]

>> steps:

To find a maximum matching in the bipartite graph, let's run the Hungarian algorithm step by step.
Firstly, initialize an empty matching {}.
Iterate over nodes in set 1:
Search from node <0>. Updated matching: {<5>: <0>}.
Search from node <1>. Updated matching: {<5>: <0>, <7>: <1>}.
Search from node <2>. Updated matching: {<5>: <0>, <7>: <2>, <8>: <1>}.
Search from node <3>. Updated matching: {<5>: <0>, <7>: <2>, <8>: <1>, <4>: <3>}.
So the maximum matching is 

>> n1:

4

>> n2:

6

####### sample 2 #######

>> task:

bipartite

>> graph:

[(<0>, <5>), (<0>, <6>), (<0>, <10>), (<0>, <11>), (<0>, <12>), (<1>, <5>), (<1>, <9>), (<1>, <11>), (<1>, <12>), (<1>, <13>), (<2>, <7>), (<2>, <9>), (<2>, <11>), (<2>, <12>), (<3>, <7>), (<3>, <8>), (<3>, <10>), (<4>, <5>), (<4>, <7>), (<4>, <9>)]

>> graph_adj:

{<0>: [<5>, <6>, <10>, <11>, <12>],
<1>: [<5>, <9>, <11>, <12>, <13>],
<2>: [<7>, <9>, <11>, <12>],
<3>: [<7>, <8>, <10>],
<4>: [<5>, <7>, <9>],
<5>: [<0>, <1>, <4>],
<6>: [<0>],
<7>: [<2>, <3>, <4>],
<8>: [<3>],
<9>: [<1>, <2>, <4>],
<10>: [<0>, <3>],
<11>: [<0>, <1>, <2>],
<12>: [<0>, <1>, <2>],
<13>: [<1>]}

>> graph_nl:

Node <0> is connected to nodes <5>, <6>, <10>, <11>, <12>.
Node <1> is connected to nodes <5>, <9>, <11>, <12>, <13>.
Node <2> is connected to nodes <7>, <9>, <11>, <12>.
Node <3> is connected to nodes <7>, <8>, <10>.
Node <4> is connected to nodes <5>, <7>, <9>.
Node <5> is connected to nodes <0>, <1>, <4>.
Node <6> is connected to node <0>.
Node <7> is connected to nodes <2>, <3>, <4>.
Node <8> is connected to node <3>.
Node <9> is connected to nodes <1>, <2>, <4>.
Node <10> is connected to nodes <0>, <3>.
Node <11> is connected to nodes <0>, <1>, <2>.
Node <12> is connected to nodes <0>, <1>, <2>.
Node <13> is connected to node <1>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>]

>> num_nodes:

14

>> num_edges:

20

>> directed:

False

>> question:

Find a maximum matching in the bipartite graph.
Nodes set 1 contains: <0> <1> <2> <3> <4>.
Nodes set 2 contains: <5> <6> <7> <8> <9> <10> <11> <12> <13>.

>> answer:

[(<0>, <6>), (<1>, <9>), (<2>, <7>), (<3>, <8>), (<4>, <5>)]

>> steps:

To find a maximum matching in the bipartite graph, let's run the Hungarian algorithm step by step.
Firstly, initialize an empty matching {}.
Iterate over nodes in set 1:
Search from node <0>. Updated matching: {<5>: <0>}.
Search from node <1>. Updated matching: {<5>: <1>, <6>: <0>}.
Search from node <2>. Updated matching: {<5>: <1>, <6>: <0>, <7>: <2>}.
Search from node <3>. Updated matching: {<5>: <1>, <6>: <0>, <7>: <3>, <9>: <2>}.
Search from node <4>. Updated matching: {<5>: <4>, <6>: <0>, <7>: <2>, <9>: <1>, <8>: <3>}.
So the maximum matching is 

>> n1:

5

>> n2:

9

####### sample 3 #######

>> task:

bipartite

>> graph:

[(<0>, <5>), (<0>, <6>), (<0>, <7>), (<0>, <8>), (<0>, <9>), (<1>, <4>), (<1>, <5>), (<1>, <6>), (<1>, <8>), (<2>, <6>), (<2>, <7>), (<3>, <6>)]

>> graph_adj:

{<0>: [<5>, <6>, <7>, <8>, <9>],
<1>: [<4>, <5>, <6>, <8>],
<2>: [<6>, <7>],
<3>: [<6>],
<4>: [<1>],
<5>: [<0>, <1>],
<6>: [<0>, <1>, <2>, <3>],
<7>: [<0>, <2>],
<8>: [<0>, <1>],
<9>: [<0>]}

>> graph_nl:

Node <0> is connected to nodes <5>, <6>, <7>, <8>, <9>.
Node <1> is connected to nodes <4>, <5>, <6>, <8>.
Node <2> is connected to nodes <6>, <7>.
Node <3> is connected to node <6>.
Node <4> is connected to node <1>.
Node <5> is connected to nodes <0>, <1>.
Node <6> is connected to nodes <0>, <1>, <2>, <3>.
Node <7> is connected to nodes <0>, <2>.
Node <8> is connected to nodes <0>, <1>.
Node <9> is connected to node <0>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>]

>> num_nodes:

10

>> num_edges:

12

>> directed:

False

>> question:

Find a maximum matching in the bipartite graph.
Nodes set 1 contains: <0> <1> <2> <3>.
Nodes set 2 contains: <4> <5> <6> <7> <8> <9>.

>> answer:

[(<0>, <5>), (<1>, <4>), (<2>, <7>), (<3>, <6>)]

>> steps:

To find a maximum matching in the bipartite graph, let's run the Hungarian algorithm step by step.
Firstly, initialize an empty matching {}.
Iterate over nodes in set 1:
Search from node <0>. Updated matching: {<5>: <0>}.
Search from node <1>. Updated matching: {<5>: <0>, <4>: <1>}.
Search from node <2>. Updated matching: {<5>: <0>, <4>: <1>, <6>: <2>}.
Search from node <3>. Updated matching: {<5>: <0>, <4>: <1>, <6>: <3>, <7>: <2>}.
So the maximum matching is 

>> n1:

4

>> n2:

6

####### sample 4 #######

>> task:

bipartite

>> graph:

[(<0>, <5>), (<0>, <9>), (<0>, <11>), (<0>, <12>), (<0>, <13>), (<1>, <5>), (<1>, <7>), (<1>, <8>), (<2>, <6>), (<2>, <12>), (<3>, <7>), (<3>, <10>), (<3>, <11>), (<3>, <13>), (<4>, <5>), (<4>, <6>)]

>> graph_adj:

{<0>: [<5>, <9>, <11>, <12>, <13>],
<1>: [<5>, <7>, <8>],
<2>: [<6>, <12>],
<3>: [<7>, <10>, <11>, <13>],
<4>: [<5>, <6>],
<5>: [<0>, <1>, <4>],
<6>: [<2>, <4>],
<7>: [<1>, <3>],
<8>: [<1>],
<9>: [<0>],
<10>: [<3>],
<11>: [<0>, <3>],
<12>: [<0>, <2>],
<13>: [<0>, <3>]}

>> graph_nl:

Node <0> is connected to nodes <5>, <9>, <11>, <12>, <13>.
Node <1> is connected to nodes <5>, <7>, <8>.
Node <2> is connected to nodes <6>, <12>.
Node <3> is connected to nodes <7>, <10>, <11>, <13>.
Node <4> is connected to nodes <5>, <6>.
Node <5> is connected to nodes <0>, <1>, <4>.
Node <6> is connected to nodes <2>, <4>.
Node <7> is connected to nodes <1>, <3>.
Node <8> is connected to node <1>.
Node <9> is connected to node <0>.
Node <10> is connected to node <3>.
Node <11> is connected to nodes <0>, <3>.
Node <12> is connected to nodes <0>, <2>.
Node <13> is connected to nodes <0>, <3>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>]

>> num_nodes:

14

>> num_edges:

16

>> directed:

False

>> question:

Find a maximum matching in the bipartite graph.
Nodes set 1 contains: <0> <1> <2> <3> <4>.
Nodes set 2 contains: <5> <6> <7> <8> <9> <10> <11> <12> <13>.

>> answer:

[(<0>, <9>), (<1>, <7>), (<2>, <6>), (<3>, <10>), (<4>, <5>)]

>> steps:

To find a maximum matching in the bipartite graph, let's run the Hungarian algorithm step by step.
Firstly, initialize an empty matching {}.
Iterate over nodes in set 1:
Search from node <0>. Updated matching: {<5>: <0>}.
Search from node <1>. Updated matching: {<5>: <1>, <9>: <0>}.
Search from node <2>. Updated matching: {<5>: <1>, <9>: <0>, <6>: <2>}.
Search from node <3>. Updated matching: {<5>: <1>, <9>: <0>, <6>: <2>, <7>: <3>}.
Search from node <4>. Updated matching: {<5>: <4>, <9>: <0>, <6>: <2>, <7>: <1>, <10>: <3>}.
So the maximum matching is 

>> n1:

5

>> n2:

9

####### sample 5 #######

>> task:

bipartite

>> graph:

[(<0>, <10>), (<1>, <9>), (<1>, <10>), (<1>, <11>), (<1>, <12>), (<2>, <9>), (<2>, <13>), (<3>, <7>), (<3>, <8>), (<3>, <9>), (<3>, <10>), (<3>, <11>), (<3>, <12>), (<3>, <13>), (<4>, <7>), (<4>, <11>), (<5>, <9>), (<5>, <12>), (<5>, <13>), (<6>, <7>), (<6>, <14>)]

>> graph_adj:

{<0>: [<10>],
<1>: [<9>, <10>, <11>, <12>],
<2>: [<9>, <13>],
<3>: [<7>, <8>, <9>, <10>, <11>, <12>, <13>],
<4>: [<7>, <11>],
<5>: [<9>, <12>, <13>],
<6>: [<7>, <14>],
<7>: [<3>, <4>, <6>],
<8>: [<3>],
<9>: [<1>, <2>, <3>, <5>],
<10>: [<0>, <1>, <3>],
<11>: [<1>, <3>, <4>],
<12>: [<1>, <3>, <5>],
<13>: [<2>, <3>, <5>],
<14>: [<6>]}

>> graph_nl:

Node <0> is connected to node <10>.
Node <1> is connected to nodes <9>, <10>, <11>, <12>.
Node <2> is connected to nodes <9>, <13>.
Node <3> is connected to nodes <7>, <8>, <9>, <10>, <11>, <12>, <13>.
Node <4> is connected to nodes <7>, <11>.
Node <5> is connected to nodes <9>, <12>, <13>.
Node <6> is connected to nodes <7>, <14>.
Node <7> is connected to nodes <3>, <4>, <6>.
Node <8> is connected to node <3>.
Node <9> is connected to nodes <1>, <2>, <3>, <5>.
Node <10> is connected to nodes <0>, <1>, <3>.
Node <11> is connected to nodes <1>, <3>, <4>.
Node <12> is connected to nodes <1>, <3>, <5>.
Node <13> is connected to nodes <2>, <3>, <5>.
Node <14> is connected to node <6>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>, <14>]

>> num_nodes:

15

>> num_edges:

21

>> directed:

False

>> question:

Find a maximum matching in the bipartite graph.
Nodes set 1 contains: <0> <1> <2> <3> <4> <5> <6>.
Nodes set 2 contains: <7> <8> <9> <10> <11> <12> <13> <14>.

>> answer:

[(<0>, <10>), (<1>, <9>), (<2>, <13>), (<3>, <8>), (<4>, <11>), (<5>, <12>), (<6>, <7>)]

>> steps:

To find a maximum matching in the bipartite graph, let's run the Hungarian algorithm step by step.
Firstly, initialize an empty matching {}.
Iterate over nodes in set 1:
Search from node <0>. Updated matching: {<10>: <0>}.
Search from node <1>. Updated matching: {<10>: <0>, <9>: <1>}.
Search from node <2>. Updated matching: {<10>: <0>, <9>: <2>, <11>: <1>}.
Search from node <3>. Updated matching: {<10>: <0>, <9>: <2>, <11>: <1>, <7>: <3>}.
Search from node <4>. Updated matching: {<10>: <0>, <9>: <2>, <11>: <1>, <7>: <4>, <8>: <3>}.
Search from node <5>. Updated matching: {<10>: <0>, <9>: <5>, <11>: <1>, <7>: <4>, <8>: <3>, <13>: <2>}.
Search from node <6>. Updated matching: {<10>: <0>, <9>: <1>, <11>: <4>, <7>: <6>, <8>: <3>, <13>: <2>, <12>: <5>}.
So the maximum matching is 

>> n1:

7

>> n2:

8

####### sample 6 #######

>> task:

bipartite

>> graph:

[(<0>, <6>), (<0>, <7>), (<1>, <7>), (<1>, <8>), (<2>, <7>), (<2>, <8>), (<2>, <9>), (<3>, <4>), (<3>, <5>), (<3>, <9>)]

>> graph_adj:

{<0>: [<6>, <7>],
<1>: [<7>, <8>],
<2>: [<7>, <8>, <9>],
<3>: [<4>, <5>, <9>],
<4>: [<3>],
<5>: [<3>],
<6>: [<0>],
<7>: [<0>, <1>, <2>],
<8>: [<1>, <2>],
<9>: [<2>, <3>]}

>> graph_nl:

Node <0> is connected to nodes <6>, <7>.
Node <1> is connected to nodes <7>, <8>.
Node <2> is connected to nodes <7>, <8>, <9>.
Node <3> is connected to nodes <4>, <5>, <9>.
Node <4> is connected to node <3>.
Node <5> is connected to node <3>.
Node <6> is connected to node <0>.
Node <7> is connected to nodes <0>, <1>, <2>.
Node <8> is connected to nodes <1>, <2>.
Node <9> is connected to nodes <2>, <3>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>]

>> num_nodes:

10

>> num_edges:

10

>> directed:

False

>> question:

Find a maximum matching in the bipartite graph.
Nodes set 1 contains: <0> <1> <2> <3>.
Nodes set 2 contains: <4> <5> <6> <7> <8> <9>.

>> answer:

[(<0>, <6>), (<1>, <8>), (<2>, <7>), (<3>, <4>)]

>> steps:

To find a maximum matching in the bipartite graph, let's run the Hungarian algorithm step by step.
Firstly, initialize an empty matching {}.
Iterate over nodes in set 1:
Search from node <0>. Updated matching: {<6>: <0>}.
Search from node <1>. Updated matching: {<6>: <0>, <7>: <1>}.
Search from node <2>. Updated matching: {<6>: <0>, <7>: <2>, <8>: <1>}.
Search from node <3>. Updated matching: {<6>: <0>, <7>: <2>, <8>: <1>, <4>: <3>}.
So the maximum matching is 

>> n1:

4

>> n2:

6

####### sample 7 #######

>> task:

bipartite

>> graph:

[(<0>, <8>), (<0>, <12>), (<0>, <13>), (<1>, <6>), (<1>, <9>), (<1>, <13>), (<2>, <8>), (<2>, <9>), (<2>, <10>), (<2>, <11>), (<2>, <12>), (<2>, <13>), (<3>, <7>), (<3>, <11>), (<4>, <11>), (<4>, <12>), (<5>, <7>), (<5>, <8>), (<5>, <10>), (<5>, <11>), (<5>, <12>)]

>> graph_adj:

{<0>: [<8>, <12>, <13>],
<1>: [<6>, <9>, <13>],
<2>: [<8>, <9>, <10>, <11>, <12>, <13>],
<3>: [<7>, <11>],
<4>: [<11>, <12>],
<5>: [<7>, <8>, <10>, <11>, <12>],
<6>: [<1>],
<7>: [<3>, <5>],
<8>: [<0>, <2>, <5>],
<9>: [<1>, <2>],
<10>: [<2>, <5>],
<11>: [<2>, <3>, <4>, <5>],
<12>: [<0>, <2>, <4>, <5>],
<13>: [<0>, <1>, <2>]}

>> graph_nl:

Node <0> is connected to nodes <8>, <12>, <13>.
Node <1> is connected to nodes <6>, <9>, <13>.
Node <2> is connected to nodes <8>, <9>, <10>, <11>, <12>, <13>.
Node <3> is connected to nodes <7>, <11>.
Node <4> is connected to nodes <11>, <12>.
Node <5> is connected to nodes <7>, <8>, <10>, <11>, <12>.
Node <6> is connected to node <1>.
Node <7> is connected to nodes <3>, <5>.
Node <8> is connected to nodes <0>, <2>, <5>.
Node <9> is connected to nodes <1>, <2>.
Node <10> is connected to nodes <2>, <5>.
Node <11> is connected to nodes <2>, <3>, <4>, <5>.
Node <12> is connected to nodes <0>, <2>, <4>, <5>.
Node <13> is connected to nodes <0>, <1>, <2>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>]

>> num_nodes:

14

>> num_edges:

21

>> directed:

False

>> question:

Find a maximum matching in the bipartite graph.
Nodes set 1 contains: <0> <1> <2> <3> <4> <5>.
Nodes set 2 contains: <6> <7> <8> <9> <10> <11> <12> <13>.

>> answer:

[(<0>, <8>), (<1>, <6>), (<2>, <9>), (<3>, <11>), (<4>, <12>), (<5>, <7>)]

>> steps:

To find a maximum matching in the bipartite graph, let's run the Hungarian algorithm step by step.
Firstly, initialize an empty matching {}.
Iterate over nodes in set 1:
Search from node <0>. Updated matching: {<8>: <0>}.
Search from node <1>. Updated matching: {<8>: <0>, <6>: <1>}.
Search from node <2>. Updated matching: {<8>: <2>, <6>: <1>, <12>: <0>}.
Search from node <3>. Updated matching: {<8>: <2>, <6>: <1>, <12>: <0>, <7>: <3>}.
Search from node <4>. Updated matching: {<8>: <2>, <6>: <1>, <12>: <0>, <7>: <3>, <11>: <4>}.
Search from node <5>. Updated matching: {<8>: <0>, <6>: <1>, <12>: <4>, <7>: <5>, <11>: <3>, <9>: <2>}.
So the maximum matching is 

>> n1:

6

>> n2:

8

####### sample 8 #######

>> task:

bipartite

>> graph:

[(<0>, <5>), (<0>, <8>), (<0>, <9>), (<1>, <6>), (<1>, <7>), (<1>, <8>), (<1>, <9>), (<2>, <4>), (<3>, <4>), (<3>, <7>)]

>> graph_adj:

{<0>: [<5>, <8>, <9>],
<1>: [<6>, <7>, <8>, <9>],
<2>: [<4>],
<3>: [<4>, <7>],
<4>: [<2>, <3>],
<5>: [<0>],
<6>: [<1>],
<7>: [<1>, <3>],
<8>: [<0>, <1>],
<9>: [<0>, <1>]}

>> graph_nl:

Node <0> is connected to nodes <5>, <8>, <9>.
Node <1> is connected to nodes <6>, <7>, <8>, <9>.
Node <2> is connected to node <4>.
Node <3> is connected to nodes <4>, <7>.
Node <4> is connected to nodes <2>, <3>.
Node <5> is connected to node <0>.
Node <6> is connected to node <1>.
Node <7> is connected to nodes <1>, <3>.
Node <8> is connected to nodes <0>, <1>.
Node <9> is connected to nodes <0>, <1>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>]

>> num_nodes:

10

>> num_edges:

10

>> directed:

False

>> question:

Find a maximum matching in the bipartite graph.
Nodes set 1 contains: <0> <1> <2> <3>.
Nodes set 2 contains: <4> <5> <6> <7> <8> <9>.

>> answer:

[(<0>, <5>), (<1>, <6>), (<2>, <4>), (<3>, <7>)]

>> steps:

To find a maximum matching in the bipartite graph, let's run the Hungarian algorithm step by step.
Firstly, initialize an empty matching {}.
Iterate over nodes in set 1:
Search from node <0>. Updated matching: {<5>: <0>}.
Search from node <1>. Updated matching: {<5>: <0>, <6>: <1>}.
Search from node <2>. Updated matching: {<5>: <0>, <6>: <1>, <4>: <2>}.
Search from node <3>. Updated matching: {<5>: <0>, <6>: <1>, <4>: <2>, <7>: <3>}.
So the maximum matching is 

>> n1:

4

>> n2:

6

####### sample 9 #######

>> task:

bipartite

>> graph:

[(<0>, <4>), (<0>, <6>), (<0>, <7>), (<1>, <6>), (<1>, <7>), (<2>, <4>), (<2>, <9>), (<3>, <4>), (<3>, <5>), (<3>, <6>), (<3>, <7>), (<3>, <8>)]

>> graph_adj:

{<0>: [<4>, <6>, <7>],
<1>: [<6>, <7>],
<2>: [<4>, <9>],
<3>: [<4>, <5>, <6>, <7>, <8>],
<4>: [<0>, <2>, <3>],
<5>: [<3>],
<6>: [<0>, <1>, <3>],
<7>: [<0>, <1>, <3>],
<8>: [<3>],
<9>: [<2>]}

>> graph_nl:

Node <0> is connected to nodes <4>, <6>, <7>.
Node <1> is connected to nodes <6>, <7>.
Node <2> is connected to nodes <4>, <9>.
Node <3> is connected to nodes <4>, <5>, <6>, <7>, <8>.
Node <4> is connected to nodes <0>, <2>, <3>.
Node <5> is connected to node <3>.
Node <6> is connected to nodes <0>, <1>, <3>.
Node <7> is connected to nodes <0>, <1>, <3>.
Node <8> is connected to node <3>.
Node <9> is connected to node <2>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>]

>> num_nodes:

10

>> num_edges:

12

>> directed:

False

>> question:

Find a maximum matching in the bipartite graph.
Nodes set 1 contains: <0> <1> <2> <3>.
Nodes set 2 contains: <4> <5> <6> <7> <8> <9>.

>> answer:

[(<0>, <6>), (<1>, <7>), (<2>, <9>), (<3>, <4>)]

>> steps:

To find a maximum matching in the bipartite graph, let's run the Hungarian algorithm step by step.
Firstly, initialize an empty matching {}.
Iterate over nodes in set 1:
Search from node <0>. Updated matching: {<4>: <0>}.
Search from node <1>. Updated matching: {<4>: <0>, <6>: <1>}.
Search from node <2>. Updated matching: {<4>: <2>, <6>: <0>, <7>: <1>}.
Search from node <3>. Updated matching: {<4>: <3>, <6>: <0>, <7>: <1>, <9>: <2>}.
So the maximum matching is 

>> n1:

4

>> n2:

6

####### sample 10 #######

>> task:

bipartite

>> graph:

[(<0>, <7>), (<0>, <8>), (<0>, <10>), (<0>, <13>), (<1>, <11>), (<2>, <9>), (<2>, <11>), (<2>, <12>), (<3>, <12>), (<4>, <6>), (<4>, <8>), (<4>, <11>), (<5>, <7>), (<5>, <11>)]

>> graph_adj:

{<0>: [<7>, <8>, <10>, <13>],
<1>: [<11>],
<2>: [<9>, <11>, <12>],
<3>: [<12>],
<4>: [<6>, <8>, <11>],
<5>: [<7>, <11>],
<6>: [<4>],
<7>: [<0>, <5>],
<8>: [<0>, <4>],
<9>: [<2>],
<10>: [<0>],
<11>: [<1>, <2>, <4>, <5>],
<12>: [<2>, <3>],
<13>: [<0>]}

>> graph_nl:

Node <0> is connected to nodes <7>, <8>, <10>, <13>.
Node <1> is connected to node <11>.
Node <2> is connected to nodes <9>, <11>, <12>.
Node <3> is connected to node <12>.
Node <4> is connected to nodes <6>, <8>, <11>.
Node <5> is connected to nodes <7>, <11>.
Node <6> is connected to node <4>.
Node <7> is connected to nodes <0>, <5>.
Node <8> is connected to nodes <0>, <4>.
Node <9> is connected to node <2>.
Node <10> is connected to node <0>.
Node <11> is connected to nodes <1>, <2>, <4>, <5>.
Node <12> is connected to nodes <2>, <3>.
Node <13> is connected to node <0>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>]

>> num_nodes:

14

>> num_edges:

14

>> directed:

False

>> question:

Find a maximum matching in the bipartite graph.
Nodes set 1 contains: <0> <1> <2> <3> <4> <5>.
Nodes set 2 contains: <6> <7> <8> <9> <10> <11> <12> <13>.

>> answer:

[(<0>, <8>), (<1>, <11>), (<2>, <9>), (<3>, <12>), (<4>, <6>), (<5>, <7>)]

>> steps:

To find a maximum matching in the bipartite graph, let's run the Hungarian algorithm step by step.
Firstly, initialize an empty matching {}.
Iterate over nodes in set 1:
Search from node <0>. Updated matching: {<7>: <0>}.
Search from node <1>. Updated matching: {<7>: <0>, <11>: <1>}.
Search from node <2>. Updated matching: {<7>: <0>, <11>: <1>, <9>: <2>}.
Search from node <3>. Updated matching: {<7>: <0>, <11>: <1>, <9>: <2>, <12>: <3>}.
Search from node <4>. Updated matching: {<7>: <0>, <11>: <1>, <9>: <2>, <12>: <3>, <6>: <4>}.
Search from node <5>. Updated matching: {<7>: <5>, <11>: <1>, <9>: <2>, <12>: <3>, <6>: <4>, <8>: <0>}.
So the maximum matching is 

>> n1:

6

>> n2:

8

