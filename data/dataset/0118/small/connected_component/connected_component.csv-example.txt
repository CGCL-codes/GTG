####### sample 1 #######

>> task:

connected_component

>> graph:

[(<9>, <7>), (<9>, <11>), (<7>, <6>), (<7>, <12>), (<7>, <11>), (<7>, <14>), (<7>, <0>), (<7>, <3>), (<6>, <11>), (<6>, <14>), (<6>, <3>), (<6>, <9>), (<12>, <11>), (<12>, <0>), (<3>, <0>), (<8>, <11>), (<8>, <2>), (<2>, <8>), (<2>, <11>), (<2>, <0>), (<2>, <3>), (<1>, <9>), (<10>, <13>), (<10>, <9>), (<13>, <14>), (<4>, <12>), (<4>, <10>), (<5>, <1>), (<5>, <11>), (<5>, <14>), (<5>, <3>)]

>> graph_adj:

{<9>: [<7>, <11>],
<7>: [<6>, <12>, <11>, <14>, <0>, <3>],
<11>: [],
<6>: [<11>, <14>, <3>, <9>],
<12>: [<11>, <0>],
<14>: [],
<0>: [],
<3>: [<0>],
<8>: [<11>, <2>],
<2>: [<8>, <11>, <0>, <3>],
<1>: [<9>],
<10>: [<13>, <9>],
<13>: [<14>],
<4>: [<12>, <10>],
<5>: [<1>, <11>, <14>, <3>]}

>> graph_nl:

Node <9> is connected to nodes <7>, <11>.
Node <7> is connected to nodes <6>, <12>, <11>, <14>, <0>, <3>.
Node <6> is connected to nodes <11>, <14>, <3>, <9>.
Node <12> is connected to nodes <11>, <0>.
Node <3> is connected to node <0>.
Node <8> is connected to nodes <11>, <2>.
Node <2> is connected to nodes <8>, <11>, <0>, <3>.
Node <1> is connected to node <9>.
Node <10> is connected to nodes <13>, <9>.
Node <13> is connected to node <14>.
Node <4> is connected to nodes <12>, <10>.
Node <5> is connected to nodes <1>, <11>, <14>, <3>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>, <14>]

>> num_nodes:

15

>> num_edges:

31

>> directed:

True

>> question:

Find the strongly connected component containing node <3>. 

>> answer:

[<3>]

>> steps:

Let's find the strongly connected component step by step, and we can use the Tarjan algorithm.
Search from node <3>.
Visit neighbor node <0>.
Search from node <0>.
Node <0> is a root node, find a new strongly connected component: [<0>].
Node <3> is a root node, find a new strongly connected component: [<3>].
So the strongly connected component containing node <3> is 

>> cc_node_ratio:

0.06666666666666667

####### sample 2 #######

>> task:

connected_component

>> graph:

[(<6>, <2>), (<6>, <4>), (<4>, <1>), (<4>, <6>), (<4>, <8>), (<8>, <0>), (<8>, <1>), (<0>, <1>), (<0>, <7>), (<0>, <2>), (<1>, <0>), (<7>, <5>), (<5>, <8>), (<5>, <4>), (<3>, <9>), (<3>, <0>), (<9>, <2>), (<9>, <0>)]

>> graph_adj:

{<6>: [<2>, <4>],
<2>: [],
<4>: [<1>, <6>, <8>],
<8>: [<0>, <1>],
<0>: [<1>, <7>, <2>],
<1>: [<0>],
<7>: [<5>],
<5>: [<8>, <4>],
<3>: [<9>, <0>],
<9>: [<2>, <0>]}

>> graph_nl:

Node <6> is connected to nodes <2>, <4>.
Node <4> is connected to nodes <1>, <6>, <8>.
Node <8> is connected to nodes <0>, <1>.
Node <0> is connected to nodes <1>, <7>, <2>.
Node <1> is connected to node <0>.
Node <7> is connected to node <5>.
Node <5> is connected to nodes <8>, <4>.
Node <3> is connected to nodes <9>, <0>.
Node <9> is connected to nodes <2>, <0>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>]

>> num_nodes:

10

>> num_edges:

18

>> directed:

True

>> question:

Find the strongly connected component containing node <5>. 

>> answer:

[<6>, <4>, <7>, <1>, <0>, <8>, <5>]

>> steps:

Let's find the strongly connected component step by step, and we can use the Tarjan algorithm.
Search from node <5>.
Visit neighbor node <8>.
Search from node <8>.
Visit neighbor node <0>.
Search from node <0>.
Visit neighbor node <1>.
Search from node <1>.
Visit neighbor node <2>.
Search from node <2>.
Node <2> is a root node, find a new strongly connected component: [<2>].
Visit neighbor node <7>.
Search from node <7>.
Visit neighbor node <4>.
Search from node <4>.
Visit neighbor node <6>.
Search from node <6>.
Node <5> is a root node, find a new strongly connected component: [<6>, <4>, <7>, <1>, <0>, <8>, <5>].
So the strongly connected component containing node <5> is 

>> cc_node_ratio:

0.7

####### sample 3 #######

>> task:

connected_component

>> graph:

[(<8>, <6>), (<8>, <5>), (<8>, <4>), (<6>, <5>), (<5>, <7>), (<5>, <6>), (<4>, <3>), (<4>, <6>), (<7>, <6>), (<7>, <0>), (<1>, <2>), (<1>, <5>), (<2>, <5>), (<2>, <1>), (<2>, <0>), (<2>, <3>), (<0>, <4>), (<0>, <1>), (<3>, <6>), (<3>, <0>)]

>> graph_adj:

{<8>: [<6>, <5>, <4>],
<6>: [<5>],
<5>: [<7>, <6>],
<4>: [<3>, <6>],
<7>: [<6>, <0>],
<1>: [<2>, <5>],
<2>: [<5>, <1>, <0>, <3>],
<0>: [<4>, <1>],
<3>: [<6>, <0>]}

>> graph_nl:

Node <8> is connected to nodes <6>, <5>, <4>.
Node <6> is connected to node <5>.
Node <5> is connected to nodes <7>, <6>.
Node <4> is connected to nodes <3>, <6>.
Node <7> is connected to nodes <6>, <0>.
Node <1> is connected to nodes <2>, <5>.
Node <2> is connected to nodes <5>, <1>, <0>, <3>.
Node <0> is connected to nodes <4>, <1>.
Node <3> is connected to nodes <6>, <0>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>]

>> num_nodes:

9

>> num_edges:

20

>> directed:

True

>> question:

Find the strongly connected component containing node <1>. 

>> answer:

[<7>, <5>, <6>, <3>, <4>, <0>, <2>, <1>]

>> steps:

Let's find the strongly connected component step by step, and we can use the Tarjan algorithm.
Search from node <1>.
Visit neighbor node <2>.
Search from node <2>.
Visit neighbor node <0>.
Search from node <0>.
Visit neighbor node <4>.
Search from node <4>.
Visit neighbor node <3>.
Search from node <3>.
Visit neighbor node <6>.
Search from node <6>.
Visit neighbor node <5>.
Search from node <5>.
Visit neighbor node <7>.
Search from node <7>.
Node <1> is a root node, find a new strongly connected component: [<7>, <5>, <6>, <3>, <4>, <0>, <2>, <1>].
So the strongly connected component containing node <1> is 

>> cc_node_ratio:

0.8888888888888888

####### sample 4 #######

>> task:

connected_component

>> graph:

[(<0>, <4>), (<5>, <7>), (<5>, <3>), (<5>, <0>), (<7>, <6>), (<7>, <1>), (<7>, <3>), (<3>, <5>), (<3>, <7>), (<6>, <1>), (<6>, <2>), (<6>, <4>), (<6>, <7>), (<1>, <2>), (<1>, <5>), (<1>, <4>), (<1>, <7>), (<2>, <7>), (<2>, <1>)]

>> graph_adj:

{<0>: [<4>],
<4>: [],
<5>: [<7>, <3>, <0>],
<7>: [<6>, <1>, <3>],
<3>: [<5>, <7>],
<6>: [<1>, <2>, <4>, <7>],
<1>: [<2>, <5>, <4>, <7>],
<2>: [<7>, <1>]}

>> graph_nl:

Node <0> is connected to node <4>.
Node <5> is connected to nodes <7>, <3>, <0>.
Node <7> is connected to nodes <6>, <1>, <3>.
Node <3> is connected to nodes <5>, <7>.
Node <6> is connected to nodes <1>, <2>, <4>, <7>.
Node <1> is connected to nodes <2>, <5>, <4>, <7>.
Node <2> is connected to nodes <7>, <1>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>]

>> num_nodes:

8

>> num_edges:

19

>> directed:

True

>> question:

Find the strongly connected component containing node <5>. 

>> answer:

[<6>, <2>, <1>, <7>, <3>, <5>]

>> steps:

Let's find the strongly connected component step by step, and we can use the Tarjan algorithm.
Search from node <5>.
Visit neighbor node <0>.
Search from node <0>.
Visit neighbor node <4>.
Search from node <4>.
Node <4> is a root node, find a new strongly connected component: [<4>].
Node <0> is a root node, find a new strongly connected component: [<0>].
Visit neighbor node <3>.
Search from node <3>.
Visit neighbor node <7>.
Search from node <7>.
Visit neighbor node <1>.
Search from node <1>.
Visit neighbor node <2>.
Search from node <2>.
Visit neighbor node <6>.
Search from node <6>.
Node <5> is a root node, find a new strongly connected component: [<6>, <2>, <1>, <7>, <3>, <5>].
So the strongly connected component containing node <5> is 

>> cc_node_ratio:

0.75

####### sample 5 #######

>> task:

connected_component

>> graph:

[(<5>, <7>), (<5>, <10>), (<5>, <1>), (<5>, <2>), (<10>, <9>), (<10>, <8>), (<1>, <9>), (<1>, <0>), (<1>, <7>), (<9>, <0>), (<9>, <2>), (<9>, <8>), (<9>, <6>), (<8>, <3>), (<8>, <5>), (<8>, <11>), (<0>, <5>), (<0>, <4>), (<4>, <11>), (<4>, <8>), (<4>, <3>), (<4>, <7>), (<11>, <2>), (<11>, <5>), (<11>, <7>), (<11>, <10>), (<11>, <4>), (<11>, <9>), (<3>, <5>), (<3>, <1>), (<3>, <9>), (<3>, <2>), (<3>, <8>), (<6>, <2>), (<6>, <8>), (<6>, <1>)]

>> graph_adj:

{<5>: [<7>, <10>, <1>, <2>],
<7>: [],
<10>: [<9>, <8>],
<1>: [<9>, <0>, <7>],
<2>: [],
<9>: [<0>, <2>, <8>, <6>],
<8>: [<3>, <5>, <11>],
<0>: [<5>, <4>],
<4>: [<11>, <8>, <3>, <7>],
<11>: [<2>, <5>, <7>, <10>, <4>, <9>],
<3>: [<5>, <1>, <9>, <2>, <8>],
<6>: [<2>, <8>, <1>]}

>> graph_nl:

Node <5> is connected to nodes <7>, <10>, <1>, <2>.
Node <10> is connected to nodes <9>, <8>.
Node <1> is connected to nodes <9>, <0>, <7>.
Node <9> is connected to nodes <0>, <2>, <8>, <6>.
Node <8> is connected to nodes <3>, <5>, <11>.
Node <0> is connected to nodes <5>, <4>.
Node <4> is connected to nodes <11>, <8>, <3>, <7>.
Node <11> is connected to nodes <2>, <5>, <7>, <10>, <4>, <9>.
Node <3> is connected to nodes <5>, <1>, <9>, <2>, <8>.
Node <6> is connected to nodes <2>, <8>, <1>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>]

>> num_nodes:

12

>> num_edges:

36

>> directed:

True

>> question:

Find the strongly connected component containing node <8>. 

>> answer:

[<6>, <9>, <10>, <5>, <0>, <1>, <3>, <4>, <11>, <8>]

>> steps:

Let's find the strongly connected component step by step, and we can use the Tarjan algorithm.
Search from node <8>.
Visit neighbor node <11>.
Search from node <11>.
Visit neighbor node <2>.
Search from node <2>.
Node <2> is a root node, find a new strongly connected component: [<2>].
Visit neighbor node <4>.
Search from node <4>.
Visit neighbor node <3>.
Search from node <3>.
Visit neighbor node <1>.
Search from node <1>.
Visit neighbor node <0>.
Search from node <0>.
Visit neighbor node <5>.
Search from node <5>.
Visit neighbor node <10>.
Search from node <10>.
Visit neighbor node <9>.
Search from node <9>.
Visit neighbor node <6>.
Search from node <6>.
Visit neighbor node <7>.
Search from node <7>.
Node <7> is a root node, find a new strongly connected component: [<7>].
Node <8> is a root node, find a new strongly connected component: [<6>, <9>, <10>, <5>, <0>, <1>, <3>, <4>, <11>, <8>].
So the strongly connected component containing node <8> is 

>> cc_node_ratio:

0.8333333333333334

####### sample 6 #######

>> task:

connected_component

>> graph:

[(<5>, <1>), (<5>, <7>), (<1>, <10>), (<7>, <4>), (<10>, <12>), (<9>, <13>), (<9>, <12>), (<13>, <12>), (<11>, <8>), (<11>, <6>), (<8>, <3>), (<6>, <0>), (<3>, <2>), (<2>, <0>)]

>> graph_adj:

{<5>: [<1>, <7>],
<1>: [<5>, <10>],
<7>: [<5>, <4>],
<10>: [<1>, <12>],
<4>: [<7>],
<9>: [<13>, <12>],
<13>: [<9>, <12>],
<12>: [<9>, <13>, <10>],
<11>: [<8>, <6>],
<8>: [<11>, <3>],
<6>: [<11>, <0>],
<3>: [<8>, <2>],
<2>: [<3>, <0>],
<0>: [<2>, <6>]}

>> graph_nl:

Node <5> is connected to nodes <1>, <7>.
Node <1> is connected to nodes <5>, <10>.
Node <7> is connected to nodes <5>, <4>.
Node <10> is connected to nodes <1>, <12>.
Node <4> is connected to node <7>.
Node <9> is connected to nodes <13>, <12>.
Node <13> is connected to nodes <9>, <12>.
Node <12> is connected to nodes <9>, <13>, <10>.
Node <11> is connected to nodes <8>, <6>.
Node <8> is connected to nodes <11>, <3>.
Node <6> is connected to nodes <11>, <0>.
Node <3> is connected to nodes <8>, <2>.
Node <2> is connected to nodes <3>, <0>.
Node <0> is connected to nodes <2>, <6>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>]

>> num_nodes:

14

>> num_edges:

14

>> directed:

False

>> question:

Find the connected component containing node <6>. 

>> answer:

[<6>, <11>, <8>, <3>, <2>, <0>]

>> steps:

Let's find the connected component step by step, and we can use Depth-First Search.
Visit node <6>, add it to the connected component. The current connected component is [<6>].
Visit node <11>, add it to the connected component. The current connected component is [<6>, <11>].
Visit node <8>, add it to the connected component. The current connected component is [<6>, <11>, <8>].
Visit node <3>, add it to the connected component. The current connected component is [<6>, <11>, <8>, <3>].
Visit node <2>, add it to the connected component. The current connected component is [<6>, <11>, <8>, <3>, <2>].
Visit node <0>, add it to the connected component. The current connected component is [<6>, <11>, <8>, <3>, <2>, <0>].
Thus, the connected component containing node <6> is 

>> cc_node_ratio:

0.42857142857142855

####### sample 7 #######

>> task:

connected_component

>> graph:

[(<2>, <0>), (<2>, <4>), (<0>, <6>), (<0>, <3>), (<4>, <2>), (<4>, <6>), (<4>, <7>), (<3>, <6>), (<3>, <4>), (<7>, <4>), (<7>, <3>), (<7>, <1>), (<7>, <5>), (<1>, <2>), (<1>, <0>), (<1>, <6>), (<1>, <4>), (<5>, <2>), (<5>, <4>), (<5>, <3>)]

>> graph_adj:

{<2>: [<0>, <4>],
<0>: [<6>, <3>],
<4>: [<2>, <6>, <7>],
<6>: [],
<3>: [<6>, <4>],
<7>: [<4>, <3>, <1>, <5>],
<1>: [<2>, <0>, <6>, <4>],
<5>: [<2>, <4>, <3>]}

>> graph_nl:

Node <2> is connected to nodes <0>, <4>.
Node <0> is connected to nodes <6>, <3>.
Node <4> is connected to nodes <2>, <6>, <7>.
Node <3> is connected to nodes <6>, <4>.
Node <7> is connected to nodes <4>, <3>, <1>, <5>.
Node <1> is connected to nodes <2>, <0>, <6>, <4>.
Node <5> is connected to nodes <2>, <4>, <3>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>]

>> num_nodes:

8

>> num_edges:

20

>> directed:

True

>> question:

Find the strongly connected component containing node <7>. 

>> answer:

[<5>, <2>, <4>, <3>, <0>, <1>, <7>]

>> steps:

Let's find the strongly connected component step by step, and we can use the Tarjan algorithm.
Search from node <7>.
Visit neighbor node <1>.
Search from node <1>.
Visit neighbor node <0>.
Search from node <0>.
Visit neighbor node <3>.
Search from node <3>.
Visit neighbor node <4>.
Search from node <4>.
Visit neighbor node <2>.
Search from node <2>.
Visit neighbor node <6>.
Search from node <6>.
Node <6> is a root node, find a new strongly connected component: [<6>].
Visit neighbor node <5>.
Search from node <5>.
Node <7> is a root node, find a new strongly connected component: [<5>, <2>, <4>, <3>, <0>, <1>, <7>].
So the strongly connected component containing node <7> is 

>> cc_node_ratio:

0.875

####### sample 8 #######

>> task:

connected_component

>> graph:

[(<14>, <9>), (<14>, <2>), (<9>, <6>), (<9>, <3>), (<9>, <11>), (<9>, <0>), (<2>, <11>), (<2>, <0>), (<2>, <9>), (<6>, <11>), (<11>, <5>), (<11>, <13>), (<11>, <8>), (<5>, <1>), (<13>, <3>), (<13>, <5>), (<8>, <2>), (<8>, <10>), (<8>, <12>), (<8>, <0>), (<1>, <9>), (<1>, <8>), (<1>, <2>), (<1>, <0>), (<12>, <4>), (<12>, <2>), (<4>, <14>), (<4>, <3>), (<7>, <0>), (<7>, <8>), (<7>, <5>), (<7>, <12>), (<0>, <2>), (<0>, <10>), (<0>, <6>), (<0>, <3>), (<0>, <11>), (<0>, <12>), (<10>, <6>), (<10>, <4>), (<10>, <2>)]

>> graph_adj:

{<14>: [<9>, <2>],
<9>: [<6>, <3>, <11>, <0>],
<2>: [<11>, <0>, <9>],
<6>: [<11>],
<11>: [<5>, <13>, <8>],
<5>: [<1>],
<13>: [<3>, <5>],
<8>: [<2>, <10>, <12>, <0>],
<1>: [<9>, <8>, <2>, <0>],
<12>: [<4>, <2>],
<4>: [<14>, <3>],
<7>: [<0>, <8>, <5>, <12>],
<0>: [<2>, <10>, <6>, <3>, <11>, <12>],
<10>: [<6>, <4>, <2>],
<3>: []}

>> graph_nl:

Node <14> is connected to nodes <9>, <2>.
Node <9> is connected to nodes <6>, <3>, <11>, <0>.
Node <2> is connected to nodes <11>, <0>, <9>.
Node <6> is connected to node <11>.
Node <11> is connected to nodes <5>, <13>, <8>.
Node <5> is connected to node <1>.
Node <13> is connected to nodes <3>, <5>.
Node <8> is connected to nodes <2>, <10>, <12>, <0>.
Node <1> is connected to nodes <9>, <8>, <2>, <0>.
Node <12> is connected to nodes <4>, <2>.
Node <4> is connected to nodes <14>, <3>.
Node <7> is connected to nodes <0>, <8>, <5>, <12>.
Node <0> is connected to nodes <2>, <10>, <6>, <3>, <11>, <12>.
Node <10> is connected to nodes <6>, <4>, <2>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>, <14>]

>> num_nodes:

15

>> num_edges:

41

>> directed:

True

>> question:

Find the strongly connected component containing node <14>. 

>> answer:

[<1>, <5>, <13>, <12>, <4>, <10>, <6>, <2>, <0>, <8>, <11>, <9>, <14>]

>> steps:

Let's find the strongly connected component step by step, and we can use the Tarjan algorithm.
Search from node <14>.
Visit neighbor node <9>.
Search from node <9>.
Visit neighbor node <11>.
Search from node <11>.
Visit neighbor node <8>.
Search from node <8>.
Visit neighbor node <0>.
Search from node <0>.
Visit neighbor node <2>.
Search from node <2>.
Visit neighbor node <3>.
Search from node <3>.
Node <3> is a root node, find a new strongly connected component: [<3>].
Visit neighbor node <6>.
Search from node <6>.
Visit neighbor node <10>.
Search from node <10>.
Visit neighbor node <4>.
Search from node <4>.
Visit neighbor node <12>.
Search from node <12>.
Visit neighbor node <13>.
Search from node <13>.
Visit neighbor node <5>.
Search from node <5>.
Visit neighbor node <1>.
Search from node <1>.
Node <14> is a root node, find a new strongly connected component: [<1>, <5>, <13>, <12>, <4>, <10>, <6>, <2>, <0>, <8>, <11>, <9>, <14>].
So the strongly connected component containing node <14> is 

>> cc_node_ratio:

0.8666666666666667

####### sample 9 #######

>> task:

connected_component

>> graph:

[(<8>, <11>), (<8>, <14>), (<8>, <4>), (<8>, <3>), (<11>, <13>), (<11>, <4>), (<11>, <3>), (<14>, <9>), (<14>, <7>), (<14>, <2>), (<14>, <3>), (<14>, <1>), (<14>, <6>), (<4>, <13>), (<4>, <10>), (<4>, <2>), (<3>, <13>), (<3>, <7>), (<13>, <5>), (<13>, <0>), (<13>, <10>), (<13>, <9>), (<13>, <2>), (<13>, <12>), (<5>, <2>), (<10>, <2>), (<10>, <12>), (<10>, <6>), (<9>, <7>), (<9>, <2>), (<9>, <6>), (<2>, <6>), (<12>, <7>), (<6>, <1>), (<7>, <1>)]

>> graph_adj:

{<8>: [<11>, <14>, <4>, <3>],
<11>: [<8>, <13>, <4>, <3>],
<14>: [<8>, <9>, <7>, <2>, <3>, <1>, <6>],
<4>: [<8>, <13>, <11>, <10>, <2>],
<3>: [<8>, <13>, <11>, <7>, <14>],
<13>: [<5>, <11>, <0>, <10>, <9>, <2>, <4>, <3>, <12>],
<5>: [<13>, <2>],
<0>: [<13>],
<10>: [<13>, <2>, <4>, <12>, <6>],
<9>: [<13>, <7>, <14>, <2>, <6>],
<2>: [<13>, <5>, <10>, <9>, <14>, <4>, <6>],
<12>: [<13>, <10>, <7>],
<6>: [<10>, <9>, <14>, <2>, <1>],
<7>: [<9>, <14>, <3>, <1>, <12>],
<1>: [<7>, <14>, <6>]}

>> graph_nl:

Node <8> is connected to nodes <11>, <14>, <4>, <3>.
Node <11> is connected to nodes <8>, <13>, <4>, <3>.
Node <14> is connected to nodes <8>, <9>, <7>, <2>, <3>, <1>, <6>.
Node <4> is connected to nodes <8>, <13>, <11>, <10>, <2>.
Node <3> is connected to nodes <8>, <13>, <11>, <7>, <14>.
Node <13> is connected to nodes <5>, <11>, <0>, <10>, <9>, <2>, <4>, <3>, <12>.
Node <5> is connected to nodes <13>, <2>.
Node <0> is connected to node <13>.
Node <10> is connected to nodes <13>, <2>, <4>, <12>, <6>.
Node <9> is connected to nodes <13>, <7>, <14>, <2>, <6>.
Node <2> is connected to nodes <13>, <5>, <10>, <9>, <14>, <4>, <6>.
Node <12> is connected to nodes <13>, <10>, <7>.
Node <6> is connected to nodes <10>, <9>, <14>, <2>, <1>.
Node <7> is connected to nodes <9>, <14>, <3>, <1>, <12>.
Node <1> is connected to nodes <7>, <14>, <6>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>, <14>]

>> num_nodes:

15

>> num_edges:

35

>> directed:

False

>> question:

Find the connected component containing node <11>. 

>> answer:

[<11>, <13>, <12>, <7>, <14>, <9>, <6>, <10>, <4>, <2>, <5>, <8>, <3>, <1>, <0>]

>> steps:

Let's find the connected component step by step, and we can use Depth-First Search.
Visit node <11>, add it to the connected component. The current connected component is [<11>].
Visit node <13>, add it to the connected component. The current connected component is [<11>, <13>].
Visit node <12>, add it to the connected component. The current connected component is [<11>, <13>, <12>].
Visit node <7>, add it to the connected component. The current connected component is [<11>, <13>, <12>, <7>].
Visit node <14>, add it to the connected component. The current connected component is [<11>, <13>, <12>, <7>, <14>].
Visit node <9>, add it to the connected component. The current connected component is [<11>, <13>, <12>, <7>, <14>, <9>].
Visit node <6>, add it to the connected component. The current connected component is [<11>, <13>, <12>, <7>, <14>, <9>, <6>].
Visit node <10>, add it to the connected component. The current connected component is [<11>, <13>, <12>, <7>, <14>, <9>, <6>, <10>].
Visit node <4>, add it to the connected component. The current connected component is [<11>, <13>, <12>, <7>, <14>, <9>, <6>, <10>, <4>].
Visit node <2>, add it to the connected component. The current connected component is [<11>, <13>, <12>, <7>, <14>, <9>, <6>, <10>, <4>, <2>].
Visit node <5>, add it to the connected component. The current connected component is [<11>, <13>, <12>, <7>, <14>, <9>, <6>, <10>, <4>, <2>, <5>].
Visit node <8>, add it to the connected component. The current connected component is [<11>, <13>, <12>, <7>, <14>, <9>, <6>, <10>, <4>, <2>, <5>, <8>].
Visit node <3>, add it to the connected component. The current connected component is [<11>, <13>, <12>, <7>, <14>, <9>, <6>, <10>, <4>, <2>, <5>, <8>, <3>].
Visit node <1>, add it to the connected component. The current connected component is [<11>, <13>, <12>, <7>, <14>, <9>, <6>, <10>, <4>, <2>, <5>, <8>, <3>, <1>].
Visit node <0>, add it to the connected component. The current connected component is [<11>, <13>, <12>, <7>, <14>, <9>, <6>, <10>, <4>, <2>, <5>, <8>, <3>, <1>, <0>].
Thus, the connected component containing node <11> is 

>> cc_node_ratio:

1.0

####### sample 10 #######

>> task:

connected_component

>> graph:

[(<7>, <1>), (<1>, <4>), (<2>, <7>), (<5>, <6>), (<5>, <1>), (<5>, <2>), (<6>, <1>), (<0>, <1>), (<0>, <4>), (<0>, <2>), (<4>, <5>), (<4>, <0>), (<4>, <1>), (<3>, <4>)]

>> graph_adj:

{<7>: [<1>],
<1>: [<4>],
<2>: [<7>],
<5>: [<6>, <1>, <2>],
<6>: [<1>],
<0>: [<1>, <4>, <2>],
<4>: [<5>, <0>, <1>],
<3>: [<4>]}

>> graph_nl:

Node <7> is connected to node <1>.
Node <1> is connected to node <4>.
Node <2> is connected to node <7>.
Node <5> is connected to nodes <6>, <1>, <2>.
Node <6> is connected to node <1>.
Node <0> is connected to nodes <1>, <4>, <2>.
Node <4> is connected to nodes <5>, <0>, <1>.
Node <3> is connected to node <4>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>]

>> num_nodes:

8

>> num_edges:

14

>> directed:

True

>> question:

Find the strongly connected component containing node <3>. 

>> answer:

[<3>]

>> steps:

Let's find the strongly connected component step by step, and we can use the Tarjan algorithm.
Search from node <3>.
Visit neighbor node <4>.
Search from node <4>.
Visit neighbor node <0>.
Search from node <0>.
Visit neighbor node <1>.
Search from node <1>.
Visit neighbor node <2>.
Search from node <2>.
Visit neighbor node <7>.
Search from node <7>.
Visit neighbor node <5>.
Search from node <5>.
Visit neighbor node <6>.
Search from node <6>.
Node <4> is a root node, find a new strongly connected component: [<6>, <5>, <7>, <2>, <1>, <0>, <4>].
Node <3> is a root node, find a new strongly connected component: [<3>].
So the strongly connected component containing node <3> is 

>> cc_node_ratio:

0.125

