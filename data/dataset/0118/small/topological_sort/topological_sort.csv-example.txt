####### sample 1 #######

>> task:

topological_sort

>> graph:

[(<4>, <1>), (<4>, <7>), (<4>, <0>), (<4>, <6>), (<1>, <6>), (<7>, <6>), (<7>, <1>), (<7>, <0>), (<7>, <3>), (<7>, <2>), (<7>, <5>), (<0>, <5>), (<6>, <8>), (<6>, <5>), (<3>, <8>), (<5>, <3>), (<5>, <2>)]

>> graph_adj:

{<4>: [<1>, <7>, <0>, <6>],
<1>: [<6>],
<7>: [<6>, <1>, <0>, <3>, <2>, <5>],
<0>: [<5>],
<6>: [<8>, <5>],
<3>: [<8>],
<2>: [],
<5>: [<3>, <2>],
<8>: []}

>> graph_nl:

Node <4> is connected to nodes <1>, <7>, <0>, <6>.
Node <1> is connected to node <6>.
Node <7> is connected to nodes <6>, <1>, <0>, <3>, <2>, <5>.
Node <0> is connected to node <5>.
Node <6> is connected to nodes <8>, <5>.
Node <3> is connected to node <8>.
Node <5> is connected to nodes <3>, <2>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>]

>> num_nodes:

9

>> num_edges:

17

>> directed:

True

>> question:

Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.

>> answer:

[<4>, <7>, <1>, <0>, <6>, <5>, <3>, <2>, <8>]

>> steps:

Let's solve it step by step.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <0>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <6>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <2>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <8>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
So the result of topological sorting is 

>> choices:

('[[<4>, <7>, <1>, <0>, <3>, <8>, <2>, <6>, <5>], [<4>, <7>, <1>, <3>, <2>, <8>, <0>, <6>, <5>], [<4>, <2>, <3>, <6>, <8>, <7>, <0>, <1>, <5>], [<4>, <7>, <1>, <0>, <6>, <5>, <3>, <2>, <8>]]',)

>> label:

3

####### sample 2 #######

>> task:

topological_sort

>> graph:

[(<8>, <6>), (<8>, <3>), (<8>, <5>), (<6>, <7>), (<3>, <4>), (<3>, <5>), (<3>, <6>), (<5>, <6>), (<5>, <1>), (<5>, <7>), (<10>, <1>), (<10>, <0>), (<10>, <2>), (<10>, <5>), (<1>, <2>), (<0>, <6>), (<0>, <1>), (<0>, <7>), (<4>, <10>), (<4>, <1>), (<9>, <3>), (<9>, <4>), (<9>, <7>)]

>> graph_adj:

{<8>: [<6>, <3>, <5>],
<6>: [<7>],
<3>: [<4>, <5>, <6>],
<5>: [<6>, <1>, <7>],
<7>: [],
<10>: [<1>, <0>, <2>, <5>],
<1>: [<2>],
<0>: [<6>, <1>, <7>],
<2>: [],
<4>: [<10>, <1>],
<9>: [<3>, <4>, <7>]}

>> graph_nl:

Node <8> is connected to nodes <6>, <3>, <5>.
Node <6> is connected to node <7>.
Node <3> is connected to nodes <4>, <5>, <6>.
Node <5> is connected to nodes <6>, <1>, <7>.
Node <10> is connected to nodes <1>, <0>, <2>, <5>.
Node <1> is connected to node <2>.
Node <0> is connected to nodes <6>, <1>, <7>.
Node <4> is connected to nodes <10>, <1>.
Node <9> is connected to nodes <3>, <4>, <7>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>]

>> num_nodes:

11

>> num_edges:

23

>> directed:

True

>> question:

Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.

>> answer:

[<8>, <9>, <3>, <4>, <10>, <0>, <5>, <6>, <1>, <7>, <2>]

>> steps:

Let's solve it step by step.
Nodes with 0 in-degree: [<8>, <9>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <5>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <1>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <7>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <2>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
So the result of topological sorting is 

>> choices:

('[[<8>, <9>, <3>, <4>, <10>, <0>, <5>, <6>, <1>, <7>, <2>], [<8>, <9>, <3>, <1>, <7>, <2>, <4>, <10>, <0>, <5>, <6>], [<8>, <9>, <3>, <4>, <10>, <6>, <0>, <5>, <7>, <2>, <1>], [<8>, <0>, <4>, <10>, <9>, <6>, <1>, <5>, <7>, <3>, <2>]]',)

>> label:

0

####### sample 3 #######

>> task:

topological_sort

>> graph:

[(<2>, <9>), (<2>, <3>), (<3>, <1>), (<7>, <2>), (<7>, <6>), (<6>, <2>), (<6>, <9>), (<6>, <4>), (<8>, <1>), (<8>, <6>), (<8>, <4>), (<8>, <0>), (<8>, <2>), (<1>, <4>), (<4>, <10>), (<4>, <0>), (<5>, <1>), (<11>, <0>), (<11>, <2>), (<11>, <9>), (<11>, <4>)]

>> graph_adj:

{<2>: [<9>, <3>],
<9>: [],
<3>: [<1>],
<7>: [<2>, <6>],
<6>: [<2>, <9>, <4>],
<8>: [<1>, <6>, <4>, <0>, <2>],
<1>: [<4>],
<4>: [<10>, <0>],
<0>: [],
<5>: [<1>],
<11>: [<0>, <2>, <9>, <4>],
<10>: []}

>> graph_nl:

Node <2> is connected to nodes <9>, <3>.
Node <3> is connected to node <1>.
Node <7> is connected to nodes <2>, <6>.
Node <6> is connected to nodes <2>, <9>, <4>.
Node <8> is connected to nodes <1>, <6>, <4>, <0>, <2>.
Node <1> is connected to node <4>.
Node <4> is connected to nodes <10>, <0>.
Node <5> is connected to node <1>.
Node <11> is connected to nodes <0>, <2>, <9>, <4>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>]

>> num_nodes:

12

>> num_edges:

21

>> directed:

True

>> question:

Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.

>> answer:

[<7>, <8>, <5>, <11>, <6>, <2>, <9>, <3>, <1>, <4>, <10>, <0>]

>> steps:

Let's solve it step by step.
Nodes with 0 in-degree: [<7>, <8>, <5>, <11>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<8>, <5>, <11>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <11>, <6>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<11>, <6>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<9>, <3>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<10>, <0>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
So the result of topological sorting is 

>> choices:

('[[<7>, <8>, <5>, <11>, <1>, <4>, <10>, <0>, <6>, <2>, <9>, <3>], [<7>, <8>, <5>, <11>, <6>, <2>, <10>, <9>, <4>, <0>, <1>, <3>], [<7>, <4>, <2>, <3>, <9>, <6>, <1>, <0>, <10>, <8>, <11>, <5>], [<7>, <8>, <5>, <11>, <6>, <2>, <9>, <3>, <1>, <4>, <10>, <0>]]',)

>> label:

3

####### sample 4 #######

>> task:

topological_sort

>> graph:

[(<10>, <8>), (<8>, <12>), (<12>, <1>), (<14>, <7>), (<14>, <2>), (<14>, <4>), (<14>, <8>), (<7>, <12>), (<7>, <10>), (<2>, <1>), (<2>, <4>), (<2>, <8>), (<2>, <10>), (<4>, <12>), (<4>, <3>), (<4>, <5>), (<4>, <7>), (<5>, <8>), (<5>, <10>), (<5>, <1>), (<5>, <7>), (<11>, <0>), (<11>, <10>), (<11>, <9>), (<11>, <7>), (<11>, <4>), (<11>, <3>), (<0>, <10>), (<0>, <7>), (<0>, <14>), (<0>, <1>), (<0>, <4>), (<9>, <2>), (<13>, <11>), (<13>, <2>), (<13>, <5>), (<13>, <0>), (<13>, <6>), (<6>, <9>), (<6>, <4>), (<6>, <12>), (<6>, <0>)]

>> graph_adj:

{<10>: [<8>],
<8>: [<12>],
<12>: [<1>],
<14>: [<7>, <2>, <4>, <8>],
<7>: [<12>, <10>],
<2>: [<1>, <4>, <8>, <10>],
<4>: [<12>, <3>, <5>, <7>],
<3>: [],
<5>: [<8>, <10>, <1>, <7>],
<1>: [],
<11>: [<0>, <10>, <9>, <7>, <4>, <3>],
<0>: [<10>, <7>, <14>, <1>, <4>],
<9>: [<2>],
<13>: [<11>, <2>, <5>, <0>, <6>],
<6>: [<9>, <4>, <12>, <0>]}

>> graph_nl:

Node <10> is connected to node <8>.
Node <8> is connected to node <12>.
Node <12> is connected to node <1>.
Node <14> is connected to nodes <7>, <2>, <4>, <8>.
Node <7> is connected to nodes <12>, <10>.
Node <2> is connected to nodes <1>, <4>, <8>, <10>.
Node <4> is connected to nodes <12>, <3>, <5>, <7>.
Node <5> is connected to nodes <8>, <10>, <1>, <7>.
Node <11> is connected to nodes <0>, <10>, <9>, <7>, <4>, <3>.
Node <0> is connected to nodes <10>, <7>, <14>, <1>, <4>.
Node <9> is connected to node <2>.
Node <13> is connected to nodes <11>, <2>, <5>, <0>, <6>.
Node <6> is connected to nodes <9>, <4>, <12>, <0>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>, <14>]

>> num_nodes:

15

>> num_edges:

42

>> directed:

True

>> question:

Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.

>> answer:

[<13>, <11>, <6>, <9>, <0>, <14>, <2>, <4>, <3>, <5>, <7>, <10>, <8>, <12>, <1>]

>> steps:

Let's solve it step by step.
Nodes with 0 in-degree: [<13>].
Visit node <13> and remove it from the graph.
Nodes with 0 in-degree: [<11>, <6>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<9>, <0>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<14>].
Visit node <14> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <5>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<12>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
So the result of topological sorting is 

>> choices:

('[[<13>, <0>, <8>, <9>, <1>, <11>, <10>, <7>, <12>, <5>, <4>, <2>, <6>, <14>, <3>], [<13>, <11>, <6>, <9>, <0>, <14>, <2>, <4>, <3>, <5>, <7>, <10>, <8>, <12>, <1>], [<13>, <11>, <6>, <9>, <0>, <14>, <2>, <12>, <4>, <5>, <1>, <8>, <7>, <3>, <10>], [<13>, <11>, <6>, <9>, <0>, <7>, <10>, <8>, <12>, <1>, <14>, <2>, <4>, <3>, <5>]]',)

>> label:

1

####### sample 5 #######

>> task:

topological_sort

>> graph:

[(<9>, <0>), (<9>, <2>), (<0>, <1>), (<0>, <5>), (<0>, <7>), (<1>, <7>), (<7>, <2>), (<6>, <5>), (<6>, <1>), (<6>, <0>), (<3>, <4>), (<3>, <10>), (<3>, <8>), (<3>, <7>), (<4>, <0>), (<4>, <2>), (<4>, <1>), (<10>, <1>), (<10>, <5>), (<10>, <0>), (<8>, <4>), (<8>, <2>), (<8>, <0>)]

>> graph_adj:

{<9>: [<0>, <2>],
<0>: [<1>, <5>, <7>],
<2>: [],
<1>: [<7>],
<5>: [],
<7>: [<2>],
<6>: [<5>, <1>, <0>],
<3>: [<4>, <10>, <8>, <7>],
<4>: [<0>, <2>, <1>],
<10>: [<1>, <5>, <0>],
<8>: [<4>, <2>, <0>]}

>> graph_nl:

Node <9> is connected to nodes <0>, <2>.
Node <0> is connected to nodes <1>, <5>, <7>.
Node <1> is connected to node <7>.
Node <7> is connected to node <2>.
Node <6> is connected to nodes <5>, <1>, <0>.
Node <3> is connected to nodes <4>, <10>, <8>, <7>.
Node <4> is connected to nodes <0>, <2>, <1>.
Node <10> is connected to nodes <1>, <5>, <0>.
Node <8> is connected to nodes <4>, <2>, <0>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>]

>> num_nodes:

11

>> num_edges:

23

>> directed:

True

>> question:

Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.

>> answer:

[<9>, <6>, <3>, <10>, <8>, <4>, <0>, <1>, <5>, <7>, <2>]

>> steps:

Let's solve it step by step.
Nodes with 0 in-degree: [<9>, <6>, <3>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <3>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<10>, <8>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <5>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <7>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
So the result of topological sorting is 

>> choices:

('[[<9>, <7>, <1>, <8>, <5>, <10>, <3>, <2>, <0>, <6>, <4>], [<9>, <6>, <3>, <5>, <7>, <2>, <10>, <8>, <4>, <0>, <1>], [<9>, <6>, <3>, <10>, <8>, <5>, <4>, <1>, <0>, <7>, <2>], [<9>, <6>, <3>, <10>, <8>, <4>, <0>, <1>, <5>, <7>, <2>]]',)

>> label:

3

####### sample 6 #######

>> task:

topological_sort

>> graph:

[(<7>, <8>), (<7>, <0>), (<7>, <2>), (<7>, <5>), (<8>, <3>), (<8>, <1>), (<8>, <2>), (<0>, <2>), (<5>, <0>), (<5>, <4>), (<3>, <9>), (<3>, <2>), (<1>, <9>), (<1>, <2>), (<1>, <5>), (<4>, <0>), (<4>, <3>), (<6>, <2>), (<6>, <4>), (<6>, <7>)]

>> graph_adj:

{<7>: [<8>, <0>, <2>, <5>],
<8>: [<3>, <1>, <2>],
<0>: [<2>],
<2>: [],
<5>: [<0>, <4>],
<3>: [<9>, <2>],
<1>: [<9>, <2>, <5>],
<9>: [],
<4>: [<0>, <3>],
<6>: [<2>, <4>, <7>]}

>> graph_nl:

Node <7> is connected to nodes <8>, <0>, <2>, <5>.
Node <8> is connected to nodes <3>, <1>, <2>.
Node <0> is connected to node <2>.
Node <5> is connected to nodes <0>, <4>.
Node <3> is connected to nodes <9>, <2>.
Node <1> is connected to nodes <9>, <2>, <5>.
Node <4> is connected to nodes <0>, <3>.
Node <6> is connected to nodes <2>, <4>, <7>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>]

>> num_nodes:

10

>> num_edges:

20

>> directed:

True

>> question:

Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.

>> answer:

[<6>, <7>, <8>, <1>, <5>, <4>, <0>, <3>, <9>, <2>]

>> steps:

Let's solve it step by step.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <3>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<9>, <2>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
So the result of topological sorting is 

>> choices:

('[[<6>, <7>, <8>, <1>, <5>, <4>, <0>, <3>, <9>, <2>], [<6>, <7>, <8>, <1>, <5>, <2>, <9>, <3>, <4>, <0>], [<6>, <0>, <4>, <3>, <2>, <5>, <8>, <1>, <7>, <9>], [<6>, <7>, <8>, <3>, <9>, <2>, <1>, <5>, <4>, <0>]]',)

>> label:

0

####### sample 7 #######

>> task:

topological_sort

>> graph:

[(<0>, <9>), (<0>, <1>), (<0>, <4>), (<0>, <2>), (<9>, <6>), (<9>, <1>), (<1>, <3>), (<1>, <4>), (<2>, <6>), (<6>, <7>), (<6>, <5>), (<5>, <8>), (<5>, <1>), (<11>, <4>), (<11>, <5>), (<11>, <3>), (<11>, <8>), (<10>, <1>)]

>> graph_adj:

{<0>: [<9>, <1>, <4>, <2>],
<9>: [<6>, <1>],
<1>: [<3>, <4>],
<4>: [],
<2>: [<6>],
<6>: [<7>, <5>],
<5>: [<8>, <1>],
<8>: [],
<11>: [<4>, <5>, <3>, <8>],
<3>: [],
<7>: [],
<10>: [<1>]}

>> graph_nl:

Node <0> is connected to nodes <9>, <1>, <4>, <2>.
Node <9> is connected to nodes <6>, <1>.
Node <1> is connected to nodes <3>, <4>.
Node <2> is connected to node <6>.
Node <6> is connected to nodes <7>, <5>.
Node <5> is connected to nodes <8>, <1>.
Node <11> is connected to nodes <4>, <5>, <3>, <8>.
Node <10> is connected to node <1>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>]

>> num_nodes:

12

>> num_edges:

18

>> directed:

True

>> question:

Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.

>> answer:

[<0>, <11>, <10>, <9>, <2>, <6>, <7>, <5>, <8>, <1>, <3>, <4>]

>> steps:

Let's solve it step by step.
Nodes with 0 in-degree: [<0>, <11>, <10>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<11>, <10>, <9>, <2>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<10>, <9>, <2>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<9>, <2>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <5>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<8>, <1>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <4>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
So the result of topological sorting is 

>> choices:

('[[<0>, <11>, <10>, <9>, <2>, <6>, <7>, <5>, <8>, <1>, <3>, <4>], [<0>, <11>, <10>, <9>, <8>, <1>, <3>, <4>, <2>, <6>, <7>, <5>], [<0>, <3>, <1>, <7>, <6>, <10>, <8>, <11>, <2>, <9>, <4>, <5>], [<0>, <11>, <10>, <9>, <2>, <6>, <8>, <4>, <5>, <1>, <3>, <7>]]',)

>> label:

0

####### sample 8 #######

>> task:

topological_sort

>> graph:

[(<4>, <7>), (<4>, <5>), (<7>, <8>), (<7>, <0>), (<7>, <5>), (<7>, <6>), (<5>, <2>), (<5>, <1>), (<8>, <5>), (<0>, <6>), (<0>, <5>), (<3>, <5>), (<3>, <0>), (<3>, <1>)]

>> graph_adj:

{<4>: [<7>, <5>],
<7>: [<8>, <0>, <5>, <6>],
<5>: [<2>, <1>],
<8>: [<5>],
<0>: [<6>, <5>],
<6>: [],
<3>: [<5>, <0>, <1>],
<1>: [],
<2>: []}

>> graph_nl:

Node <4> is connected to nodes <7>, <5>.
Node <7> is connected to nodes <8>, <0>, <5>, <6>.
Node <5> is connected to nodes <2>, <1>.
Node <8> is connected to node <5>.
Node <0> is connected to nodes <6>, <5>.
Node <3> is connected to nodes <5>, <0>, <1>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>]

>> num_nodes:

9

>> num_edges:

14

>> directed:

True

>> question:

Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.

>> answer:

[<4>, <3>, <7>, <8>, <0>, <6>, <5>, <2>, <1>]

>> steps:

Let's solve it step by step.
Nodes with 0 in-degree: [<4>, <3>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <7>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<8>, <0>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <5>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <1>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
So the result of topological sorting is 

>> choices:

('[[<4>, <3>, <7>, <5>, <2>, <1>, <8>, <0>, <6>], [<4>, <3>, <7>, <8>, <6>, <1>, <2>, <0>, <5>], [<4>, <3>, <7>, <8>, <0>, <6>, <5>, <2>, <1>], [<4>, <2>, <5>, <3>, <7>, <1>, <6>, <0>, <8>]]',)

>> label:

2

####### sample 9 #######

>> task:

topological_sort

>> graph:

[(<1>, <0>), (<1>, <9>), (<1>, <7>), (<1>, <6>), (<1>, <5>), (<0>, <9>), (<0>, <3>), (<0>, <7>), (<0>, <11>), (<7>, <9>), (<7>, <11>), (<6>, <5>), (<6>, <12>), (<6>, <3>), (<6>, <10>), (<6>, <0>), (<6>, <9>), (<6>, <13>), (<5>, <9>), (<5>, <12>), (<5>, <8>), (<5>, <14>), (<3>, <9>), (<3>, <7>), (<4>, <11>), (<4>, <5>), (<4>, <8>), (<4>, <9>), (<4>, <1>), (<4>, <12>), (<8>, <9>), (<8>, <3>), (<8>, <7>), (<12>, <3>), (<12>, <11>), (<12>, <7>), (<12>, <0>), (<12>, <8>), (<2>, <11>), (<2>, <1>), (<2>, <14>), (<2>, <0>), (<14>, <12>), (<14>, <3>), (<13>, <0>), (<13>, <8>), (<13>, <10>), (<13>, <3>), (<10>, <5>), (<10>, <8>)]

>> graph_adj:

{<1>: [<0>, <9>, <7>, <6>, <5>],
<0>: [<9>, <3>, <7>, <11>],
<9>: [],
<7>: [<9>, <11>],
<6>: [<5>, <12>, <3>, <10>, <0>, <9>, <13>],
<5>: [<9>, <12>, <8>, <14>],
<3>: [<9>, <7>],
<11>: [],
<4>: [<11>, <5>, <8>, <9>, <1>, <12>],
<8>: [<9>, <3>, <7>],
<12>: [<3>, <11>, <7>, <0>, <8>],
<2>: [<11>, <1>, <14>, <0>],
<14>: [<12>, <3>],
<13>: [<0>, <8>, <10>, <3>],
<10>: [<5>, <8>]}

>> graph_nl:

Node <1> is connected to nodes <0>, <9>, <7>, <6>, <5>.
Node <0> is connected to nodes <9>, <3>, <7>, <11>.
Node <7> is connected to nodes <9>, <11>.
Node <6> is connected to nodes <5>, <12>, <3>, <10>, <0>, <9>, <13>.
Node <5> is connected to nodes <9>, <12>, <8>, <14>.
Node <3> is connected to nodes <9>, <7>.
Node <4> is connected to nodes <11>, <5>, <8>, <9>, <1>, <12>.
Node <8> is connected to nodes <9>, <3>, <7>.
Node <12> is connected to nodes <3>, <11>, <7>, <0>, <8>.
Node <2> is connected to nodes <11>, <1>, <14>, <0>.
Node <14> is connected to nodes <12>, <3>.
Node <13> is connected to nodes <0>, <8>, <10>, <3>.
Node <10> is connected to nodes <5>, <8>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>, <14>]

>> num_nodes:

15

>> num_edges:

50

>> directed:

True

>> question:

Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.

>> answer:

[<4>, <2>, <1>, <6>, <13>, <10>, <5>, <14>, <12>, <0>, <8>, <3>, <7>, <9>, <11>]

>> steps:

Let's solve it step by step.
Nodes with 0 in-degree: [<4>, <2>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<13>].
Visit node <13> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<14>].
Visit node <14> and remove it from the graph.
Nodes with 0 in-degree: [<12>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <8>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<9>, <11>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<11>].
Visit node <11> and remove it from the graph.
So the result of topological sorting is 

>> choices:

('[[<4>, <12>, <5>, <8>, <0>, <14>, <7>, <2>, <9>, <13>, <1>, <3>, <10>, <6>, <11>], [<4>, <2>, <1>, <6>, <13>, <10>, <5>, <12>, <7>, <0>, <3>, <8>, <11>, <9>, <14>], [<4>, <2>, <1>, <6>, <13>, <10>, <5>, <14>, <12>, <0>, <8>, <3>, <7>, <9>, <11>], [<4>, <2>, <1>, <6>, <13>, <8>, <3>, <7>, <9>, <11>, <10>, <5>, <14>, <12>, <0>]]',)

>> label:

2

####### sample 10 #######

>> task:

topological_sort

>> graph:

[(<8>, <0>), (<8>, <3>), (<8>, <1>), (<8>, <4>), (<0>, <4>), (<0>, <7>), (<3>, <2>), (<1>, <7>), (<4>, <7>), (<4>, <2>), (<4>, <5>), (<7>, <3>), (<7>, <2>), (<5>, <7>), (<5>, <1>), (<6>, <3>), (<6>, <1>), (<6>, <4>)]

>> graph_adj:

{<8>: [<0>, <3>, <1>, <4>],
<0>: [<4>, <7>],
<3>: [<2>],
<1>: [<7>],
<4>: [<7>, <2>, <5>],
<7>: [<3>, <2>],
<2>: [],
<5>: [<7>, <1>],
<6>: [<3>, <1>, <4>]}

>> graph_nl:

Node <8> is connected to nodes <0>, <3>, <1>, <4>.
Node <0> is connected to nodes <4>, <7>.
Node <3> is connected to node <2>.
Node <1> is connected to node <7>.
Node <4> is connected to nodes <7>, <2>, <5>.
Node <7> is connected to nodes <3>, <2>.
Node <5> is connected to nodes <7>, <1>.
Node <6> is connected to nodes <3>, <1>, <4>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>]

>> num_nodes:

9

>> num_edges:

18

>> directed:

True

>> question:

Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.

>> answer:

[<8>, <6>, <0>, <4>, <5>, <1>, <7>, <3>, <2>]

>> steps:

Let's solve it step by step.
Nodes with 0 in-degree: [<8>, <6>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <0>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
So the result of topological sorting is 

>> choices:

('[[<8>, <6>, <0>, <7>, <3>, <2>, <4>, <5>, <1>], [<8>, <6>, <0>, <4>, <1>, <2>, <7>, <3>, <5>], [<8>, <6>, <0>, <4>, <5>, <1>, <7>, <3>, <2>], [<8>, <6>, <7>, <1>, <0>, <3>, <5>, <2>, <4>]]',)

>> label:

2

