task,graph,graph_adj,graph_nl,nodes,num_nodes,num_edges,directed,question,answer,steps,choices,label,id
topological_sort,"[(<11>, <1>), (<11>, <5>), (<11>, <12>), (<11>, <9>), (<11>, <0>), (<11>, <10>), (<1>, <5>), (<5>, <8>), (<5>, <3>), (<5>, <4>), (<9>, <7>), (<9>, <1>), (<9>, <8>), (<0>, <10>), (<0>, <12>), (<0>, <8>), (<0>, <1>), (<10>, <12>), (<10>, <7>), (<7>, <1>), (<8>, <6>), (<8>, <12>), (<8>, <3>), (<2>, <10>), (<2>, <12>), (<6>, <12>), (<4>, <3>)]","{<11>: [<1>, <5>, <12>, <9>, <0>, <10>],
<1>: [<5>],
<5>: [<8>, <3>, <4>],
<12>: [],
<9>: [<7>, <1>, <8>],
<0>: [<10>, <12>, <8>, <1>],
<10>: [<12>, <7>],
<7>: [<1>],
<8>: [<6>, <12>, <3>],
<2>: [<10>, <12>],
<6>: [<12>],
<3>: [],
<4>: [<3>]}","Node <11> is connected to nodes <1>, <5>, <12>, <9>, <0>, <10>.
Node <1> is connected to node <5>.
Node <5> is connected to nodes <8>, <3>, <4>.
Node <9> is connected to nodes <7>, <1>, <8>.
Node <0> is connected to nodes <10>, <12>, <8>, <1>.
Node <10> is connected to nodes <12>, <7>.
Node <7> is connected to node <1>.
Node <8> is connected to nodes <6>, <12>, <3>.
Node <2> is connected to nodes <10>, <12>.
Node <6> is connected to node <12>.
Node <4> is connected to node <3>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>]",13,27,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<11>, <2>, <9>, <0>, <10>, <7>, <1>, <5>, <8>, <4>, <6>, <3>, <12>]","Let's solve it step by step.
Nodes with 0 in-degree: [<11>, <2>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <9>, <0>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<9>, <0>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<8>, <4>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <6>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <3>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <12>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<12>].
Visit node <12> and remove it from the graph.
So the result of topological sorting is ","('[[<11>, <4>, <6>, <7>, <12>, <5>, <2>, <10>, <9>, <8>, <1>, <0>, <3>], [<11>, <2>, <9>, <0>, <4>, <6>, <3>, <12>, <10>, <7>, <1>, <5>, <8>], [<11>, <2>, <9>, <0>, <10>, <7>, <1>, <5>, <8>, <4>, <6>, <3>, <12>], [<11>, <2>, <9>, <0>, <10>, <7>, <12>, <1>, <8>, <5>, <6>, <3>, <4>]]',)",2,0
topological_sort,"[(<5>, <1>), (<3>, <9>), (<3>, <7>), (<3>, <8>), (<9>, <10>), (<9>, <1>), (<9>, <12>), (<9>, <7>), (<9>, <5>), (<8>, <12>), (<8>, <11>), (<8>, <7>), (<10>, <7>), (<12>, <5>), (<12>, <4>), (<14>, <1>), (<14>, <11>), (<14>, <7>), (<11>, <5>), (<11>, <4>), (<11>, <9>), (<11>, <7>), (<0>, <1>), (<0>, <11>), (<6>, <4>), (<6>, <13>), (<6>, <9>), (<6>, <11>), (<4>, <1>), (<13>, <3>), (<13>, <7>), (<13>, <8>), (<13>, <0>), (<13>, <4>), (<2>, <11>), (<2>, <7>), (<2>, <3>), (<2>, <6>)]","{<5>: [<1>],
<1>: [],
<3>: [<9>, <7>, <8>],
<9>: [<10>, <1>, <12>, <7>, <5>],
<7>: [],
<8>: [<12>, <11>, <7>],
<10>: [<7>],
<12>: [<5>, <4>],
<14>: [<1>, <11>, <7>],
<11>: [<5>, <4>, <9>, <7>],
<0>: [<1>, <11>],
<6>: [<4>, <13>, <9>, <11>],
<4>: [<1>],
<13>: [<3>, <7>, <8>, <0>, <4>],
<2>: [<11>, <7>, <3>, <6>]}","Node <5> is connected to node <1>.
Node <3> is connected to nodes <9>, <7>, <8>.
Node <9> is connected to nodes <10>, <1>, <12>, <7>, <5>.
Node <8> is connected to nodes <12>, <11>, <7>.
Node <10> is connected to node <7>.
Node <12> is connected to nodes <5>, <4>.
Node <14> is connected to nodes <1>, <11>, <7>.
Node <11> is connected to nodes <5>, <4>, <9>, <7>.
Node <0> is connected to nodes <1>, <11>.
Node <6> is connected to nodes <4>, <13>, <9>, <11>.
Node <4> is connected to node <1>.
Node <13> is connected to nodes <3>, <7>, <8>, <0>, <4>.
Node <2> is connected to nodes <11>, <7>, <3>, <6>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>, <14>]",15,38,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<14>, <2>, <6>, <13>, <3>, <0>, <8>, <11>, <9>, <10>, <12>, <7>, <5>, <4>, <1>]","Let's solve it step by step.
Nodes with 0 in-degree: [<14>, <2>].
Visit node <14> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<13>].
Visit node <13> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <0>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <8>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<11>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<10>, <12>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<12>, <7>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <5>, <4>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <4>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
So the result of topological sorting is ","('[[<14>, <2>, <6>, <13>, <3>, <0>, <8>, <5>, <7>, <1>, <10>, <9>, <4>, <11>, <12>], [<14>, <2>, <6>, <13>, <3>, <12>, <7>, <5>, <4>, <1>, <0>, <8>, <11>, <9>, <10>], [<14>, <10>, <1>, <9>, <5>, <7>, <4>, <3>, <8>, <6>, <12>, <2>, <11>, <13>, <0>], [<14>, <2>, <6>, <13>, <3>, <0>, <8>, <11>, <9>, <10>, <12>, <7>, <5>, <4>, <1>]]',)",3,1
topological_sort,"[(<6>, <5>), (<6>, <0>), (<5>, <9>), (<5>, <8>), (<0>, <1>), (<0>, <7>), (<9>, <0>), (<9>, <2>), (<8>, <10>), (<2>, <0>), (<2>, <1>), (<2>, <8>), (<4>, <5>), (<4>, <3>), (<4>, <10>), (<3>, <0>), (<3>, <6>), (<10>, <0>)]","{<6>: [<5>, <0>],
<5>: [<9>, <8>],
<0>: [<1>, <7>],
<9>: [<0>, <2>],
<8>: [<10>],
<1>: [],
<7>: [],
<2>: [<0>, <1>, <8>],
<4>: [<5>, <3>, <10>],
<3>: [<0>, <6>],
<10>: [<0>]}","Node <6> is connected to nodes <5>, <0>.
Node <5> is connected to nodes <9>, <8>.
Node <0> is connected to nodes <1>, <7>.
Node <9> is connected to nodes <0>, <2>.
Node <8> is connected to node <10>.
Node <2> is connected to nodes <0>, <1>, <8>.
Node <4> is connected to nodes <5>, <3>, <10>.
Node <3> is connected to nodes <0>, <6>.
Node <10> is connected to node <0>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>]",11,18,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<4>, <3>, <6>, <5>, <9>, <2>, <8>, <10>, <0>, <1>, <7>]","Let's solve it step by step.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <7>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
So the result of topological sorting is ","('[[<4>, <6>, <9>, <7>, <8>, <0>, <1>, <3>, <2>, <5>, <10>], [<4>, <3>, <6>, <5>, <9>, <2>, <8>, <10>, <0>, <1>, <7>], [<4>, <3>, <6>, <0>, <1>, <7>, <5>, <9>, <2>, <8>, <10>], [<4>, <3>, <6>, <5>, <9>, <1>, <2>, <10>, <7>, <0>, <8>]]',)",1,2
topological_sort,"[(<4>, <6>), (<4>, <1>), (<1>, <6>), (<2>, <5>), (<2>, <3>), (<5>, <4>), (<3>, <4>), (<3>, <5>), (<3>, <7>), (<3>, <6>), (<7>, <0>), (<7>, <4>), (<7>, <1>), (<0>, <5>), (<0>, <6>)]","{<4>: [<6>, <1>],
<6>: [],
<1>: [<6>],
<2>: [<5>, <3>],
<5>: [<4>],
<3>: [<4>, <5>, <7>, <6>],
<7>: [<0>, <4>, <1>],
<0>: [<5>, <6>]}","Node <4> is connected to nodes <6>, <1>.
Node <1> is connected to node <6>.
Node <2> is connected to nodes <5>, <3>.
Node <5> is connected to node <4>.
Node <3> is connected to nodes <4>, <5>, <7>, <6>.
Node <7> is connected to nodes <0>, <4>, <1>.
Node <0> is connected to nodes <5>, <6>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>]",8,15,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<2>, <3>, <7>, <0>, <5>, <4>, <1>, <6>]","Let's solve it step by step.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
So the result of topological sorting is ","('[[<2>, <3>, <7>, <0>, <5>, <1>, <6>, <4>], [<2>, <3>, <7>, <0>, <5>, <4>, <1>, <6>], [<2>, <3>, <4>, <7>, <0>, <6>, <5>, <1>], [<2>, <3>, <1>, <6>, <7>, <0>, <5>, <4>]]',)",1,3
topological_sort,"[(<3>, <1>), (<8>, <7>), (<8>, <6>), (<8>, <4>), (<7>, <1>), (<6>, <7>), (<6>, <3>), (<4>, <1>), (<4>, <3>), (<4>, <7>), (<0>, <8>), (<0>, <1>), (<0>, <6>), (<0>, <4>), (<5>, <8>), (<5>, <6>), (<5>, <3>), (<5>, <7>), (<2>, <4>), (<2>, <7>), (<2>, <8>), (<2>, <3>)]","{<3>: [<1>],
<1>: [],
<8>: [<7>, <6>, <4>],
<7>: [<1>],
<6>: [<7>, <3>],
<4>: [<1>, <3>, <7>],
<0>: [<8>, <1>, <6>, <4>],
<5>: [<8>, <6>, <3>, <7>],
<2>: [<4>, <7>, <8>, <3>]}","Node <3> is connected to node <1>.
Node <8> is connected to nodes <7>, <6>, <4>.
Node <7> is connected to node <1>.
Node <6> is connected to nodes <7>, <3>.
Node <4> is connected to nodes <1>, <3>, <7>.
Node <0> is connected to nodes <8>, <1>, <6>, <4>.
Node <5> is connected to nodes <8>, <6>, <3>, <7>.
Node <2> is connected to nodes <4>, <7>, <8>, <3>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>]",9,22,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<0>, <5>, <2>, <8>, <6>, <4>, <3>, <7>, <1>]","Let's solve it step by step.
Nodes with 0 in-degree: [<0>, <5>, <2>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <2>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <4>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <7>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
So the result of topological sorting is ","('[[<0>, <5>, <2>, <8>, <6>, <7>, <4>, <1>, <3>], [<0>, <5>, <2>, <8>, <6>, <4>, <3>, <7>, <1>], [<0>, <5>, <8>, <6>, <1>, <2>, <4>, <3>, <7>], [<0>, <5>, <2>, <3>, <7>, <1>, <8>, <6>, <4>]]',)",1,4
topological_sort,"[(<4>, <2>), (<2>, <0>), (<0>, <8>), (<9>, <5>), (<9>, <1>), (<5>, <0>), (<5>, <1>), (<1>, <4>), (<1>, <2>), (<1>, <3>), (<3>, <4>), (<3>, <0>), (<3>, <8>), (<6>, <3>), (<6>, <1>), (<7>, <2>), (<7>, <4>)]","{<4>: [<2>],
<2>: [<0>],
<0>: [<8>],
<9>: [<5>, <1>],
<5>: [<0>, <1>],
<1>: [<4>, <2>, <3>],
<3>: [<4>, <0>, <8>],
<8>: [],
<6>: [<3>, <1>],
<7>: [<2>, <4>]}","Node <4> is connected to node <2>.
Node <2> is connected to node <0>.
Node <0> is connected to node <8>.
Node <9> is connected to nodes <5>, <1>.
Node <5> is connected to nodes <0>, <1>.
Node <1> is connected to nodes <4>, <2>, <3>.
Node <3> is connected to nodes <4>, <0>, <8>.
Node <6> is connected to nodes <3>, <1>.
Node <7> is connected to nodes <2>, <4>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>]",10,17,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<9>, <6>, <7>, <5>, <1>, <3>, <4>, <2>, <0>, <8>]","Let's solve it step by step.
Nodes with 0 in-degree: [<9>, <6>, <7>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <7>, <5>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <5>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
So the result of topological sorting is ","('[[<9>, <0>, <3>, <7>, <4>, <5>, <1>, <6>, <2>, <8>], [<9>, <6>, <7>, <2>, <0>, <8>, <5>, <1>, <3>, <4>], [<9>, <6>, <7>, <5>, <1>, <4>, <8>, <3>, <2>, <0>], [<9>, <6>, <7>, <5>, <1>, <3>, <4>, <2>, <0>, <8>]]',)",3,5
topological_sort,"[(<7>, <0>), (<7>, <1>), (<7>, <9>), (<0>, <9>), (<12>, <7>), (<12>, <9>), (<12>, <6>), (<12>, <3>), (<3>, <1>), (<3>, <7>), (<3>, <10>), (<4>, <7>), (<4>, <6>), (<4>, <0>), (<4>, <1>), (<2>, <12>), (<2>, <8>), (<2>, <0>), (<8>, <0>), (<10>, <9>), (<5>, <7>), (<11>, <10>)]","{<7>: [<0>, <1>, <9>],
<0>: [<9>],
<1>: [],
<9>: [],
<12>: [<7>, <9>, <6>, <3>],
<6>: [],
<3>: [<1>, <7>, <10>],
<4>: [<7>, <6>, <0>, <1>],
<2>: [<12>, <8>, <0>],
<8>: [<0>],
<10>: [<9>],
<5>: [<7>],
<11>: [<10>]}","Node <7> is connected to nodes <0>, <1>, <9>.
Node <0> is connected to node <9>.
Node <12> is connected to nodes <7>, <9>, <6>, <3>.
Node <3> is connected to nodes <1>, <7>, <10>.
Node <4> is connected to nodes <7>, <6>, <0>, <1>.
Node <2> is connected to nodes <12>, <8>, <0>.
Node <8> is connected to node <0>.
Node <10> is connected to node <9>.
Node <5> is connected to node <7>.
Node <11> is connected to node <10>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>]",13,22,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<4>, <2>, <5>, <11>, <12>, <8>, <6>, <3>, <7>, <10>, <0>, <1>, <9>]","Let's solve it step by step.
Nodes with 0 in-degree: [<4>, <2>, <5>, <11>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <5>, <11>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <11>, <12>, <8>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<11>, <12>, <8>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<12>, <8>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<8>, <6>, <3>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <3>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <10>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<10>, <0>, <1>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <1>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <9>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
So the result of topological sorting is ","('[[<4>, <12>, <0>, <6>, <8>, <2>, <3>, <7>, <5>, <11>, <10>, <1>, <9>], [<4>, <2>, <5>, <11>, <12>, <8>, <3>, <7>, <0>, <9>, <1>, <10>, <6>], [<4>, <2>, <5>, <11>, <10>, <0>, <1>, <9>, <12>, <8>, <6>, <3>, <7>], [<4>, <2>, <5>, <11>, <12>, <8>, <6>, <3>, <7>, <10>, <0>, <1>, <9>]]',)",3,6
topological_sort,"[(<7>, <11>), (<7>, <9>), (<7>, <10>), (<7>, <0>), (<7>, <5>), (<7>, <2>), (<10>, <9>), (<10>, <2>), (<10>, <11>), (<0>, <10>), (<0>, <11>), (<5>, <9>), (<5>, <10>), (<5>, <3>), (<5>, <11>), (<2>, <9>), (<6>, <9>), (<6>, <0>), (<4>, <2>), (<4>, <6>), (<4>, <10>), (<4>, <8>), (<8>, <9>), (<8>, <10>), (<3>, <8>), (<3>, <2>), (<3>, <4>), (<3>, <10>), (<3>, <0>), (<1>, <2>), (<1>, <3>), (<1>, <7>), (<1>, <9>)]","{<7>: [<11>, <9>, <10>, <0>, <5>, <2>],
<11>: [],
<9>: [],
<10>: [<9>, <2>, <11>],
<0>: [<10>, <11>],
<5>: [<9>, <10>, <3>, <11>],
<2>: [<9>],
<6>: [<9>, <0>],
<4>: [<2>, <6>, <10>, <8>],
<8>: [<9>, <10>],
<3>: [<8>, <2>, <4>, <10>, <0>],
<1>: [<2>, <3>, <7>, <9>]}","Node <7> is connected to nodes <11>, <9>, <10>, <0>, <5>, <2>.
Node <10> is connected to nodes <9>, <2>, <11>.
Node <0> is connected to nodes <10>, <11>.
Node <5> is connected to nodes <9>, <10>, <3>, <11>.
Node <2> is connected to node <9>.
Node <6> is connected to nodes <9>, <0>.
Node <4> is connected to nodes <2>, <6>, <10>, <8>.
Node <8> is connected to nodes <9>, <10>.
Node <3> is connected to nodes <8>, <2>, <4>, <10>, <0>.
Node <1> is connected to nodes <2>, <3>, <7>, <9>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>]",12,33,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<1>, <7>, <5>, <3>, <4>, <6>, <8>, <0>, <10>, <2>, <11>, <9>]","Let's solve it step by step.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <8>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<8>, <0>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <11>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<11>, <9>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
So the result of topological sorting is ","('[[<1>, <7>, <5>, <3>, <4>, <6>, <8>, <0>, <10>, <2>, <11>, <9>], [<1>, <7>, <5>, <3>, <10>, <2>, <11>, <9>, <4>, <6>, <8>, <0>], [<1>, <7>, <5>, <3>, <4>, <6>, <9>, <8>, <2>, <11>, <10>, <0>], [<1>, <10>, <5>, <9>, <6>, <11>, <0>, <8>, <2>, <7>, <3>, <4>]]',)",0,7
topological_sort,"[(<9>, <10>), (<10>, <0>), (<0>, <4>), (<3>, <13>), (<3>, <11>), (<13>, <5>), (<13>, <10>), (<11>, <5>), (<11>, <12>), (<7>, <11>), (<7>, <6>), (<12>, <4>), (<12>, <9>), (<4>, <5>), (<8>, <2>), (<8>, <9>), (<2>, <3>), (<2>, <9>), (<2>, <6>), (<2>, <0>), (<1>, <10>), (<1>, <2>), (<1>, <11>), (<1>, <7>)]","{<9>: [<10>],
<10>: [<0>],
<0>: [<4>],
<3>: [<13>, <11>],
<13>: [<5>, <10>],
<11>: [<5>, <12>],
<5>: [],
<7>: [<11>, <6>],
<6>: [],
<12>: [<4>, <9>],
<4>: [<5>],
<8>: [<2>, <9>],
<2>: [<3>, <9>, <6>, <0>],
<1>: [<10>, <2>, <11>, <7>]}","Node <9> is connected to node <10>.
Node <10> is connected to node <0>.
Node <0> is connected to node <4>.
Node <3> is connected to nodes <13>, <11>.
Node <13> is connected to nodes <5>, <10>.
Node <11> is connected to nodes <5>, <12>.
Node <7> is connected to nodes <11>, <6>.
Node <12> is connected to nodes <4>, <9>.
Node <4> is connected to node <5>.
Node <8> is connected to nodes <2>, <9>.
Node <2> is connected to nodes <3>, <9>, <6>, <0>.
Node <1> is connected to nodes <10>, <2>, <11>, <7>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>]",14,24,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<8>, <1>, <2>, <7>, <3>, <6>, <13>, <11>, <12>, <9>, <10>, <0>, <4>, <5>]","Let's solve it step by step.
Nodes with 0 in-degree: [<8>, <1>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <7>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <3>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <6>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <13>, <11>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<13>, <11>].
Visit node <13> and remove it from the graph.
Nodes with 0 in-degree: [<11>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<12>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
So the result of topological sorting is ","('[[<8>, <6>, <3>, <12>, <10>, <13>, <4>, <1>, <5>, <11>, <0>, <2>, <9>, <7>], [<8>, <1>, <2>, <7>, <3>, <6>, <13>, <9>, <0>, <5>, <11>, <12>, <4>, <10>], [<8>, <1>, <2>, <7>, <10>, <0>, <4>, <5>, <3>, <6>, <13>, <11>, <12>, <9>], [<8>, <1>, <2>, <7>, <3>, <6>, <13>, <11>, <12>, <9>, <10>, <0>, <4>, <5>]]',)",3,8
topological_sort,"[(<4>, <10>), (<4>, <6>), (<4>, <7>), (<10>, <8>), (<6>, <0>), (<7>, <3>), (<7>, <0>), (<8>, <6>), (<8>, <0>), (<3>, <11>), (<3>, <1>), (<9>, <11>), (<9>, <7>), (<0>, <1>), (<0>, <5>), (<0>, <3>), (<5>, <11>), (<2>, <6>), (<2>, <0>), (<2>, <10>)]","{<4>: [<10>, <6>, <7>],
<10>: [<8>],
<6>: [<0>],
<7>: [<3>, <0>],
<8>: [<6>, <0>],
<3>: [<11>, <1>],
<11>: [],
<1>: [],
<9>: [<11>, <7>],
<0>: [<1>, <5>, <3>],
<5>: [<11>],
<2>: [<6>, <0>, <10>]}","Node <4> is connected to nodes <10>, <6>, <7>.
Node <10> is connected to node <8>.
Node <6> is connected to node <0>.
Node <7> is connected to nodes <3>, <0>.
Node <8> is connected to nodes <6>, <0>.
Node <3> is connected to nodes <11>, <1>.
Node <9> is connected to nodes <11>, <7>.
Node <0> is connected to nodes <1>, <5>, <3>.
Node <5> is connected to node <11>.
Node <2> is connected to nodes <6>, <0>, <10>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>]",12,20,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<4>, <9>, <2>, <7>, <10>, <8>, <6>, <0>, <5>, <3>, <11>, <1>]","Let's solve it step by step.
Nodes with 0 in-degree: [<4>, <9>, <2>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<9>, <2>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <7>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <10>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <3>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<11>, <1>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
So the result of topological sorting is ","('[[<4>, <9>, <2>, <7>, <5>, <3>, <11>, <1>, <10>, <8>, <6>, <0>], [<4>, <9>, <2>, <7>, <10>, <8>, <6>, <0>, <5>, <3>, <11>, <1>], [<4>, <9>, <2>, <7>, <10>, <8>, <3>, <6>, <5>, <0>, <11>, <1>], [<4>, <10>, <1>, <5>, <6>, <0>, <8>, <7>, <2>, <9>, <11>, <3>]]',)",1,9
topological_sort,"[(<1>, <7>), (<1>, <2>), (<7>, <2>), (<7>, <8>), (<5>, <6>), (<5>, <3>), (<6>, <7>), (<6>, <1>), (<3>, <6>), (<3>, <4>), (<3>, <8>), (<3>, <0>), (<4>, <7>), (<4>, <1>)]","{<1>: [<7>, <2>],
<7>: [<2>, <8>],
<2>: [],
<8>: [],
<5>: [<6>, <3>],
<6>: [<7>, <1>],
<3>: [<6>, <4>, <8>, <0>],
<4>: [<7>, <1>],
<0>: []}","Node <1> is connected to nodes <7>, <2>.
Node <7> is connected to nodes <2>, <8>.
Node <5> is connected to nodes <6>, <3>.
Node <6> is connected to nodes <7>, <1>.
Node <3> is connected to nodes <6>, <4>, <8>, <0>.
Node <4> is connected to nodes <7>, <1>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>]",9,14,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<5>, <3>, <6>, <4>, <0>, <1>, <7>, <2>, <8>]","Let's solve it step by step.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <4>, <0>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <0>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <1>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <8>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
So the result of topological sorting is ","('[[<5>, <3>, <6>, <7>, <2>, <8>, <4>, <0>, <1>], [<5>, <3>, <6>, <4>, <0>, <1>, <7>, <2>, <8>], [<5>, <3>, <6>, <4>, <2>, <7>, <1>, <8>, <0>], [<5>, <2>, <3>, <6>, <8>, <7>, <0>, <1>, <4>]]',)",1,10
topological_sort,"[(<9>, <10>), (<9>, <1>), (<9>, <8>), (<9>, <7>), (<9>, <4>), (<9>, <5>), (<10>, <3>), (<1>, <5>), (<1>, <3>), (<8>, <3>), (<8>, <7>), (<7>, <3>), (<7>, <5>), (<4>, <7>), (<4>, <10>), (<4>, <1>), (<4>, <3>), (<5>, <3>), (<6>, <1>), (<6>, <7>), (<6>, <2>), (<6>, <9>), (<2>, <8>), (<2>, <5>), (<0>, <9>), (<0>, <2>)]","{<9>: [<10>, <1>, <8>, <7>, <4>, <5>],
<10>: [<3>],
<1>: [<5>, <3>],
<8>: [<3>, <7>],
<7>: [<3>, <5>],
<4>: [<7>, <10>, <1>, <3>],
<5>: [<3>],
<3>: [],
<6>: [<1>, <7>, <2>, <9>],
<2>: [<8>, <5>],
<0>: [<9>, <2>]}","Node <9> is connected to nodes <10>, <1>, <8>, <7>, <4>, <5>.
Node <10> is connected to node <3>.
Node <1> is connected to nodes <5>, <3>.
Node <8> is connected to nodes <3>, <7>.
Node <7> is connected to nodes <3>, <5>.
Node <4> is connected to nodes <7>, <10>, <1>, <3>.
Node <5> is connected to node <3>.
Node <6> is connected to nodes <1>, <7>, <2>, <9>.
Node <2> is connected to nodes <8>, <5>.
Node <0> is connected to nodes <9>, <2>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>]",11,26,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<6>, <0>, <9>, <2>, <4>, <8>, <10>, <1>, <7>, <5>, <3>]","Let's solve it step by step.
Nodes with 0 in-degree: [<6>, <0>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<9>, <2>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <4>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <8>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<8>, <10>, <1>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<10>, <1>, <7>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <7>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
So the result of topological sorting is ","('[[<6>, <10>, <8>, <4>, <7>, <3>, <9>, <5>, <0>, <1>, <2>], [<6>, <0>, <9>, <7>, <5>, <3>, <2>, <4>, <8>, <10>, <1>], [<6>, <0>, <9>, <2>, <4>, <8>, <10>, <1>, <7>, <5>, <3>], [<6>, <0>, <9>, <2>, <4>, <1>, <3>, <10>, <7>, <8>, <5>]]',)",2,11
topological_sort,"[(<11>, <9>), (<11>, <8>), (<9>, <3>), (<9>, <7>), (<9>, <8>), (<3>, <4>), (<3>, <2>), (<3>, <10>), (<3>, <8>), (<7>, <1>), (<7>, <0>), (<4>, <1>), (<4>, <5>), (<4>, <7>), (<2>, <5>), (<2>, <7>), (<2>, <0>), (<2>, <4>), (<10>, <0>), (<10>, <2>), (<5>, <1>), (<6>, <12>), (<6>, <9>), (<6>, <11>), (<6>, <3>), (<6>, <4>), (<12>, <3>), (<0>, <5>), (<0>, <8>)]","{<11>: [<9>, <8>],
<9>: [<3>, <7>, <8>],
<8>: [],
<3>: [<4>, <2>, <10>, <8>],
<7>: [<1>, <0>],
<4>: [<1>, <5>, <7>],
<2>: [<5>, <7>, <0>, <4>],
<10>: [<0>, <2>],
<1>: [],
<5>: [<1>],
<6>: [<12>, <9>, <11>, <3>, <4>],
<12>: [<3>],
<0>: [<5>, <8>]}","Node <11> is connected to nodes <9>, <8>.
Node <9> is connected to nodes <3>, <7>, <8>.
Node <3> is connected to nodes <4>, <2>, <10>, <8>.
Node <7> is connected to nodes <1>, <0>.
Node <4> is connected to nodes <1>, <5>, <7>.
Node <2> is connected to nodes <5>, <7>, <0>, <4>.
Node <10> is connected to nodes <0>, <2>.
Node <5> is connected to node <1>.
Node <6> is connected to nodes <12>, <9>, <11>, <3>, <4>.
Node <12> is connected to node <3>.
Node <0> is connected to nodes <5>, <8>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>]",13,29,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<6>, <12>, <11>, <9>, <3>, <10>, <2>, <4>, <7>, <0>, <5>, <8>, <1>]","Let's solve it step by step.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<12>, <11>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<11>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <8>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<8>, <1>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
So the result of topological sorting is ","('[[<6>, <12>, <11>, <9>, <3>, <10>, <0>, <1>, <2>, <8>, <5>, <4>, <7>], [<6>, <12>, <11>, <9>, <0>, <5>, <8>, <1>, <3>, <10>, <2>, <4>, <7>], [<6>, <12>, <11>, <9>, <3>, <10>, <2>, <4>, <7>, <0>, <5>, <8>, <1>], [<6>, <0>, <2>, <4>, <1>, <9>, <11>, <7>, <8>, <5>, <10>, <12>, <3>]]',)",2,12
topological_sort,"[(<2>, <7>), (<10>, <9>), (<10>, <4>), (<10>, <8>), (<10>, <2>), (<10>, <11>), (<10>, <5>), (<9>, <2>), (<4>, <11>), (<4>, <3>), (<4>, <9>), (<8>, <2>), (<11>, <8>), (<11>, <2>), (<11>, <9>), (<5>, <0>), (<5>, <2>), (<5>, <4>), (<1>, <7>), (<1>, <10>), (<1>, <11>), (<3>, <0>), (<3>, <11>), (<3>, <7>), (<0>, <8>), (<0>, <2>), (<0>, <11>), (<6>, <10>), (<6>, <1>), (<6>, <9>), (<6>, <11>), (<6>, <4>)]","{<2>: [<7>],
<7>: [],
<10>: [<9>, <4>, <8>, <2>, <11>, <5>],
<9>: [<2>],
<4>: [<11>, <3>, <9>],
<8>: [<2>],
<11>: [<8>, <2>, <9>],
<5>: [<0>, <2>, <4>],
<1>: [<7>, <10>, <11>],
<3>: [<0>, <11>, <7>],
<0>: [<8>, <2>, <11>],
<6>: [<10>, <1>, <9>, <11>, <4>]}","Node <2> is connected to node <7>.
Node <10> is connected to nodes <9>, <4>, <8>, <2>, <11>, <5>.
Node <9> is connected to node <2>.
Node <4> is connected to nodes <11>, <3>, <9>.
Node <8> is connected to node <2>.
Node <11> is connected to nodes <8>, <2>, <9>.
Node <5> is connected to nodes <0>, <2>, <4>.
Node <1> is connected to nodes <7>, <10>, <11>.
Node <3> is connected to nodes <0>, <11>, <7>.
Node <0> is connected to nodes <8>, <2>, <11>.
Node <6> is connected to nodes <10>, <1>, <9>, <11>, <4>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>]",12,32,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<6>, <1>, <10>, <5>, <4>, <3>, <0>, <11>, <8>, <9>, <2>, <7>]","Let's solve it step by step.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<11>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<8>, <9>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
So the result of topological sorting is ","('[[<6>, <10>, <7>, <8>, <0>, <11>, <4>, <1>, <3>, <5>, <2>, <9>], [<6>, <1>, <10>, <5>, <8>, <9>, <2>, <7>, <4>, <3>, <0>, <11>], [<6>, <1>, <10>, <5>, <4>, <3>, <9>, <2>, <8>, <0>, <11>, <7>], [<6>, <1>, <10>, <5>, <4>, <3>, <0>, <11>, <8>, <9>, <2>, <7>]]',)",3,13
topological_sort,"[(<9>, <11>), (<9>, <2>), (<9>, <10>), (<9>, <12>), (<9>, <13>), (<11>, <12>), (<11>, <6>), (<11>, <7>), (<11>, <3>), (<11>, <0>), (<11>, <4>), (<2>, <12>), (<2>, <7>), (<2>, <5>), (<10>, <14>), (<10>, <2>), (<13>, <3>), (<13>, <5>), (<6>, <0>), (<6>, <5>), (<6>, <2>), (<6>, <7>), (<7>, <14>), (<7>, <5>), (<7>, <3>), (<7>, <4>), (<3>, <12>), (<0>, <7>), (<4>, <3>), (<8>, <4>), (<8>, <13>), (<8>, <7>), (<8>, <12>), (<8>, <10>), (<5>, <12>), (<5>, <14>), (<14>, <12>), (<14>, <4>), (<1>, <5>), (<1>, <8>), (<1>, <13>), (<1>, <9>), (<1>, <3>), (<1>, <7>), (<1>, <6>)]","{<9>: [<11>, <2>, <10>, <12>, <13>],
<11>: [<12>, <6>, <7>, <3>, <0>, <4>],
<2>: [<12>, <7>, <5>],
<10>: [<14>, <2>],
<12>: [],
<13>: [<3>, <5>],
<6>: [<0>, <5>, <2>, <7>],
<7>: [<14>, <5>, <3>, <4>],
<3>: [<12>],
<0>: [<7>],
<4>: [<3>],
<8>: [<4>, <13>, <7>, <12>, <10>],
<5>: [<12>, <14>],
<14>: [<12>, <4>],
<1>: [<5>, <8>, <13>, <9>, <3>, <7>, <6>]}","Node <9> is connected to nodes <11>, <2>, <10>, <12>, <13>.
Node <11> is connected to nodes <12>, <6>, <7>, <3>, <0>, <4>.
Node <2> is connected to nodes <12>, <7>, <5>.
Node <10> is connected to nodes <14>, <2>.
Node <13> is connected to nodes <3>, <5>.
Node <6> is connected to nodes <0>, <5>, <2>, <7>.
Node <7> is connected to nodes <14>, <5>, <3>, <4>.
Node <3> is connected to node <12>.
Node <0> is connected to node <7>.
Node <4> is connected to node <3>.
Node <8> is connected to nodes <4>, <13>, <7>, <12>, <10>.
Node <5> is connected to nodes <12>, <14>.
Node <14> is connected to nodes <12>, <4>.
Node <1> is connected to nodes <5>, <8>, <13>, <9>, <3>, <7>, <6>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>, <14>]",15,45,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<1>, <8>, <9>, <11>, <10>, <13>, <6>, <0>, <2>, <7>, <5>, <14>, <4>, <3>, <12>]","Let's solve it step by step.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<8>, <9>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<11>, <10>, <13>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<10>, <13>, <6>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<13>, <6>].
Visit node <13> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <2>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<14>].
Visit node <14> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<12>].
Visit node <12> and remove it from the graph.
So the result of topological sorting is ","('[[<1>, <6>, <3>, <11>, <5>, <13>, <14>, <12>, <4>, <7>, <8>, <2>, <9>, <0>, <10>], [<1>, <8>, <9>, <11>, <10>, <5>, <14>, <4>, <3>, <12>, <13>, <6>, <0>, <2>, <7>], [<1>, <8>, <9>, <11>, <10>, <13>, <6>, <0>, <2>, <7>, <5>, <14>, <4>, <3>, <12>], [<1>, <8>, <9>, <11>, <10>, <13>, <6>, <0>, <14>, <4>, <3>, <7>, <5>, <12>, <2>]]',)",2,14
topological_sort,"[(<7>, <5>), (<7>, <6>), (<7>, <0>), (<6>, <2>), (<6>, <4>), (<0>, <6>), (<2>, <5>), (<4>, <2>), (<4>, <1>), (<1>, <5>), (<3>, <5>), (<3>, <2>), (<3>, <7>), (<3>, <6>)]","{<7>: [<5>, <6>, <0>],
<5>: [],
<6>: [<2>, <4>],
<0>: [<6>],
<2>: [<5>],
<4>: [<2>, <1>],
<1>: [<5>],
<3>: [<5>, <2>, <7>, <6>]}","Node <7> is connected to nodes <5>, <6>, <0>.
Node <6> is connected to nodes <2>, <4>.
Node <0> is connected to node <6>.
Node <2> is connected to node <5>.
Node <4> is connected to nodes <2>, <1>.
Node <1> is connected to node <5>.
Node <3> is connected to nodes <5>, <2>, <7>, <6>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>]",8,14,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<3>, <7>, <0>, <6>, <4>, <2>, <1>, <5>]","Let's solve it step by step.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <1>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
So the result of topological sorting is ","('[[<3>, <7>, <1>, <5>, <0>, <6>, <4>, <2>], [<3>, <5>, <4>, <1>, <0>, <2>, <6>, <7>], [<3>, <7>, <0>, <6>, <4>, <2>, <1>, <5>], [<3>, <7>, <0>, <6>, <4>, <5>, <2>, <1>]]',)",2,15
topological_sort,"[(<3>, <2>), (<3>, <7>), (<3>, <8>), (<2>, <6>), (<2>, <7>), (<2>, <4>), (<7>, <8>), (<6>, <0>), (<6>, <8>), (<4>, <0>), (<4>, <8>), (<1>, <8>), (<1>, <6>), (<1>, <0>), (<1>, <3>), (<1>, <4>), (<1>, <5>), (<5>, <3>), (<5>, <2>), (<5>, <4>)]","{<3>: [<2>, <7>, <8>],
<2>: [<6>, <7>, <4>],
<7>: [<8>],
<8>: [],
<6>: [<0>, <8>],
<4>: [<0>, <8>],
<0>: [],
<1>: [<8>, <6>, <0>, <3>, <4>, <5>],
<5>: [<3>, <2>, <4>]}","Node <3> is connected to nodes <2>, <7>, <8>.
Node <2> is connected to nodes <6>, <7>, <4>.
Node <7> is connected to node <8>.
Node <6> is connected to nodes <0>, <8>.
Node <4> is connected to nodes <0>, <8>.
Node <1> is connected to nodes <8>, <6>, <0>, <3>, <4>, <5>.
Node <5> is connected to nodes <3>, <2>, <4>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>]",9,20,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<1>, <5>, <3>, <2>, <6>, <7>, <4>, <0>, <8>]","Let's solve it step by step.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <7>, <4>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <4>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <8>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
So the result of topological sorting is ","('[[<1>, <5>, <3>, <2>, <6>, <7>, <4>, <0>, <8>], [<1>, <5>, <3>, <2>, <0>, <7>, <4>, <8>, <6>], [<1>, <0>, <6>, <3>, <7>, <8>, <2>, <4>, <5>], [<1>, <5>, <3>, <4>, <0>, <8>, <2>, <6>, <7>]]',)",0,16
topological_sort,"[(<2>, <3>), (<3>, <9>), (<3>, <5>), (<3>, <6>), (<9>, <5>), (<4>, <6>), (<4>, <2>), (<4>, <0>), (<0>, <6>), (<1>, <3>), (<1>, <7>), (<7>, <8>), (<8>, <3>), (<8>, <2>)]","{<2>: [<3>],
<3>: [<9>, <5>, <6>],
<9>: [<5>],
<5>: [],
<6>: [],
<4>: [<6>, <2>, <0>],
<0>: [<6>],
<1>: [<3>, <7>],
<7>: [<8>],
<8>: [<3>, <2>]}","Node <2> is connected to node <3>.
Node <3> is connected to nodes <9>, <5>, <6>.
Node <9> is connected to node <5>.
Node <4> is connected to nodes <6>, <2>, <0>.
Node <0> is connected to node <6>.
Node <1> is connected to nodes <3>, <7>.
Node <7> is connected to node <8>.
Node <8> is connected to nodes <3>, <2>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>]",10,14,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<4>, <1>, <0>, <7>, <8>, <2>, <3>, <9>, <6>, <5>]","Let's solve it step by step.
Nodes with 0 in-degree: [<4>, <1>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <0>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <7>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<9>, <6>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <5>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
So the result of topological sorting is ","('[[<4>, <1>, <0>, <7>, <8>, <5>, <3>, <6>, <2>, <9>], [<4>, <1>, <0>, <7>, <8>, <2>, <3>, <9>, <6>, <5>], [<4>, <6>, <7>, <9>, <5>, <1>, <3>, <2>, <0>, <8>], [<4>, <1>, <0>, <9>, <6>, <5>, <7>, <8>, <2>, <3>]]',)",1,17
topological_sort,"[(<2>, <7>), (<2>, <8>), (<2>, <5>), (<7>, <0>), (<7>, <10>), (<0>, <6>), (<10>, <6>), (<1>, <7>), (<1>, <3>), (<3>, <2>), (<9>, <3>), (<9>, <0>), (<9>, <8>), (<9>, <1>), (<9>, <5>), (<11>, <7>), (<11>, <9>), (<11>, <3>), (<4>, <3>), (<4>, <7>), (<4>, <9>), (<4>, <6>)]","{<2>: [<7>, <8>, <5>],
<7>: [<0>, <10>],
<8>: [],
<5>: [],
<0>: [<6>],
<10>: [<6>],
<1>: [<7>, <3>],
<3>: [<2>],
<6>: [],
<9>: [<3>, <0>, <8>, <1>, <5>],
<11>: [<7>, <9>, <3>],
<4>: [<3>, <7>, <9>, <6>]}","Node <2> is connected to nodes <7>, <8>, <5>.
Node <7> is connected to nodes <0>, <10>.
Node <0> is connected to node <6>.
Node <10> is connected to node <6>.
Node <1> is connected to nodes <7>, <3>.
Node <3> is connected to node <2>.
Node <9> is connected to nodes <3>, <0>, <8>, <1>, <5>.
Node <11> is connected to nodes <7>, <9>, <3>.
Node <4> is connected to nodes <3>, <7>, <9>, <6>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>]",12,22,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<11>, <4>, <9>, <1>, <3>, <2>, <7>, <8>, <5>, <0>, <10>, <6>]","Let's solve it step by step.
Nodes with 0 in-degree: [<11>, <4>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <8>, <5>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<8>, <5>, <0>, <10>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <0>, <10>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <10>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
So the result of topological sorting is ","('[[<11>, <4>, <9>, <1>, <3>, <2>, <0>, <5>, <7>, <6>, <10>, <8>], [<11>, <5>, <9>, <1>, <7>, <8>, <3>, <2>, <10>, <4>, <6>, <0>], [<11>, <4>, <9>, <1>, <5>, <0>, <10>, <6>, <3>, <2>, <7>, <8>], [<11>, <4>, <9>, <1>, <3>, <2>, <7>, <8>, <5>, <0>, <10>, <6>]]',)",3,18
topological_sort,"[(<3>, <6>), (<3>, <4>), (<6>, <9>), (<4>, <6>), (<9>, <5>), (<9>, <0>), (<5>, <2>), (<0>, <5>), (<8>, <9>), (<8>, <2>), (<7>, <3>), (<1>, <0>), (<1>, <5>)]","{<3>: [<6>, <4>],
<6>: [<9>],
<4>: [<6>],
<9>: [<5>, <0>],
<5>: [<2>],
<0>: [<5>],
<2>: [],
<8>: [<9>, <2>],
<7>: [<3>],
<1>: [<0>, <5>]}","Node <3> is connected to nodes <6>, <4>.
Node <6> is connected to node <9>.
Node <4> is connected to node <6>.
Node <9> is connected to nodes <5>, <0>.
Node <5> is connected to node <2>.
Node <0> is connected to node <5>.
Node <8> is connected to nodes <9>, <2>.
Node <7> is connected to node <3>.
Node <1> is connected to nodes <0>, <5>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>]",10,13,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<8>, <7>, <1>, <3>, <4>, <6>, <9>, <0>, <5>, <2>]","Let's solve it step by step.
Nodes with 0 in-degree: [<8>, <7>, <1>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <1>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <3>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
So the result of topological sorting is ","('[[<8>, <7>, <1>, <3>, <4>, <2>, <5>, <0>, <9>, <6>], [<8>, <7>, <1>, <3>, <4>, <6>, <9>, <0>, <5>, <2>], [<8>, <6>, <9>, <0>, <7>, <3>, <4>, <2>, <1>, <5>], [<8>, <7>, <1>, <0>, <5>, <2>, <3>, <4>, <6>, <9>]]',)",1,19
topological_sort,"[(<7>, <2>), (<2>, <3>), (<2>, <4>), (<3>, <1>), (<3>, <5>), (<4>, <6>), (<4>, <3>), (<4>, <0>), (<5>, <6>), (<5>, <1>), (<0>, <6>), (<0>, <5>)]","{<7>: [<2>],
<2>: [<3>, <4>],
<3>: [<1>, <5>],
<4>: [<6>, <3>, <0>],
<1>: [],
<5>: [<6>, <1>],
<6>: [],
<0>: [<6>, <5>]}","Node <7> is connected to node <2>.
Node <2> is connected to nodes <3>, <4>.
Node <3> is connected to nodes <1>, <5>.
Node <4> is connected to nodes <6>, <3>, <0>.
Node <5> is connected to nodes <6>, <1>.
Node <0> is connected to nodes <6>, <5>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>]",8,12,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<7>, <2>, <4>, <3>, <0>, <5>, <6>, <1>]","Let's solve it step by step.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <0>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <1>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
So the result of topological sorting is ","('[[<7>, <2>, <6>, <1>, <4>, <3>, <0>, <5>], [<7>, <2>, <4>, <3>, <0>, <5>, <6>, <1>], [<7>, <2>, <4>, <3>, <1>, <5>, <6>, <0>], [<7>, <2>, <6>, <1>, <3>, <4>, <0>, <5>]]',)",1,20
topological_sort,"[(<9>, <7>), (<9>, <4>), (<7>, <5>), (<4>, <10>), (<4>, <2>), (<3>, <7>), (<3>, <13>), (<11>, <12>), (<12>, <3>), (<0>, <8>), (<0>, <6>), (<8>, <9>), (<8>, <2>), (<8>, <5>), (<6>, <11>), (<2>, <11>), (<2>, <6>), (<2>, <1>), (<10>, <7>), (<10>, <6>), (<10>, <12>)]","{<9>: [<7>, <4>],
<7>: [<5>],
<4>: [<10>, <2>],
<5>: [],
<3>: [<7>, <13>],
<13>: [],
<11>: [<12>],
<12>: [<3>],
<0>: [<8>, <6>],
<8>: [<9>, <2>, <5>],
<6>: [<11>],
<2>: [<11>, <6>, <1>],
<10>: [<7>, <6>, <12>],
<1>: []}","Node <9> is connected to nodes <7>, <4>.
Node <7> is connected to node <5>.
Node <4> is connected to nodes <10>, <2>.
Node <3> is connected to nodes <7>, <13>.
Node <11> is connected to node <12>.
Node <12> is connected to node <3>.
Node <0> is connected to nodes <8>, <6>.
Node <8> is connected to nodes <9>, <2>, <5>.
Node <6> is connected to node <11>.
Node <2> is connected to nodes <11>, <6>, <1>.
Node <10> is connected to nodes <7>, <6>, <12>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>]",14,21,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<0>, <8>, <9>, <4>, <10>, <2>, <6>, <1>, <11>, <12>, <3>, <7>, <13>, <5>]","Let's solve it step by step.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<10>, <2>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <1>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <11>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<11>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<12>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <13>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<13>, <5>].
Visit node <13> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
So the result of topological sorting is ","('[[<0>, <8>, <9>, <4>, <3>, <7>, <13>, <5>, <10>, <2>, <6>, <1>, <11>, <12>], [<0>, <6>, <8>, <3>, <9>, <4>, <2>, <5>, <10>, <7>, <13>, <12>, <1>, <11>], [<0>, <8>, <9>, <4>, <10>, <2>, <6>, <1>, <11>, <12>, <3>, <7>, <13>, <5>], [<0>, <8>, <9>, <4>, <10>, <2>, <6>, <13>, <3>, <7>, <12>, <1>, <11>, <5>]]',)",2,21
topological_sort,"[(<9>, <2>), (<9>, <8>), (<9>, <7>), (<2>, <10>), (<8>, <12>), (<8>, <0>), (<7>, <4>), (<6>, <10>), (<4>, <8>), (<3>, <10>), (<3>, <2>), (<3>, <6>), (<3>, <1>), (<3>, <12>), (<1>, <10>), (<1>, <9>), (<1>, <4>), (<5>, <1>), (<11>, <9>), (<11>, <0>), (<11>, <10>)]","{<9>: [<2>, <8>, <7>],
<2>: [<10>],
<8>: [<12>, <0>],
<7>: [<4>],
<10>: [],
<6>: [<10>],
<4>: [<8>],
<12>: [],
<0>: [],
<3>: [<10>, <2>, <6>, <1>, <12>],
<1>: [<10>, <9>, <4>],
<5>: [<1>],
<11>: [<9>, <0>, <10>]}","Node <9> is connected to nodes <2>, <8>, <7>.
Node <2> is connected to node <10>.
Node <8> is connected to nodes <12>, <0>.
Node <7> is connected to node <4>.
Node <6> is connected to node <10>.
Node <4> is connected to node <8>.
Node <3> is connected to nodes <10>, <2>, <6>, <1>, <12>.
Node <1> is connected to nodes <10>, <9>, <4>.
Node <5> is connected to node <1>.
Node <11> is connected to nodes <9>, <0>, <10>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>]",13,21,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<3>, <5>, <11>, <6>, <1>, <9>, <2>, <7>, <10>, <4>, <8>, <12>, <0>]","Let's solve it step by step.
Nodes with 0 in-degree: [<3>, <5>, <11>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <11>, <6>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<11>, <6>, <1>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <1>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <7>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <10>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<10>, <4>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<12>, <0>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
So the result of topological sorting is ","('[[<3>, <5>, <11>, <6>, <1>, <9>, <4>, <12>, <0>, <7>, <2>, <8>, <10>], [<3>, <5>, <11>, <6>, <1>, <9>, <2>, <7>, <10>, <4>, <8>, <12>, <0>], [<3>, <4>, <6>, <9>, <8>, <2>, <0>, <7>, <10>, <12>, <5>, <1>, <11>], [<3>, <5>, <11>, <6>, <4>, <8>, <12>, <0>, <1>, <9>, <2>, <7>, <10>]]',)",1,22
topological_sort,"[(<12>, <6>), (<6>, <4>), (<6>, <11>), (<6>, <8>), (<4>, <0>), (<4>, <11>), (<4>, <13>), (<11>, <0>), (<11>, <2>), (<11>, <9>), (<8>, <3>), (<0>, <7>), (<0>, <3>), (<2>, <9>), (<7>, <9>), (<3>, <1>), (<5>, <3>), (<5>, <2>), (<5>, <12>), (<1>, <2>), (<10>, <2>), (<10>, <1>)]","{<12>: [<6>],
<6>: [<4>, <11>, <8>],
<4>: [<0>, <11>, <13>],
<11>: [<0>, <2>, <9>],
<8>: [<3>],
<0>: [<7>, <3>],
<2>: [<9>],
<9>: [],
<7>: [<9>],
<3>: [<1>],
<13>: [],
<5>: [<3>, <2>, <12>],
<1>: [<2>],
<10>: [<2>, <1>]}","Node <12> is connected to node <6>.
Node <6> is connected to nodes <4>, <11>, <8>.
Node <4> is connected to nodes <0>, <11>, <13>.
Node <11> is connected to nodes <0>, <2>, <9>.
Node <8> is connected to node <3>.
Node <0> is connected to nodes <7>, <3>.
Node <2> is connected to node <9>.
Node <7> is connected to node <9>.
Node <3> is connected to node <1>.
Node <5> is connected to nodes <3>, <2>, <12>.
Node <1> is connected to node <2>.
Node <10> is connected to nodes <2>, <1>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>]",14,22,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<5>, <10>, <12>, <6>, <4>, <8>, <11>, <13>, <0>, <7>, <3>, <1>, <2>, <9>]","Let's solve it step by step.
Nodes with 0 in-degree: [<5>, <10>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<10>, <12>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<12>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <8>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<8>, <11>, <13>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<11>, <13>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<13>, <0>].
Visit node <13> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <3>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
So the result of topological sorting is ","('[[<5>, <10>, <12>, <6>, <4>, <8>, <11>, <13>, <0>, <7>, <3>, <1>, <2>, <9>], [<5>, <6>, <13>, <8>, <9>, <3>, <7>, <1>, <4>, <0>, <12>, <2>, <11>, <10>], [<5>, <10>, <12>, <6>, <3>, <1>, <2>, <9>, <4>, <8>, <11>, <13>, <0>, <7>], [<5>, <10>, <12>, <6>, <4>, <8>, <11>, <13>, <7>, <1>, <3>, <9>, <0>, <2>]]',)",0,23
topological_sort,"[(<7>, <9>), (<7>, <1>), (<9>, <3>), (<9>, <8>), (<1>, <9>), (<3>, <5>), (<8>, <4>), (<0>, <3>), (<0>, <9>), (<0>, <4>), (<0>, <1>), (<5>, <8>), (<6>, <5>), (<6>, <1>), (<6>, <0>), (<2>, <7>), (<2>, <3>), (<2>, <5>)]","{<7>: [<9>, <1>],
<9>: [<3>, <8>],
<1>: [<9>],
<3>: [<5>],
<8>: [<4>],
<0>: [<3>, <9>, <4>, <1>],
<4>: [],
<5>: [<8>],
<6>: [<5>, <1>, <0>],
<2>: [<7>, <3>, <5>]}","Node <7> is connected to nodes <9>, <1>.
Node <9> is connected to nodes <3>, <8>.
Node <1> is connected to node <9>.
Node <3> is connected to node <5>.
Node <8> is connected to node <4>.
Node <0> is connected to nodes <3>, <9>, <4>, <1>.
Node <5> is connected to node <8>.
Node <6> is connected to nodes <5>, <1>, <0>.
Node <2> is connected to nodes <7>, <3>, <5>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>]",10,18,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<6>, <2>, <0>, <7>, <1>, <9>, <3>, <5>, <8>, <4>]","Let's solve it step by step.
Nodes with 0 in-degree: [<6>, <2>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <0>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <7>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
So the result of topological sorting is ","('[[<6>, <2>, <0>, <7>, <1>, <9>, <4>, <8>, <5>, <3>], [<6>, <2>, <0>, <7>, <1>, <9>, <3>, <5>, <8>, <4>], [<6>, <2>, <0>, <5>, <8>, <4>, <7>, <1>, <9>, <3>], [<6>, <8>, <9>, <3>, <0>, <4>, <1>, <7>, <5>, <2>]]',)",1,24
topological_sort,"[(<7>, <3>), (<7>, <6>), (<3>, <2>), (<3>, <4>), (<3>, <1>), (<2>, <5>), (<4>, <2>), (<4>, <6>), (<1>, <2>), (<1>, <5>), (<1>, <6>), (<1>, <4>), (<0>, <1>), (<0>, <4>), (<5>, <6>)]","{<7>: [<3>, <6>],
<3>: [<2>, <4>, <1>],
<6>: [],
<2>: [<5>],
<4>: [<2>, <6>],
<1>: [<2>, <5>, <6>, <4>],
<0>: [<1>, <4>],
<5>: [<6>]}","Node <7> is connected to nodes <3>, <6>.
Node <3> is connected to nodes <2>, <4>, <1>.
Node <2> is connected to node <5>.
Node <4> is connected to nodes <2>, <6>.
Node <1> is connected to nodes <2>, <5>, <6>, <4>.
Node <0> is connected to nodes <1>, <4>.
Node <5> is connected to node <6>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>]",8,15,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<7>, <0>, <3>, <1>, <4>, <2>, <5>, <6>]","Let's solve it step by step.
Nodes with 0 in-degree: [<7>, <0>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <3>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
So the result of topological sorting is ","('[[<7>, <0>, <3>, <1>, <4>, <2>, <5>, <6>], [<7>, <0>, <3>, <1>, <6>, <2>, <4>, <5>], [<7>, <0>, <5>, <6>, <3>, <1>, <4>, <2>], [<7>, <1>, <6>, <2>, <0>, <3>, <5>, <4>]]',)",0,25
topological_sort,"[(<3>, <5>), (<3>, <4>), (<4>, <5>), (<2>, <3>), (<2>, <0>), (<2>, <5>), (<2>, <4>), (<0>, <5>), (<0>, <4>), (<7>, <2>), (<7>, <0>), (<7>, <5>), (<7>, <4>), (<6>, <2>), (<6>, <1>), (<6>, <4>), (<1>, <0>), (<1>, <5>), (<1>, <3>)]","{<3>: [<5>, <4>],
<5>: [],
<4>: [<5>],
<2>: [<3>, <0>, <5>, <4>],
<0>: [<5>, <4>],
<7>: [<2>, <0>, <5>, <4>],
<6>: [<2>, <1>, <4>],
<1>: [<0>, <5>, <3>]}","Node <3> is connected to nodes <5>, <4>.
Node <4> is connected to node <5>.
Node <2> is connected to nodes <3>, <0>, <5>, <4>.
Node <0> is connected to nodes <5>, <4>.
Node <7> is connected to nodes <2>, <0>, <5>, <4>.
Node <6> is connected to nodes <2>, <1>, <4>.
Node <1> is connected to nodes <0>, <5>, <3>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>]",8,19,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<7>, <6>, <2>, <1>, <0>, <3>, <4>, <5>]","Let's solve it step by step.
Nodes with 0 in-degree: [<7>, <6>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <1>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <3>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
So the result of topological sorting is ","('[[<7>, <6>, <2>, <1>, <0>, <3>, <4>, <5>], [<7>, <6>, <2>, <1>, <0>, <3>, <4>, <5>], [<7>, <3>, <5>, <1>, <4>, <0>, <6>, <2>], [<7>, <6>, <4>, <5>, <2>, <1>, <0>, <3>]]',)",1,26
topological_sort,"[(<11>, <8>), (<11>, <0>), (<8>, <0>), (<8>, <3>), (<0>, <3>), (<0>, <13>), (<1>, <5>), (<1>, <10>), (<1>, <8>), (<1>, <6>), (<5>, <6>), (<5>, <12>), (<5>, <3>), (<10>, <6>), (<10>, <13>), (<10>, <3>), (<10>, <11>), (<10>, <5>), (<6>, <12>), (<6>, <8>), (<6>, <13>), (<6>, <0>), (<12>, <11>), (<7>, <3>), (<7>, <11>), (<7>, <1>), (<7>, <6>), (<7>, <10>), (<7>, <12>), (<9>, <5>), (<9>, <7>), (<9>, <2>), (<9>, <6>), (<9>, <1>), (<9>, <10>), (<2>, <4>), (<2>, <12>), (<2>, <3>), (<2>, <0>), (<2>, <10>), (<2>, <6>), (<4>, <11>), (<4>, <7>), (<4>, <3>), (<4>, <12>), (<4>, <6>)]","{<11>: [<8>, <0>],
<8>: [<0>, <3>],
<0>: [<3>, <13>],
<3>: [],
<1>: [<5>, <10>, <8>, <6>],
<5>: [<6>, <12>, <3>],
<10>: [<6>, <13>, <3>, <11>, <5>],
<6>: [<12>, <8>, <13>, <0>],
<12>: [<11>],
<13>: [],
<7>: [<3>, <11>, <1>, <6>, <10>, <12>],
<9>: [<5>, <7>, <2>, <6>, <1>, <10>],
<2>: [<4>, <12>, <3>, <0>, <10>, <6>],
<4>: [<11>, <7>, <3>, <12>, <6>]}","Node <11> is connected to nodes <8>, <0>.
Node <8> is connected to nodes <0>, <3>.
Node <0> is connected to nodes <3>, <13>.
Node <1> is connected to nodes <5>, <10>, <8>, <6>.
Node <5> is connected to nodes <6>, <12>, <3>.
Node <10> is connected to nodes <6>, <13>, <3>, <11>, <5>.
Node <6> is connected to nodes <12>, <8>, <13>, <0>.
Node <12> is connected to node <11>.
Node <7> is connected to nodes <3>, <11>, <1>, <6>, <10>, <12>.
Node <9> is connected to nodes <5>, <7>, <2>, <6>, <1>, <10>.
Node <2> is connected to nodes <4>, <12>, <3>, <0>, <10>, <6>.
Node <4> is connected to nodes <11>, <7>, <3>, <12>, <6>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>]",14,46,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<9>, <2>, <4>, <7>, <1>, <10>, <5>, <6>, <12>, <11>, <8>, <0>, <3>, <13>]","Let's solve it step by step.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<12>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<11>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <13>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<13>].
Visit node <13> and remove it from the graph.
So the result of topological sorting is ","('[[<9>, <2>, <4>, <7>, <1>, <10>, <5>, <6>, <12>, <11>, <8>, <0>, <3>, <13>], [<9>, <2>, <4>, <7>, <8>, <0>, <3>, <13>, <1>, <10>, <5>, <6>, <12>, <11>], [<9>, <2>, <4>, <7>, <1>, <10>, <5>, <6>, <0>, <3>, <8>, <12>, <13>, <11>], [<9>, <1>, <4>, <12>, <11>, <0>, <5>, <7>, <13>, <6>, <2>, <3>, <10>, <8>]]',)",0,27
topological_sort,"[(<5>, <4>), (<5>, <3>), (<5>, <2>), (<4>, <2>), (<3>, <6>), (<3>, <1>), (<2>, <6>), (<2>, <3>), (<0>, <2>), (<0>, <1>), (<0>, <4>), (<6>, <1>), (<7>, <0>), (<7>, <3>), (<7>, <2>), (<7>, <5>)]","{<5>: [<4>, <3>, <2>],
<4>: [<2>],
<3>: [<6>, <1>],
<2>: [<6>, <3>],
<0>: [<2>, <1>, <4>],
<1>: [],
<6>: [<1>],
<7>: [<0>, <3>, <2>, <5>]}","Node <5> is connected to nodes <4>, <3>, <2>.
Node <4> is connected to node <2>.
Node <3> is connected to nodes <6>, <1>.
Node <2> is connected to nodes <6>, <3>.
Node <0> is connected to nodes <2>, <1>, <4>.
Node <6> is connected to node <1>.
Node <7> is connected to nodes <0>, <3>, <2>, <5>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>]",8,16,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<7>, <0>, <5>, <4>, <2>, <3>, <6>, <1>]","Let's solve it step by step.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <5>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
So the result of topological sorting is ","('[[<7>, <0>, <5>, <4>, <2>, <3>, <6>, <1>], [<7>, <0>, <6>, <1>, <5>, <4>, <2>, <3>], [<7>, <0>, <1>, <4>, <5>, <6>, <2>, <3>], [<7>, <0>, <5>, <4>, <2>, <6>, <1>, <3>]]',)",0,28
topological_sort,"[(<1>, <4>), (<1>, <5>), (<1>, <7>), (<4>, <13>), (<5>, <0>), (<5>, <12>), (<5>, <9>), (<7>, <10>), (<7>, <13>), (<7>, <9>), (<7>, <4>), (<10>, <3>), (<9>, <10>), (<3>, <13>), (<3>, <4>), (<0>, <4>), (<0>, <10>), (<12>, <7>), (<12>, <2>), (<12>, <0>), (<2>, <4>), (<2>, <7>), (<2>, <3>), (<6>, <3>), (<6>, <4>), (<6>, <10>), (<6>, <7>), (<6>, <11>), (<6>, <1>), (<11>, <0>), (<11>, <10>), (<11>, <12>), (<8>, <5>), (<8>, <12>)]","{<1>: [<4>, <5>, <7>],
<4>: [<13>],
<5>: [<0>, <12>, <9>],
<7>: [<10>, <13>, <9>, <4>],
<13>: [],
<10>: [<3>],
<9>: [<10>],
<3>: [<13>, <4>],
<0>: [<4>, <10>],
<12>: [<7>, <2>, <0>],
<2>: [<4>, <7>, <3>],
<6>: [<3>, <4>, <10>, <7>, <11>, <1>],
<11>: [<0>, <10>, <12>],
<8>: [<5>, <12>]}","Node <1> is connected to nodes <4>, <5>, <7>.
Node <4> is connected to node <13>.
Node <5> is connected to nodes <0>, <12>, <9>.
Node <7> is connected to nodes <10>, <13>, <9>, <4>.
Node <10> is connected to node <3>.
Node <9> is connected to node <10>.
Node <3> is connected to nodes <13>, <4>.
Node <0> is connected to nodes <4>, <10>.
Node <12> is connected to nodes <7>, <2>, <0>.
Node <2> is connected to nodes <4>, <7>, <3>.
Node <6> is connected to nodes <3>, <4>, <10>, <7>, <11>, <1>.
Node <11> is connected to nodes <0>, <10>, <12>.
Node <8> is connected to nodes <5>, <12>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>]",14,34,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<6>, <8>, <11>, <1>, <5>, <12>, <2>, <0>, <7>, <9>, <10>, <3>, <4>, <13>]","Let's solve it step by step.
Nodes with 0 in-degree: [<6>, <8>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<8>, <11>, <1>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<11>, <1>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<12>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <0>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <7>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<13>].
Visit node <13> and remove it from the graph.
So the result of topological sorting is ","('[[<6>, <8>, <11>, <1>, <5>, <12>, <2>, <0>, <7>, <9>, <10>, <3>, <4>, <13>], [<6>, <8>, <11>, <1>, <10>, <3>, <4>, <13>, <5>, <12>, <2>, <0>, <7>, <9>], [<6>, <8>, <11>, <1>, <5>, <12>, <2>, <4>, <3>, <9>, <7>, <10>, <13>, <0>], [<6>, <4>, <2>, <12>, <8>, <3>, <5>, <11>, <7>, <0>, <13>, <10>, <1>, <9>]]',)",0,29
topological_sort,"[(<3>, <8>), (<3>, <11>), (<3>, <9>), (<3>, <7>), (<8>, <9>), (<8>, <7>), (<7>, <9>), (<1>, <12>), (<1>, <7>), (<1>, <11>), (<12>, <9>), (<12>, <11>), (<12>, <0>), (<0>, <3>), (<2>, <12>), (<2>, <1>), (<2>, <9>), (<2>, <11>), (<10>, <7>), (<10>, <11>), (<10>, <3>), (<10>, <8>), (<10>, <4>), (<4>, <11>), (<4>, <0>), (<4>, <5>), (<4>, <6>), (<5>, <8>), (<5>, <9>), (<5>, <6>), (<5>, <3>), (<6>, <1>), (<6>, <7>), (<6>, <2>), (<6>, <8>)]","{<3>: [<8>, <11>, <9>, <7>],
<8>: [<9>, <7>],
<11>: [],
<9>: [],
<7>: [<9>],
<1>: [<12>, <7>, <11>],
<12>: [<9>, <11>, <0>],
<0>: [<3>],
<2>: [<12>, <1>, <9>, <11>],
<10>: [<7>, <11>, <3>, <8>, <4>],
<4>: [<11>, <0>, <5>, <6>],
<5>: [<8>, <9>, <6>, <3>],
<6>: [<1>, <7>, <2>, <8>]}","Node <3> is connected to nodes <8>, <11>, <9>, <7>.
Node <8> is connected to nodes <9>, <7>.
Node <7> is connected to node <9>.
Node <1> is connected to nodes <12>, <7>, <11>.
Node <12> is connected to nodes <9>, <11>, <0>.
Node <0> is connected to node <3>.
Node <2> is connected to nodes <12>, <1>, <9>, <11>.
Node <10> is connected to nodes <7>, <11>, <3>, <8>, <4>.
Node <4> is connected to nodes <11>, <0>, <5>, <6>.
Node <5> is connected to nodes <8>, <9>, <6>, <3>.
Node <6> is connected to nodes <1>, <7>, <2>, <8>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>]",13,35,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<10>, <4>, <5>, <6>, <2>, <1>, <12>, <0>, <3>, <8>, <11>, <7>, <9>]","Let's solve it step by step.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<12>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<8>, <11>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<11>, <7>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
So the result of topological sorting is ","('[[<10>, <4>, <5>, <6>, <2>, <1>, <7>, <8>, <11>, <12>, <9>, <0>, <3>], [<10>, <4>, <5>, <6>, <2>, <1>, <12>, <0>, <3>, <8>, <11>, <7>, <9>], [<10>, <4>, <2>, <3>, <12>, <1>, <7>, <11>, <6>, <9>, <5>, <0>, <8>], [<10>, <4>, <5>, <6>, <8>, <11>, <7>, <9>, <2>, <1>, <12>, <0>, <3>]]',)",1,30
topological_sort,"[(<12>, <0>), (<12>, <1>), (<12>, <10>), (<12>, <11>), (<1>, <0>), (<10>, <0>), (<10>, <5>), (<11>, <10>), (<11>, <2>), (<11>, <3>), (<11>, <6>), (<8>, <2>), (<8>, <5>), (<8>, <6>), (<8>, <1>), (<8>, <3>), (<2>, <0>), (<2>, <3>), (<2>, <1>), (<5>, <1>), (<5>, <9>), (<6>, <9>), (<6>, <10>), (<6>, <2>), (<3>, <9>), (<3>, <1>), (<3>, <7>), (<9>, <0>), (<7>, <1>), (<7>, <10>), (<7>, <5>), (<4>, <1>), (<4>, <3>), (<4>, <12>), (<4>, <10>), (<4>, <7>), (<4>, <5>), (<4>, <0>)]","{<12>: [<0>, <1>, <10>, <11>],
<0>: [],
<1>: [<0>],
<10>: [<0>, <5>],
<11>: [<10>, <2>, <3>, <6>],
<8>: [<2>, <5>, <6>, <1>, <3>],
<2>: [<0>, <3>, <1>],
<5>: [<1>, <9>],
<6>: [<9>, <10>, <2>],
<3>: [<9>, <1>, <7>],
<9>: [<0>],
<7>: [<1>, <10>, <5>],
<4>: [<1>, <3>, <12>, <10>, <7>, <5>, <0>]}","Node <12> is connected to nodes <0>, <1>, <10>, <11>.
Node <1> is connected to node <0>.
Node <10> is connected to nodes <0>, <5>.
Node <11> is connected to nodes <10>, <2>, <3>, <6>.
Node <8> is connected to nodes <2>, <5>, <6>, <1>, <3>.
Node <2> is connected to nodes <0>, <3>, <1>.
Node <5> is connected to nodes <1>, <9>.
Node <6> is connected to nodes <9>, <10>, <2>.
Node <3> is connected to nodes <9>, <1>, <7>.
Node <9> is connected to node <0>.
Node <7> is connected to nodes <1>, <10>, <5>.
Node <4> is connected to nodes <1>, <3>, <12>, <10>, <7>, <5>, <0>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>]",13,38,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<8>, <4>, <12>, <11>, <6>, <2>, <3>, <7>, <10>, <5>, <1>, <9>, <0>]","Let's solve it step by step.
Nodes with 0 in-degree: [<8>, <4>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<12>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<11>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <9>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
So the result of topological sorting is ","('[[<8>, <4>, <12>, <11>, <6>, <2>, <10>, <5>, <9>, <3>, <0>, <1>, <7>], [<8>, <4>, <12>, <11>, <5>, <1>, <9>, <0>, <6>, <2>, <3>, <7>, <10>], [<8>, <4>, <12>, <11>, <6>, <2>, <3>, <7>, <10>, <5>, <1>, <9>, <0>], [<8>, <1>, <7>, <0>, <12>, <11>, <2>, <4>, <10>, <9>, <3>, <5>, <6>]]',)",2,31
topological_sort,"[(<5>, <2>), (<5>, <0>), (<5>, <6>), (<5>, <11>), (<0>, <9>), (<0>, <13>), (<0>, <4>), (<0>, <10>), (<6>, <3>), (<6>, <1>), (<6>, <12>), (<11>, <1>), (<11>, <6>), (<1>, <9>), (<12>, <1>), (<13>, <6>), (<4>, <6>), (<4>, <2>), (<4>, <3>), (<7>, <8>), (<7>, <5>), (<8>, <0>), (<8>, <2>), (<8>, <13>), (<14>, <12>), (<14>, <5>)]","{<5>: [<2>, <0>, <6>, <11>],
<2>: [],
<0>: [<9>, <13>, <4>, <10>],
<6>: [<3>, <1>, <12>],
<11>: [<1>, <6>],
<3>: [],
<1>: [<9>],
<12>: [<1>],
<9>: [],
<13>: [<6>],
<4>: [<6>, <2>, <3>],
<10>: [],
<7>: [<8>, <5>],
<8>: [<0>, <2>, <13>],
<14>: [<12>, <5>]}","Node <5> is connected to nodes <2>, <0>, <6>, <11>.
Node <0> is connected to nodes <9>, <13>, <4>, <10>.
Node <6> is connected to nodes <3>, <1>, <12>.
Node <11> is connected to nodes <1>, <6>.
Node <1> is connected to node <9>.
Node <12> is connected to node <1>.
Node <13> is connected to node <6>.
Node <4> is connected to nodes <6>, <2>, <3>.
Node <7> is connected to nodes <8>, <5>.
Node <8> is connected to nodes <0>, <2>, <13>.
Node <14> is connected to nodes <12>, <5>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>, <14>]",15,26,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<7>, <14>, <8>, <5>, <0>, <11>, <13>, <4>, <10>, <6>, <2>, <3>, <12>, <1>, <9>]","Let's solve it step by step.
Nodes with 0 in-degree: [<7>, <14>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<14>, <8>].
Visit node <14> and remove it from the graph.
Nodes with 0 in-degree: [<8>, <5>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <11>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<11>, <13>, <4>, <10>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<13>, <4>, <10>].
Visit node <13> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <10>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<10>, <6>, <2>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <2>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <3>, <12>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <12>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<12>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
So the result of topological sorting is ","('[[<7>, <14>, <8>, <5>, <0>, <2>, <3>, <12>, <1>, <9>, <11>, <13>, <4>, <10>, <6>], [<7>, <14>, <1>, <3>, <12>, <13>, <9>, <4>, <5>, <11>, <2>, <10>, <6>, <0>, <8>], [<7>, <14>, <8>, <5>, <0>, <11>, <13>, <10>, <6>, <3>, <1>, <2>, <9>, <4>, <12>], [<7>, <14>, <8>, <5>, <0>, <11>, <13>, <4>, <10>, <6>, <2>, <3>, <12>, <1>, <9>]]',)",3,32
topological_sort,"[(<4>, <2>), (<4>, <7>), (<2>, <5>), (<2>, <7>), (<7>, <5>), (<5>, <3>), (<1>, <3>), (<1>, <7>), (<1>, <6>), (<6>, <4>), (<0>, <7>)]","{<4>: [<2>, <7>],
<2>: [<5>, <7>],
<7>: [<5>],
<5>: [<3>],
<1>: [<3>, <7>, <6>],
<3>: [],
<6>: [<4>],
<0>: [<7>]}","Node <4> is connected to nodes <2>, <7>.
Node <2> is connected to nodes <5>, <7>.
Node <7> is connected to node <5>.
Node <5> is connected to node <3>.
Node <1> is connected to nodes <3>, <7>, <6>.
Node <6> is connected to node <4>.
Node <0> is connected to node <7>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>]",8,11,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<1>, <0>, <6>, <4>, <2>, <7>, <5>, <3>]","Let's solve it step by step.
Nodes with 0 in-degree: [<1>, <0>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <6>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
So the result of topological sorting is ","('[[<1>, <0>, <5>, <3>, <6>, <4>, <2>, <7>], [<1>, <0>, <6>, <4>, <7>, <3>, <2>, <5>], [<1>, <0>, <6>, <4>, <2>, <7>, <5>, <3>], [<1>, <6>, <0>, <2>, <5>, <3>, <7>, <4>]]',)",2,33
topological_sort,"[(<0>, <7>), (<4>, <7>), (<2>, <6>), (<2>, <0>), (<6>, <3>), (<3>, <4>), (<3>, <0>), (<5>, <8>), (<5>, <2>), (<8>, <4>), (<8>, <2>), (<1>, <4>), (<1>, <8>)]","{<0>: [<7>],
<7>: [],
<4>: [<7>],
<2>: [<6>, <0>],
<6>: [<3>],
<3>: [<4>, <0>],
<5>: [<8>, <2>],
<8>: [<4>, <2>],
<1>: [<4>, <8>]}","Node <0> is connected to node <7>.
Node <4> is connected to node <7>.
Node <2> is connected to nodes <6>, <0>.
Node <6> is connected to node <3>.
Node <3> is connected to nodes <4>, <0>.
Node <5> is connected to nodes <8>, <2>.
Node <8> is connected to nodes <4>, <2>.
Node <1> is connected to nodes <4>, <8>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>]",9,13,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<5>, <1>, <8>, <2>, <6>, <3>, <4>, <0>, <7>]","Let's solve it step by step.
Nodes with 0 in-degree: [<5>, <1>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <0>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
So the result of topological sorting is ","('[[<5>, <1>, <8>, <2>, <6>, <3>, <4>, <0>, <7>], [<5>, <1>, <8>, <2>, <3>, <0>, <7>, <4>, <6>], [<5>, <2>, <1>, <8>, <3>, <4>, <0>, <7>, <6>], [<5>, <1>, <8>, <4>, <0>, <7>, <2>, <6>, <3>]]',)",0,34
topological_sort,"[(<1>, <12>), (<3>, <12>), (<3>, <11>), (<3>, <6>), (<3>, <4>), (<11>, <4>), (<11>, <12>), (<6>, <10>), (<6>, <2>), (<4>, <1>), (<9>, <8>), (<9>, <3>), (<9>, <10>), (<9>, <0>), (<9>, <2>), (<9>, <5>), (<9>, <1>), (<9>, <4>), (<8>, <4>), (<10>, <1>), (<10>, <4>), (<10>, <2>), (<0>, <10>), (<5>, <4>), (<5>, <10>), (<5>, <8>), (<5>, <12>), (<5>, <6>), (<5>, <2>), (<5>, <0>), (<7>, <1>), (<7>, <12>), (<7>, <4>), (<7>, <11>), (<7>, <5>), (<7>, <6>)]","{<1>: [<12>],
<12>: [],
<3>: [<12>, <11>, <6>, <4>],
<11>: [<4>, <12>],
<6>: [<10>, <2>],
<4>: [<1>],
<9>: [<8>, <3>, <10>, <0>, <2>, <5>, <1>, <4>],
<8>: [<4>],
<10>: [<1>, <4>, <2>],
<0>: [<10>],
<2>: [],
<5>: [<4>, <10>, <8>, <12>, <6>, <2>, <0>],
<7>: [<1>, <12>, <4>, <11>, <5>, <6>]}","Node <1> is connected to node <12>.
Node <3> is connected to nodes <12>, <11>, <6>, <4>.
Node <11> is connected to nodes <4>, <12>.
Node <6> is connected to nodes <10>, <2>.
Node <4> is connected to node <1>.
Node <9> is connected to nodes <8>, <3>, <10>, <0>, <2>, <5>, <1>, <4>.
Node <8> is connected to node <4>.
Node <10> is connected to nodes <1>, <4>, <2>.
Node <0> is connected to node <10>.
Node <5> is connected to nodes <4>, <10>, <8>, <12>, <6>, <2>, <0>.
Node <7> is connected to nodes <1>, <12>, <4>, <11>, <5>, <6>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>]",13,36,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<9>, <7>, <3>, <5>, <11>, <8>, <6>, <0>, <10>, <4>, <2>, <1>, <12>]","Let's solve it step by step.
Nodes with 0 in-degree: [<9>, <7>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <3>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <5>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <11>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<11>, <8>, <6>, <0>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<8>, <6>, <0>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <0>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <2>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <1>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<12>].
Visit node <12> and remove it from the graph.
So the result of topological sorting is ","('[[<9>, <7>, <3>, <5>, <11>, <8>, <2>, <10>, <1>, <4>, <0>, <12>, <6>], [<9>, <7>, <3>, <5>, <11>, <8>, <6>, <0>, <10>, <4>, <2>, <1>, <12>], [<9>, <7>, <3>, <5>, <4>, <2>, <1>, <12>, <11>, <8>, <6>, <0>, <10>], [<9>, <10>, <11>, <1>, <0>, <4>, <7>, <5>, <2>, <3>, <12>, <6>, <8>]]',)",1,35
topological_sort,"[(<4>, <6>), (<4>, <5>), (<6>, <0>), (<6>, <5>), (<5>, <3>), (<5>, <2>), (<1>, <2>), (<1>, <7>), (<1>, <3>), (<1>, <6>), (<7>, <8>), (<7>, <6>), (<7>, <0>), (<8>, <6>), (<8>, <5>)]","{<4>: [<6>, <5>],
<6>: [<0>, <5>],
<5>: [<3>, <2>],
<0>: [],
<1>: [<2>, <7>, <3>, <6>],
<2>: [],
<7>: [<8>, <6>, <0>],
<3>: [],
<8>: [<6>, <5>]}","Node <4> is connected to nodes <6>, <5>.
Node <6> is connected to nodes <0>, <5>.
Node <5> is connected to nodes <3>, <2>.
Node <1> is connected to nodes <2>, <7>, <3>, <6>.
Node <7> is connected to nodes <8>, <6>, <0>.
Node <8> is connected to nodes <6>, <5>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>]",9,15,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<4>, <1>, <7>, <8>, <6>, <0>, <5>, <3>, <2>]","Let's solve it step by step.
Nodes with 0 in-degree: [<4>, <1>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <5>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <2>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
So the result of topological sorting is ","('[[<4>, <1>, <7>, <5>, <3>, <2>, <8>, <6>, <0>], [<4>, <1>, <7>, <8>, <6>, <0>, <5>, <3>, <2>], [<4>, <8>, <3>, <7>, <1>, <2>, <6>, <0>, <5>], [<4>, <1>, <7>, <8>, <3>, <6>, <2>, <5>, <0>]]',)",1,36
topological_sort,"[(<2>, <1>), (<2>, <3>), (<2>, <5>), (<1>, <4>), (<1>, <7>), (<1>, <3>), (<4>, <3>), (<4>, <5>), (<7>, <5>), (<7>, <3>), (<0>, <3>), (<0>, <2>), (<0>, <1>), (<6>, <0>), (<6>, <1>), (<6>, <2>), (<6>, <4>)]","{<2>: [<1>, <3>, <5>],
<1>: [<4>, <7>, <3>],
<3>: [],
<5>: [],
<4>: [<3>, <5>],
<7>: [<5>, <3>],
<0>: [<3>, <2>, <1>],
<6>: [<0>, <1>, <2>, <4>]}","Node <2> is connected to nodes <1>, <3>, <5>.
Node <1> is connected to nodes <4>, <7>, <3>.
Node <4> is connected to nodes <3>, <5>.
Node <7> is connected to nodes <5>, <3>.
Node <0> is connected to nodes <3>, <2>, <1>.
Node <6> is connected to nodes <0>, <1>, <2>, <4>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>]",8,17,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<6>, <0>, <2>, <1>, <4>, <7>, <5>, <3>]","Let's solve it step by step.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <7>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <3>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
So the result of topological sorting is ","('[[<6>, <7>, <4>, <0>, <1>, <5>, <2>, <3>], [<6>, <0>, <2>, <1>, <4>, <7>, <5>, <3>], [<6>, <0>, <2>, <1>, <3>, <5>, <7>, <4>], [<6>, <0>, <5>, <3>, <2>, <1>, <4>, <7>]]',)",1,37
topological_sort,"[(<5>, <12>), (<5>, <9>), (<5>, <7>), (<5>, <4>), (<5>, <13>), (<12>, <6>), (<9>, <6>), (<9>, <13>), (<9>, <0>), (<7>, <8>), (<7>, <1>), (<7>, <0>), (<4>, <6>), (<4>, <9>), (<4>, <0>), (<4>, <14>), (<4>, <12>), (<8>, <2>), (<8>, <3>), (<1>, <6>), (<0>, <13>), (<2>, <11>), (<2>, <1>), (<2>, <4>), (<2>, <13>), (<2>, <0>), (<2>, <3>), (<3>, <0>), (<3>, <9>), (<3>, <13>), (<3>, <1>), (<3>, <12>), (<10>, <1>), (<10>, <11>), (<10>, <7>), (<10>, <13>), (<10>, <5>), (<10>, <0>), (<10>, <4>), (<11>, <1>), (<11>, <13>), (<11>, <9>), (<11>, <3>), (<11>, <12>), (<11>, <4>), (<11>, <6>), (<14>, <3>), (<14>, <12>), (<14>, <9>)]","{<5>: [<12>, <9>, <7>, <4>, <13>],
<12>: [<6>],
<9>: [<6>, <13>, <0>],
<7>: [<8>, <1>, <0>],
<4>: [<6>, <9>, <0>, <14>, <12>],
<13>: [],
<6>: [],
<8>: [<2>, <3>],
<1>: [<6>],
<0>: [<13>],
<2>: [<11>, <1>, <4>, <13>, <0>, <3>],
<3>: [<0>, <9>, <13>, <1>, <12>],
<10>: [<1>, <11>, <7>, <13>, <5>, <0>, <4>],
<11>: [<1>, <13>, <9>, <3>, <12>, <4>, <6>],
<14>: [<3>, <12>, <9>]}","Node <5> is connected to nodes <12>, <9>, <7>, <4>, <13>.
Node <12> is connected to node <6>.
Node <9> is connected to nodes <6>, <13>, <0>.
Node <7> is connected to nodes <8>, <1>, <0>.
Node <4> is connected to nodes <6>, <9>, <0>, <14>, <12>.
Node <8> is connected to nodes <2>, <3>.
Node <1> is connected to node <6>.
Node <0> is connected to node <13>.
Node <2> is connected to nodes <11>, <1>, <4>, <13>, <0>, <3>.
Node <3> is connected to nodes <0>, <9>, <13>, <1>, <12>.
Node <10> is connected to nodes <1>, <11>, <7>, <13>, <5>, <0>, <4>.
Node <11> is connected to nodes <1>, <13>, <9>, <3>, <12>, <4>, <6>.
Node <14> is connected to nodes <3>, <12>, <9>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>, <14>]",15,49,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<10>, <5>, <7>, <8>, <2>, <11>, <4>, <14>, <3>, <9>, <1>, <12>, <0>, <6>, <13>]","Let's solve it step by step.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<11>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<14>].
Visit node <14> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<9>, <1>, <12>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <12>, <0>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<12>, <0>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <6>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <13>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<13>].
Visit node <13> and remove it from the graph.
So the result of topological sorting is ","('[[<10>, <5>, <7>, <8>, <2>, <11>, <4>, <14>, <3>, <9>, <1>, <12>, <0>, <6>, <13>], [<10>, <5>, <7>, <8>, <2>, <11>, <4>, <12>, <9>, <13>, <6>, <1>, <14>, <3>, <0>], [<10>, <5>, <7>, <8>, <2>, <1>, <12>, <0>, <6>, <13>, <11>, <4>, <14>, <3>, <9>], [<10>, <0>, <8>, <4>, <13>, <9>, <1>, <5>, <12>, <7>, <2>, <6>, <11>, <14>, <3>]]',)",0,38
topological_sort,"[(<2>, <0>), (<2>, <10>), (<2>, <12>), (<2>, <9>), (<2>, <11>), (<2>, <14>), (<0>, <14>), (<0>, <13>), (<0>, <9>), (<10>, <9>), (<10>, <14>), (<10>, <7>), (<12>, <11>), (<9>, <13>), (<9>, <7>), (<9>, <11>), (<9>, <8>), (<11>, <8>), (<14>, <12>), (<14>, <4>), (<14>, <13>), (<13>, <12>), (<7>, <8>), (<7>, <12>), (<7>, <13>), (<7>, <11>), (<1>, <14>), (<1>, <11>), (<1>, <5>), (<1>, <7>), (<1>, <0>), (<1>, <8>), (<5>, <4>), (<5>, <0>), (<4>, <9>), (<4>, <8>), (<4>, <13>), (<6>, <4>), (<6>, <9>), (<6>, <7>), (<6>, <1>), (<6>, <5>), (<6>, <12>), (<6>, <13>), (<6>, <0>), (<6>, <8>), (<6>, <10>), (<3>, <14>), (<3>, <9>), (<3>, <1>), (<3>, <6>), (<3>, <2>)]","{<2>: [<0>, <10>, <12>, <9>, <11>, <14>],
<0>: [<14>, <13>, <9>],
<10>: [<9>, <14>, <7>],
<12>: [<11>],
<9>: [<13>, <7>, <11>, <8>],
<11>: [<8>],
<14>: [<12>, <4>, <13>],
<13>: [<12>],
<7>: [<8>, <12>, <13>, <11>],
<1>: [<14>, <11>, <5>, <7>, <0>, <8>],
<5>: [<4>, <0>],
<8>: [],
<4>: [<9>, <8>, <13>],
<6>: [<4>, <9>, <7>, <1>, <5>, <12>, <13>, <0>, <8>, <10>],
<3>: [<14>, <9>, <1>, <6>, <2>]}","Node <2> is connected to nodes <0>, <10>, <12>, <9>, <11>, <14>.
Node <0> is connected to nodes <14>, <13>, <9>.
Node <10> is connected to nodes <9>, <14>, <7>.
Node <12> is connected to node <11>.
Node <9> is connected to nodes <13>, <7>, <11>, <8>.
Node <11> is connected to node <8>.
Node <14> is connected to nodes <12>, <4>, <13>.
Node <13> is connected to node <12>.
Node <7> is connected to nodes <8>, <12>, <13>, <11>.
Node <1> is connected to nodes <14>, <11>, <5>, <7>, <0>, <8>.
Node <5> is connected to nodes <4>, <0>.
Node <4> is connected to nodes <9>, <8>, <13>.
Node <6> is connected to nodes <4>, <9>, <7>, <1>, <5>, <12>, <13>, <0>, <8>, <10>.
Node <3> is connected to nodes <14>, <9>, <1>, <6>, <2>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>, <14>]",15,52,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<3>, <6>, <2>, <1>, <10>, <5>, <0>, <14>, <4>, <9>, <7>, <13>, <12>, <11>, <8>]","Let's solve it step by step.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <2>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <1>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <10>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<10>, <5>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<14>].
Visit node <14> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<13>].
Visit node <13> and remove it from the graph.
Nodes with 0 in-degree: [<12>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<11>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
So the result of topological sorting is ","('[[<3>, <1>, <0>, <11>, <6>, <7>, <13>, <8>, <4>, <14>, <10>, <12>, <2>, <9>, <5>], [<3>, <6>, <2>, <1>, <10>, <5>, <0>, <8>, <9>, <12>, <7>, <14>, <13>, <11>, <4>], [<3>, <6>, <2>, <1>, <10>, <5>, <0>, <14>, <4>, <9>, <7>, <13>, <12>, <11>, <8>], [<3>, <6>, <2>, <1>, <10>, <7>, <13>, <12>, <11>, <8>, <5>, <0>, <14>, <4>, <9>]]',)",2,39
topological_sort,"[(<7>, <6>), (<7>, <4>), (<7>, <8>), (<7>, <2>), (<8>, <6>), (<2>, <8>), (<0>, <2>), (<0>, <5>), (<0>, <1>), (<5>, <6>), (<5>, <7>), (<5>, <4>), (<1>, <8>), (<9>, <4>), (<9>, <6>), (<9>, <3>), (<9>, <0>), (<3>, <7>)]","{<7>: [<6>, <4>, <8>, <2>],
<6>: [],
<4>: [],
<8>: [<6>],
<2>: [<8>],
<0>: [<2>, <5>, <1>],
<5>: [<6>, <7>, <4>],
<1>: [<8>],
<9>: [<4>, <6>, <3>, <0>],
<3>: [<7>]}","Node <7> is connected to nodes <6>, <4>, <8>, <2>.
Node <8> is connected to node <6>.
Node <2> is connected to node <8>.
Node <0> is connected to nodes <2>, <5>, <1>.
Node <5> is connected to nodes <6>, <7>, <4>.
Node <1> is connected to node <8>.
Node <9> is connected to nodes <4>, <6>, <3>, <0>.
Node <3> is connected to node <7>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>]",10,18,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<9>, <3>, <0>, <5>, <1>, <7>, <4>, <2>, <8>, <6>]","Let's solve it step by step.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <0>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <1>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <7>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <2>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
So the result of topological sorting is ","('[[<9>, <3>, <0>, <2>, <8>, <6>, <5>, <1>, <7>, <4>], [<9>, <3>, <0>, <5>, <1>, <7>, <4>, <2>, <8>, <6>], [<9>, <4>, <2>, <6>, <8>, <1>, <7>, <0>, <3>, <5>], [<9>, <3>, <0>, <5>, <1>, <2>, <4>, <8>, <7>, <6>]]',)",1,40
topological_sort,"[(<6>, <2>), (<6>, <7>), (<6>, <5>), (<2>, <0>), (<2>, <5>), (<7>, <5>), (<7>, <1>), (<5>, <4>), (<5>, <0>), (<1>, <4>), (<1>, <2>), (<1>, <0>), (<4>, <0>), (<3>, <5>), (<3>, <0>), (<3>, <1>)]","{<6>: [<2>, <7>, <5>],
<2>: [<0>, <5>],
<7>: [<5>, <1>],
<5>: [<4>, <0>],
<0>: [],
<1>: [<4>, <2>, <0>],
<4>: [<0>],
<3>: [<5>, <0>, <1>]}","Node <6> is connected to nodes <2>, <7>, <5>.
Node <2> is connected to nodes <0>, <5>.
Node <7> is connected to nodes <5>, <1>.
Node <5> is connected to nodes <4>, <0>.
Node <1> is connected to nodes <4>, <2>, <0>.
Node <4> is connected to node <0>.
Node <3> is connected to nodes <5>, <0>, <1>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>]",8,16,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<6>, <3>, <7>, <1>, <2>, <5>, <4>, <0>]","Let's solve it step by step.
Nodes with 0 in-degree: [<6>, <3>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <7>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
So the result of topological sorting is ","('[[<6>, <0>, <2>, <7>, <5>, <4>, <1>, <3>], [<6>, <3>, <7>, <1>, <2>, <5>, <4>, <0>], [<6>, <3>, <7>, <1>, <0>, <5>, <4>, <2>], [<6>, <3>, <4>, <0>, <7>, <1>, <2>, <5>]]',)",1,41
topological_sort,"[(<9>, <4>), (<9>, <5>), (<9>, <2>), (<4>, <10>), (<5>, <8>), (<5>, <3>), (<5>, <1>), (<5>, <0>), (<10>, <1>), (<10>, <6>), (<10>, <8>), (<1>, <2>), (<6>, <8>), (<6>, <2>), (<6>, <3>), (<3>, <2>), (<0>, <3>), (<0>, <8>), (<7>, <10>), (<7>, <5>), (<7>, <4>), (<7>, <9>)]","{<9>: [<4>, <5>, <2>],
<4>: [<10>],
<5>: [<8>, <3>, <1>, <0>],
<2>: [],
<10>: [<1>, <6>, <8>],
<1>: [<2>],
<6>: [<8>, <2>, <3>],
<8>: [],
<3>: [<2>],
<0>: [<3>, <8>],
<7>: [<10>, <5>, <4>, <9>]}","Node <9> is connected to nodes <4>, <5>, <2>.
Node <4> is connected to node <10>.
Node <5> is connected to nodes <8>, <3>, <1>, <0>.
Node <10> is connected to nodes <1>, <6>, <8>.
Node <1> is connected to node <2>.
Node <6> is connected to nodes <8>, <2>, <3>.
Node <3> is connected to node <2>.
Node <0> is connected to nodes <3>, <8>.
Node <7> is connected to nodes <10>, <5>, <4>, <9>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>]",11,22,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<7>, <9>, <4>, <5>, <10>, <0>, <1>, <6>, <8>, <3>, <2>]","Let's solve it step by step.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <5>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <10>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<10>, <0>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <1>, <6>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <6>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<8>, <3>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
So the result of topological sorting is ","('[[<7>, <9>, <4>, <5>, <10>, <2>, <3>, <8>, <6>, <0>, <1>], [<7>, <9>, <4>, <5>, <10>, <0>, <1>, <6>, <8>, <3>, <2>], [<7>, <9>, <4>, <8>, <3>, <2>, <5>, <10>, <0>, <1>, <6>], [<7>, <5>, <10>, <9>, <8>, <1>, <2>, <0>, <3>, <4>, <6>]]',)",1,42
topological_sort,"[(<5>, <9>), (<5>, <0>), (<0>, <6>), (<11>, <3>), (<11>, <6>), (<3>, <2>), (<3>, <0>), (<3>, <4>), (<3>, <7>), (<2>, <5>), (<2>, <7>), (<4>, <8>), (<4>, <5>), (<7>, <6>), (<10>, <9>), (<10>, <11>), (<8>, <7>), (<1>, <7>)]","{<5>: [<9>, <0>],
<9>: [],
<0>: [<6>],
<11>: [<3>, <6>],
<3>: [<2>, <0>, <4>, <7>],
<6>: [],
<2>: [<5>, <7>],
<4>: [<8>, <5>],
<7>: [<6>],
<10>: [<9>, <11>],
<8>: [<7>],
<1>: [<7>]}","Node <5> is connected to nodes <9>, <0>.
Node <0> is connected to node <6>.
Node <11> is connected to nodes <3>, <6>.
Node <3> is connected to nodes <2>, <0>, <4>, <7>.
Node <2> is connected to nodes <5>, <7>.
Node <4> is connected to nodes <8>, <5>.
Node <7> is connected to node <6>.
Node <10> is connected to nodes <9>, <11>.
Node <8> is connected to node <7>.
Node <1> is connected to node <7>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>]",12,18,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<10>, <1>, <11>, <3>, <2>, <4>, <8>, <5>, <7>, <9>, <0>, <6>]","Let's solve it step by step.
Nodes with 0 in-degree: [<10>, <1>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <11>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<11>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <4>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<8>, <5>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <7>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <9>, <0>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<9>, <0>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
So the result of topological sorting is ","('[[<10>, <1>, <11>, <3>, <2>, <4>, <8>, <5>, <7>, <9>, <0>, <6>], [<10>, <1>, <11>, <3>, <7>, <9>, <0>, <6>, <2>, <4>, <8>, <5>], [<10>, <1>, <11>, <3>, <2>, <4>, <8>, <0>, <6>, <7>, <9>, <5>], [<10>, <6>, <4>, <7>, <5>, <11>, <1>, <8>, <2>, <3>, <9>, <0>]]',)",0,43
topological_sort,"[(<2>, <5>), (<2>, <6>), (<2>, <3>), (<5>, <6>), (<5>, <1>), (<5>, <4>), (<6>, <7>), (<3>, <4>), (<3>, <1>), (<4>, <6>), (<7>, <1>), (<0>, <2>), (<0>, <5>), (<0>, <1>), (<0>, <7>), (<0>, <4>), (<0>, <3>)]","{<2>: [<5>, <6>, <3>],
<5>: [<6>, <1>, <4>],
<6>: [<7>],
<3>: [<4>, <1>],
<1>: [],
<4>: [<6>],
<7>: [<1>],
<0>: [<2>, <5>, <1>, <7>, <4>, <3>]}","Node <2> is connected to nodes <5>, <6>, <3>.
Node <5> is connected to nodes <6>, <1>, <4>.
Node <6> is connected to node <7>.
Node <3> is connected to nodes <4>, <1>.
Node <4> is connected to node <6>.
Node <7> is connected to node <1>.
Node <0> is connected to nodes <2>, <5>, <1>, <7>, <4>, <3>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>]",8,17,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<0>, <2>, <5>, <3>, <4>, <6>, <7>, <1>]","Let's solve it step by step.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <3>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
So the result of topological sorting is ","('[[<0>, <2>, <5>, <3>, <4>, <6>, <7>, <1>], [<0>, <3>, <1>, <7>, <6>, <5>, <2>, <4>], [<0>, <2>, <5>, <3>, <1>, <6>, <7>, <4>], [<0>, <2>, <7>, <1>, <5>, <3>, <4>, <6>]]',)",0,44
topological_sort,"[(<4>, <11>), (<4>, <10>), (<4>, <6>), (<4>, <0>), (<11>, <6>), (<11>, <10>), (<11>, <8>), (<10>, <8>), (<6>, <10>), (<0>, <3>), (<3>, <1>), (<3>, <11>), (<1>, <7>), (<7>, <9>), (<7>, <11>), (<2>, <1>), (<2>, <4>), (<2>, <5>)]","{<4>: [<11>, <10>, <6>, <0>],
<11>: [<6>, <10>, <8>],
<10>: [<8>],
<6>: [<10>],
<0>: [<3>],
<8>: [],
<3>: [<1>, <11>],
<1>: [<7>],
<7>: [<9>, <11>],
<9>: [],
<2>: [<1>, <4>, <5>],
<5>: []}","Node <4> is connected to nodes <11>, <10>, <6>, <0>.
Node <11> is connected to nodes <6>, <10>, <8>.
Node <10> is connected to node <8>.
Node <6> is connected to node <10>.
Node <0> is connected to node <3>.
Node <3> is connected to nodes <1>, <11>.
Node <1> is connected to node <7>.
Node <7> is connected to nodes <9>, <11>.
Node <2> is connected to nodes <1>, <4>, <5>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>]",12,18,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<2>, <4>, <5>, <0>, <3>, <1>, <7>, <9>, <11>, <6>, <10>, <8>]","Let's solve it step by step.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <5>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <0>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<9>, <11>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<11>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
So the result of topological sorting is ","('[[<2>, <3>, <7>, <6>, <8>, <5>, <11>, <9>, <0>, <10>, <4>, <1>], [<2>, <4>, <5>, <0>, <3>, <1>, <11>, <8>, <9>, <7>, <6>, <10>], [<2>, <4>, <5>, <0>, <3>, <1>, <7>, <9>, <11>, <6>, <10>, <8>], [<2>, <4>, <5>, <0>, <11>, <6>, <10>, <8>, <3>, <1>, <7>, <9>]]',)",2,45
topological_sort,"[(<5>, <11>), (<5>, <12>), (<5>, <4>), (<5>, <3>), (<5>, <7>), (<5>, <9>), (<11>, <12>), (<4>, <12>), (<3>, <6>), (<7>, <11>), (<7>, <3>), (<7>, <10>), (<7>, <6>), (<9>, <12>), (<9>, <6>), (<1>, <7>), (<1>, <0>), (<1>, <10>), (<1>, <12>), (<1>, <9>), (<0>, <10>), (<0>, <2>), (<0>, <9>), (<0>, <12>), (<6>, <12>), (<2>, <11>), (<2>, <10>), (<2>, <9>), (<2>, <5>), (<2>, <6>), (<2>, <3>), (<2>, <12>), (<8>, <1>), (<8>, <10>), (<8>, <0>), (<8>, <3>)]","{<5>: [<11>, <12>, <4>, <3>, <7>, <9>],
<11>: [<12>],
<12>: [],
<4>: [<12>],
<3>: [<6>],
<7>: [<11>, <3>, <10>, <6>],
<9>: [<12>, <6>],
<1>: [<7>, <0>, <10>, <12>, <9>],
<0>: [<10>, <2>, <9>, <12>],
<10>: [],
<6>: [<12>],
<2>: [<11>, <10>, <9>, <5>, <6>, <3>, <12>],
<8>: [<1>, <10>, <0>, <3>]}","Node <5> is connected to nodes <11>, <12>, <4>, <3>, <7>, <9>.
Node <11> is connected to node <12>.
Node <4> is connected to node <12>.
Node <3> is connected to node <6>.
Node <7> is connected to nodes <11>, <3>, <10>, <6>.
Node <9> is connected to nodes <12>, <6>.
Node <1> is connected to nodes <7>, <0>, <10>, <12>, <9>.
Node <0> is connected to nodes <10>, <2>, <9>, <12>.
Node <6> is connected to node <12>.
Node <2> is connected to nodes <11>, <10>, <9>, <5>, <6>, <3>, <12>.
Node <8> is connected to nodes <1>, <10>, <0>, <3>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>]",13,36,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<8>, <1>, <0>, <2>, <5>, <4>, <7>, <9>, <11>, <3>, <10>, <6>, <12>]","Let's solve it step by step.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <7>, <9>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <9>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<9>, <11>, <3>, <10>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<11>, <3>, <10>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <10>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<10>, <6>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<12>].
Visit node <12> and remove it from the graph.
So the result of topological sorting is ","('[[<8>, <1>, <0>, <2>, <5>, <4>, <7>, <11>, <6>, <3>, <12>, <9>, <10>], [<8>, <1>, <0>, <2>, <5>, <4>, <7>, <9>, <11>, <3>, <10>, <6>, <12>], [<8>, <1>, <0>, <2>, <3>, <10>, <6>, <12>, <5>, <4>, <7>, <9>, <11>], [<8>, <5>, <0>, <6>, <3>, <1>, <10>, <12>, <2>, <7>, <4>, <9>, <11>]]',)",1,46
topological_sort,"[(<6>, <7>), (<6>, <4>), (<6>, <5>), (<6>, <8>), (<7>, <0>), (<7>, <3>), (<4>, <1>), (<4>, <7>), (<5>, <3>), (<5>, <7>), (<8>, <7>), (<0>, <3>), (<2>, <1>), (<2>, <5>), (<1>, <7>), (<1>, <8>), (<1>, <3>)]","{<6>: [<7>, <4>, <5>, <8>],
<7>: [<0>, <3>],
<4>: [<1>, <7>],
<5>: [<3>, <7>],
<8>: [<7>],
<0>: [<3>],
<3>: [],
<2>: [<1>, <5>],
<1>: [<7>, <8>, <3>]}","Node <6> is connected to nodes <7>, <4>, <5>, <8>.
Node <7> is connected to nodes <0>, <3>.
Node <4> is connected to nodes <1>, <7>.
Node <5> is connected to nodes <3>, <7>.
Node <8> is connected to node <7>.
Node <0> is connected to node <3>.
Node <2> is connected to nodes <1>, <5>.
Node <1> is connected to nodes <7>, <8>, <3>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>]",9,17,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<6>, <2>, <4>, <5>, <1>, <8>, <7>, <0>, <3>]","Let's solve it step by step.
Nodes with 0 in-degree: [<6>, <2>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <4>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <5>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <1>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
So the result of topological sorting is ","('[[<6>, <2>, <4>, <5>, <7>, <0>, <3>, <8>, <1>], [<6>, <2>, <4>, <5>, <1>, <8>, <7>, <0>, <3>], [<6>, <2>, <4>, <7>, <0>, <3>, <5>, <1>, <8>], [<6>, <8>, <0>, <7>, <3>, <2>, <5>, <1>, <4>]]',)",1,47
topological_sort,"[(<7>, <2>), (<7>, <6>), (<2>, <4>), (<4>, <6>), (<0>, <3>), (<0>, <4>), (<3>, <2>), (<1>, <7>), (<1>, <5>), (<1>, <0>), (<1>, <3>), (<1>, <4>), (<1>, <6>), (<5>, <7>), (<5>, <3>), (<5>, <4>), (<5>, <6>)]","{<7>: [<2>, <6>],
<2>: [<4>],
<6>: [],
<4>: [<6>],
<0>: [<3>, <4>],
<3>: [<2>],
<1>: [<7>, <5>, <0>, <3>, <4>, <6>],
<5>: [<7>, <3>, <4>, <6>]}","Node <7> is connected to nodes <2>, <6>.
Node <2> is connected to node <4>.
Node <4> is connected to node <6>.
Node <0> is connected to nodes <3>, <4>.
Node <3> is connected to node <2>.
Node <1> is connected to nodes <7>, <5>, <0>, <3>, <4>, <6>.
Node <5> is connected to nodes <7>, <3>, <4>, <6>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>]",8,17,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<1>, <5>, <0>, <7>, <3>, <2>, <4>, <6>]","Let's solve it step by step.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <0>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <7>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <3>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
So the result of topological sorting is ","('[[<1>, <5>, <0>, <7>, <2>, <4>, <6>, <3>], [<1>, <4>, <6>, <5>, <0>, <2>, <3>, <7>], [<1>, <5>, <4>, <6>, <0>, <7>, <3>, <2>], [<1>, <5>, <0>, <7>, <3>, <2>, <4>, <6>]]',)",3,48
topological_sort,"[(<2>, <0>), (<2>, <3>), (<2>, <1>), (<0>, <1>), (<0>, <6>), (<0>, <5>), (<3>, <1>), (<3>, <5>), (<6>, <1>), (<6>, <3>), (<6>, <5>), (<4>, <5>), (<4>, <0>), (<7>, <2>), (<7>, <0>), (<7>, <1>), (<7>, <5>)]","{<2>: [<0>, <3>, <1>],
<0>: [<1>, <6>, <5>],
<3>: [<1>, <5>],
<1>: [],
<6>: [<1>, <3>, <5>],
<5>: [],
<4>: [<5>, <0>],
<7>: [<2>, <0>, <1>, <5>]}","Node <2> is connected to nodes <0>, <3>, <1>.
Node <0> is connected to nodes <1>, <6>, <5>.
Node <3> is connected to nodes <1>, <5>.
Node <6> is connected to nodes <1>, <3>, <5>.
Node <4> is connected to nodes <5>, <0>.
Node <7> is connected to nodes <2>, <0>, <1>, <5>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>]",8,17,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<4>, <7>, <2>, <0>, <6>, <3>, <1>, <5>]","Let's solve it step by step.
Nodes with 0 in-degree: [<4>, <7>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <5>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
So the result of topological sorting is ","('[[<4>, <7>, <1>, <5>, <2>, <0>, <6>, <3>], [<4>, <7>, <2>, <0>, <6>, <3>, <1>, <5>], [<4>, <3>, <7>, <5>, <2>, <0>, <6>, <1>], [<4>, <7>, <2>, <0>, <3>, <5>, <1>, <6>]]',)",1,49
topological_sort,"[(<6>, <7>), (<6>, <3>), (<7>, <1>), (<3>, <4>), (<1>, <2>), (<4>, <0>), (<2>, <4>), (<2>, <0>), (<2>, <5>), (<5>, <0>)]","{<6>: [<7>, <3>],
<7>: [<1>],
<3>: [<4>],
<1>: [<2>],
<4>: [<0>],
<0>: [],
<2>: [<4>, <0>, <5>],
<5>: [<0>]}","Node <6> is connected to nodes <7>, <3>.
Node <7> is connected to node <1>.
Node <3> is connected to node <4>.
Node <1> is connected to node <2>.
Node <4> is connected to node <0>.
Node <2> is connected to nodes <4>, <0>, <5>.
Node <5> is connected to node <0>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>]",8,10,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<6>, <7>, <3>, <1>, <2>, <4>, <5>, <0>]","Let's solve it step by step.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <3>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <1>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <5>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
So the result of topological sorting is ","('[[<6>, <7>, <3>, <1>, <5>, <2>, <4>, <0>], [<6>, <7>, <3>, <1>, <2>, <4>, <5>, <0>], [<6>, <5>, <2>, <3>, <4>, <1>, <0>, <7>], [<6>, <7>, <5>, <0>, <3>, <1>, <2>, <4>]]',)",1,50
topological_sort,"[(<8>, <6>), (<8>, <7>), (<8>, <9>), (<6>, <1>), (<6>, <4>), (<6>, <9>), (<6>, <0>), (<6>, <7>), (<9>, <1>), (<9>, <4>), (<1>, <10>), (<1>, <0>), (<1>, <2>), (<1>, <5>), (<0>, <4>), (<5>, <0>), (<5>, <7>), (<5>, <2>), (<5>, <10>), (<2>, <0>), (<2>, <7>), (<10>, <3>), (<3>, <7>), (<3>, <2>)]","{<8>: [<6>, <7>, <9>],
<6>: [<1>, <4>, <9>, <0>, <7>],
<7>: [],
<9>: [<1>, <4>],
<1>: [<10>, <0>, <2>, <5>],
<4>: [],
<0>: [<4>],
<5>: [<0>, <7>, <2>, <10>],
<2>: [<0>, <7>],
<10>: [<3>],
<3>: [<7>, <2>]}","Node <8> is connected to nodes <6>, <7>, <9>.
Node <6> is connected to nodes <1>, <4>, <9>, <0>, <7>.
Node <9> is connected to nodes <1>, <4>.
Node <1> is connected to nodes <10>, <0>, <2>, <5>.
Node <0> is connected to node <4>.
Node <5> is connected to nodes <0>, <7>, <2>, <10>.
Node <2> is connected to nodes <0>, <7>.
Node <10> is connected to node <3>.
Node <3> is connected to nodes <7>, <2>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>]",11,24,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<8>, <6>, <9>, <1>, <5>, <10>, <3>, <2>, <0>, <7>, <4>]","Let's solve it step by step.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <7>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <4>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
So the result of topological sorting is ","('[[<8>, <0>, <2>, <4>, <9>, <10>, <7>, <3>, <1>, <6>, <5>], [<8>, <6>, <9>, <1>, <5>, <10>, <3>, <2>, <0>, <7>, <4>], [<8>, <6>, <9>, <0>, <7>, <4>, <1>, <5>, <10>, <3>, <2>], [<8>, <6>, <9>, <1>, <5>, <7>, <4>, <0>, <2>, <10>, <3>]]',)",1,51
topological_sort,"[(<2>, <5>), (<2>, <1>), (<5>, <8>), (<5>, <7>), (<3>, <6>), (<3>, <1>), (<6>, <7>), (<0>, <3>), (<4>, <6>), (<4>, <7>)]","{<2>: [<5>, <1>],
<5>: [<8>, <7>],
<1>: [],
<8>: [],
<7>: [],
<3>: [<6>, <1>],
<6>: [<7>],
<0>: [<3>],
<4>: [<6>, <7>]}","Node <2> is connected to nodes <5>, <1>.
Node <5> is connected to nodes <8>, <7>.
Node <3> is connected to nodes <6>, <1>.
Node <6> is connected to node <7>.
Node <0> is connected to node <3>.
Node <4> is connected to nodes <6>, <7>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>]",9,10,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<2>, <0>, <4>, <5>, <3>, <8>, <6>, <1>, <7>]","Let's solve it step by step.
Nodes with 0 in-degree: [<2>, <0>, <4>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <4>, <5>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <5>, <3>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <3>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <8>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<8>, <6>, <1>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <1>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <7>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
So the result of topological sorting is ","('[[<2>, <8>, <0>, <5>, <3>, <1>, <4>, <7>, <6>], [<2>, <0>, <4>, <6>, <1>, <7>, <5>, <3>, <8>], [<2>, <0>, <4>, <5>, <3>, <8>, <6>, <1>, <7>], [<2>, <0>, <4>, <5>, <6>, <3>, <8>, <7>, <1>]]',)",2,52
topological_sort,"[(<7>, <4>), (<4>, <9>), (<9>, <5>), (<0>, <6>), (<0>, <5>), (<0>, <10>), (<6>, <2>), (<10>, <12>), (<2>, <4>), (<2>, <1>), (<2>, <7>), (<1>, <3>), (<1>, <5>), (<3>, <5>), (<11>, <3>), (<11>, <9>), (<11>, <0>), (<11>, <10>), (<12>, <7>), (<12>, <2>), (<8>, <6>), (<8>, <1>), (<8>, <11>)]","{<7>: [<4>],
<4>: [<9>],
<9>: [<5>],
<5>: [],
<0>: [<6>, <5>, <10>],
<6>: [<2>],
<10>: [<12>],
<2>: [<4>, <1>, <7>],
<1>: [<3>, <5>],
<3>: [<5>],
<11>: [<3>, <9>, <0>, <10>],
<12>: [<7>, <2>],
<8>: [<6>, <1>, <11>]}","Node <7> is connected to node <4>.
Node <4> is connected to node <9>.
Node <9> is connected to node <5>.
Node <0> is connected to nodes <6>, <5>, <10>.
Node <6> is connected to node <2>.
Node <10> is connected to node <12>.
Node <2> is connected to nodes <4>, <1>, <7>.
Node <1> is connected to nodes <3>, <5>.
Node <3> is connected to node <5>.
Node <11> is connected to nodes <3>, <9>, <0>, <10>.
Node <12> is connected to nodes <7>, <2>.
Node <8> is connected to nodes <6>, <1>, <11>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>]",13,23,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<8>, <11>, <0>, <6>, <10>, <12>, <2>, <1>, <7>, <3>, <4>, <9>, <5>]","Let's solve it step by step.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<11>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <10>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<12>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <7>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <3>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <4>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
So the result of topological sorting is ","('[[<8>, <11>, <0>, <6>, <3>, <4>, <9>, <5>, <10>, <12>, <2>, <1>, <7>], [<8>, <11>, <5>, <9>, <7>, <6>, <0>, <10>, <3>, <4>, <2>, <1>, <12>], [<8>, <11>, <0>, <6>, <10>, <12>, <4>, <7>, <2>, <9>, <3>, <5>, <1>], [<8>, <11>, <0>, <6>, <10>, <12>, <2>, <1>, <7>, <3>, <4>, <9>, <5>]]',)",3,53
topological_sort,"[(<9>, <11>), (<9>, <3>), (<9>, <10>), (<9>, <6>), (<9>, <8>), (<11>, <10>), (<11>, <6>), (<11>, <0>), (<11>, <1>), (<3>, <0>), (<3>, <13>), (<3>, <2>), (<10>, <12>), (<6>, <5>), (<6>, <2>), (<6>, <10>), (<6>, <3>), (<8>, <1>), (<8>, <0>), (<8>, <11>), (<8>, <10>), (<0>, <4>), (<1>, <7>), (<12>, <5>), (<12>, <1>), (<5>, <1>), (<5>, <7>), (<13>, <10>), (<13>, <5>), (<2>, <7>), (<4>, <10>)]","{<9>: [<11>, <3>, <10>, <6>, <8>],
<11>: [<10>, <6>, <0>, <1>],
<3>: [<0>, <13>, <2>],
<10>: [<12>],
<6>: [<5>, <2>, <10>, <3>],
<8>: [<1>, <0>, <11>, <10>],
<0>: [<4>],
<1>: [<7>],
<12>: [<5>, <1>],
<5>: [<1>, <7>],
<7>: [],
<13>: [<10>, <5>],
<2>: [<7>],
<4>: [<10>]}","Node <9> is connected to nodes <11>, <3>, <10>, <6>, <8>.
Node <11> is connected to nodes <10>, <6>, <0>, <1>.
Node <3> is connected to nodes <0>, <13>, <2>.
Node <10> is connected to node <12>.
Node <6> is connected to nodes <5>, <2>, <10>, <3>.
Node <8> is connected to nodes <1>, <0>, <11>, <10>.
Node <0> is connected to node <4>.
Node <1> is connected to node <7>.
Node <12> is connected to nodes <5>, <1>.
Node <5> is connected to nodes <1>, <7>.
Node <13> is connected to nodes <10>, <5>.
Node <2> is connected to node <7>.
Node <4> is connected to node <10>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>]",14,31,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<9>, <8>, <11>, <6>, <3>, <0>, <13>, <2>, <4>, <10>, <12>, <5>, <1>, <7>]","Let's solve it step by step.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<11>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <13>, <2>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<13>, <2>, <4>].
Visit node <13> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <4>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<12>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
So the result of topological sorting is ","('[[<9>, <8>, <11>, <6>, <3>, <0>, <13>, <12>, <7>, <1>, <4>, <5>, <2>, <10>], [<9>, <13>, <11>, <4>, <10>, <0>, <1>, <8>, <7>, <3>, <12>, <6>, <5>, <2>], [<9>, <8>, <11>, <6>, <3>, <0>, <13>, <2>, <4>, <10>, <12>, <5>, <1>, <7>], [<9>, <8>, <11>, <6>, <12>, <5>, <1>, <7>, <3>, <0>, <13>, <2>, <4>, <10>]]',)",2,54
topological_sort,"[(<6>, <5>), (<6>, <3>), (<6>, <7>), (<5>, <7>), (<5>, <12>), (<5>, <10>), (<5>, <3>), (<3>, <8>), (<3>, <7>), (<3>, <9>), (<12>, <10>), (<12>, <1>), (<10>, <3>), (<8>, <7>), (<9>, <7>), (<9>, <8>), (<0>, <7>), (<0>, <1>), (<0>, <2>), (<0>, <6>), (<0>, <9>), (<2>, <3>), (<2>, <7>), (<13>, <7>), (<13>, <0>), (<13>, <1>), (<13>, <12>), (<4>, <0>), (<4>, <9>), (<11>, <0>), (<11>, <6>)]","{<6>: [<5>, <3>, <7>],
<5>: [<7>, <12>, <10>, <3>],
<3>: [<8>, <7>, <9>],
<7>: [],
<12>: [<10>, <1>],
<10>: [<3>],
<1>: [],
<8>: [<7>],
<9>: [<7>, <8>],
<0>: [<7>, <1>, <2>, <6>, <9>],
<2>: [<3>, <7>],
<13>: [<7>, <0>, <1>, <12>],
<4>: [<0>, <9>],
<11>: [<0>, <6>]}","Node <6> is connected to nodes <5>, <3>, <7>.
Node <5> is connected to nodes <7>, <12>, <10>, <3>.
Node <3> is connected to nodes <8>, <7>, <9>.
Node <12> is connected to nodes <10>, <1>.
Node <10> is connected to node <3>.
Node <8> is connected to node <7>.
Node <9> is connected to nodes <7>, <8>.
Node <0> is connected to nodes <7>, <1>, <2>, <6>, <9>.
Node <2> is connected to nodes <3>, <7>.
Node <13> is connected to nodes <7>, <0>, <1>, <12>.
Node <4> is connected to nodes <0>, <9>.
Node <11> is connected to nodes <0>, <6>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>]",14,31,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<13>, <4>, <11>, <0>, <2>, <6>, <5>, <12>, <10>, <1>, <3>, <9>, <8>, <7>]","Let's solve it step by step.
Nodes with 0 in-degree: [<13>, <4>, <11>].
Visit node <13> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <11>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<11>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <6>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<12>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<10>, <1>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <3>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
So the result of topological sorting is ","('[[<13>, <4>, <11>, <0>, <2>, <6>, <5>, <1>, <10>, <3>, <7>, <8>, <12>, <9>], [<13>, <4>, <11>, <0>, <2>, <6>, <5>, <12>, <10>, <1>, <3>, <9>, <8>, <7>], [<13>, <4>, <11>, <0>, <3>, <9>, <8>, <7>, <2>, <6>, <5>, <12>, <10>, <1>], [<13>, <3>, <0>, <11>, <5>, <9>, <6>, <1>, <7>, <10>, <2>, <8>, <4>, <12>]]',)",1,55
topological_sort,"[(<3>, <2>), (<2>, <8>), (<1>, <2>), (<1>, <8>), (<4>, <7>), (<4>, <5>), (<4>, <8>), (<7>, <1>), (<5>, <7>), (<5>, <0>), (<5>, <1>), (<6>, <8>)]","{<3>: [<2>],
<2>: [<8>],
<8>: [],
<1>: [<2>, <8>],
<4>: [<7>, <5>, <8>],
<7>: [<1>],
<5>: [<7>, <0>, <1>],
<0>: [],
<6>: [<8>]}","Node <3> is connected to node <2>.
Node <2> is connected to node <8>.
Node <1> is connected to nodes <2>, <8>.
Node <4> is connected to nodes <7>, <5>, <8>.
Node <7> is connected to node <1>.
Node <5> is connected to nodes <7>, <0>, <1>.
Node <6> is connected to node <8>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>]",9,12,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<3>, <4>, <6>, <5>, <7>, <0>, <1>, <2>, <8>]","Let's solve it step by step.
Nodes with 0 in-degree: [<3>, <4>, <6>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <6>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <5>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <0>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <1>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
So the result of topological sorting is ","('[[<3>, <2>, <0>, <5>, <4>, <7>, <6>, <1>, <8>], [<3>, <4>, <6>, <1>, <2>, <8>, <5>, <7>, <0>], [<3>, <4>, <6>, <5>, <2>, <7>, <8>, <1>, <0>], [<3>, <4>, <6>, <5>, <7>, <0>, <1>, <2>, <8>]]',)",3,56
topological_sort,"[(<1>, <5>), (<1>, <8>), (<8>, <2>), (<4>, <2>), (<4>, <8>), (<2>, <6>), (<3>, <4>), (<3>, <2>), (<0>, <5>), (<0>, <3>), (<0>, <6>), (<0>, <4>), (<7>, <8>), (<7>, <5>)]","{<1>: [<5>, <8>],
<5>: [],
<8>: [<2>],
<4>: [<2>, <8>],
<2>: [<6>],
<6>: [],
<3>: [<4>, <2>],
<0>: [<5>, <3>, <6>, <4>],
<7>: [<8>, <5>]}","Node <1> is connected to nodes <5>, <8>.
Node <8> is connected to node <2>.
Node <4> is connected to nodes <2>, <8>.
Node <2> is connected to node <6>.
Node <3> is connected to nodes <4>, <2>.
Node <0> is connected to nodes <5>, <3>, <6>, <4>.
Node <7> is connected to nodes <8>, <5>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>]",9,14,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<1>, <0>, <7>, <3>, <5>, <4>, <8>, <2>, <6>]","Let's solve it step by step.
Nodes with 0 in-degree: [<1>, <0>, <7>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <7>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <3>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <5>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <4>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
So the result of topological sorting is ","('[[<1>, <3>, <2>, <8>, <0>, <4>, <5>, <6>, <7>], [<1>, <0>, <7>, <3>, <5>, <4>, <8>, <2>, <6>], [<1>, <0>, <7>, <8>, <2>, <6>, <3>, <5>, <4>], [<1>, <0>, <7>, <3>, <6>, <2>, <5>, <8>, <4>]]',)",1,57
topological_sort,"[(<5>, <7>), (<5>, <11>), (<5>, <6>), (<7>, <6>), (<7>, <8>), (<6>, <11>), (<6>, <1>), (<8>, <6>), (<8>, <9>), (<9>, <11>), (<1>, <11>), (<2>, <5>), (<2>, <11>), (<2>, <7>), (<12>, <4>), (<12>, <2>), (<12>, <9>), (<12>, <7>), (<12>, <5>), (<4>, <11>), (<4>, <2>), (<4>, <0>), (<0>, <8>), (<0>, <7>), (<3>, <6>), (<3>, <2>), (<3>, <8>), (<3>, <12>), (<3>, <10>), (<10>, <12>), (<10>, <9>), (<10>, <1>)]","{<5>: [<7>, <11>, <6>],
<7>: [<6>, <8>],
<11>: [],
<6>: [<11>, <1>],
<8>: [<6>, <9>],
<9>: [<11>],
<1>: [<11>],
<2>: [<5>, <11>, <7>],
<12>: [<4>, <2>, <9>, <7>, <5>],
<4>: [<11>, <2>, <0>],
<0>: [<8>, <7>],
<3>: [<6>, <2>, <8>, <12>, <10>],
<10>: [<12>, <9>, <1>]}","Node <5> is connected to nodes <7>, <11>, <6>.
Node <7> is connected to nodes <6>, <8>.
Node <6> is connected to nodes <11>, <1>.
Node <8> is connected to nodes <6>, <9>.
Node <9> is connected to node <11>.
Node <1> is connected to node <11>.
Node <2> is connected to nodes <5>, <11>, <7>.
Node <12> is connected to nodes <4>, <2>, <9>, <7>, <5>.
Node <4> is connected to nodes <11>, <2>, <0>.
Node <0> is connected to nodes <8>, <7>.
Node <3> is connected to nodes <6>, <2>, <8>, <12>, <10>.
Node <10> is connected to nodes <12>, <9>, <1>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>]",13,32,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<3>, <10>, <12>, <4>, <2>, <0>, <5>, <7>, <8>, <6>, <9>, <1>, <11>]","Let's solve it step by step.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<12>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <0>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <5>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <9>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<9>, <1>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<11>].
Visit node <11> and remove it from the graph.
So the result of topological sorting is ","('[[<3>, <10>, <12>, <4>, <2>, <0>, <5>, <7>, <8>, <6>, <9>, <1>, <11>], [<3>, <10>, <12>, <4>, <6>, <9>, <1>, <11>, <2>, <0>, <5>, <7>, <8>], [<3>, <10>, <9>, <8>, <5>, <11>, <2>, <7>, <6>, <1>, <12>, <0>, <4>], [<3>, <10>, <12>, <4>, <2>, <0>, <5>, <7>, <11>, <9>, <8>, <6>, <1>]]',)",0,58
topological_sort,"[(<4>, <11>), (<4>, <13>), (<11>, <8>), (<11>, <1>), (<11>, <3>), (<13>, <0>), (<13>, <3>), (<13>, <6>), (<8>, <1>), (<8>, <3>), (<1>, <7>), (<1>, <12>), (<3>, <2>), (<12>, <2>), (<12>, <7>), (<9>, <4>), (<9>, <10>), (<9>, <7>), (<9>, <6>), (<10>, <1>), (<10>, <11>), (<10>, <3>), (<6>, <8>), (<6>, <12>), (<6>, <1>), (<6>, <10>), (<6>, <0>), (<6>, <7>), (<0>, <2>), (<0>, <8>), (<0>, <10>), (<5>, <12>), (<5>, <13>), (<5>, <9>), (<5>, <10>), (<5>, <11>)]","{<4>: [<11>, <13>],
<11>: [<8>, <1>, <3>],
<13>: [<0>, <3>, <6>],
<8>: [<1>, <3>],
<1>: [<7>, <12>],
<3>: [<2>],
<12>: [<2>, <7>],
<2>: [],
<7>: [],
<9>: [<4>, <10>, <7>, <6>],
<10>: [<1>, <11>, <3>],
<6>: [<8>, <12>, <1>, <10>, <0>, <7>],
<0>: [<2>, <8>, <10>],
<5>: [<12>, <13>, <9>, <10>, <11>]}","Node <4> is connected to nodes <11>, <13>.
Node <11> is connected to nodes <8>, <1>, <3>.
Node <13> is connected to nodes <0>, <3>, <6>.
Node <8> is connected to nodes <1>, <3>.
Node <1> is connected to nodes <7>, <12>.
Node <3> is connected to node <2>.
Node <12> is connected to nodes <2>, <7>.
Node <9> is connected to nodes <4>, <10>, <7>, <6>.
Node <10> is connected to nodes <1>, <11>, <3>.
Node <6> is connected to nodes <8>, <12>, <1>, <10>, <0>, <7>.
Node <0> is connected to nodes <2>, <8>, <10>.
Node <5> is connected to nodes <12>, <13>, <9>, <10>, <11>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>]",14,36,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<5>, <9>, <4>, <13>, <6>, <0>, <10>, <11>, <8>, <1>, <3>, <12>, <2>, <7>]","Let's solve it step by step.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<13>].
Visit node <13> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<11>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <3>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <12>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<12>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <7>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
So the result of topological sorting is ","('[[<5>, <9>, <4>, <13>, <3>, <12>, <2>, <7>, <6>, <0>, <10>, <11>, <8>, <1>], [<5>, <9>, <4>, <13>, <6>, <0>, <10>, <3>, <1>, <7>, <8>, <2>, <12>, <11>], [<5>, <7>, <11>, <4>, <13>, <12>, <10>, <9>, <3>, <0>, <1>, <6>, <8>, <2>], [<5>, <9>, <4>, <13>, <6>, <0>, <10>, <11>, <8>, <1>, <3>, <12>, <2>, <7>]]',)",3,59
topological_sort,"[(<11>, <0>), (<11>, <4>), (<11>, <7>), (<0>, <5>), (<0>, <6>), (<0>, <10>), (<4>, <9>), (<4>, <8>), (<6>, <7>), (<10>, <8>), (<12>, <7>), (<12>, <9>), (<12>, <3>), (<9>, <7>), (<3>, <0>), (<3>, <1>), (<2>, <3>)]","{<11>: [<0>, <4>, <7>],
<0>: [<5>, <6>, <10>],
<4>: [<9>, <8>],
<7>: [],
<5>: [],
<6>: [<7>],
<10>: [<8>],
<12>: [<7>, <9>, <3>],
<9>: [<7>],
<3>: [<0>, <1>],
<8>: [],
<1>: [],
<2>: [<3>]}","Node <11> is connected to nodes <0>, <4>, <7>.
Node <0> is connected to nodes <5>, <6>, <10>.
Node <4> is connected to nodes <9>, <8>.
Node <6> is connected to node <7>.
Node <10> is connected to node <8>.
Node <12> is connected to nodes <7>, <9>, <3>.
Node <9> is connected to node <7>.
Node <3> is connected to nodes <0>, <1>.
Node <2> is connected to node <3>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>]",13,17,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<11>, <12>, <2>, <4>, <3>, <9>, <0>, <1>, <5>, <6>, <10>, <7>, <8>]","Let's solve it step by step.
Nodes with 0 in-degree: [<11>, <12>, <2>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<12>, <2>, <4>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <4>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <3>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <9>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<9>, <0>, <1>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <1>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <5>, <6>, <10>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <6>, <10>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <10>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<10>, <7>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <8>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
So the result of topological sorting is ","('[[<11>, <12>, <2>, <4>, <3>, <9>, <5>, <8>, <7>, <0>, <1>, <10>, <6>], [<11>, <4>, <0>, <12>, <5>, <9>, <3>, <7>, <10>, <8>, <2>, <1>, <6>], [<11>, <12>, <2>, <4>, <3>, <9>, <0>, <1>, <5>, <6>, <10>, <7>, <8>], [<11>, <12>, <2>, <4>, <6>, <10>, <7>, <8>, <3>, <9>, <0>, <1>, <5>]]',)",2,60
topological_sort,"[(<2>, <8>), (<2>, <10>), (<2>, <4>), (<2>, <3>), (<2>, <9>), (<8>, <0>), (<8>, <3>), (<8>, <4>), (<3>, <10>), (<0>, <11>), (<11>, <6>), (<6>, <3>), (<6>, <9>), (<6>, <1>), (<6>, <4>), (<1>, <4>), (<5>, <9>), (<5>, <8>), (<7>, <8>), (<7>, <10>), (<12>, <4>), (<12>, <2>)]","{<2>: [<8>, <10>, <4>, <3>, <9>],
<8>: [<0>, <3>, <4>],
<10>: [],
<4>: [],
<3>: [<10>],
<9>: [],
<0>: [<11>],
<11>: [<6>],
<6>: [<3>, <9>, <1>, <4>],
<1>: [<4>],
<5>: [<9>, <8>],
<7>: [<8>, <10>],
<12>: [<4>, <2>]}","Node <2> is connected to nodes <8>, <10>, <4>, <3>, <9>.
Node <8> is connected to nodes <0>, <3>, <4>.
Node <3> is connected to node <10>.
Node <0> is connected to node <11>.
Node <11> is connected to node <6>.
Node <6> is connected to nodes <3>, <9>, <1>, <4>.
Node <1> is connected to node <4>.
Node <5> is connected to nodes <9>, <8>.
Node <7> is connected to nodes <8>, <10>.
Node <12> is connected to nodes <4>, <2>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>]",13,22,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<5>, <7>, <12>, <2>, <8>, <0>, <11>, <6>, <3>, <9>, <1>, <10>, <4>]","Let's solve it step by step.
Nodes with 0 in-degree: [<5>, <7>, <12>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <12>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<12>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<11>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <9>, <1>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<9>, <1>, <10>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <10>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<10>, <4>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
So the result of topological sorting is ","('[[<5>, <8>, <10>, <0>, <12>, <2>, <9>, <3>, <6>, <1>, <7>, <4>, <11>], [<5>, <7>, <12>, <2>, <8>, <0>, <3>, <4>, <11>, <10>, <1>, <9>, <6>], [<5>, <7>, <12>, <2>, <8>, <0>, <11>, <6>, <3>, <9>, <1>, <10>, <4>], [<5>, <7>, <12>, <2>, <9>, <1>, <10>, <4>, <8>, <0>, <11>, <6>, <3>]]',)",2,61
topological_sort,"[(<8>, <9>), (<8>, <6>), (<6>, <0>), (<6>, <9>), (<7>, <5>), (<5>, <9>), (<0>, <11>), (<0>, <3>), (<11>, <9>), (<3>, <9>), (<3>, <7>), (<4>, <5>), (<4>, <6>), (<4>, <7>), (<1>, <6>), (<1>, <7>), (<1>, <8>), (<2>, <7>), (<2>, <8>), (<2>, <10>), (<10>, <1>), (<10>, <11>), (<10>, <8>), (<10>, <5>)]","{<8>: [<9>, <6>],
<9>: [],
<6>: [<0>, <9>],
<7>: [<5>],
<5>: [<9>],
<0>: [<11>, <3>],
<11>: [<9>],
<3>: [<9>, <7>],
<4>: [<5>, <6>, <7>],
<1>: [<6>, <7>, <8>],
<2>: [<7>, <8>, <10>],
<10>: [<1>, <11>, <8>, <5>]}","Node <8> is connected to nodes <9>, <6>.
Node <6> is connected to nodes <0>, <9>.
Node <7> is connected to node <5>.
Node <5> is connected to node <9>.
Node <0> is connected to nodes <11>, <3>.
Node <11> is connected to node <9>.
Node <3> is connected to nodes <9>, <7>.
Node <4> is connected to nodes <5>, <6>, <7>.
Node <1> is connected to nodes <6>, <7>, <8>.
Node <2> is connected to nodes <7>, <8>, <10>.
Node <10> is connected to nodes <1>, <11>, <8>, <5>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>]",12,24,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<4>, <2>, <10>, <1>, <8>, <6>, <0>, <11>, <3>, <7>, <5>, <9>]","Let's solve it step by step.
Nodes with 0 in-degree: [<4>, <2>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<11>, <3>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
So the result of topological sorting is ","('[[<4>, <3>, <1>, <10>, <9>, <5>, <2>, <7>, <6>, <8>, <11>, <0>], [<4>, <2>, <10>, <1>, <8>, <6>, <7>, <9>, <0>, <11>, <5>, <3>], [<4>, <2>, <10>, <1>, <8>, <6>, <0>, <11>, <3>, <7>, <5>, <9>], [<4>, <2>, <10>, <1>, <3>, <7>, <5>, <9>, <8>, <6>, <0>, <11>]]',)",2,62
topological_sort,"[(<8>, <2>), (<8>, <5>), (<8>, <9>), (<8>, <1>), (<8>, <4>), (<8>, <7>), (<2>, <3>), (<2>, <5>), (<2>, <9>), (<9>, <4>), (<9>, <5>), (<9>, <3>), (<4>, <6>), (<4>, <7>), (<4>, <5>), (<7>, <6>), (<3>, <4>), (<3>, <7>), (<3>, <5>), (<6>, <1>), (<6>, <5>), (<0>, <3>), (<0>, <1>), (<0>, <9>), (<0>, <6>), (<0>, <8>), (<0>, <4>)]","{<8>: [<2>, <5>, <9>, <1>, <4>, <7>],
<2>: [<3>, <5>, <9>],
<5>: [],
<9>: [<4>, <5>, <3>],
<1>: [],
<4>: [<6>, <7>, <5>],
<7>: [<6>],
<3>: [<4>, <7>, <5>],
<6>: [<1>, <5>],
<0>: [<3>, <1>, <9>, <6>, <8>, <4>]}","Node <8> is connected to nodes <2>, <5>, <9>, <1>, <4>, <7>.
Node <2> is connected to nodes <3>, <5>, <9>.
Node <9> is connected to nodes <4>, <5>, <3>.
Node <4> is connected to nodes <6>, <7>, <5>.
Node <7> is connected to node <6>.
Node <3> is connected to nodes <4>, <7>, <5>.
Node <6> is connected to nodes <1>, <5>.
Node <0> is connected to nodes <3>, <1>, <9>, <6>, <8>, <4>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>]",10,27,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<0>, <8>, <2>, <9>, <3>, <4>, <7>, <6>, <1>, <5>]","Let's solve it step by step.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <5>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
So the result of topological sorting is ","('[[<0>, <8>, <2>, <6>, <1>, <5>, <9>, <3>, <4>, <7>], [<0>, <8>, <2>, <9>, <3>, <6>, <4>, <1>, <7>, <5>], [<0>, <8>, <2>, <9>, <3>, <4>, <7>, <6>, <1>, <5>], [<0>, <2>, <5>, <7>, <9>, <1>, <6>, <3>, <4>, <8>]]',)",2,63
topological_sort,"[(<5>, <3>), (<5>, <1>), (<5>, <6>), (<5>, <7>), (<3>, <7>), (<3>, <0>), (<1>, <6>), (<1>, <2>), (<1>, <4>), (<1>, <0>), (<0>, <6>), (<0>, <7>), (<4>, <0>), (<4>, <6>), (<4>, <3>), (<2>, <7>), (<2>, <3>), (<2>, <4>)]","{<5>: [<3>, <1>, <6>, <7>],
<3>: [<7>, <0>],
<1>: [<6>, <2>, <4>, <0>],
<6>: [],
<7>: [],
<0>: [<6>, <7>],
<4>: [<0>, <6>, <3>],
<2>: [<7>, <3>, <4>]}","Node <5> is connected to nodes <3>, <1>, <6>, <7>.
Node <3> is connected to nodes <7>, <0>.
Node <1> is connected to nodes <6>, <2>, <4>, <0>.
Node <0> is connected to nodes <6>, <7>.
Node <4> is connected to nodes <0>, <6>, <3>.
Node <2> is connected to nodes <7>, <3>, <4>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>]",8,18,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<5>, <1>, <2>, <4>, <3>, <0>, <6>, <7>]","Let's solve it step by step.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <7>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
So the result of topological sorting is ","('[[<5>, <1>, <2>, <4>, <7>, <6>, <3>, <0>], [<5>, <1>, <6>, <7>, <2>, <4>, <3>, <0>], [<5>, <7>, <3>, <6>, <0>, <1>, <2>, <4>], [<5>, <1>, <2>, <4>, <3>, <0>, <6>, <7>]]',)",3,64
topological_sort,"[(<10>, <1>), (<10>, <13>), (<13>, <1>), (<12>, <0>), (<12>, <2>), (<12>, <1>), (<0>, <13>), (<2>, <0>), (<2>, <10>), (<2>, <4>), (<4>, <1>), (<9>, <3>), (<9>, <11>), (<9>, <6>), (<9>, <12>), (<3>, <12>), (<3>, <1>), (<11>, <5>), (<6>, <5>), (<6>, <7>), (<5>, <8>), (<5>, <3>), (<8>, <12>), (<8>, <7>), (<7>, <10>), (<7>, <1>), (<7>, <2>), (<7>, <3>)]","{<10>: [<1>, <13>],
<1>: [],
<13>: [<1>],
<12>: [<0>, <2>, <1>],
<0>: [<13>],
<2>: [<0>, <10>, <4>],
<4>: [<1>],
<9>: [<3>, <11>, <6>, <12>],
<3>: [<12>, <1>],
<11>: [<5>],
<6>: [<5>, <7>],
<5>: [<8>, <3>],
<8>: [<12>, <7>],
<7>: [<10>, <1>, <2>, <3>]}","Node <10> is connected to nodes <1>, <13>.
Node <13> is connected to node <1>.
Node <12> is connected to nodes <0>, <2>, <1>.
Node <0> is connected to node <13>.
Node <2> is connected to nodes <0>, <10>, <4>.
Node <4> is connected to node <1>.
Node <9> is connected to nodes <3>, <11>, <6>, <12>.
Node <3> is connected to nodes <12>, <1>.
Node <11> is connected to node <5>.
Node <6> is connected to nodes <5>, <7>.
Node <5> is connected to nodes <8>, <3>.
Node <8> is connected to nodes <12>, <7>.
Node <7> is connected to nodes <10>, <1>, <2>, <3>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>]",14,28,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<9>, <11>, <6>, <5>, <8>, <7>, <3>, <12>, <2>, <0>, <10>, <4>, <13>, <1>]","Let's solve it step by step.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<11>, <6>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<12>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <10>, <4>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<10>, <4>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <13>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<13>].
Visit node <13> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
So the result of topological sorting is ","('[[<9>, <11>, <6>, <5>, <8>, <7>, <3>, <13>, <1>, <2>, <12>, <0>, <10>, <4>], [<9>, <11>, <6>, <5>, <10>, <4>, <13>, <1>, <8>, <7>, <3>, <12>, <2>, <0>], [<9>, <11>, <6>, <5>, <8>, <7>, <3>, <12>, <2>, <0>, <10>, <4>, <13>, <1>], [<9>, <0>, <4>, <13>, <6>, <8>, <10>, <12>, <3>, <2>, <7>, <1>, <11>, <5>]]',)",2,65
topological_sort,"[(<6>, <2>), (<6>, <4>), (<6>, <0>), (<0>, <7>), (<0>, <5>), (<3>, <5>), (<3>, <4>), (<5>, <2>), (<7>, <1>), (<7>, <2>), (<1>, <2>), (<1>, <4>)]","{<6>: [<2>, <4>, <0>],
<2>: [],
<4>: [],
<0>: [<7>, <5>],
<3>: [<5>, <4>],
<5>: [<2>],
<7>: [<1>, <2>],
<1>: [<2>, <4>]}","Node <6> is connected to nodes <2>, <4>, <0>.
Node <0> is connected to nodes <7>, <5>.
Node <3> is connected to nodes <5>, <4>.
Node <5> is connected to node <2>.
Node <7> is connected to nodes <1>, <2>.
Node <1> is connected to nodes <2>, <4>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>]",8,12,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<6>, <3>, <0>, <7>, <5>, <1>, <2>, <4>]","Let's solve it step by step.
Nodes with 0 in-degree: [<6>, <3>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <0>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <5>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <1>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <4>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
So the result of topological sorting is ","('[[<6>, <3>, <2>, <4>, <0>, <7>, <5>, <1>], [<6>, <3>, <0>, <7>, <1>, <5>, <4>, <2>], [<6>, <3>, <0>, <7>, <5>, <1>, <2>, <4>], [<6>, <5>, <0>, <3>, <7>, <1>, <2>, <4>]]',)",2,66
topological_sort,"[(<7>, <1>), (<7>, <0>), (<7>, <2>), (<1>, <8>), (<0>, <3>), (<0>, <1>), (<0>, <8>), (<2>, <0>), (<2>, <4>), (<2>, <8>), (<8>, <3>), (<5>, <4>), (<5>, <8>), (<6>, <1>), (<6>, <4>)]","{<7>: [<1>, <0>, <2>],
<1>: [<8>],
<0>: [<3>, <1>, <8>],
<2>: [<0>, <4>, <8>],
<8>: [<3>],
<4>: [],
<3>: [],
<5>: [<4>, <8>],
<6>: [<1>, <4>]}","Node <7> is connected to nodes <1>, <0>, <2>.
Node <1> is connected to node <8>.
Node <0> is connected to nodes <3>, <1>, <8>.
Node <2> is connected to nodes <0>, <4>, <8>.
Node <8> is connected to node <3>.
Node <5> is connected to nodes <4>, <8>.
Node <6> is connected to nodes <1>, <4>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>]",9,15,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<7>, <5>, <6>, <2>, <0>, <4>, <1>, <8>, <3>]","Let's solve it step by step.
Nodes with 0 in-degree: [<7>, <5>, <6>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <6>, <2>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <2>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <4>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <1>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
So the result of topological sorting is ","('[[<7>, <5>, <6>, <2>, <0>, <4>, <1>, <8>, <3>], [<7>, <5>, <6>, <2>, <0>, <4>, <3>, <8>, <1>], [<7>, <5>, <6>, <1>, <8>, <3>, <2>, <0>, <4>], [<7>, <6>, <8>, <5>, <4>, <1>, <3>, <2>, <0>]]',)",0,67
topological_sort,"[(<11>, <4>), (<11>, <12>), (<11>, <0>), (<4>, <5>), (<4>, <6>), (<4>, <7>), (<12>, <5>), (<12>, <2>), (<0>, <4>), (<0>, <10>), (<0>, <5>), (<5>, <6>), (<5>, <8>), (<6>, <7>), (<13>, <10>), (<10>, <9>), (<10>, <4>), (<10>, <6>), (<2>, <0>), (<2>, <7>), (<2>, <5>), (<2>, <10>), (<1>, <0>), (<1>, <9>), (<1>, <11>), (<1>, <5>), (<3>, <0>), (<3>, <1>), (<3>, <2>)]","{<11>: [<4>, <12>, <0>],
<4>: [<5>, <6>, <7>],
<12>: [<5>, <2>],
<0>: [<4>, <10>, <5>],
<5>: [<6>, <8>],
<6>: [<7>],
<7>: [],
<8>: [],
<13>: [<10>],
<10>: [<9>, <4>, <6>],
<9>: [],
<2>: [<0>, <7>, <5>, <10>],
<1>: [<0>, <9>, <11>, <5>],
<3>: [<0>, <1>, <2>]}","Node <11> is connected to nodes <4>, <12>, <0>.
Node <4> is connected to nodes <5>, <6>, <7>.
Node <12> is connected to nodes <5>, <2>.
Node <0> is connected to nodes <4>, <10>, <5>.
Node <5> is connected to nodes <6>, <8>.
Node <6> is connected to node <7>.
Node <13> is connected to node <10>.
Node <10> is connected to nodes <9>, <4>, <6>.
Node <2> is connected to nodes <0>, <7>, <5>, <10>.
Node <1> is connected to nodes <0>, <9>, <11>, <5>.
Node <3> is connected to nodes <0>, <1>, <2>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>]",14,29,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<13>, <3>, <1>, <11>, <12>, <2>, <0>, <10>, <9>, <4>, <5>, <6>, <8>, <7>]","Let's solve it step by step.
Nodes with 0 in-degree: [<13>, <3>].
Visit node <13> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<11>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<12>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<9>, <4>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <8>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<8>, <7>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
So the result of topological sorting is ","('[[<13>, <6>, <8>, <5>, <9>, <0>, <4>, <7>, <3>, <11>, <2>, <10>, <12>, <1>], [<13>, <3>, <1>, <11>, <12>, <2>, <0>, <10>, <9>, <4>, <5>, <6>, <8>, <7>], [<13>, <3>, <1>, <11>, <12>, <2>, <0>, <9>, <10>, <4>, <5>, <8>, <7>, <6>], [<13>, <3>, <1>, <11>, <5>, <6>, <8>, <7>, <12>, <2>, <0>, <10>, <9>, <4>]]',)",1,68
topological_sort,"[(<7>, <5>), (<6>, <5>), (<6>, <3>), (<6>, <7>), (<6>, <8>), (<6>, <0>), (<3>, <8>), (<3>, <5>), (<3>, <0>), (<3>, <9>), (<8>, <0>), (<2>, <8>), (<2>, <9>), (<4>, <5>), (<4>, <6>), (<4>, <3>), (<4>, <8>), (<4>, <1>), (<4>, <0>), (<1>, <5>), (<1>, <3>)]","{<7>: [<5>],
<5>: [],
<6>: [<5>, <3>, <7>, <8>, <0>],
<3>: [<8>, <5>, <0>, <9>],
<8>: [<0>],
<0>: [],
<2>: [<8>, <9>],
<9>: [],
<4>: [<5>, <6>, <3>, <8>, <1>, <0>],
<1>: [<5>, <3>]}","Node <7> is connected to node <5>.
Node <6> is connected to nodes <5>, <3>, <7>, <8>, <0>.
Node <3> is connected to nodes <8>, <5>, <0>, <9>.
Node <8> is connected to node <0>.
Node <2> is connected to nodes <8>, <9>.
Node <4> is connected to nodes <5>, <6>, <3>, <8>, <1>, <0>.
Node <1> is connected to nodes <5>, <3>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>]",10,21,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<2>, <4>, <6>, <1>, <7>, <3>, <8>, <5>, <9>, <0>]","Let's solve it step by step.
Nodes with 0 in-degree: [<2>, <4>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <1>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <7>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <3>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<8>, <5>, <9>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <9>, <0>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<9>, <0>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
So the result of topological sorting is ","('[[<2>, <4>, <6>, <5>, <9>, <0>, <1>, <7>, <3>, <8>], [<2>, <9>, <1>, <3>, <4>, <0>, <5>, <7>, <8>, <6>], [<2>, <4>, <6>, <1>, <7>, <3>, <8>, <5>, <9>, <0>], [<2>, <4>, <6>, <1>, <7>, <3>, <0>, <8>, <9>, <5>]]',)",2,69
topological_sort,"[(<3>, <4>), (<3>, <6>), (<3>, <1>), (<3>, <7>), (<3>, <5>), (<4>, <5>), (<6>, <7>), (<5>, <6>), (<0>, <7>), (<0>, <1>), (<0>, <2>), (<2>, <4>), (<2>, <7>), (<2>, <3>)]","{<3>: [<4>, <6>, <1>, <7>, <5>],
<4>: [<5>],
<6>: [<7>],
<1>: [],
<7>: [],
<5>: [<6>],
<0>: [<7>, <1>, <2>],
<2>: [<4>, <7>, <3>]}","Node <3> is connected to nodes <4>, <6>, <1>, <7>, <5>.
Node <4> is connected to node <5>.
Node <6> is connected to node <7>.
Node <5> is connected to node <6>.
Node <0> is connected to nodes <7>, <1>, <2>.
Node <2> is connected to nodes <4>, <7>, <3>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>]",8,14,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<0>, <2>, <3>, <4>, <1>, <5>, <6>, <7>]","Let's solve it step by step.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <1>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <5>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
So the result of topological sorting is ","('[[<0>, <2>, <6>, <7>, <3>, <4>, <1>, <5>], [<0>, <2>, <3>, <4>, <7>, <6>, <5>, <1>], [<0>, <3>, <5>, <1>, <2>, <4>, <7>, <6>], [<0>, <2>, <3>, <4>, <1>, <5>, <6>, <7>]]',)",3,70
topological_sort,"[(<9>, <4>), (<9>, <1>), (<1>, <8>), (<0>, <1>), (<0>, <6>), (<0>, <7>), (<6>, <7>), (<6>, <1>), (<6>, <5>), (<3>, <8>), (<3>, <1>), (<3>, <4>), (<5>, <7>), (<5>, <3>), (<2>, <7>), (<2>, <6>), (<2>, <1>), (<2>, <9>)]","{<9>: [<4>, <1>],
<4>: [],
<1>: [<8>],
<0>: [<1>, <6>, <7>],
<6>: [<7>, <1>, <5>],
<7>: [],
<8>: [],
<3>: [<8>, <1>, <4>],
<5>: [<7>, <3>],
<2>: [<7>, <6>, <1>, <9>]}","Node <9> is connected to nodes <4>, <1>.
Node <1> is connected to node <8>.
Node <0> is connected to nodes <1>, <6>, <7>.
Node <6> is connected to nodes <7>, <1>, <5>.
Node <3> is connected to nodes <8>, <1>, <4>.
Node <5> is connected to nodes <7>, <3>.
Node <2> is connected to nodes <7>, <6>, <1>, <9>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>]",10,18,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<0>, <2>, <6>, <9>, <5>, <7>, <3>, <1>, <4>, <8>]","Let's solve it step by step.
Nodes with 0 in-degree: [<0>, <2>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <9>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<9>, <5>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <3>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <4>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <8>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
So the result of topological sorting is ","('[[<0>, <2>, <6>, <1>, <4>, <8>, <9>, <5>, <7>, <3>], [<0>, <2>, <6>, <9>, <5>, <7>, <3>, <1>, <4>, <8>], [<0>, <2>, <6>, <9>, <5>, <7>, <8>, <1>, <3>, <4>], [<0>, <4>, <6>, <5>, <9>, <8>, <3>, <1>, <2>, <7>]]',)",1,71
topological_sort,"[(<1>, <5>), (<5>, <6>), (<7>, <4>), (<7>, <1>), (<4>, <8>), (<2>, <5>), (<2>, <7>), (<3>, <6>), (<3>, <2>), (<9>, <4>), (<9>, <8>), (<9>, <3>), (<0>, <7>)]","{<1>: [<5>],
<5>: [<6>],
<6>: [],
<7>: [<4>, <1>],
<4>: [<8>],
<8>: [],
<2>: [<5>, <7>],
<3>: [<6>, <2>],
<9>: [<4>, <8>, <3>],
<0>: [<7>]}","Node <1> is connected to node <5>.
Node <5> is connected to node <6>.
Node <7> is connected to nodes <4>, <1>.
Node <4> is connected to node <8>.
Node <2> is connected to nodes <5>, <7>.
Node <3> is connected to nodes <6>, <2>.
Node <9> is connected to nodes <4>, <8>, <3>.
Node <0> is connected to node <7>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>]",10,13,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<9>, <0>, <3>, <2>, <7>, <4>, <1>, <8>, <5>, <6>]","Let's solve it step by step.
Nodes with 0 in-degree: [<9>, <0>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <3>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <1>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <8>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<8>, <5>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
So the result of topological sorting is ","('[[<9>, <0>, <3>, <2>, <7>, <5>, <6>, <1>, <4>, <8>], [<9>, <0>, <3>, <2>, <7>, <4>, <1>, <8>, <5>, <6>], [<9>, <0>, <3>, <8>, <5>, <6>, <2>, <7>, <4>, <1>], [<9>, <5>, <4>, <1>, <0>, <6>, <2>, <3>, <8>, <7>]]',)",1,72
topological_sort,"[(<6>, <5>), (<6>, <0>), (<6>, <1>), (<6>, <2>), (<6>, <4>), (<5>, <2>), (<5>, <3>), (<5>, <1>), (<0>, <2>), (<1>, <0>), (<4>, <5>), (<4>, <0>), (<4>, <3>), (<3>, <1>), (<3>, <0>), (<7>, <5>), (<7>, <1>), (<7>, <4>)]","{<6>: [<5>, <0>, <1>, <2>, <4>],
<5>: [<2>, <3>, <1>],
<0>: [<2>],
<1>: [<0>],
<2>: [],
<4>: [<5>, <0>, <3>],
<3>: [<1>, <0>],
<7>: [<5>, <1>, <4>]}","Node <6> is connected to nodes <5>, <0>, <1>, <2>, <4>.
Node <5> is connected to nodes <2>, <3>, <1>.
Node <0> is connected to node <2>.
Node <1> is connected to node <0>.
Node <4> is connected to nodes <5>, <0>, <3>.
Node <3> is connected to nodes <1>, <0>.
Node <7> is connected to nodes <5>, <1>, <4>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>]",8,18,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<6>, <7>, <4>, <5>, <3>, <1>, <0>, <2>]","Let's solve it step by step.
Nodes with 0 in-degree: [<6>, <7>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
So the result of topological sorting is ","('[[<6>, <7>, <4>, <5>, <3>, <1>, <0>, <2>], [<6>, <7>, <4>, <5>, <0>, <3>, <1>, <2>], [<6>, <0>, <4>, <2>, <3>, <7>, <1>, <5>], [<6>, <7>, <0>, <2>, <4>, <5>, <3>, <1>]]',)",0,73
topological_sort,"[(<13>, <12>), (<12>, <5>), (<12>, <4>), (<5>, <4>), (<9>, <1>), (<9>, <10>), (<9>, <0>), (<1>, <10>), (<1>, <2>), (<1>, <12>), (<0>, <13>), (<2>, <4>), (<2>, <13>), (<2>, <6>), (<2>, <8>), (<6>, <10>), (<6>, <7>), (<8>, <6>), (<8>, <10>), (<8>, <4>), (<8>, <13>), (<8>, <7>), (<11>, <0>), (<11>, <6>), (<11>, <1>), (<11>, <3>), (<11>, <13>), (<3>, <4>), (<3>, <12>), (<3>, <8>), (<3>, <1>), (<3>, <2>), (<7>, <4>), (<7>, <10>), (<7>, <0>)]","{<13>: [<12>],
<12>: [<5>, <4>],
<5>: [<4>],
<4>: [],
<9>: [<1>, <10>, <0>],
<1>: [<10>, <2>, <12>],
<10>: [],
<0>: [<13>],
<2>: [<4>, <13>, <6>, <8>],
<6>: [<10>, <7>],
<8>: [<6>, <10>, <4>, <13>, <7>],
<11>: [<0>, <6>, <1>, <3>, <13>],
<3>: [<4>, <12>, <8>, <1>, <2>],
<7>: [<4>, <10>, <0>]}","Node <13> is connected to node <12>.
Node <12> is connected to nodes <5>, <4>.
Node <5> is connected to node <4>.
Node <9> is connected to nodes <1>, <10>, <0>.
Node <1> is connected to nodes <10>, <2>, <12>.
Node <0> is connected to node <13>.
Node <2> is connected to nodes <4>, <13>, <6>, <8>.
Node <6> is connected to nodes <10>, <7>.
Node <8> is connected to nodes <6>, <10>, <4>, <13>, <7>.
Node <11> is connected to nodes <0>, <6>, <1>, <3>, <13>.
Node <3> is connected to nodes <4>, <12>, <8>, <1>, <2>.
Node <7> is connected to nodes <4>, <10>, <0>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>]",14,35,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<9>, <11>, <3>, <1>, <2>, <8>, <6>, <7>, <10>, <0>, <13>, <12>, <5>, <4>]","Let's solve it step by step.
Nodes with 0 in-degree: [<9>, <11>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<11>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<10>, <0>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<13>].
Visit node <13> and remove it from the graph.
Nodes with 0 in-degree: [<12>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
So the result of topological sorting is ","('[[<9>, <11>, <3>, <1>, <2>, <8>, <6>, <12>, <7>, <5>, <4>, <13>, <0>, <10>], [<9>, <11>, <3>, <1>, <13>, <12>, <5>, <4>, <2>, <8>, <6>, <7>, <10>, <0>], [<9>, <11>, <3>, <1>, <2>, <8>, <6>, <7>, <10>, <0>, <13>, <12>, <5>, <4>], [<9>, <2>, <6>, <8>, <13>, <1>, <5>, <7>, <10>, <0>, <11>, <12>, <4>, <3>]]',)",2,74
topological_sort,"[(<4>, <7>), (<4>, <11>), (<4>, <13>), (<7>, <2>), (<11>, <6>), (<13>, <2>), (<13>, <9>), (<13>, <6>), (<12>, <4>), (<12>, <8>), (<12>, <1>), (<8>, <3>), (<1>, <9>), (<9>, <11>), (<9>, <7>), (<6>, <7>), (<10>, <5>), (<10>, <8>), (<10>, <9>), (<10>, <3>), (<5>, <1>), (<5>, <4>), (<5>, <2>), (<5>, <9>), (<3>, <6>), (<3>, <4>), (<0>, <4>), (<0>, <11>), (<0>, <10>), (<0>, <8>), (<0>, <7>), (<0>, <12>), (<0>, <2>)]","{<4>: [<7>, <11>, <13>],
<7>: [<2>],
<11>: [<6>],
<13>: [<2>, <9>, <6>],
<2>: [],
<12>: [<4>, <8>, <1>],
<8>: [<3>],
<1>: [<9>],
<9>: [<11>, <7>],
<6>: [<7>],
<10>: [<5>, <8>, <9>, <3>],
<5>: [<1>, <4>, <2>, <9>],
<3>: [<6>, <4>],
<0>: [<4>, <11>, <10>, <8>, <7>, <12>, <2>]}","Node <4> is connected to nodes <7>, <11>, <13>.
Node <7> is connected to node <2>.
Node <11> is connected to node <6>.
Node <13> is connected to nodes <2>, <9>, <6>.
Node <12> is connected to nodes <4>, <8>, <1>.
Node <8> is connected to node <3>.
Node <1> is connected to node <9>.
Node <9> is connected to nodes <11>, <7>.
Node <6> is connected to node <7>.
Node <10> is connected to nodes <5>, <8>, <9>, <3>.
Node <5> is connected to nodes <1>, <4>, <2>, <9>.
Node <3> is connected to nodes <6>, <4>.
Node <0> is connected to nodes <4>, <11>, <10>, <8>, <7>, <12>, <2>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>]",14,33,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<0>, <10>, <12>, <5>, <8>, <1>, <3>, <4>, <13>, <9>, <11>, <6>, <7>, <2>]","Let's solve it step by step.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<10>, <12>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<12>, <5>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <8>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<8>, <1>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <3>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<13>].
Visit node <13> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<11>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
So the result of topological sorting is ","('[[<0>, <10>, <12>, <5>, <8>, <1>, <3>, <13>, <6>, <11>, <9>, <2>, <4>, <7>], [<0>, <10>, <12>, <5>, <8>, <1>, <3>, <4>, <13>, <9>, <11>, <6>, <7>, <2>], [<0>, <10>, <12>, <5>, <11>, <6>, <7>, <2>, <8>, <1>, <3>, <4>, <13>, <9>], [<0>, <7>, <4>, <6>, <5>, <2>, <3>, <13>, <9>, <11>, <10>, <8>, <12>, <1>]]',)",1,75
topological_sort,"[(<5>, <1>), (<5>, <6>), (<1>, <3>), (<6>, <3>), (<7>, <2>), (<7>, <5>), (<7>, <3>), (<7>, <1>), (<7>, <0>), (<2>, <0>), (<2>, <5>), (<0>, <1>), (<0>, <6>), (<8>, <5>), (<8>, <0>), (<8>, <1>), (<8>, <7>), (<8>, <2>), (<4>, <8>), (<4>, <0>)]","{<5>: [<1>, <6>],
<1>: [<3>],
<6>: [<3>],
<3>: [],
<7>: [<2>, <5>, <3>, <1>, <0>],
<2>: [<0>, <5>],
<0>: [<1>, <6>],
<8>: [<5>, <0>, <1>, <7>, <2>],
<4>: [<8>, <0>]}","Node <5> is connected to nodes <1>, <6>.
Node <1> is connected to node <3>.
Node <6> is connected to node <3>.
Node <7> is connected to nodes <2>, <5>, <3>, <1>, <0>.
Node <2> is connected to nodes <0>, <5>.
Node <0> is connected to nodes <1>, <6>.
Node <8> is connected to nodes <5>, <0>, <1>, <7>, <2>.
Node <4> is connected to nodes <8>, <0>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>]",9,20,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<4>, <8>, <7>, <2>, <0>, <5>, <1>, <6>, <3>]","Let's solve it step by step.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <5>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <6>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
So the result of topological sorting is ","('[[<4>, <8>, <7>, <2>, <5>, <3>, <0>, <6>, <1>], [<4>, <8>, <7>, <2>, <0>, <5>, <1>, <6>, <3>], [<4>, <8>, <7>, <1>, <6>, <3>, <2>, <0>, <5>], [<4>, <2>, <6>, <5>, <0>, <1>, <7>, <8>, <3>]]',)",1,76
topological_sort,"[(<5>, <3>), (<5>, <1>), (<5>, <4>), (<3>, <4>), (<3>, <1>), (<1>, <7>), (<4>, <7>), (<2>, <0>), (<2>, <4>), (<0>, <3>), (<0>, <5>), (<6>, <4>)]","{<5>: [<3>, <1>, <4>],
<3>: [<4>, <1>],
<1>: [<7>],
<4>: [<7>],
<7>: [],
<2>: [<0>, <4>],
<0>: [<3>, <5>],
<6>: [<4>]}","Node <5> is connected to nodes <3>, <1>, <4>.
Node <3> is connected to nodes <4>, <1>.
Node <1> is connected to node <7>.
Node <4> is connected to node <7>.
Node <2> is connected to nodes <0>, <4>.
Node <0> is connected to nodes <3>, <5>.
Node <6> is connected to node <4>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>]",8,12,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<2>, <6>, <0>, <5>, <3>, <4>, <1>, <7>]","Let's solve it step by step.
Nodes with 0 in-degree: [<2>, <6>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <0>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <1>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
So the result of topological sorting is ","('[[<2>, <6>, <0>, <5>, <3>, <4>, <1>, <7>], [<2>, <6>, <0>, <5>, <4>, <1>, <3>, <7>], [<2>, <5>, <1>, <0>, <6>, <7>, <4>, <3>], [<2>, <6>, <1>, <7>, <0>, <5>, <3>, <4>]]',)",0,77
topological_sort,"[(<6>, <2>), (<6>, <4>), (<6>, <7>), (<6>, <10>), (<2>, <13>), (<2>, <10>), (<2>, <9>), (<4>, <9>), (<7>, <0>), (<7>, <9>), (<7>, <2>), (<7>, <13>), (<10>, <4>), (<13>, <10>), (<8>, <9>), (<8>, <10>), (<8>, <11>), (<8>, <4>), (<11>, <13>), (<11>, <3>), (<11>, <2>), (<11>, <12>), (<11>, <5>), (<11>, <14>), (<0>, <13>), (<3>, <6>), (<3>, <13>), (<3>, <7>), (<3>, <2>), (<3>, <1>), (<3>, <4>), (<3>, <12>), (<1>, <4>), (<1>, <6>), (<1>, <10>), (<12>, <10>), (<12>, <7>), (<14>, <0>), (<14>, <7>), (<14>, <13>), (<14>, <1>), (<14>, <3>), (<5>, <4>), (<5>, <6>), (<5>, <12>), (<5>, <3>)]","{<6>: [<2>, <4>, <7>, <10>],
<2>: [<13>, <10>, <9>],
<4>: [<9>],
<7>: [<0>, <9>, <2>, <13>],
<10>: [<4>],
<13>: [<10>],
<9>: [],
<8>: [<9>, <10>, <11>, <4>],
<11>: [<13>, <3>, <2>, <12>, <5>, <14>],
<0>: [<13>],
<3>: [<6>, <13>, <7>, <2>, <1>, <4>, <12>],
<1>: [<4>, <6>, <10>],
<12>: [<10>, <7>],
<14>: [<0>, <7>, <13>, <1>, <3>],
<5>: [<4>, <6>, <12>, <3>]}","Node <6> is connected to nodes <2>, <4>, <7>, <10>.
Node <2> is connected to nodes <13>, <10>, <9>.
Node <4> is connected to node <9>.
Node <7> is connected to nodes <0>, <9>, <2>, <13>.
Node <10> is connected to node <4>.
Node <13> is connected to node <10>.
Node <8> is connected to nodes <9>, <10>, <11>, <4>.
Node <11> is connected to nodes <13>, <3>, <2>, <12>, <5>, <14>.
Node <0> is connected to node <13>.
Node <3> is connected to nodes <6>, <13>, <7>, <2>, <1>, <4>, <12>.
Node <1> is connected to nodes <4>, <6>, <10>.
Node <12> is connected to nodes <10>, <7>.
Node <14> is connected to nodes <0>, <7>, <13>, <1>, <3>.
Node <5> is connected to nodes <4>, <6>, <12>, <3>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>, <14>]",15,46,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<8>, <11>, <5>, <14>, <3>, <1>, <12>, <6>, <7>, <0>, <2>, <13>, <10>, <4>, <9>]","Let's solve it step by step.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<11>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <14>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<14>].
Visit node <14> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <12>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<12>, <6>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <2>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<13>].
Visit node <13> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
So the result of topological sorting is ","('[[<8>, <11>, <5>, <14>, <3>, <1>, <12>, <6>, <7>, <0>, <2>, <13>, <10>, <4>, <9>], [<8>, <9>, <5>, <14>, <1>, <12>, <7>, <4>, <0>, <10>, <13>, <3>, <2>, <6>, <11>], [<8>, <11>, <5>, <14>, <3>, <2>, <13>, <10>, <4>, <9>, <1>, <12>, <6>, <7>, <0>], [<8>, <11>, <5>, <14>, <3>, <1>, <12>, <7>, <9>, <13>, <10>, <6>, <2>, <0>, <4>]]',)",0,78
topological_sort,"[(<0>, <8>), (<0>, <9>), (<0>, <6>), (<0>, <7>), (<0>, <5>), (<8>, <7>), (<8>, <6>), (<9>, <4>), (<9>, <3>), (<9>, <7>), (<7>, <6>), (<5>, <8>), (<5>, <6>), (<5>, <4>), (<4>, <3>), (<4>, <6>), (<3>, <6>), (<1>, <3>), (<1>, <6>), (<1>, <2>), (<2>, <6>), (<2>, <8>), (<2>, <7>), (<2>, <9>)]","{<0>: [<8>, <9>, <6>, <7>, <5>],
<8>: [<7>, <6>],
<9>: [<4>, <3>, <7>],
<6>: [],
<7>: [<6>],
<5>: [<8>, <6>, <4>],
<4>: [<3>, <6>],
<3>: [<6>],
<1>: [<3>, <6>, <2>],
<2>: [<6>, <8>, <7>, <9>]}","Node <0> is connected to nodes <8>, <9>, <6>, <7>, <5>.
Node <8> is connected to nodes <7>, <6>.
Node <9> is connected to nodes <4>, <3>, <7>.
Node <7> is connected to node <6>.
Node <5> is connected to nodes <8>, <6>, <4>.
Node <4> is connected to nodes <3>, <6>.
Node <3> is connected to node <6>.
Node <1> is connected to nodes <3>, <6>, <2>.
Node <2> is connected to nodes <6>, <8>, <7>, <9>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>]",10,24,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<0>, <1>, <5>, <2>, <8>, <9>, <4>, <7>, <3>, <6>]","Let's solve it step by step.
Nodes with 0 in-degree: [<0>, <1>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <5>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <2>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<8>, <9>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <7>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <3>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
So the result of topological sorting is ","('[[<0>, <1>, <5>, <7>, <3>, <6>, <2>, <8>, <9>, <4>], [<0>, <1>, <5>, <2>, <8>, <7>, <9>, <6>, <3>, <4>], [<0>, <7>, <9>, <2>, <1>, <8>, <6>, <4>, <3>, <5>], [<0>, <1>, <5>, <2>, <8>, <9>, <4>, <7>, <3>, <6>]]',)",3,79
topological_sort,"[(<6>, <5>), (<5>, <1>), (<5>, <9>), (<2>, <8>), (<2>, <7>), (<8>, <1>), (<8>, <0>), (<8>, <11>), (<7>, <8>), (<7>, <9>), (<0>, <9>), (<0>, <5>), (<3>, <4>), (<3>, <2>), (<3>, <9>), (<3>, <5>), (<4>, <8>), (<4>, <10>), (<4>, <6>), (<10>, <7>), (<10>, <11>)]","{<6>: [<5>],
<5>: [<1>, <9>],
<1>: [],
<9>: [],
<2>: [<8>, <7>],
<8>: [<1>, <0>, <11>],
<7>: [<8>, <9>],
<0>: [<9>, <5>],
<11>: [],
<3>: [<4>, <2>, <9>, <5>],
<4>: [<8>, <10>, <6>],
<10>: [<7>, <11>]}","Node <6> is connected to node <5>.
Node <5> is connected to nodes <1>, <9>.
Node <2> is connected to nodes <8>, <7>.
Node <8> is connected to nodes <1>, <0>, <11>.
Node <7> is connected to nodes <8>, <9>.
Node <0> is connected to nodes <9>, <5>.
Node <3> is connected to nodes <4>, <2>, <9>, <5>.
Node <4> is connected to nodes <8>, <10>, <6>.
Node <10> is connected to nodes <7>, <11>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>]",12,21,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<3>, <4>, <2>, <10>, <6>, <7>, <8>, <0>, <11>, <5>, <1>, <9>]","Let's solve it step by step.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <2>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <10>, <6>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<10>, <6>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <7>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <11>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<11>, <5>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <9>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
So the result of topological sorting is ","('[[<3>, <4>, <2>, <10>, <6>, <7>, <8>, <0>, <11>, <5>, <1>, <9>], [<3>, <4>, <2>, <10>, <11>, <5>, <1>, <9>, <6>, <7>, <8>, <0>], [<3>, <0>, <5>, <7>, <8>, <10>, <9>, <4>, <1>, <6>, <2>, <11>], [<3>, <4>, <2>, <10>, <6>, <7>, <9>, <1>, <11>, <8>, <5>, <0>]]',)",0,80
topological_sort,"[(<6>, <14>), (<6>, <1>), (<6>, <9>), (<14>, <12>), (<12>, <13>), (<3>, <12>), (<3>, <5>), (<5>, <1>), (<5>, <9>), (<13>, <1>), (<13>, <5>), (<10>, <12>), (<10>, <13>), (<10>, <4>), (<4>, <7>), (<7>, <1>), (<7>, <12>), (<8>, <11>), (<8>, <6>), (<11>, <13>), (<11>, <6>), (<11>, <5>), (<0>, <12>), (<0>, <4>), (<0>, <7>), (<0>, <13>), (<2>, <6>), (<2>, <11>), (<2>, <8>)]","{<6>: [<14>, <1>, <9>],
<14>: [<12>],
<1>: [],
<9>: [],
<12>: [<13>],
<3>: [<12>, <5>],
<5>: [<1>, <9>],
<13>: [<1>, <5>],
<10>: [<12>, <13>, <4>],
<4>: [<7>],
<7>: [<1>, <12>],
<8>: [<11>, <6>],
<11>: [<13>, <6>, <5>],
<0>: [<12>, <4>, <7>, <13>],
<2>: [<6>, <11>, <8>]}","Node <6> is connected to nodes <14>, <1>, <9>.
Node <14> is connected to node <12>.
Node <12> is connected to node <13>.
Node <3> is connected to nodes <12>, <5>.
Node <5> is connected to nodes <1>, <9>.
Node <13> is connected to nodes <1>, <5>.
Node <10> is connected to nodes <12>, <13>, <4>.
Node <4> is connected to node <7>.
Node <7> is connected to nodes <1>, <12>.
Node <8> is connected to nodes <11>, <6>.
Node <11> is connected to nodes <13>, <6>, <5>.
Node <0> is connected to nodes <12>, <4>, <7>, <13>.
Node <2> is connected to nodes <6>, <11>, <8>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>, <14>]",15,29,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<3>, <10>, <0>, <2>, <4>, <8>, <7>, <11>, <6>, <14>, <12>, <13>, <5>, <1>, <9>]","Let's solve it step by step.
Nodes with 0 in-degree: [<3>, <10>, <0>, <2>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<10>, <0>, <2>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <2>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <4>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <8>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<8>, <7>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <11>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<11>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<14>].
Visit node <14> and remove it from the graph.
Nodes with 0 in-degree: [<12>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<13>].
Visit node <13> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <9>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
So the result of topological sorting is ","('[[<3>, <10>, <0>, <2>, <4>, <8>, <7>, <11>, <6>, <14>, <12>, <13>, <5>, <1>, <9>], [<3>, <10>, <0>, <2>, <4>, <12>, <13>, <5>, <1>, <9>, <8>, <7>, <11>, <6>, <14>], [<3>, <10>, <0>, <2>, <4>, <8>, <7>, <12>, <5>, <1>, <14>, <13>, <6>, <9>, <11>], [<3>, <5>, <2>, <6>, <13>, <4>, <7>, <12>, <8>, <14>, <11>, <0>, <10>, <1>, <9>]]',)",0,81
topological_sort,"[(<3>, <1>), (<3>, <4>), (<3>, <10>), (<3>, <9>), (<1>, <2>), (<1>, <6>), (<4>, <7>), (<4>, <2>), (<4>, <8>), (<4>, <11>), (<10>, <5>), (<10>, <7>), (<10>, <6>), (<9>, <4>), (<9>, <8>), (<2>, <7>), (<6>, <0>), (<6>, <2>), (<5>, <8>), (<5>, <0>), (<5>, <6>), (<5>, <2>), (<5>, <9>), (<8>, <7>), (<0>, <9>), (<0>, <11>)]","{<3>: [<1>, <4>, <10>, <9>],
<1>: [<2>, <6>],
<4>: [<7>, <2>, <8>, <11>],
<10>: [<5>, <7>, <6>],
<9>: [<4>, <8>],
<2>: [<7>],
<6>: [<0>, <2>],
<5>: [<8>, <0>, <6>, <2>, <9>],
<8>: [<7>],
<0>: [<9>, <11>],
<7>: [],
<11>: []}","Node <3> is connected to nodes <1>, <4>, <10>, <9>.
Node <1> is connected to nodes <2>, <6>.
Node <4> is connected to nodes <7>, <2>, <8>, <11>.
Node <10> is connected to nodes <5>, <7>, <6>.
Node <9> is connected to nodes <4>, <8>.
Node <2> is connected to node <7>.
Node <6> is connected to nodes <0>, <2>.
Node <5> is connected to nodes <8>, <0>, <6>, <2>, <9>.
Node <8> is connected to node <7>.
Node <0> is connected to nodes <9>, <11>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>]",12,26,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<3>, <1>, <10>, <5>, <6>, <0>, <9>, <4>, <2>, <8>, <11>, <7>]","Let's solve it step by step.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <10>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <8>, <11>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<8>, <11>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<11>, <7>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
So the result of topological sorting is ","('[[<3>, <1>, <10>, <5>, <2>, <8>, <11>, <7>, <6>, <0>, <9>, <4>], [<3>, <1>, <10>, <5>, <6>, <0>, <9>, <4>, <2>, <8>, <11>, <7>], [<3>, <11>, <2>, <10>, <0>, <8>, <9>, <5>, <6>, <4>, <1>, <7>], [<3>, <1>, <10>, <5>, <6>, <0>, <8>, <7>, <4>, <9>, <2>, <11>]]',)",1,82
topological_sort,"[(<3>, <5>), (<3>, <6>), (<3>, <8>), (<3>, <7>), (<3>, <10>), (<3>, <1>), (<3>, <9>), (<5>, <12>), (<5>, <1>), (<5>, <7>), (<6>, <12>), (<6>, <7>), (<8>, <4>), (<8>, <5>), (<7>, <10>), (<1>, <7>), (<1>, <0>), (<1>, <12>), (<9>, <7>), (<9>, <8>), (<9>, <0>), (<9>, <10>), (<9>, <12>), (<9>, <5>), (<12>, <0>), (<12>, <10>), (<12>, <7>), (<0>, <10>), (<11>, <6>), (<11>, <5>), (<11>, <0>), (<11>, <7>), (<11>, <8>), (<4>, <5>), (<4>, <12>), (<4>, <0>), (<4>, <1>), (<2>, <11>), (<2>, <4>), (<2>, <3>), (<2>, <8>), (<2>, <12>)]","{<3>: [<5>, <6>, <8>, <7>, <10>, <1>, <9>],
<5>: [<12>, <1>, <7>],
<6>: [<12>, <7>],
<8>: [<4>, <5>],
<7>: [<10>],
<10>: [],
<1>: [<7>, <0>, <12>],
<9>: [<7>, <8>, <0>, <10>, <12>, <5>],
<12>: [<0>, <10>, <7>],
<0>: [<10>],
<11>: [<6>, <5>, <0>, <7>, <8>],
<4>: [<5>, <12>, <0>, <1>],
<2>: [<11>, <4>, <3>, <8>, <12>]}","Node <3> is connected to nodes <5>, <6>, <8>, <7>, <10>, <1>, <9>.
Node <5> is connected to nodes <12>, <1>, <7>.
Node <6> is connected to nodes <12>, <7>.
Node <8> is connected to nodes <4>, <5>.
Node <7> is connected to node <10>.
Node <1> is connected to nodes <7>, <0>, <12>.
Node <9> is connected to nodes <7>, <8>, <0>, <10>, <12>, <5>.
Node <12> is connected to nodes <0>, <10>, <7>.
Node <0> is connected to node <10>.
Node <11> is connected to nodes <6>, <5>, <0>, <7>, <8>.
Node <4> is connected to nodes <5>, <12>, <0>, <1>.
Node <2> is connected to nodes <11>, <4>, <3>, <8>, <12>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>]",13,42,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<2>, <11>, <3>, <6>, <9>, <8>, <4>, <5>, <1>, <12>, <0>, <7>, <10>]","Let's solve it step by step.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<11>, <3>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <9>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<12>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <7>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
So the result of topological sorting is ","('[[<2>, <11>, <3>, <6>, <12>, <0>, <7>, <10>, <9>, <8>, <4>, <5>, <1>], [<2>, <11>, <3>, <6>, <9>, <8>, <5>, <1>, <7>, <0>, <10>, <4>, <12>], [<2>, <11>, <3>, <6>, <9>, <8>, <4>, <5>, <1>, <12>, <0>, <7>, <10>], [<2>, <5>, <4>, <0>, <1>, <6>, <11>, <8>, <3>, <7>, <12>, <9>, <10>]]',)",2,83
topological_sort,"[(<5>, <2>), (<5>, <11>), (<5>, <1>), (<5>, <4>), (<2>, <10>), (<2>, <12>), (<11>, <8>), (<11>, <12>), (<4>, <2>), (<4>, <10>), (<10>, <12>), (<10>, <0>), (<9>, <1>), (<9>, <2>), (<9>, <7>), (<7>, <12>), (<7>, <2>), (<6>, <8>), (<6>, <7>), (<8>, <9>), (<0>, <12>), (<3>, <0>), (<3>, <9>), (<3>, <8>), (<3>, <12>), (<3>, <4>), (<3>, <5>)]","{<5>: [<2>, <11>, <1>, <4>],
<2>: [<10>, <12>],
<11>: [<8>, <12>],
<1>: [],
<4>: [<2>, <10>],
<10>: [<12>, <0>],
<12>: [],
<9>: [<1>, <2>, <7>],
<7>: [<12>, <2>],
<6>: [<8>, <7>],
<8>: [<9>],
<0>: [<12>],
<3>: [<0>, <9>, <8>, <12>, <4>, <5>]}","Node <5> is connected to nodes <2>, <11>, <1>, <4>.
Node <2> is connected to nodes <10>, <12>.
Node <11> is connected to nodes <8>, <12>.
Node <4> is connected to nodes <2>, <10>.
Node <10> is connected to nodes <12>, <0>.
Node <9> is connected to nodes <1>, <2>, <7>.
Node <7> is connected to nodes <12>, <2>.
Node <6> is connected to nodes <8>, <7>.
Node <8> is connected to node <9>.
Node <0> is connected to node <12>.
Node <3> is connected to nodes <0>, <9>, <8>, <12>, <4>, <5>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>]",13,27,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<6>, <3>, <5>, <11>, <4>, <8>, <9>, <1>, <7>, <2>, <10>, <0>, <12>]","Let's solve it step by step.
Nodes with 0 in-degree: [<6>, <3>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<11>, <4>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <8>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <7>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<12>].
Visit node <12> and remove it from the graph.
So the result of topological sorting is ","('[[<6>, <3>, <5>, <11>, <2>, <10>, <0>, <12>, <4>, <8>, <9>, <1>, <7>], [<6>, <3>, <2>, <9>, <7>, <1>, <4>, <12>, <0>, <5>, <10>, <11>, <8>], [<6>, <3>, <5>, <11>, <4>, <8>, <2>, <12>, <7>, <0>, <1>, <10>, <9>], [<6>, <3>, <5>, <11>, <4>, <8>, <9>, <1>, <7>, <2>, <10>, <0>, <12>]]',)",3,84
topological_sort,"[(<3>, <1>), (<1>, <5>), (<5>, <14>), (<5>, <8>), (<4>, <13>), (<13>, <5>), (<13>, <10>), (<13>, <3>), (<10>, <0>), (<10>, <5>), (<6>, <4>), (<6>, <11>), (<6>, <2>), (<6>, <8>), (<6>, <12>), (<11>, <1>), (<11>, <0>), (<2>, <7>), (<2>, <3>), (<12>, <7>), (<12>, <10>), (<12>, <13>), (<12>, <9>), (<7>, <3>), (<7>, <14>), (<7>, <13>), (<0>, <3>), (<9>, <7>), (<9>, <0>)]","{<3>: [<1>],
<1>: [<5>],
<5>: [<14>, <8>],
<4>: [<13>],
<13>: [<5>, <10>, <3>],
<10>: [<0>, <5>],
<6>: [<4>, <11>, <2>, <8>, <12>],
<11>: [<1>, <0>],
<2>: [<7>, <3>],
<8>: [],
<12>: [<7>, <10>, <13>, <9>],
<7>: [<3>, <14>, <13>],
<14>: [],
<0>: [<3>],
<9>: [<7>, <0>]}","Node <3> is connected to node <1>.
Node <1> is connected to node <5>.
Node <5> is connected to nodes <14>, <8>.
Node <4> is connected to node <13>.
Node <13> is connected to nodes <5>, <10>, <3>.
Node <10> is connected to nodes <0>, <5>.
Node <6> is connected to nodes <4>, <11>, <2>, <8>, <12>.
Node <11> is connected to nodes <1>, <0>.
Node <2> is connected to nodes <7>, <3>.
Node <12> is connected to nodes <7>, <10>, <13>, <9>.
Node <7> is connected to nodes <3>, <14>, <13>.
Node <0> is connected to node <3>.
Node <9> is connected to nodes <7>, <0>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>, <14>]",15,29,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<6>, <4>, <11>, <2>, <12>, <9>, <7>, <13>, <10>, <0>, <3>, <1>, <5>, <14>, <8>]","Let's solve it step by step.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <11>, <2>, <12>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<11>, <2>, <12>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <12>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<12>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<13>].
Visit node <13> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<14>, <8>].
Visit node <14> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
So the result of topological sorting is ","('[[<6>, <4>, <11>, <2>, <12>, <9>, <7>, <13>, <10>, <0>, <3>, <1>, <5>, <14>, <8>], [<6>, <4>, <11>, <2>, <12>, <9>, <7>, <5>, <10>, <1>, <13>, <8>, <3>, <0>, <14>], [<6>, <4>, <11>, <2>, <12>, <3>, <1>, <5>, <14>, <8>, <9>, <7>, <13>, <10>, <0>], [<6>, <5>, <4>, <3>, <7>, <12>, <1>, <9>, <14>, <2>, <8>, <10>, <11>, <0>, <13>]]',)",0,85
topological_sort,"[(<4>, <0>), (<0>, <6>), (<0>, <3>), (<6>, <7>), (<3>, <6>), (<2>, <0>), (<2>, <3>), (<1>, <0>), (<5>, <4>)]","{<4>: [<0>],
<0>: [<6>, <3>],
<6>: [<7>],
<3>: [<6>],
<2>: [<0>, <3>],
<7>: [],
<1>: [<0>],
<5>: [<4>]}","Node <4> is connected to node <0>.
Node <0> is connected to nodes <6>, <3>.
Node <6> is connected to node <7>.
Node <3> is connected to node <6>.
Node <2> is connected to nodes <0>, <3>.
Node <1> is connected to node <0>.
Node <5> is connected to node <4>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>]",8,9,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<2>, <1>, <5>, <4>, <0>, <3>, <6>, <7>]","Let's solve it step by step.
Nodes with 0 in-degree: [<2>, <1>, <5>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <5>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
So the result of topological sorting is ","('[[<2>, <1>, <5>, <4>, <0>, <3>, <6>, <7>], [<2>, <6>, <0>, <1>, <5>, <3>, <7>, <4>], [<2>, <1>, <6>, <7>, <5>, <4>, <0>, <3>], [<2>, <1>, <5>, <4>, <3>, <0>, <6>, <7>]]',)",0,86
topological_sort,"[(<5>, <7>), (<5>, <12>), (<5>, <14>), (<5>, <10>), (<7>, <14>), (<12>, <8>), (<12>, <13>), (<12>, <7>), (<10>, <8>), (<10>, <13>), (<10>, <12>), (<13>, <7>), (<13>, <14>), (<13>, <8>), (<8>, <7>), (<8>, <14>), (<11>, <5>), (<11>, <12>), (<11>, <8>), (<11>, <14>), (<11>, <3>), (<11>, <9>), (<11>, <13>), (<11>, <7>), (<3>, <9>), (<3>, <8>), (<3>, <0>), (<3>, <12>), (<3>, <5>), (<9>, <8>), (<9>, <12>), (<9>, <5>), (<9>, <10>), (<0>, <8>), (<0>, <10>), (<0>, <7>), (<1>, <7>), (<1>, <10>), (<1>, <11>), (<1>, <3>), (<2>, <13>), (<2>, <4>), (<2>, <10>), (<2>, <12>), (<2>, <11>), (<4>, <9>), (<4>, <8>), (<4>, <12>), (<6>, <10>), (<6>, <5>), (<6>, <11>)]","{<5>: [<7>, <12>, <14>, <10>],
<7>: [<14>],
<12>: [<8>, <13>, <7>],
<14>: [],
<10>: [<8>, <13>, <12>],
<13>: [<7>, <14>, <8>],
<8>: [<7>, <14>],
<11>: [<5>, <12>, <8>, <14>, <3>, <9>, <13>, <7>],
<3>: [<9>, <8>, <0>, <12>, <5>],
<9>: [<8>, <12>, <5>, <10>],
<0>: [<8>, <10>, <7>],
<1>: [<7>, <10>, <11>, <3>],
<2>: [<13>, <4>, <10>, <12>, <11>],
<4>: [<9>, <8>, <12>],
<6>: [<10>, <5>, <11>]}","Node <5> is connected to nodes <7>, <12>, <14>, <10>.
Node <7> is connected to node <14>.
Node <12> is connected to nodes <8>, <13>, <7>.
Node <10> is connected to nodes <8>, <13>, <12>.
Node <13> is connected to nodes <7>, <14>, <8>.
Node <8> is connected to nodes <7>, <14>.
Node <11> is connected to nodes <5>, <12>, <8>, <14>, <3>, <9>, <13>, <7>.
Node <3> is connected to nodes <9>, <8>, <0>, <12>, <5>.
Node <9> is connected to nodes <8>, <12>, <5>, <10>.
Node <0> is connected to nodes <8>, <10>, <7>.
Node <1> is connected to nodes <7>, <10>, <11>, <3>.
Node <2> is connected to nodes <13>, <4>, <10>, <12>, <11>.
Node <4> is connected to nodes <9>, <8>, <12>.
Node <6> is connected to nodes <10>, <5>, <11>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>, <14>]",15,51,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<1>, <2>, <6>, <4>, <11>, <3>, <9>, <0>, <5>, <10>, <12>, <13>, <8>, <7>, <14>]","Let's solve it step by step.
Nodes with 0 in-degree: [<1>, <2>, <6>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <6>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <4>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <11>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<11>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<9>, <0>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <5>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<12>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<13>].
Visit node <13> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<14>].
Visit node <14> and remove it from the graph.
So the result of topological sorting is ","('[[<1>, <2>, <6>, <4>, <11>, <12>, <13>, <8>, <7>, <14>, <3>, <9>, <0>, <5>, <10>], [<1>, <2>, <6>, <4>, <11>, <3>, <9>, <10>, <0>, <7>, <13>, <5>, <14>, <12>, <8>], [<1>, <2>, <8>, <3>, <4>, <12>, <6>, <13>, <7>, <14>, <9>, <0>, <10>, <5>, <11>], [<1>, <2>, <6>, <4>, <11>, <3>, <9>, <0>, <5>, <10>, <12>, <13>, <8>, <7>, <14>]]',)",3,87
topological_sort,"[(<8>, <6>), (<8>, <3>), (<6>, <2>), (<6>, <1>), (<3>, <2>), (<2>, <11>), (<2>, <4>), (<1>, <4>), (<1>, <11>), (<9>, <10>), (<9>, <8>), (<9>, <3>), (<9>, <6>), (<10>, <5>), (<10>, <0>), (<10>, <7>), (<10>, <1>), (<10>, <11>), (<10>, <6>), (<10>, <8>), (<5>, <7>), (<5>, <2>), (<5>, <3>), (<5>, <4>), (<0>, <8>), (<0>, <1>), (<7>, <2>), (<7>, <8>), (<7>, <11>), (<7>, <1>), (<11>, <4>), (<12>, <7>), (<12>, <11>), (<12>, <1>), (<12>, <4>), (<12>, <0>)]","{<8>: [<6>, <3>],
<6>: [<2>, <1>],
<3>: [<2>],
<2>: [<11>, <4>],
<1>: [<4>, <11>],
<9>: [<10>, <8>, <3>, <6>],
<10>: [<5>, <0>, <7>, <1>, <11>, <6>, <8>],
<5>: [<7>, <2>, <3>, <4>],
<0>: [<8>, <1>],
<7>: [<2>, <8>, <11>, <1>],
<11>: [<4>],
<4>: [],
<12>: [<7>, <11>, <1>, <4>, <0>]}","Node <8> is connected to nodes <6>, <3>.
Node <6> is connected to nodes <2>, <1>.
Node <3> is connected to node <2>.
Node <2> is connected to nodes <11>, <4>.
Node <1> is connected to nodes <4>, <11>.
Node <9> is connected to nodes <10>, <8>, <3>, <6>.
Node <10> is connected to nodes <5>, <0>, <7>, <1>, <11>, <6>, <8>.
Node <5> is connected to nodes <7>, <2>, <3>, <4>.
Node <0> is connected to nodes <8>, <1>.
Node <7> is connected to nodes <2>, <8>, <11>, <1>.
Node <11> is connected to node <4>.
Node <12> is connected to nodes <7>, <11>, <1>, <4>, <0>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>]",13,36,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<9>, <12>, <10>, <5>, <0>, <7>, <8>, <6>, <3>, <1>, <2>, <11>, <4>]","Let's solve it step by step.
Nodes with 0 in-degree: [<9>, <12>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<12>, <10>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <0>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <7>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <3>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <1>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <2>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<11>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
So the result of topological sorting is ","('[[<9>, <12>, <10>, <5>, <0>, <7>, <11>, <6>, <1>, <8>, <3>, <2>, <4>], [<9>, <12>, <10>, <5>, <0>, <7>, <8>, <6>, <3>, <1>, <2>, <11>, <4>], [<9>, <12>, <10>, <5>, <1>, <2>, <11>, <4>, <0>, <7>, <8>, <6>, <3>], [<9>, <12>, <1>, <6>, <7>, <0>, <5>, <11>, <4>, <3>, <2>, <8>, <10>]]',)",1,88
topological_sort,"[(<6>, <7>), (<6>, <3>), (<1>, <2>), (<1>, <0>), (<1>, <6>), (<2>, <4>), (<2>, <5>), (<2>, <3>), (<0>, <4>), (<0>, <3>), (<0>, <7>), (<0>, <5>), (<4>, <6>), (<5>, <6>), (<5>, <4>)]","{<6>: [<7>, <3>],
<7>: [],
<3>: [],
<1>: [<2>, <0>, <6>],
<2>: [<4>, <5>, <3>],
<0>: [<4>, <3>, <7>, <5>],
<4>: [<6>],
<5>: [<6>, <4>]}","Node <6> is connected to nodes <7>, <3>.
Node <1> is connected to nodes <2>, <0>, <6>.
Node <2> is connected to nodes <4>, <5>, <3>.
Node <0> is connected to nodes <4>, <3>, <7>, <5>.
Node <4> is connected to node <6>.
Node <5> is connected to nodes <6>, <4>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>]",8,15,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<1>, <2>, <0>, <5>, <4>, <6>, <7>, <3>]","Let's solve it step by step.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <0>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <3>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
So the result of topological sorting is ","('[[<1>, <2>, <0>, <5>, <4>, <6>, <7>, <3>], [<1>, <5>, <0>, <7>, <3>, <4>, <2>, <6>], [<1>, <2>, <7>, <3>, <0>, <5>, <4>, <6>], [<1>, <2>, <0>, <5>, <7>, <3>, <6>, <4>]]',)",0,89
topological_sort,"[(<1>, <13>), (<1>, <2>), (<1>, <5>), (<1>, <9>), (<1>, <3>), (<1>, <7>), (<1>, <6>), (<13>, <3>), (<13>, <7>), (<13>, <4>), (<13>, <12>), (<13>, <2>), (<2>, <4>), (<2>, <3>), (<2>, <10>), (<2>, <11>), (<2>, <12>), (<3>, <7>), (<3>, <12>), (<7>, <5>), (<7>, <9>), (<6>, <5>), (<6>, <10>), (<6>, <3>), (<6>, <2>), (<6>, <13>), (<4>, <12>), (<4>, <10>), (<12>, <9>), (<0>, <9>), (<0>, <12>), (<0>, <7>), (<0>, <13>), (<0>, <2>), (<0>, <6>), (<0>, <1>), (<10>, <3>), (<10>, <5>), (<10>, <8>), (<10>, <11>), (<11>, <9>), (<11>, <12>), (<11>, <8>), (<8>, <7>)]","{<1>: [<13>, <2>, <5>, <9>, <3>, <7>, <6>],
<13>: [<3>, <7>, <4>, <12>, <2>],
<2>: [<4>, <3>, <10>, <11>, <12>],
<5>: [],
<9>: [],
<3>: [<7>, <12>],
<7>: [<5>, <9>],
<6>: [<5>, <10>, <3>, <2>, <13>],
<4>: [<12>, <10>],
<12>: [<9>],
<0>: [<9>, <12>, <7>, <13>, <2>, <6>, <1>],
<10>: [<3>, <5>, <8>, <11>],
<11>: [<9>, <12>, <8>],
<8>: [<7>]}","Node <1> is connected to nodes <13>, <2>, <5>, <9>, <3>, <7>, <6>.
Node <13> is connected to nodes <3>, <7>, <4>, <12>, <2>.
Node <2> is connected to nodes <4>, <3>, <10>, <11>, <12>.
Node <3> is connected to nodes <7>, <12>.
Node <7> is connected to nodes <5>, <9>.
Node <6> is connected to nodes <5>, <10>, <3>, <2>, <13>.
Node <4> is connected to nodes <12>, <10>.
Node <12> is connected to node <9>.
Node <0> is connected to nodes <9>, <12>, <7>, <13>, <2>, <6>, <1>.
Node <10> is connected to nodes <3>, <5>, <8>, <11>.
Node <11> is connected to nodes <9>, <12>, <8>.
Node <8> is connected to node <7>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>]",14,44,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<0>, <1>, <6>, <13>, <2>, <4>, <10>, <3>, <11>, <12>, <8>, <7>, <5>, <9>]","Let's solve it step by step.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<13>].
Visit node <13> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <11>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<11>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<12>, <8>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <9>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
So the result of topological sorting is ","('[[<0>, <1>, <6>, <13>, <8>, <7>, <5>, <9>, <2>, <4>, <10>, <3>, <11>, <12>], [<0>, <3>, <5>, <11>, <2>, <1>, <8>, <9>, <6>, <10>, <13>, <12>, <7>, <4>], [<0>, <1>, <6>, <13>, <2>, <4>, <10>, <3>, <11>, <12>, <8>, <7>, <5>, <9>], [<0>, <1>, <6>, <13>, <2>, <4>, <10>, <7>, <3>, <9>, <11>, <5>, <8>, <12>]]',)",2,90
topological_sort,"[(<13>, <10>), (<13>, <11>), (<13>, <8>), (<13>, <9>), (<10>, <7>), (<10>, <14>), (<11>, <12>), (<11>, <14>), (<8>, <14>), (<8>, <12>), (<8>, <3>), (<9>, <7>), (<7>, <14>), (<7>, <8>), (<2>, <14>), (<2>, <6>), (<2>, <9>), (<2>, <4>), (<6>, <13>), (<4>, <10>), (<4>, <12>), (<3>, <11>), (<1>, <4>), (<1>, <2>), (<1>, <10>), (<5>, <1>), (<0>, <9>), (<0>, <4>)]","{<13>: [<10>, <11>, <8>, <9>],
<10>: [<7>, <14>],
<11>: [<12>, <14>],
<8>: [<14>, <12>, <3>],
<9>: [<7>],
<7>: [<14>, <8>],
<14>: [],
<2>: [<14>, <6>, <9>, <4>],
<6>: [<13>],
<4>: [<10>, <12>],
<12>: [],
<3>: [<11>],
<1>: [<4>, <2>, <10>],
<5>: [<1>],
<0>: [<9>, <4>]}","Node <13> is connected to nodes <10>, <11>, <8>, <9>.
Node <10> is connected to nodes <7>, <14>.
Node <11> is connected to nodes <12>, <14>.
Node <8> is connected to nodes <14>, <12>, <3>.
Node <9> is connected to node <7>.
Node <7> is connected to nodes <14>, <8>.
Node <2> is connected to nodes <14>, <6>, <9>, <4>.
Node <6> is connected to node <13>.
Node <4> is connected to nodes <10>, <12>.
Node <3> is connected to node <11>.
Node <1> is connected to nodes <4>, <2>, <10>.
Node <5> is connected to node <1>.
Node <0> is connected to nodes <9>, <4>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>, <14>]",15,28,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<5>, <0>, <1>, <2>, <6>, <4>, <13>, <10>, <9>, <7>, <8>, <3>, <11>, <12>, <14>]","Let's solve it step by step.
Nodes with 0 in-degree: [<5>, <0>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <1>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <4>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <13>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<13>].
Visit node <13> and remove it from the graph.
Nodes with 0 in-degree: [<10>, <9>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<11>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<12>, <14>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<14>].
Visit node <14> and remove it from the graph.
So the result of topological sorting is ","('[[<5>, <0>, <1>, <2>, <6>, <8>, <3>, <11>, <12>, <14>, <4>, <13>, <10>, <9>, <7>], [<5>, <0>, <1>, <2>, <6>, <4>, <13>, <7>, <11>, <3>, <9>, <14>, <8>, <12>, <10>], [<5>, <0>, <1>, <2>, <6>, <4>, <13>, <10>, <9>, <7>, <8>, <3>, <11>, <12>, <14>], [<5>, <3>, <12>, <7>, <14>, <11>, <1>, <6>, <0>, <9>, <2>, <8>, <13>, <10>, <4>]]',)",2,91
topological_sort,"[(<4>, <7>), (<4>, <0>), (<4>, <2>), (<4>, <1>), (<7>, <8>), (<7>, <3>), (<0>, <5>), (<0>, <1>), (<0>, <2>), (<2>, <11>), (<2>, <9>), (<1>, <9>), (<1>, <2>), (<1>, <5>), (<8>, <9>), (<11>, <5>), (<11>, <3>), (<5>, <7>), (<9>, <3>), (<10>, <0>), (<10>, <7>), (<10>, <11>), (<10>, <4>), (<6>, <8>), (<6>, <10>), (<6>, <5>)]","{<4>: [<7>, <0>, <2>, <1>],
<7>: [<8>, <3>],
<0>: [<5>, <1>, <2>],
<2>: [<11>, <9>],
<1>: [<9>, <2>, <5>],
<8>: [<9>],
<3>: [],
<11>: [<5>, <3>],
<5>: [<7>],
<9>: [<3>],
<10>: [<0>, <7>, <11>, <4>],
<6>: [<8>, <10>, <5>]}","Node <4> is connected to nodes <7>, <0>, <2>, <1>.
Node <7> is connected to nodes <8>, <3>.
Node <0> is connected to nodes <5>, <1>, <2>.
Node <2> is connected to nodes <11>, <9>.
Node <1> is connected to nodes <9>, <2>, <5>.
Node <8> is connected to node <9>.
Node <11> is connected to nodes <5>, <3>.
Node <5> is connected to node <7>.
Node <9> is connected to node <3>.
Node <10> is connected to nodes <0>, <7>, <11>, <4>.
Node <6> is connected to nodes <8>, <10>, <5>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>]",12,26,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<6>, <10>, <4>, <0>, <1>, <2>, <11>, <5>, <7>, <8>, <9>, <3>]","Let's solve it step by step.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<11>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
So the result of topological sorting is ","('[[<6>, <10>, <4>, <0>, <1>, <2>, <5>, <7>, <3>, <9>, <8>, <11>], [<6>, <10>, <4>, <0>, <1>, <2>, <11>, <5>, <7>, <8>, <9>, <3>], [<6>, <0>, <2>, <10>, <11>, <9>, <1>, <8>, <3>, <7>, <5>, <4>], [<6>, <10>, <4>, <0>, <7>, <8>, <9>, <3>, <1>, <2>, <11>, <5>]]',)",1,92
topological_sort,"[(<8>, <9>), (<8>, <4>), (<8>, <1>), (<9>, <0>), (<4>, <7>), (<1>, <4>), (<5>, <8>), (<5>, <0>), (<6>, <9>), (<6>, <3>), (<6>, <8>), (<3>, <5>), (<3>, <7>), (<3>, <2>), (<3>, <9>), (<3>, <4>), (<7>, <9>), (<2>, <5>), (<2>, <4>)]","{<8>: [<9>, <4>, <1>],
<9>: [<0>],
<4>: [<7>],
<1>: [<4>],
<0>: [],
<5>: [<8>, <0>],
<6>: [<9>, <3>, <8>],
<3>: [<5>, <7>, <2>, <9>, <4>],
<7>: [<9>],
<2>: [<5>, <4>]}","Node <8> is connected to nodes <9>, <4>, <1>.
Node <9> is connected to node <0>.
Node <4> is connected to node <7>.
Node <1> is connected to node <4>.
Node <5> is connected to nodes <8>, <0>.
Node <6> is connected to nodes <9>, <3>, <8>.
Node <3> is connected to nodes <5>, <7>, <2>, <9>, <4>.
Node <7> is connected to node <9>.
Node <2> is connected to nodes <5>, <4>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>]",10,19,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<6>, <3>, <2>, <5>, <8>, <1>, <4>, <7>, <9>, <0>]","Let's solve it step by step.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
So the result of topological sorting is ","('[[<6>, <3>, <1>, <2>, <4>, <7>, <8>, <9>, <5>, <0>], [<6>, <3>, <2>, <7>, <9>, <0>, <5>, <8>, <1>, <4>], [<6>, <3>, <2>, <5>, <8>, <4>, <1>, <7>, <0>, <9>], [<6>, <3>, <2>, <5>, <8>, <1>, <4>, <7>, <9>, <0>]]',)",3,93
topological_sort,"[(<12>, <10>), (<12>, <5>), (<12>, <1>), (<12>, <9>), (<10>, <0>), (<5>, <0>), (<5>, <10>), (<1>, <3>), (<9>, <8>), (<9>, <0>), (<9>, <1>), (<0>, <3>), (<0>, <11>), (<14>, <8>), (<14>, <10>), (<14>, <4>), (<14>, <0>), (<4>, <9>), (<4>, <10>), (<3>, <11>), (<7>, <8>), (<7>, <4>), (<7>, <14>), (<13>, <7>), (<13>, <2>), (<13>, <6>), (<13>, <0>), (<13>, <4>), (<2>, <8>), (<2>, <6>), (<6>, <0>), (<6>, <10>)]","{<12>: [<10>, <5>, <1>, <9>],
<10>: [<0>],
<5>: [<0>, <10>],
<1>: [<3>],
<9>: [<8>, <0>, <1>],
<0>: [<3>, <11>],
<14>: [<8>, <10>, <4>, <0>],
<8>: [],
<4>: [<9>, <10>],
<3>: [<11>],
<11>: [],
<7>: [<8>, <4>, <14>],
<13>: [<7>, <2>, <6>, <0>, <4>],
<2>: [<8>, <6>],
<6>: [<0>, <10>]}","Node <12> is connected to nodes <10>, <5>, <1>, <9>.
Node <10> is connected to node <0>.
Node <5> is connected to nodes <0>, <10>.
Node <1> is connected to node <3>.
Node <9> is connected to nodes <8>, <0>, <1>.
Node <0> is connected to nodes <3>, <11>.
Node <14> is connected to nodes <8>, <10>, <4>, <0>.
Node <4> is connected to nodes <9>, <10>.
Node <3> is connected to node <11>.
Node <7> is connected to nodes <8>, <4>, <14>.
Node <13> is connected to nodes <7>, <2>, <6>, <0>, <4>.
Node <2> is connected to nodes <8>, <6>.
Node <6> is connected to nodes <0>, <10>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>, <14>]",15,32,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<12>, <13>, <5>, <7>, <2>, <14>, <6>, <4>, <9>, <10>, <8>, <1>, <0>, <3>, <11>]","Let's solve it step by step.
Nodes with 0 in-degree: [<12>, <13>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<13>, <5>].
Visit node <13> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <7>, <2>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <2>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <14>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<14>, <6>].
Visit node <14> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <4>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<9>, <10>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<10>, <8>, <1>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<8>, <1>, <0>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <0>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<11>].
Visit node <11> and remove it from the graph.
So the result of topological sorting is ","('[[<12>, <13>, <5>, <7>, <2>, <8>, <1>, <0>, <3>, <11>, <14>, <6>, <4>, <9>, <10>], [<12>, <5>, <7>, <6>, <14>, <1>, <10>, <0>, <4>, <9>, <8>, <3>, <2>, <11>, <13>], [<12>, <13>, <5>, <7>, <2>, <14>, <6>, <0>, <9>, <10>, <1>, <11>, <8>, <3>, <4>], [<12>, <13>, <5>, <7>, <2>, <14>, <6>, <4>, <9>, <10>, <8>, <1>, <0>, <3>, <11>]]',)",3,94
topological_sort,"[(<9>, <3>), (<9>, <1>), (<9>, <6>), (<3>, <4>), (<3>, <7>), (<3>, <11>), (<1>, <12>), (<1>, <3>), (<1>, <0>), (<6>, <0>), (<6>, <3>), (<6>, <2>), (<6>, <12>), (<6>, <11>), (<6>, <10>), (<4>, <11>), (<7>, <4>), (<7>, <12>), (<7>, <11>), (<8>, <4>), (<8>, <2>), (<8>, <1>), (<8>, <9>), (<8>, <13>), (<2>, <1>), (<2>, <12>), (<2>, <0>), (<2>, <3>), (<13>, <1>), (<13>, <9>), (<0>, <3>), (<0>, <4>), (<10>, <2>), (<5>, <12>), (<5>, <1>), (<5>, <3>), (<5>, <9>), (<5>, <7>), (<5>, <0>)]","{<9>: [<3>, <1>, <6>],
<3>: [<4>, <7>, <11>],
<1>: [<12>, <3>, <0>],
<6>: [<0>, <3>, <2>, <12>, <11>, <10>],
<4>: [<11>],
<7>: [<4>, <12>, <11>],
<11>: [],
<8>: [<4>, <2>, <1>, <9>, <13>],
<2>: [<1>, <12>, <0>, <3>],
<13>: [<1>, <9>],
<0>: [<3>, <4>],
<12>: [],
<10>: [<2>],
<5>: [<12>, <1>, <3>, <9>, <7>, <0>]}","Node <9> is connected to nodes <3>, <1>, <6>.
Node <3> is connected to nodes <4>, <7>, <11>.
Node <1> is connected to nodes <12>, <3>, <0>.
Node <6> is connected to nodes <0>, <3>, <2>, <12>, <11>, <10>.
Node <4> is connected to node <11>.
Node <7> is connected to nodes <4>, <12>, <11>.
Node <8> is connected to nodes <4>, <2>, <1>, <9>, <13>.
Node <2> is connected to nodes <1>, <12>, <0>, <3>.
Node <13> is connected to nodes <1>, <9>.
Node <0> is connected to nodes <3>, <4>.
Node <10> is connected to node <2>.
Node <5> is connected to nodes <12>, <1>, <3>, <9>, <7>, <0>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>]",14,39,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<8>, <5>, <13>, <9>, <6>, <10>, <2>, <1>, <0>, <3>, <7>, <4>, <12>, <11>]","Let's solve it step by step.
Nodes with 0 in-degree: [<8>, <5>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <13>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<13>].
Visit node <13> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <12>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<12>, <11>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<11>].
Visit node <11> and remove it from the graph.
So the result of topological sorting is ","('[[<8>, <5>, <13>, <9>, <6>, <10>, <2>, <12>, <11>, <1>, <3>, <0>, <7>, <4>], [<8>, <2>, <0>, <5>, <3>, <4>, <10>, <13>, <11>, <1>, <9>, <7>, <12>, <6>], [<8>, <5>, <13>, <9>, <7>, <4>, <12>, <11>, <6>, <10>, <2>, <1>, <0>, <3>], [<8>, <5>, <13>, <9>, <6>, <10>, <2>, <1>, <0>, <3>, <7>, <4>, <12>, <11>]]',)",3,95
topological_sort,"[(<1>, <4>), (<1>, <0>), (<1>, <2>), (<1>, <3>), (<4>, <8>), (<0>, <3>), (<0>, <4>), (<0>, <7>), (<2>, <0>), (<2>, <3>), (<2>, <9>), (<2>, <4>), (<3>, <9>), (<3>, <8>), (<6>, <9>), (<6>, <4>), (<6>, <8>), (<6>, <1>), (<6>, <3>), (<6>, <7>), (<9>, <8>), (<7>, <3>), (<7>, <8>), (<5>, <1>), (<5>, <0>), (<5>, <2>), (<5>, <6>), (<5>, <8>)]","{<1>: [<4>, <0>, <2>, <3>],
<4>: [<8>],
<0>: [<3>, <4>, <7>],
<2>: [<0>, <3>, <9>, <4>],
<3>: [<9>, <8>],
<8>: [],
<6>: [<9>, <4>, <8>, <1>, <3>, <7>],
<9>: [<8>],
<7>: [<3>, <8>],
<5>: [<1>, <0>, <2>, <6>, <8>]}","Node <1> is connected to nodes <4>, <0>, <2>, <3>.
Node <4> is connected to node <8>.
Node <0> is connected to nodes <3>, <4>, <7>.
Node <2> is connected to nodes <0>, <3>, <9>, <4>.
Node <3> is connected to nodes <9>, <8>.
Node <6> is connected to nodes <9>, <4>, <8>, <1>, <3>, <7>.
Node <9> is connected to node <8>.
Node <7> is connected to nodes <3>, <8>.
Node <5> is connected to nodes <1>, <0>, <2>, <6>, <8>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>]",10,28,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<5>, <6>, <1>, <2>, <0>, <4>, <7>, <3>, <9>, <8>]","Let's solve it step by step.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <7>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
So the result of topological sorting is ","('[[<5>, <6>, <1>, <3>, <9>, <8>, <2>, <0>, <4>, <7>], [<5>, <7>, <6>, <9>, <1>, <8>, <2>, <0>, <3>, <4>], [<5>, <6>, <1>, <2>, <0>, <4>, <7>, <3>, <9>, <8>], [<5>, <6>, <1>, <2>, <0>, <3>, <4>, <8>, <7>, <9>]]',)",2,96
topological_sort,"[(<7>, <8>), (<7>, <3>), (<7>, <2>), (<7>, <4>), (<7>, <6>), (<8>, <2>), (<8>, <3>), (<3>, <4>), (<2>, <4>), (<6>, <8>), (<6>, <4>), (<5>, <0>), (<5>, <8>), (<5>, <1>), (<5>, <2>), (<0>, <7>)]","{<7>: [<8>, <3>, <2>, <4>, <6>],
<8>: [<2>, <3>],
<3>: [<4>],
<2>: [<4>],
<4>: [],
<6>: [<8>, <4>],
<5>: [<0>, <8>, <1>, <2>],
<0>: [<7>],
<1>: []}","Node <7> is connected to nodes <8>, <3>, <2>, <4>, <6>.
Node <8> is connected to nodes <2>, <3>.
Node <3> is connected to node <4>.
Node <2> is connected to node <4>.
Node <6> is connected to nodes <8>, <4>.
Node <5> is connected to nodes <0>, <8>, <1>, <2>.
Node <0> is connected to node <7>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>]",9,16,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<5>, <0>, <1>, <7>, <6>, <8>, <2>, <3>, <4>]","Let's solve it step by step.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <1>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <7>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <3>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
So the result of topological sorting is ","('[[<5>, <0>, <1>, <7>, <8>, <3>, <6>, <2>, <4>], [<5>, <0>, <2>, <8>, <7>, <6>, <1>, <4>, <3>], [<5>, <0>, <1>, <7>, <6>, <8>, <2>, <3>, <4>], [<5>, <0>, <1>, <2>, <3>, <4>, <7>, <6>, <8>]]',)",2,97
topological_sort,"[(<6>, <8>), (<6>, <1>), (<1>, <8>), (<5>, <7>), (<5>, <10>), (<7>, <8>), (<7>, <1>), (<10>, <0>), (<2>, <8>), (<2>, <9>), (<2>, <10>), (<9>, <0>), (<9>, <1>), (<0>, <1>), (<4>, <2>), (<3>, <10>)]","{<6>: [<8>, <1>],
<8>: [],
<1>: [<8>],
<5>: [<7>, <10>],
<7>: [<8>, <1>],
<10>: [<0>],
<2>: [<8>, <9>, <10>],
<9>: [<0>, <1>],
<0>: [<1>],
<4>: [<2>],
<3>: [<10>]}","Node <6> is connected to nodes <8>, <1>.
Node <1> is connected to node <8>.
Node <5> is connected to nodes <7>, <10>.
Node <7> is connected to nodes <8>, <1>.
Node <10> is connected to node <0>.
Node <2> is connected to nodes <8>, <9>, <10>.
Node <9> is connected to nodes <0>, <1>.
Node <0> is connected to node <1>.
Node <4> is connected to node <2>.
Node <3> is connected to node <10>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>]",11,16,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<6>, <5>, <4>, <3>, <7>, <2>, <9>, <10>, <0>, <1>, <8>]","Let's solve it step by step.
Nodes with 0 in-degree: [<6>, <5>, <4>, <3>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <4>, <3>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <3>, <7>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <7>, <2>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <2>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<9>, <10>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
So the result of topological sorting is ","('[[<6>, <5>, <4>, <3>, <7>, <2>, <9>, <10>, <0>, <1>, <8>], [<6>, <4>, <2>, <1>, <7>, <8>, <9>, <0>, <3>, <10>, <5>], [<6>, <5>, <4>, <3>, <7>, <2>, <8>, <0>, <10>, <9>, <1>], [<6>, <5>, <4>, <0>, <1>, <8>, <3>, <7>, <2>, <9>, <10>]]',)",0,98
topological_sort,"[(<3>, <0>), (<3>, <9>), (<0>, <8>), (<9>, <1>), (<9>, <7>), (<9>, <0>), (<9>, <2>), (<9>, <8>), (<1>, <8>), (<7>, <4>), (<7>, <6>), (<7>, <1>), (<2>, <5>), (<2>, <0>), (<2>, <4>), (<2>, <8>), (<5>, <0>), (<4>, <1>), (<4>, <0>), (<6>, <0>), (<6>, <2>), (<6>, <8>)]","{<3>: [<0>, <9>],
<0>: [<8>],
<9>: [<1>, <7>, <0>, <2>, <8>],
<8>: [],
<1>: [<8>],
<7>: [<4>, <6>, <1>],
<2>: [<5>, <0>, <4>, <8>],
<5>: [<0>],
<4>: [<1>, <0>],
<6>: [<0>, <2>, <8>]}","Node <3> is connected to nodes <0>, <9>.
Node <0> is connected to node <8>.
Node <9> is connected to nodes <1>, <7>, <0>, <2>, <8>.
Node <1> is connected to node <8>.
Node <7> is connected to nodes <4>, <6>, <1>.
Node <2> is connected to nodes <5>, <0>, <4>, <8>.
Node <5> is connected to node <0>.
Node <4> is connected to nodes <1>, <0>.
Node <6> is connected to nodes <0>, <2>, <8>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>]",10,22,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<3>, <9>, <7>, <6>, <2>, <5>, <4>, <1>, <0>, <8>]","Let's solve it step by step.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <4>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <0>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
So the result of topological sorting is ","('[[<3>, <4>, <6>, <5>, <9>, <0>, <8>, <1>, <2>, <7>], [<3>, <9>, <7>, <6>, <2>, <8>, <1>, <4>, <0>, <5>], [<3>, <9>, <7>, <1>, <0>, <8>, <6>, <2>, <5>, <4>], [<3>, <9>, <7>, <6>, <2>, <5>, <4>, <1>, <0>, <8>]]',)",3,99
topological_sort,"[(<3>, <12>), (<3>, <7>), (<3>, <11>), (<12>, <1>), (<11>, <12>), (<8>, <10>), (<8>, <1>), (<8>, <9>), (<8>, <0>), (<8>, <5>), (<10>, <3>), (<10>, <2>), (<10>, <9>), (<9>, <1>), (<0>, <6>), (<0>, <12>), (<0>, <7>), (<5>, <9>), (<5>, <3>), (<2>, <5>), (<2>, <11>), (<2>, <1>), (<6>, <7>), (<6>, <12>), (<6>, <5>), (<4>, <1>)]","{<3>: [<12>, <7>, <11>],
<12>: [<1>],
<7>: [],
<11>: [<12>],
<1>: [],
<8>: [<10>, <1>, <9>, <0>, <5>],
<10>: [<3>, <2>, <9>],
<9>: [<1>],
<0>: [<6>, <12>, <7>],
<5>: [<9>, <3>],
<2>: [<5>, <11>, <1>],
<6>: [<7>, <12>, <5>],
<4>: [<1>]}","Node <3> is connected to nodes <12>, <7>, <11>.
Node <12> is connected to node <1>.
Node <11> is connected to node <12>.
Node <8> is connected to nodes <10>, <1>, <9>, <0>, <5>.
Node <10> is connected to nodes <3>, <2>, <9>.
Node <9> is connected to node <1>.
Node <0> is connected to nodes <6>, <12>, <7>.
Node <5> is connected to nodes <9>, <3>.
Node <2> is connected to nodes <5>, <11>, <1>.
Node <6> is connected to nodes <7>, <12>, <5>.
Node <4> is connected to node <1>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>]",13,26,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<8>, <4>, <10>, <0>, <2>, <6>, <5>, <9>, <3>, <7>, <11>, <12>, <1>]","Let's solve it step by step.
Nodes with 0 in-degree: [<8>, <4>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <10>, <0>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<10>, <0>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <2>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <6>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<9>, <3>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <11>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<11>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<12>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
So the result of topological sorting is ","('[[<8>, <4>, <10>, <0>, <7>, <11>, <12>, <1>, <2>, <6>, <5>, <9>, <3>], [<8>, <6>, <11>, <0>, <9>, <3>, <4>, <2>, <7>, <10>, <12>, <5>, <1>], [<8>, <4>, <10>, <0>, <2>, <6>, <12>, <7>, <9>, <11>, <3>, <5>, <1>], [<8>, <4>, <10>, <0>, <2>, <6>, <5>, <9>, <3>, <7>, <11>, <12>, <1>]]',)",3,100
topological_sort,"[(<2>, <1>), (<2>, <5>), (<2>, <9>), (<2>, <8>), (<2>, <3>), (<2>, <0>), (<1>, <8>), (<5>, <6>), (<5>, <1>), (<5>, <7>), (<5>, <4>), (<5>, <0>), (<5>, <9>), (<9>, <8>), (<8>, <4>), (<3>, <5>), (<0>, <7>), (<0>, <8>), (<0>, <6>), (<6>, <1>), (<6>, <4>), (<7>, <6>), (<7>, <4>)]","{<2>: [<1>, <5>, <9>, <8>, <3>, <0>],
<1>: [<8>],
<5>: [<6>, <1>, <7>, <4>, <0>, <9>],
<9>: [<8>],
<8>: [<4>],
<3>: [<5>],
<0>: [<7>, <8>, <6>],
<4>: [],
<6>: [<1>, <4>],
<7>: [<6>, <4>]}","Node <2> is connected to nodes <1>, <5>, <9>, <8>, <3>, <0>.
Node <1> is connected to node <8>.
Node <5> is connected to nodes <6>, <1>, <7>, <4>, <0>, <9>.
Node <9> is connected to node <8>.
Node <8> is connected to node <4>.
Node <3> is connected to node <5>.
Node <0> is connected to nodes <7>, <8>, <6>.
Node <6> is connected to nodes <1>, <4>.
Node <7> is connected to nodes <6>, <4>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>]",10,23,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<2>, <3>, <5>, <0>, <9>, <7>, <6>, <1>, <8>, <4>]","Let's solve it step by step.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <9>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<9>, <7>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
So the result of topological sorting is ","('[[<2>, <3>, <5>, <1>, <8>, <4>, <0>, <9>, <7>, <6>], [<2>, <3>, <5>, <0>, <9>, <7>, <6>, <1>, <8>, <4>], [<2>, <3>, <5>, <0>, <9>, <6>, <7>, <8>, <4>, <1>], [<2>, <1>, <4>, <3>, <9>, <0>, <6>, <5>, <8>, <7>]]',)",1,101
topological_sort,"[(<5>, <3>), (<5>, <9>), (<3>, <6>), (<9>, <3>), (<9>, <8>), (<11>, <2>), (<11>, <6>), (<2>, <12>), (<12>, <6>), (<12>, <5>), (<12>, <8>), (<8>, <7>), (<10>, <4>), (<10>, <5>), (<4>, <9>), (<4>, <12>), (<4>, <5>), (<1>, <7>), (<1>, <3>), (<7>, <6>), (<0>, <10>), (<0>, <5>), (<0>, <4>)]","{<5>: [<3>, <9>],
<3>: [<6>],
<9>: [<3>, <8>],
<6>: [],
<11>: [<2>, <6>],
<2>: [<12>],
<12>: [<6>, <5>, <8>],
<8>: [<7>],
<10>: [<4>, <5>],
<4>: [<9>, <12>, <5>],
<1>: [<7>, <3>],
<7>: [<6>],
<0>: [<10>, <5>, <4>]}","Node <5> is connected to nodes <3>, <9>.
Node <3> is connected to node <6>.
Node <9> is connected to nodes <3>, <8>.
Node <11> is connected to nodes <2>, <6>.
Node <2> is connected to node <12>.
Node <12> is connected to nodes <6>, <5>, <8>.
Node <8> is connected to node <7>.
Node <10> is connected to nodes <4>, <5>.
Node <4> is connected to nodes <9>, <12>, <5>.
Node <1> is connected to nodes <7>, <3>.
Node <7> is connected to node <6>.
Node <0> is connected to nodes <10>, <5>, <4>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>]",13,23,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<11>, <1>, <0>, <2>, <10>, <4>, <12>, <5>, <9>, <3>, <8>, <7>, <6>]","Let's solve it step by step.
Nodes with 0 in-degree: [<11>, <1>, <0>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <0>, <2>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <2>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <10>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<12>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <8>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
So the result of topological sorting is ","('[[<11>, <1>, <0>, <2>, <10>, <4>, <12>, <5>, <9>, <3>, <8>, <7>, <6>], [<11>, <1>, <0>, <2>, <10>, <4>, <3>, <5>, <7>, <9>, <8>, <12>, <6>], [<11>, <1>, <0>, <2>, <3>, <8>, <7>, <6>, <10>, <4>, <12>, <5>, <9>], [<11>, <6>, <10>, <5>, <4>, <2>, <0>, <9>, <1>, <7>, <12>, <3>, <8>]]',)",0,102
topological_sort,"[(<5>, <9>), (<5>, <13>), (<5>, <0>), (<5>, <2>), (<9>, <1>), (<13>, <9>), (<13>, <14>), (<0>, <6>), (<2>, <9>), (<2>, <12>), (<2>, <1>), (<2>, <13>), (<8>, <14>), (<8>, <13>), (<8>, <4>), (<8>, <11>), (<14>, <9>), (<14>, <6>), (<14>, <0>), (<4>, <3>), (<4>, <14>), (<4>, <12>), (<4>, <1>), (<4>, <0>), (<4>, <11>), (<11>, <2>), (<11>, <1>), (<11>, <12>), (<11>, <13>), (<11>, <10>), (<11>, <5>), (<11>, <9>), (<11>, <14>), (<6>, <1>), (<6>, <9>), (<12>, <6>), (<12>, <3>), (<3>, <13>), (<3>, <14>), (<10>, <13>), (<10>, <3>), (<10>, <14>), (<7>, <8>), (<7>, <6>), (<7>, <9>), (<7>, <11>), (<7>, <0>), (<7>, <4>)]","{<5>: [<9>, <13>, <0>, <2>],
<9>: [<1>],
<13>: [<9>, <14>],
<0>: [<6>],
<2>: [<9>, <12>, <1>, <13>],
<1>: [],
<8>: [<14>, <13>, <4>, <11>],
<14>: [<9>, <6>, <0>],
<4>: [<3>, <14>, <12>, <1>, <0>, <11>],
<11>: [<2>, <1>, <12>, <13>, <10>, <5>, <9>, <14>],
<6>: [<1>, <9>],
<12>: [<6>, <3>],
<3>: [<13>, <14>],
<10>: [<13>, <3>, <14>],
<7>: [<8>, <6>, <9>, <11>, <0>, <4>]}","Node <5> is connected to nodes <9>, <13>, <0>, <2>.
Node <9> is connected to node <1>.
Node <13> is connected to nodes <9>, <14>.
Node <0> is connected to node <6>.
Node <2> is connected to nodes <9>, <12>, <1>, <13>.
Node <8> is connected to nodes <14>, <13>, <4>, <11>.
Node <14> is connected to nodes <9>, <6>, <0>.
Node <4> is connected to nodes <3>, <14>, <12>, <1>, <0>, <11>.
Node <11> is connected to nodes <2>, <1>, <12>, <13>, <10>, <5>, <9>, <14>.
Node <6> is connected to nodes <1>, <9>.
Node <12> is connected to nodes <6>, <3>.
Node <3> is connected to nodes <13>, <14>.
Node <10> is connected to nodes <13>, <3>, <14>.
Node <7> is connected to nodes <8>, <6>, <9>, <11>, <0>, <4>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>, <14>]",15,48,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<7>, <8>, <4>, <11>, <10>, <5>, <2>, <12>, <3>, <13>, <14>, <0>, <6>, <9>, <1>]","Let's solve it step by step.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<11>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<10>, <5>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<12>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<13>].
Visit node <13> and remove it from the graph.
Nodes with 0 in-degree: [<14>].
Visit node <14> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
So the result of topological sorting is ","('[[<7>, <8>, <4>, <11>, <10>, <5>, <2>, <13>, <3>, <12>, <9>, <0>, <1>, <14>, <6>], [<7>, <1>, <10>, <4>, <12>, <5>, <3>, <6>, <13>, <2>, <11>, <14>, <8>, <9>, <0>], [<7>, <8>, <4>, <11>, <10>, <5>, <2>, <12>, <3>, <13>, <14>, <0>, <6>, <9>, <1>], [<7>, <8>, <4>, <11>, <10>, <14>, <0>, <6>, <9>, <1>, <5>, <2>, <12>, <3>, <13>]]',)",2,103
topological_sort,"[(<1>, <11>), (<1>, <8>), (<1>, <3>), (<1>, <2>), (<1>, <7>), (<1>, <13>), (<1>, <12>), (<1>, <9>), (<1>, <5>), (<11>, <5>), (<11>, <3>), (<11>, <2>), (<11>, <9>), (<8>, <2>), (<3>, <2>), (<3>, <7>), (<3>, <12>), (<2>, <6>), (<7>, <12>), (<7>, <8>), (<13>, <11>), (<13>, <8>), (<13>, <0>), (<9>, <3>), (<5>, <7>), (<5>, <9>), (<4>, <9>), (<4>, <11>), (<4>, <6>), (<4>, <0>), (<4>, <10>), (<4>, <7>), (<6>, <12>), (<0>, <5>), (<0>, <8>), (<10>, <1>), (<10>, <5>)]","{<1>: [<11>, <8>, <3>, <2>, <7>, <13>, <12>, <9>, <5>],
<11>: [<5>, <3>, <2>, <9>],
<8>: [<2>],
<3>: [<2>, <7>, <12>],
<2>: [<6>],
<7>: [<12>, <8>],
<13>: [<11>, <8>, <0>],
<12>: [],
<9>: [<3>],
<5>: [<7>, <9>],
<4>: [<9>, <11>, <6>, <0>, <10>, <7>],
<6>: [<12>],
<0>: [<5>, <8>],
<10>: [<1>, <5>]}","Node <1> is connected to nodes <11>, <8>, <3>, <2>, <7>, <13>, <12>, <9>, <5>.
Node <11> is connected to nodes <5>, <3>, <2>, <9>.
Node <8> is connected to node <2>.
Node <3> is connected to nodes <2>, <7>, <12>.
Node <2> is connected to node <6>.
Node <7> is connected to nodes <12>, <8>.
Node <13> is connected to nodes <11>, <8>, <0>.
Node <9> is connected to node <3>.
Node <5> is connected to nodes <7>, <9>.
Node <4> is connected to nodes <9>, <11>, <6>, <0>, <10>, <7>.
Node <6> is connected to node <12>.
Node <0> is connected to nodes <5>, <8>.
Node <10> is connected to nodes <1>, <5>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>]",14,37,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<4>, <10>, <1>, <13>, <11>, <0>, <5>, <9>, <3>, <7>, <8>, <2>, <6>, <12>]","Let's solve it step by step.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<13>].
Visit node <13> and remove it from the graph.
Nodes with 0 in-degree: [<11>, <0>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<12>].
Visit node <12> and remove it from the graph.
So the result of topological sorting is ","('[[<4>, <10>, <1>, <13>, <11>, <0>, <5>, <6>, <12>, <3>, <9>, <8>, <2>, <7>], [<4>, <10>, <1>, <13>, <8>, <2>, <6>, <12>, <11>, <0>, <5>, <9>, <3>, <7>], [<4>, <10>, <1>, <13>, <11>, <0>, <5>, <9>, <3>, <7>, <8>, <2>, <6>, <12>], [<4>, <8>, <1>, <3>, <9>, <11>, <0>, <6>, <12>, <7>, <2>, <10>, <13>, <5>]]',)",2,104
topological_sort,"[(<10>, <11>), (<10>, <9>), (<10>, <14>), (<11>, <12>), (<9>, <12>), (<1>, <9>), (<1>, <10>), (<1>, <14>), (<2>, <10>), (<2>, <9>), (<2>, <13>), (<2>, <5>), (<13>, <1>), (<13>, <7>), (<13>, <11>), (<8>, <6>), (<8>, <14>), (<8>, <1>), (<6>, <14>), (<3>, <6>), (<3>, <12>), (<3>, <1>), (<0>, <7>), (<0>, <8>), (<0>, <13>), (<0>, <2>), (<7>, <8>), (<7>, <12>), (<4>, <6>)]","{<10>: [<11>, <9>, <14>],
<11>: [<12>],
<9>: [<12>],
<14>: [],
<12>: [],
<1>: [<9>, <10>, <14>],
<2>: [<10>, <9>, <13>, <5>],
<13>: [<1>, <7>, <11>],
<5>: [],
<8>: [<6>, <14>, <1>],
<6>: [<14>],
<3>: [<6>, <12>, <1>],
<0>: [<7>, <8>, <13>, <2>],
<7>: [<8>, <12>],
<4>: [<6>]}","Node <10> is connected to nodes <11>, <9>, <14>.
Node <11> is connected to node <12>.
Node <9> is connected to node <12>.
Node <1> is connected to nodes <9>, <10>, <14>.
Node <2> is connected to nodes <10>, <9>, <13>, <5>.
Node <13> is connected to nodes <1>, <7>, <11>.
Node <8> is connected to nodes <6>, <14>, <1>.
Node <6> is connected to node <14>.
Node <3> is connected to nodes <6>, <12>, <1>.
Node <0> is connected to nodes <7>, <8>, <13>, <2>.
Node <7> is connected to nodes <8>, <12>.
Node <4> is connected to node <6>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>, <14>]",15,29,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<3>, <0>, <4>, <2>, <13>, <5>, <7>, <8>, <6>, <1>, <10>, <11>, <9>, <14>, <12>]","Let's solve it step by step.
Nodes with 0 in-degree: [<3>, <0>, <4>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <4>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <2>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<13>, <5>].
Visit node <13> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <7>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <1>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<11>, <9>, <14>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<9>, <14>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<14>, <12>].
Visit node <14> and remove it from the graph.
Nodes with 0 in-degree: [<12>].
Visit node <12> and remove it from the graph.
So the result of topological sorting is ","('[[<3>, <0>, <4>, <2>, <13>, <10>, <11>, <9>, <14>, <12>, <5>, <7>, <8>, <6>, <1>], [<3>, <0>, <4>, <2>, <13>, <5>, <7>, <12>, <10>, <6>, <14>, <9>, <1>, <8>, <11>], [<3>, <12>, <5>, <11>, <2>, <7>, <6>, <4>, <9>, <1>, <8>, <0>, <10>, <13>, <14>], [<3>, <0>, <4>, <2>, <13>, <5>, <7>, <8>, <6>, <1>, <10>, <11>, <9>, <14>, <12>]]',)",3,105
topological_sort,"[(<6>, <8>), (<6>, <12>), (<6>, <3>), (<6>, <9>), (<6>, <14>), (<8>, <11>), (<8>, <12>), (<8>, <14>), (<8>, <3>), (<12>, <1>), (<12>, <2>), (<12>, <7>), (<3>, <13>), (<3>, <5>), (<3>, <7>), (<3>, <11>), (<9>, <10>), (<9>, <3>), (<14>, <9>), (<14>, <3>), (<14>, <11>), (<14>, <13>), (<11>, <4>), (<11>, <5>), (<0>, <1>), (<0>, <3>), (<0>, <13>), (<0>, <11>), (<1>, <5>), (<1>, <13>), (<1>, <11>), (<13>, <11>), (<5>, <10>), (<5>, <4>), (<10>, <7>), (<7>, <4>), (<2>, <10>)]","{<6>: [<8>, <12>, <3>, <9>, <14>],
<8>: [<11>, <12>, <14>, <3>],
<12>: [<1>, <2>, <7>],
<3>: [<13>, <5>, <7>, <11>],
<9>: [<10>, <3>],
<14>: [<9>, <3>, <11>, <13>],
<11>: [<4>, <5>],
<0>: [<1>, <3>, <13>, <11>],
<1>: [<5>, <13>, <11>],
<13>: [<11>],
<5>: [<10>, <4>],
<10>: [<7>],
<4>: [],
<7>: [<4>],
<2>: [<10>]}","Node <6> is connected to nodes <8>, <12>, <3>, <9>, <14>.
Node <8> is connected to nodes <11>, <12>, <14>, <3>.
Node <12> is connected to nodes <1>, <2>, <7>.
Node <3> is connected to nodes <13>, <5>, <7>, <11>.
Node <9> is connected to nodes <10>, <3>.
Node <14> is connected to nodes <9>, <3>, <11>, <13>.
Node <11> is connected to nodes <4>, <5>.
Node <0> is connected to nodes <1>, <3>, <13>, <11>.
Node <1> is connected to nodes <5>, <13>, <11>.
Node <13> is connected to node <11>.
Node <5> is connected to nodes <10>, <4>.
Node <10> is connected to node <7>.
Node <7> is connected to node <4>.
Node <2> is connected to node <10>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>, <14>]",15,37,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<6>, <0>, <8>, <12>, <14>, <1>, <2>, <9>, <3>, <13>, <11>, <5>, <10>, <7>, <4>]","Let's solve it step by step.
Nodes with 0 in-degree: [<6>, <0>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <8>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<12>, <14>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<14>, <1>, <2>].
Visit node <14> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <2>, <9>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <9>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<13>].
Visit node <13> and remove it from the graph.
Nodes with 0 in-degree: [<11>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
So the result of topological sorting is ","('[[<6>, <0>, <8>, <12>, <14>, <1>, <2>, <3>, <4>, <9>, <7>, <13>, <5>, <11>, <10>], [<6>, <0>, <8>, <12>, <14>, <11>, <5>, <10>, <7>, <4>, <1>, <2>, <9>, <3>, <13>], [<6>, <0>, <8>, <12>, <14>, <1>, <2>, <9>, <3>, <13>, <11>, <5>, <10>, <7>, <4>], [<6>, <5>, <8>, <13>, <1>, <9>, <0>, <4>, <10>, <3>, <12>, <7>, <11>, <2>, <14>]]',)",2,106
topological_sort,"[(<6>, <0>), (<6>, <3>), (<6>, <7>), (<3>, <8>), (<7>, <1>), (<7>, <0>), (<7>, <3>), (<2>, <4>), (<2>, <8>), (<4>, <0>), (<4>, <8>), (<4>, <3>), (<9>, <3>), (<9>, <7>), (<9>, <0>), (<9>, <2>), (<9>, <5>), (<5>, <8>), (<5>, <4>), (<5>, <0>), (<5>, <1>), (<5>, <6>), (<5>, <7>), (<1>, <2>), (<1>, <0>)]","{<6>: [<0>, <3>, <7>],
<0>: [],
<3>: [<8>],
<7>: [<1>, <0>, <3>],
<2>: [<4>, <8>],
<4>: [<0>, <8>, <3>],
<8>: [],
<9>: [<3>, <7>, <0>, <2>, <5>],
<5>: [<8>, <4>, <0>, <1>, <6>, <7>],
<1>: [<2>, <0>]}","Node <6> is connected to nodes <0>, <3>, <7>.
Node <3> is connected to node <8>.
Node <7> is connected to nodes <1>, <0>, <3>.
Node <2> is connected to nodes <4>, <8>.
Node <4> is connected to nodes <0>, <8>, <3>.
Node <9> is connected to nodes <3>, <7>, <0>, <2>, <5>.
Node <5> is connected to nodes <8>, <4>, <0>, <1>, <6>, <7>.
Node <1> is connected to nodes <2>, <0>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>]",10,25,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<9>, <5>, <6>, <7>, <1>, <2>, <4>, <0>, <3>, <8>]","Let's solve it step by step.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <3>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
So the result of topological sorting is ","('[[<9>, <5>, <6>, <7>, <1>, <8>, <4>, <0>, <3>, <2>], [<9>, <5>, <6>, <0>, <3>, <8>, <7>, <1>, <2>, <4>], [<9>, <0>, <3>, <2>, <5>, <1>, <6>, <8>, <4>, <7>], [<9>, <5>, <6>, <7>, <1>, <2>, <4>, <0>, <3>, <8>]]',)",3,107
topological_sort,"[(<3>, <4>), (<3>, <0>), (<4>, <1>), (<0>, <1>), (<6>, <0>), (<6>, <4>), (<6>, <7>), (<7>, <4>), (<7>, <3>), (<5>, <2>), (<5>, <3>), (<5>, <4>), (<2>, <6>), (<2>, <4>), (<2>, <0>)]","{<3>: [<4>, <0>],
<4>: [<1>],
<0>: [<1>],
<1>: [],
<6>: [<0>, <4>, <7>],
<7>: [<4>, <3>],
<5>: [<2>, <3>, <4>],
<2>: [<6>, <4>, <0>]}","Node <3> is connected to nodes <4>, <0>.
Node <4> is connected to node <1>.
Node <0> is connected to node <1>.
Node <6> is connected to nodes <0>, <4>, <7>.
Node <7> is connected to nodes <4>, <3>.
Node <5> is connected to nodes <2>, <3>, <4>.
Node <2> is connected to nodes <6>, <4>, <0>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>]",8,15,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<5>, <2>, <6>, <7>, <3>, <4>, <0>, <1>]","Let's solve it step by step.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <0>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
So the result of topological sorting is ","('[[<5>, <2>, <6>, <7>, <3>, <4>, <0>, <1>], [<5>, <2>, <0>, <1>, <7>, <6>, <4>, <3>], [<5>, <2>, <0>, <1>, <6>, <7>, <3>, <4>], [<5>, <2>, <6>, <7>, <4>, <1>, <0>, <3>]]',)",0,108
topological_sort,"[(<10>, <1>), (<10>, <2>), (<10>, <5>), (<10>, <3>), (<10>, <9>), (<1>, <0>), (<1>, <4>), (<1>, <2>), (<2>, <9>), (<2>, <8>), (<5>, <6>), (<5>, <0>), (<5>, <9>), (<5>, <2>), (<3>, <9>), (<3>, <0>), (<3>, <8>), (<9>, <8>), (<0>, <8>), (<4>, <8>), (<4>, <3>), (<4>, <6>), (<4>, <7>), (<6>, <9>), (<6>, <7>), (<6>, <2>), (<8>, <7>)]","{<10>: [<1>, <2>, <5>, <3>, <9>],
<1>: [<0>, <4>, <2>],
<2>: [<9>, <8>],
<5>: [<6>, <0>, <9>, <2>],
<3>: [<9>, <0>, <8>],
<9>: [<8>],
<0>: [<8>],
<4>: [<8>, <3>, <6>, <7>],
<6>: [<9>, <7>, <2>],
<7>: [],
<8>: [<7>]}","Node <10> is connected to nodes <1>, <2>, <5>, <3>, <9>.
Node <1> is connected to nodes <0>, <4>, <2>.
Node <2> is connected to nodes <9>, <8>.
Node <5> is connected to nodes <6>, <0>, <9>, <2>.
Node <3> is connected to nodes <9>, <0>, <8>.
Node <9> is connected to node <8>.
Node <0> is connected to node <8>.
Node <4> is connected to nodes <8>, <3>, <6>, <7>.
Node <6> is connected to nodes <9>, <7>, <2>.
Node <8> is connected to node <7>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>]",11,27,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<10>, <1>, <5>, <4>, <3>, <6>, <0>, <2>, <9>, <8>, <7>]","Let's solve it step by step.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <5>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <4>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <6>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <0>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <2>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
So the result of topological sorting is ","('[[<10>, <1>, <5>, <4>, <3>, <7>, <9>, <0>, <6>, <8>, <2>], [<10>, <1>, <5>, <4>, <3>, <6>, <0>, <2>, <9>, <8>, <7>], [<10>, <2>, <4>, <3>, <1>, <6>, <5>, <8>, <0>, <7>, <9>], [<10>, <1>, <5>, <9>, <8>, <7>, <4>, <3>, <6>, <0>, <2>]]',)",1,109
topological_sort,"[(<2>, <3>), (<2>, <1>), (<2>, <10>), (<2>, <9>), (<2>, <11>), (<2>, <14>), (<1>, <3>), (<1>, <12>), (<1>, <5>), (<10>, <4>), (<10>, <5>), (<10>, <0>), (<10>, <9>), (<11>, <0>), (<11>, <4>), (<11>, <14>), (<11>, <13>), (<12>, <8>), (<12>, <5>), (<12>, <9>), (<5>, <3>), (<5>, <14>), (<5>, <4>), (<4>, <14>), (<4>, <0>), (<6>, <4>), (<6>, <10>), (<6>, <9>), (<6>, <1>), (<6>, <0>), (<8>, <4>), (<8>, <14>), (<7>, <3>), (<7>, <6>), (<7>, <11>), (<7>, <8>), (<13>, <1>), (<13>, <3>), (<13>, <12>)]","{<2>: [<3>, <1>, <10>, <9>, <11>, <14>],
<3>: [],
<1>: [<3>, <12>, <5>],
<10>: [<4>, <5>, <0>, <9>],
<9>: [],
<11>: [<0>, <4>, <14>, <13>],
<14>: [],
<12>: [<8>, <5>, <9>],
<5>: [<3>, <14>, <4>],
<4>: [<14>, <0>],
<0>: [],
<6>: [<4>, <10>, <9>, <1>, <0>],
<8>: [<4>, <14>],
<7>: [<3>, <6>, <11>, <8>],
<13>: [<1>, <3>, <12>]}","Node <2> is connected to nodes <3>, <1>, <10>, <9>, <11>, <14>.
Node <1> is connected to nodes <3>, <12>, <5>.
Node <10> is connected to nodes <4>, <5>, <0>, <9>.
Node <11> is connected to nodes <0>, <4>, <14>, <13>.
Node <12> is connected to nodes <8>, <5>, <9>.
Node <5> is connected to nodes <3>, <14>, <4>.
Node <4> is connected to nodes <14>, <0>.
Node <6> is connected to nodes <4>, <10>, <9>, <1>, <0>.
Node <8> is connected to nodes <4>, <14>.
Node <7> is connected to nodes <3>, <6>, <11>, <8>.
Node <13> is connected to nodes <1>, <3>, <12>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>, <14>]",15,39,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<2>, <7>, <6>, <11>, <10>, <13>, <1>, <12>, <8>, <5>, <9>, <3>, <4>, <14>, <0>]","Let's solve it step by step.
Nodes with 0 in-degree: [<2>, <7>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <11>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<11>, <10>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<10>, <13>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<13>].
Visit node <13> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<12>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<8>, <5>, <9>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <9>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<9>, <3>, <4>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <4>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<14>, <0>].
Visit node <14> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
So the result of topological sorting is ","('[[<2>, <5>, <7>, <10>, <8>, <1>, <14>, <4>, <12>, <9>, <3>, <0>, <11>, <6>, <13>], [<2>, <7>, <6>, <11>, <10>, <9>, <3>, <4>, <14>, <0>, <13>, <1>, <12>, <8>, <5>], [<2>, <7>, <6>, <11>, <10>, <13>, <1>, <9>, <3>, <12>, <4>, <0>, <8>, <14>, <5>], [<2>, <7>, <6>, <11>, <10>, <13>, <1>, <12>, <8>, <5>, <9>, <3>, <4>, <14>, <0>]]',)",3,110
topological_sort,"[(<12>, <0>), (<12>, <13>), (<12>, <3>), (<0>, <6>), (<0>, <3>), (<0>, <13>), (<13>, <3>), (<6>, <11>), (<8>, <0>), (<8>, <9>), (<8>, <13>), (<8>, <12>), (<8>, <2>), (<8>, <1>), (<9>, <3>), (<9>, <12>), (<9>, <11>), (<9>, <6>), (<2>, <9>), (<2>, <10>), (<2>, <5>), (<1>, <3>), (<1>, <9>), (<7>, <8>), (<7>, <3>), (<7>, <10>), (<7>, <2>), (<7>, <5>), (<7>, <11>), (<10>, <6>), (<10>, <1>), (<10>, <3>), (<5>, <0>), (<5>, <6>), (<5>, <13>), (<4>, <6>), (<4>, <8>), (<4>, <11>), (<4>, <1>), (<4>, <0>), (<4>, <5>), (<4>, <13>)]","{<12>: [<0>, <13>, <3>],
<0>: [<6>, <3>, <13>],
<13>: [<3>],
<3>: [],
<6>: [<11>],
<8>: [<0>, <9>, <13>, <12>, <2>, <1>],
<9>: [<3>, <12>, <11>, <6>],
<2>: [<9>, <10>, <5>],
<1>: [<3>, <9>],
<7>: [<8>, <3>, <10>, <2>, <5>, <11>],
<10>: [<6>, <1>, <3>],
<5>: [<0>, <6>, <13>],
<11>: [],
<4>: [<6>, <8>, <11>, <1>, <0>, <5>, <13>]}","Node <12> is connected to nodes <0>, <13>, <3>.
Node <0> is connected to nodes <6>, <3>, <13>.
Node <13> is connected to node <3>.
Node <6> is connected to node <11>.
Node <8> is connected to nodes <0>, <9>, <13>, <12>, <2>, <1>.
Node <9> is connected to nodes <3>, <12>, <11>, <6>.
Node <2> is connected to nodes <9>, <10>, <5>.
Node <1> is connected to nodes <3>, <9>.
Node <7> is connected to nodes <8>, <3>, <10>, <2>, <5>, <11>.
Node <10> is connected to nodes <6>, <1>, <3>.
Node <5> is connected to nodes <0>, <6>, <13>.
Node <4> is connected to nodes <6>, <8>, <11>, <1>, <0>, <5>, <13>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>]",14,42,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<7>, <4>, <8>, <2>, <10>, <5>, <1>, <9>, <12>, <0>, <6>, <13>, <11>, <3>]","Let's solve it step by step.
Nodes with 0 in-degree: [<7>, <4>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<10>, <5>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <1>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<12>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <13>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<13>, <11>].
Visit node <13> and remove it from the graph.
Nodes with 0 in-degree: [<11>, <3>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
So the result of topological sorting is ","('[[<7>, <4>, <8>, <2>, <10>, <5>, <1>, <13>, <11>, <6>, <9>, <12>, <3>, <0>], [<7>, <4>, <8>, <2>, <6>, <13>, <11>, <3>, <10>, <5>, <1>, <9>, <12>, <0>], [<7>, <5>, <10>, <1>, <4>, <2>, <11>, <6>, <8>, <13>, <0>, <9>, <12>, <3>], [<7>, <4>, <8>, <2>, <10>, <5>, <1>, <9>, <12>, <0>, <6>, <13>, <11>, <3>]]',)",3,111
topological_sort,"[(<3>, <2>), (<3>, <4>), (<2>, <1>), (<2>, <0>), (<2>, <4>), (<4>, <0>), (<4>, <5>), (<1>, <0>), (<1>, <5>), (<0>, <10>), (<8>, <4>), (<8>, <2>), (<8>, <10>), (<10>, <5>), (<6>, <7>), (<6>, <8>), (<6>, <1>), (<6>, <9>), (<6>, <4>), (<7>, <2>), (<7>, <9>), (<9>, <8>), (<9>, <3>), (<9>, <4>), (<9>, <5>)]","{<3>: [<2>, <4>],
<2>: [<1>, <0>, <4>],
<4>: [<0>, <5>],
<1>: [<0>, <5>],
<0>: [<10>],
<5>: [],
<8>: [<4>, <2>, <10>],
<10>: [<5>],
<6>: [<7>, <8>, <1>, <9>, <4>],
<7>: [<2>, <9>],
<9>: [<8>, <3>, <4>, <5>]}","Node <3> is connected to nodes <2>, <4>.
Node <2> is connected to nodes <1>, <0>, <4>.
Node <4> is connected to nodes <0>, <5>.
Node <1> is connected to nodes <0>, <5>.
Node <0> is connected to node <10>.
Node <8> is connected to nodes <4>, <2>, <10>.
Node <10> is connected to node <5>.
Node <6> is connected to nodes <7>, <8>, <1>, <9>, <4>.
Node <7> is connected to nodes <2>, <9>.
Node <9> is connected to nodes <8>, <3>, <4>, <5>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>]",11,25,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<6>, <7>, <9>, <8>, <3>, <2>, <1>, <4>, <0>, <10>, <5>]","Let's solve it step by step.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<8>, <3>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <4>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
So the result of topological sorting is ","('[[<6>, <7>, <9>, <8>, <3>, <10>, <4>, <2>, <1>, <5>, <0>], [<6>, <3>, <8>, <0>, <10>, <2>, <5>, <9>, <1>, <7>, <4>], [<6>, <7>, <9>, <8>, <3>, <2>, <1>, <4>, <0>, <10>, <5>], [<6>, <7>, <9>, <0>, <10>, <5>, <8>, <3>, <2>, <1>, <4>]]',)",2,112
topological_sort,"[(<6>, <9>), (<6>, <2>), (<6>, <4>), (<9>, <0>), (<9>, <2>), (<2>, <4>), (<2>, <8>), (<4>, <0>), (<4>, <5>), (<3>, <6>), (<3>, <7>), (<3>, <4>), (<7>, <4>), (<7>, <8>), (<7>, <2>), (<8>, <0>), (<5>, <8>), (<1>, <9>), (<1>, <2>), (<1>, <5>), (<1>, <7>), (<1>, <3>)]","{<6>: [<9>, <2>, <4>],
<9>: [<0>, <2>],
<2>: [<4>, <8>],
<4>: [<0>, <5>],
<0>: [],
<3>: [<6>, <7>, <4>],
<7>: [<4>, <8>, <2>],
<8>: [<0>],
<5>: [<8>],
<1>: [<9>, <2>, <5>, <7>, <3>]}","Node <6> is connected to nodes <9>, <2>, <4>.
Node <9> is connected to nodes <0>, <2>.
Node <2> is connected to nodes <4>, <8>.
Node <4> is connected to nodes <0>, <5>.
Node <3> is connected to nodes <6>, <7>, <4>.
Node <7> is connected to nodes <4>, <8>, <2>.
Node <8> is connected to node <0>.
Node <5> is connected to node <8>.
Node <1> is connected to nodes <9>, <2>, <5>, <7>, <3>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>]",10,22,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<1>, <3>, <6>, <7>, <9>, <2>, <4>, <5>, <8>, <0>]","Let's solve it step by step.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <7>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <9>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
So the result of topological sorting is ","('[[<1>, <3>, <6>, <7>, <9>, <2>, <4>, <5>, <8>, <0>], [<1>, <3>, <6>, <5>, <8>, <0>, <7>, <9>, <2>, <4>], [<1>, <3>, <6>, <7>, <9>, <5>, <4>, <8>, <0>, <2>], [<1>, <8>, <4>, <3>, <7>, <9>, <0>, <6>, <2>, <5>]]',)",0,113
topological_sort,"[(<8>, <9>), (<8>, <0>), (<8>, <7>), (<8>, <4>), (<9>, <3>), (<7>, <10>), (<4>, <3>), (<4>, <7>), (<4>, <11>), (<3>, <0>), (<3>, <2>), (<3>, <5>), (<2>, <7>), (<5>, <10>), (<5>, <2>), (<5>, <0>), (<5>, <7>), (<6>, <8>), (<11>, <3>), (<11>, <0>), (<11>, <10>), (<1>, <8>)]","{<8>: [<9>, <0>, <7>, <4>],
<9>: [<3>],
<0>: [],
<7>: [<10>],
<4>: [<3>, <7>, <11>],
<3>: [<0>, <2>, <5>],
<2>: [<7>],
<5>: [<10>, <2>, <0>, <7>],
<10>: [],
<6>: [<8>],
<11>: [<3>, <0>, <10>],
<1>: [<8>]}","Node <8> is connected to nodes <9>, <0>, <7>, <4>.
Node <9> is connected to node <3>.
Node <7> is connected to node <10>.
Node <4> is connected to nodes <3>, <7>, <11>.
Node <3> is connected to nodes <0>, <2>, <5>.
Node <2> is connected to node <7>.
Node <5> is connected to nodes <10>, <2>, <0>, <7>.
Node <6> is connected to node <8>.
Node <11> is connected to nodes <3>, <0>, <10>.
Node <1> is connected to node <8>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>]",12,22,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<6>, <1>, <8>, <9>, <4>, <11>, <3>, <5>, <2>, <0>, <7>, <10>]","Let's solve it step by step.
Nodes with 0 in-degree: [<6>, <1>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<9>, <4>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<11>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <0>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <7>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
So the result of topological sorting is ","('[[<6>, <1>, <8>, <9>, <4>, <11>, <0>, <10>, <3>, <2>, <7>, <5>], [<6>, <10>, <3>, <2>, <0>, <1>, <11>, <8>, <5>, <4>, <9>, <7>], [<6>, <1>, <8>, <9>, <2>, <0>, <7>, <10>, <4>, <11>, <3>, <5>], [<6>, <1>, <8>, <9>, <4>, <11>, <3>, <5>, <2>, <0>, <7>, <10>]]',)",3,114
topological_sort,"[(<9>, <5>), (<9>, <3>), (<3>, <6>), (<4>, <0>), (<4>, <6>), (<4>, <9>), (<4>, <8>), (<0>, <8>), (<0>, <6>), (<0>, <3>), (<0>, <5>), (<0>, <9>), (<0>, <1>), (<6>, <2>), (<8>, <7>), (<8>, <2>), (<8>, <1>), (<8>, <6>), (<1>, <3>), (<1>, <6>), (<1>, <2>), (<1>, <5>), (<7>, <1>), (<7>, <5>), (<7>, <3>)]","{<9>: [<5>, <3>],
<5>: [],
<3>: [<6>],
<4>: [<0>, <6>, <9>, <8>],
<0>: [<8>, <6>, <3>, <5>, <9>, <1>],
<6>: [<2>],
<8>: [<7>, <2>, <1>, <6>],
<1>: [<3>, <6>, <2>, <5>],
<7>: [<1>, <5>, <3>],
<2>: []}","Node <9> is connected to nodes <5>, <3>.
Node <3> is connected to node <6>.
Node <4> is connected to nodes <0>, <6>, <9>, <8>.
Node <0> is connected to nodes <8>, <6>, <3>, <5>, <9>, <1>.
Node <6> is connected to node <2>.
Node <8> is connected to nodes <7>, <2>, <1>, <6>.
Node <1> is connected to nodes <3>, <6>, <2>, <5>.
Node <7> is connected to nodes <1>, <5>, <3>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>]",10,25,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<4>, <0>, <8>, <9>, <7>, <1>, <3>, <5>, <6>, <2>]","Let's solve it step by step.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<8>, <9>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<9>, <7>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <5>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <6>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
So the result of topological sorting is ","('[[<4>, <0>, <7>, <2>, <5>, <3>, <1>, <9>, <8>, <6>], [<4>, <0>, <8>, <5>, <6>, <2>, <9>, <7>, <1>, <3>], [<4>, <0>, <8>, <9>, <7>, <1>, <3>, <5>, <6>, <2>], [<4>, <0>, <8>, <9>, <7>, <6>, <5>, <3>, <2>, <1>]]',)",2,115
topological_sort,"[(<6>, <13>), (<6>, <9>), (<6>, <11>), (<9>, <11>), (<11>, <2>), (<12>, <11>), (<12>, <6>), (<12>, <7>), (<7>, <2>), (<7>, <1>), (<7>, <4>), (<5>, <3>), (<3>, <9>), (<4>, <8>), (<4>, <10>), (<10>, <1>), (<1>, <13>), (<0>, <11>)]","{<6>: [<13>, <9>, <11>],
<13>: [],
<9>: [<11>],
<11>: [<2>],
<12>: [<11>, <6>, <7>],
<7>: [<2>, <1>, <4>],
<2>: [],
<5>: [<3>],
<3>: [<9>],
<4>: [<8>, <10>],
<8>: [],
<10>: [<1>],
<1>: [<13>],
<0>: [<11>]}","Node <6> is connected to nodes <13>, <9>, <11>.
Node <9> is connected to node <11>.
Node <11> is connected to node <2>.
Node <12> is connected to nodes <11>, <6>, <7>.
Node <7> is connected to nodes <2>, <1>, <4>.
Node <5> is connected to node <3>.
Node <3> is connected to node <9>.
Node <4> is connected to nodes <8>, <10>.
Node <10> is connected to node <1>.
Node <1> is connected to node <13>.
Node <0> is connected to node <11>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>]",14,18,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<12>, <5>, <0>, <6>, <7>, <3>, <4>, <9>, <8>, <10>, <11>, <1>, <2>, <13>]","Let's solve it step by step.
Nodes with 0 in-degree: [<12>, <5>, <0>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <0>, <6>, <7>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <6>, <7>, <3>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <7>, <3>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <3>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <4>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <9>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<9>, <8>, <10>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<8>, <10>, <11>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<10>, <11>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<11>, <1>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <2>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <13>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<13>].
Visit node <13> and remove it from the graph.
So the result of topological sorting is ","('[[<12>, <9>, <11>, <1>, <0>, <8>, <13>, <2>, <10>, <3>, <4>, <6>, <7>, <5>], [<12>, <5>, <0>, <6>, <7>, <3>, <4>, <9>, <8>, <10>, <11>, <1>, <2>, <13>], [<12>, <5>, <0>, <6>, <11>, <1>, <2>, <13>, <7>, <3>, <4>, <9>, <8>, <10>], [<12>, <5>, <0>, <6>, <7>, <3>, <4>, <2>, <8>, <13>, <1>, <9>, <10>, <11>]]',)",1,116
topological_sort,"[(<2>, <4>), (<2>, <13>), (<2>, <12>), (<4>, <1>), (<13>, <11>), (<13>, <14>), (<12>, <13>), (<12>, <4>), (<12>, <1>), (<12>, <8>), (<12>, <11>), (<12>, <0>), (<6>, <1>), (<6>, <4>), (<8>, <6>), (<8>, <7>), (<11>, <1>), (<11>, <7>), (<0>, <3>), (<0>, <10>), (<0>, <7>), (<14>, <4>), (<5>, <10>), (<5>, <3>), (<5>, <0>), (<10>, <4>), (<10>, <7>), (<3>, <8>), (<3>, <1>), (<3>, <10>), (<3>, <11>), (<9>, <10>), (<9>, <12>), (<9>, <13>), (<9>, <8>)]","{<2>: [<4>, <13>, <12>],
<4>: [<1>],
<13>: [<11>, <14>],
<12>: [<13>, <4>, <1>, <8>, <11>, <0>],
<1>: [],
<6>: [<1>, <4>],
<8>: [<6>, <7>],
<11>: [<1>, <7>],
<0>: [<3>, <10>, <7>],
<14>: [<4>],
<5>: [<10>, <3>, <0>],
<10>: [<4>, <7>],
<3>: [<8>, <1>, <10>, <11>],
<7>: [],
<9>: [<10>, <12>, <13>, <8>]}","Node <2> is connected to nodes <4>, <13>, <12>.
Node <4> is connected to node <1>.
Node <13> is connected to nodes <11>, <14>.
Node <12> is connected to nodes <13>, <4>, <1>, <8>, <11>, <0>.
Node <6> is connected to nodes <1>, <4>.
Node <8> is connected to nodes <6>, <7>.
Node <11> is connected to nodes <1>, <7>.
Node <0> is connected to nodes <3>, <10>, <7>.
Node <14> is connected to node <4>.
Node <5> is connected to nodes <10>, <3>, <0>.
Node <10> is connected to nodes <4>, <7>.
Node <3> is connected to nodes <8>, <1>, <10>, <11>.
Node <9> is connected to nodes <10>, <12>, <13>, <8>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>, <14>]",15,35,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<2>, <5>, <9>, <12>, <13>, <0>, <14>, <3>, <8>, <10>, <11>, <6>, <7>, <4>, <1>]","Let's solve it step by step.
Nodes with 0 in-degree: [<2>, <5>, <9>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <9>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<12>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<13>, <0>].
Visit node <13> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <14>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<14>, <3>].
Visit node <14> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<8>, <10>, <11>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<10>, <11>, <6>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<11>, <6>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <7>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <4>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
So the result of topological sorting is ","('[[<2>, <1>, <9>, <6>, <13>, <11>, <7>, <0>, <8>, <4>, <5>, <10>, <14>, <3>, <12>], [<2>, <5>, <9>, <12>, <13>, <0>, <14>, <3>, <8>, <10>, <11>, <6>, <7>, <4>, <1>], [<2>, <5>, <9>, <12>, <13>, <0>, <14>, <7>, <11>, <8>, <6>, <3>, <10>, <1>, <4>], [<2>, <5>, <9>, <12>, <13>, <11>, <6>, <7>, <4>, <1>, <0>, <14>, <3>, <8>, <10>]]',)",1,117
topological_sort,"[(<7>, <3>), (<3>, <2>), (<2>, <4>), (<0>, <3>), (<0>, <6>), (<0>, <7>), (<0>, <1>), (<1>, <4>), (<5>, <7>), (<5>, <1>)]","{<7>: [<3>],
<3>: [<2>],
<2>: [<4>],
<0>: [<3>, <6>, <7>, <1>],
<6>: [],
<1>: [<4>],
<5>: [<7>, <1>],
<4>: []}","Node <7> is connected to node <3>.
Node <3> is connected to node <2>.
Node <2> is connected to node <4>.
Node <0> is connected to nodes <3>, <6>, <7>, <1>.
Node <1> is connected to node <4>.
Node <5> is connected to nodes <7>, <1>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>]",8,10,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<0>, <5>, <6>, <7>, <1>, <3>, <2>, <4>]","Let's solve it step by step.
Nodes with 0 in-degree: [<0>, <5>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <6>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <7>, <1>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <1>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <3>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
So the result of topological sorting is ","('[[<0>, <7>, <3>, <4>, <5>, <6>, <1>, <2>], [<0>, <5>, <6>, <7>, <1>, <3>, <2>, <4>], [<0>, <5>, <6>, <7>, <1>, <3>, <4>, <2>], [<0>, <5>, <2>, <4>, <6>, <7>, <1>, <3>]]',)",1,118
topological_sort,"[(<1>, <5>), (<1>, <6>), (<1>, <0>), (<1>, <4>), (<5>, <7>), (<5>, <4>), (<5>, <2>), (<5>, <0>), (<6>, <0>), (<6>, <5>), (<4>, <7>), (<7>, <0>), (<2>, <7>), (<3>, <7>), (<3>, <1>)]","{<1>: [<5>, <6>, <0>, <4>],
<5>: [<7>, <4>, <2>, <0>],
<6>: [<0>, <5>],
<0>: [],
<4>: [<7>],
<7>: [<0>],
<2>: [<7>],
<3>: [<7>, <1>]}","Node <1> is connected to nodes <5>, <6>, <0>, <4>.
Node <5> is connected to nodes <7>, <4>, <2>, <0>.
Node <6> is connected to nodes <0>, <5>.
Node <4> is connected to node <7>.
Node <7> is connected to node <0>.
Node <2> is connected to node <7>.
Node <3> is connected to nodes <7>, <1>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>]",8,15,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<3>, <1>, <6>, <5>, <4>, <2>, <7>, <0>]","Let's solve it step by step.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <2>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
So the result of topological sorting is ","('[[<3>, <7>, <4>, <6>, <2>, <1>, <0>, <5>], [<3>, <1>, <6>, <5>, <0>, <2>, <7>, <4>], [<3>, <1>, <6>, <5>, <4>, <2>, <7>, <0>], [<3>, <1>, <7>, <0>, <6>, <5>, <4>, <2>]]',)",2,119
topological_sort,"[(<9>, <1>), (<1>, <4>), (<4>, <10>), (<3>, <12>), (<3>, <9>), (<3>, <2>), (<3>, <10>), (<3>, <5>), (<2>, <12>), (<10>, <8>), (<5>, <6>), (<5>, <12>), (<11>, <2>), (<11>, <5>), (<0>, <12>), (<6>, <7>), (<8>, <12>), (<8>, <0>)]","{<9>: [<1>],
<1>: [<4>],
<4>: [<10>],
<3>: [<12>, <9>, <2>, <10>, <5>],
<12>: [],
<2>: [<12>],
<10>: [<8>],
<5>: [<6>, <12>],
<11>: [<2>, <5>],
<0>: [<12>],
<6>: [<7>],
<7>: [],
<8>: [<12>, <0>]}","Node <9> is connected to node <1>.
Node <1> is connected to node <4>.
Node <4> is connected to node <10>.
Node <3> is connected to nodes <12>, <9>, <2>, <10>, <5>.
Node <2> is connected to node <12>.
Node <10> is connected to node <8>.
Node <5> is connected to nodes <6>, <12>.
Node <11> is connected to nodes <2>, <5>.
Node <0> is connected to node <12>.
Node <6> is connected to node <7>.
Node <8> is connected to nodes <12>, <0>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>]",13,18,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<3>, <11>, <9>, <2>, <5>, <1>, <6>, <4>, <7>, <10>, <8>, <0>, <12>]","Let's solve it step by step.
Nodes with 0 in-degree: [<3>, <11>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<11>, <9>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<9>, <2>, <5>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <5>, <1>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <1>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <6>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <4>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <7>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <10>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<12>].
Visit node <12> and remove it from the graph.
So the result of topological sorting is ","('[[<3>, <0>, <9>, <2>, <10>, <8>, <6>, <12>, <11>, <7>, <4>, <1>, <5>], [<3>, <11>, <9>, <2>, <5>, <1>, <6>, <4>, <7>, <10>, <8>, <0>, <12>], [<3>, <11>, <9>, <2>, <5>, <1>, <8>, <6>, <12>, <7>, <10>, <4>, <0>], [<3>, <11>, <9>, <2>, <10>, <8>, <0>, <12>, <5>, <1>, <6>, <4>, <7>]]',)",1,120
topological_sort,"[(<7>, <2>), (<7>, <12>), (<2>, <0>), (<12>, <9>), (<12>, <4>), (<12>, <2>), (<12>, <1>), (<8>, <13>), (<8>, <6>), (<8>, <1>), (<8>, <2>), (<8>, <0>), (<8>, <3>), (<8>, <9>), (<8>, <7>), (<13>, <7>), (<13>, <4>), (<13>, <11>), (<13>, <9>), (<6>, <2>), (<6>, <0>), (<6>, <9>), (<1>, <9>), (<1>, <6>), (<1>, <0>), (<3>, <13>), (<3>, <10>), (<3>, <12>), (<3>, <7>), (<3>, <4>), (<9>, <0>), (<4>, <9>), (<4>, <6>), (<11>, <0>), (<11>, <12>), (<11>, <7>), (<11>, <4>), (<10>, <12>), (<10>, <9>), (<10>, <7>), (<10>, <1>), (<10>, <11>), (<10>, <5>), (<10>, <6>), (<5>, <6>), (<5>, <4>), (<5>, <1>)]","{<7>: [<2>, <12>],
<2>: [<0>],
<12>: [<9>, <4>, <2>, <1>],
<0>: [],
<8>: [<13>, <6>, <1>, <2>, <0>, <3>, <9>, <7>],
<13>: [<7>, <4>, <11>, <9>],
<6>: [<2>, <0>, <9>],
<1>: [<9>, <6>, <0>],
<3>: [<13>, <10>, <12>, <7>, <4>],
<9>: [<0>],
<4>: [<9>, <6>],
<11>: [<0>, <12>, <7>, <4>],
<10>: [<12>, <9>, <7>, <1>, <11>, <5>, <6>],
<5>: [<6>, <4>, <1>]}","Node <7> is connected to nodes <2>, <12>.
Node <2> is connected to node <0>.
Node <12> is connected to nodes <9>, <4>, <2>, <1>.
Node <8> is connected to nodes <13>, <6>, <1>, <2>, <0>, <3>, <9>, <7>.
Node <13> is connected to nodes <7>, <4>, <11>, <9>.
Node <6> is connected to nodes <2>, <0>, <9>.
Node <1> is connected to nodes <9>, <6>, <0>.
Node <3> is connected to nodes <13>, <10>, <12>, <7>, <4>.
Node <9> is connected to node <0>.
Node <4> is connected to nodes <9>, <6>.
Node <11> is connected to nodes <0>, <12>, <7>, <4>.
Node <10> is connected to nodes <12>, <9>, <7>, <1>, <11>, <5>, <6>.
Node <5> is connected to nodes <6>, <4>, <1>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>]",14,47,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<8>, <3>, <13>, <10>, <11>, <5>, <7>, <12>, <4>, <1>, <6>, <2>, <9>, <0>]","Let's solve it step by step.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<13>, <10>].
Visit node <13> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<11>, <5>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <7>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<12>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <1>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <9>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
So the result of topological sorting is ","('[[<8>, <3>, <13>, <10>, <11>, <5>, <7>, <12>, <4>, <1>, <6>, <2>, <9>, <0>], [<8>, <7>, <12>, <13>, <1>, <2>, <3>, <6>, <10>, <9>, <4>, <11>, <0>, <5>], [<8>, <3>, <13>, <10>, <11>, <5>, <7>, <0>, <1>, <4>, <2>, <12>, <9>, <6>], [<8>, <3>, <13>, <10>, <6>, <2>, <9>, <0>, <11>, <5>, <7>, <12>, <4>, <1>]]',)",0,121
topological_sort,"[(<0>, <3>), (<0>, <6>), (<3>, <1>), (<2>, <6>), (<2>, <1>), (<2>, <4>), (<2>, <8>), (<4>, <6>), (<4>, <3>), (<8>, <3>), (<8>, <6>), (<5>, <7>), (<5>, <2>), (<7>, <0>), (<7>, <2>)]","{<0>: [<3>, <6>],
<3>: [<1>],
<6>: [],
<1>: [],
<2>: [<6>, <1>, <4>, <8>],
<4>: [<6>, <3>],
<8>: [<3>, <6>],
<5>: [<7>, <2>],
<7>: [<0>, <2>]}","Node <0> is connected to nodes <3>, <6>.
Node <3> is connected to node <1>.
Node <2> is connected to nodes <6>, <1>, <4>, <8>.
Node <4> is connected to nodes <6>, <3>.
Node <8> is connected to nodes <3>, <6>.
Node <5> is connected to nodes <7>, <2>.
Node <7> is connected to nodes <0>, <2>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>]",9,15,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<5>, <7>, <0>, <2>, <4>, <8>, <3>, <6>, <1>]","Let's solve it step by step.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <2>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <8>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <6>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <1>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
So the result of topological sorting is ","('[[<5>, <7>, <0>, <2>, <6>, <1>, <3>, <4>, <8>], [<5>, <7>, <0>, <3>, <6>, <1>, <2>, <4>, <8>], [<5>, <6>, <8>, <0>, <3>, <4>, <7>, <2>, <1>], [<5>, <7>, <0>, <2>, <4>, <8>, <3>, <6>, <1>]]',)",3,122
topological_sort,"[(<11>, <10>), (<11>, <8>), (<11>, <0>), (<10>, <5>), (<8>, <4>), (<8>, <7>), (<8>, <5>), (<0>, <5>), (<0>, <10>), (<0>, <13>), (<0>, <4>), (<12>, <2>), (<12>, <5>), (<12>, <1>), (<12>, <13>), (<2>, <1>), (<2>, <4>), (<2>, <8>), (<2>, <11>), (<1>, <6>), (<1>, <3>), (<13>, <10>), (<13>, <4>), (<13>, <7>), (<7>, <10>), (<9>, <0>), (<9>, <8>), (<9>, <11>), (<9>, <13>), (<9>, <3>), (<9>, <10>), (<9>, <7>), (<3>, <5>), (<3>, <11>), (<3>, <13>), (<6>, <11>), (<6>, <9>), (<6>, <3>)]","{<11>: [<10>, <8>, <0>],
<10>: [<5>],
<8>: [<4>, <7>, <5>],
<0>: [<5>, <10>, <13>, <4>],
<5>: [],
<12>: [<2>, <5>, <1>, <13>],
<2>: [<1>, <4>, <8>, <11>],
<1>: [<6>, <3>],
<13>: [<10>, <4>, <7>],
<4>: [],
<7>: [<10>],
<9>: [<0>, <8>, <11>, <13>, <3>, <10>, <7>],
<3>: [<5>, <11>, <13>],
<6>: [<11>, <9>, <3>]}","Node <11> is connected to nodes <10>, <8>, <0>.
Node <10> is connected to node <5>.
Node <8> is connected to nodes <4>, <7>, <5>.
Node <0> is connected to nodes <5>, <10>, <13>, <4>.
Node <12> is connected to nodes <2>, <5>, <1>, <13>.
Node <2> is connected to nodes <1>, <4>, <8>, <11>.
Node <1> is connected to nodes <6>, <3>.
Node <13> is connected to nodes <10>, <4>, <7>.
Node <7> is connected to node <10>.
Node <9> is connected to nodes <0>, <8>, <11>, <13>, <3>, <10>, <7>.
Node <3> is connected to nodes <5>, <11>, <13>.
Node <6> is connected to nodes <11>, <9>, <3>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>]",14,38,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<12>, <2>, <1>, <6>, <9>, <3>, <11>, <8>, <0>, <13>, <4>, <7>, <10>, <5>]","Let's solve it step by step.
Nodes with 0 in-degree: [<12>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<11>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<8>, <0>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<13>].
Visit node <13> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <7>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
So the result of topological sorting is ","('[[<12>, <2>, <1>, <6>, <9>, <3>, <11>, <8>, <0>, <13>, <4>, <7>, <10>, <5>], [<12>, <0>, <5>, <8>, <6>, <7>, <3>, <2>, <10>, <4>, <1>, <13>, <9>, <11>], [<12>, <2>, <1>, <6>, <4>, <7>, <10>, <5>, <9>, <3>, <11>, <8>, <0>, <13>], [<12>, <2>, <1>, <6>, <9>, <3>, <11>, <8>, <0>, <13>, <4>, <7>, <10>, <5>]]',)",0,123
topological_sort,"[(<7>, <9>), (<7>, <8>), (<7>, <5>), (<7>, <2>), (<7>, <6>), (<7>, <1>), (<9>, <5>), (<9>, <8>), (<9>, <10>), (<8>, <1>), (<5>, <3>), (<2>, <4>), (<2>, <5>), (<2>, <3>), (<2>, <0>), (<2>, <10>), (<6>, <0>), (<6>, <3>), (<1>, <5>), (<4>, <9>), (<4>, <5>), (<4>, <10>), (<0>, <9>), (<0>, <8>)]","{<7>: [<9>, <8>, <5>, <2>, <6>, <1>],
<9>: [<5>, <8>, <10>],
<8>: [<1>],
<5>: [<3>],
<2>: [<4>, <5>, <3>, <0>, <10>],
<6>: [<0>, <3>],
<1>: [<5>],
<10>: [],
<4>: [<9>, <5>, <10>],
<3>: [],
<0>: [<9>, <8>]}","Node <7> is connected to nodes <9>, <8>, <5>, <2>, <6>, <1>.
Node <9> is connected to nodes <5>, <8>, <10>.
Node <8> is connected to node <1>.
Node <5> is connected to node <3>.
Node <2> is connected to nodes <4>, <5>, <3>, <0>, <10>.
Node <6> is connected to nodes <0>, <3>.
Node <1> is connected to node <5>.
Node <4> is connected to nodes <9>, <5>, <10>.
Node <0> is connected to nodes <9>, <8>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>]",11,24,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<7>, <2>, <6>, <4>, <0>, <9>, <8>, <10>, <1>, <5>, <3>]","Let's solve it step by step.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <6>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <4>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <0>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<8>, <10>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<10>, <1>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
So the result of topological sorting is ","('[[<7>, <2>, <6>, <4>, <0>, <9>, <8>, <10>, <1>, <5>, <3>], [<7>, <2>, <6>, <1>, <5>, <3>, <4>, <0>, <9>, <8>, <10>], [<7>, <9>, <8>, <5>, <0>, <2>, <4>, <1>, <10>, <3>, <6>], [<7>, <2>, <6>, <4>, <0>, <8>, <5>, <10>, <9>, <1>, <3>]]',)",0,124
topological_sort,"[(<7>, <0>), (<7>, <6>), (<0>, <1>), (<0>, <4>), (<6>, <0>), (<3>, <1>), (<3>, <0>), (<3>, <7>), (<2>, <1>), (<2>, <0>), (<5>, <6>), (<5>, <4>)]","{<7>: [<0>, <6>],
<0>: [<1>, <4>],
<6>: [<0>],
<1>: [],
<4>: [],
<3>: [<1>, <0>, <7>],
<2>: [<1>, <0>],
<5>: [<6>, <4>]}","Node <7> is connected to nodes <0>, <6>.
Node <0> is connected to nodes <1>, <4>.
Node <6> is connected to node <0>.
Node <3> is connected to nodes <1>, <0>, <7>.
Node <2> is connected to nodes <1>, <0>.
Node <5> is connected to nodes <6>, <4>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>]",8,12,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<3>, <2>, <5>, <7>, <6>, <0>, <1>, <4>]","Let's solve it step by step.
Nodes with 0 in-degree: [<3>, <2>, <5>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <5>, <7>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <7>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <4>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
So the result of topological sorting is ","('[[<3>, <2>, <1>, <4>, <5>, <7>, <6>, <0>], [<3>, <2>, <5>, <7>, <6>, <0>, <1>, <4>], [<3>, <5>, <2>, <7>, <0>, <4>, <1>, <6>], [<3>, <2>, <5>, <7>, <1>, <6>, <4>, <0>]]',)",1,125
topological_sort,"[(<1>, <7>), (<1>, <4>), (<1>, <0>), (<7>, <6>), (<7>, <0>), (<7>, <2>), (<7>, <3>), (<4>, <0>), (<0>, <2>), (<6>, <2>), (<6>, <3>), (<3>, <4>), (<3>, <5>), (<3>, <0>), (<5>, <0>)]","{<1>: [<7>, <4>, <0>],
<7>: [<6>, <0>, <2>, <3>],
<4>: [<0>],
<0>: [<2>],
<6>: [<2>, <3>],
<2>: [],
<3>: [<4>, <5>, <0>],
<5>: [<0>]}","Node <1> is connected to nodes <7>, <4>, <0>.
Node <7> is connected to nodes <6>, <0>, <2>, <3>.
Node <4> is connected to node <0>.
Node <0> is connected to node <2>.
Node <6> is connected to nodes <2>, <3>.
Node <3> is connected to nodes <4>, <5>, <0>.
Node <5> is connected to node <0>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>]",8,15,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<1>, <7>, <6>, <3>, <4>, <5>, <0>, <2>]","Let's solve it step by step.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <5>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
So the result of topological sorting is ","('[[<1>, <7>, <0>, <2>, <6>, <3>, <4>, <5>], [<1>, <7>, <6>, <3>, <4>, <5>, <0>, <2>], [<1>, <4>, <7>, <5>, <3>, <0>, <6>, <2>], [<1>, <7>, <6>, <3>, <0>, <2>, <4>, <5>]]',)",1,126
topological_sort,"[(<4>, <7>), (<4>, <6>), (<7>, <6>), (<7>, <0>), (<6>, <0>), (<6>, <1>), (<6>, <3>), (<9>, <8>), (<9>, <4>), (<9>, <1>), (<8>, <3>), (<8>, <4>), (<8>, <7>), (<1>, <3>), (<10>, <9>), (<10>, <6>), (<10>, <8>), (<2>, <5>), (<5>, <6>), (<5>, <8>)]","{<4>: [<7>, <6>],
<7>: [<6>, <0>],
<6>: [<0>, <1>, <3>],
<0>: [],
<9>: [<8>, <4>, <1>],
<8>: [<3>, <4>, <7>],
<1>: [<3>],
<3>: [],
<10>: [<9>, <6>, <8>],
<2>: [<5>],
<5>: [<6>, <8>]}","Node <4> is connected to nodes <7>, <6>.
Node <7> is connected to nodes <6>, <0>.
Node <6> is connected to nodes <0>, <1>, <3>.
Node <9> is connected to nodes <8>, <4>, <1>.
Node <8> is connected to nodes <3>, <4>, <7>.
Node <1> is connected to node <3>.
Node <10> is connected to nodes <9>, <6>, <8>.
Node <2> is connected to node <5>.
Node <5> is connected to nodes <6>, <8>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>]",11,20,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<10>, <2>, <9>, <5>, <8>, <4>, <7>, <6>, <0>, <1>, <3>]","Let's solve it step by step.
Nodes with 0 in-degree: [<10>, <2>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <9>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<9>, <5>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <1>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
So the result of topological sorting is ","('[[<10>, <2>, <9>, <5>, <8>, <4>, <0>, <3>, <1>, <7>, <6>], [<10>, <0>, <4>, <3>, <6>, <5>, <8>, <9>, <7>, <1>, <2>], [<10>, <2>, <9>, <0>, <1>, <3>, <5>, <8>, <4>, <7>, <6>], [<10>, <2>, <9>, <5>, <8>, <4>, <7>, <6>, <0>, <1>, <3>]]',)",3,127
topological_sort,"[(<12>, <4>), (<4>, <0>), (<4>, <10>), (<10>, <9>), (<5>, <0>), (<5>, <7>), (<5>, <8>), (<7>, <9>), (<8>, <7>), (<8>, <10>), (<8>, <12>), (<8>, <13>), (<9>, <6>), (<3>, <12>), (<1>, <5>), (<14>, <5>), (<14>, <2>), (<2>, <5>), (<13>, <4>), (<11>, <12>)]","{<12>: [<4>],
<4>: [<0>, <10>],
<0>: [],
<10>: [<9>],
<5>: [<0>, <7>, <8>],
<7>: [<9>],
<8>: [<7>, <10>, <12>, <13>],
<9>: [<6>],
<6>: [],
<3>: [<12>],
<1>: [<5>],
<14>: [<5>, <2>],
<2>: [<5>],
<13>: [<4>],
<11>: [<12>]}","Node <12> is connected to node <4>.
Node <4> is connected to nodes <0>, <10>.
Node <10> is connected to node <9>.
Node <5> is connected to nodes <0>, <7>, <8>.
Node <7> is connected to node <9>.
Node <8> is connected to nodes <7>, <10>, <12>, <13>.
Node <9> is connected to node <6>.
Node <3> is connected to node <12>.
Node <1> is connected to node <5>.
Node <14> is connected to nodes <5>, <2>.
Node <2> is connected to node <5>.
Node <13> is connected to node <4>.
Node <11> is connected to node <12>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>, <14>]",15,20,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<3>, <1>, <14>, <11>, <2>, <5>, <8>, <7>, <12>, <13>, <4>, <0>, <10>, <9>, <6>]","Let's solve it step by step.
Nodes with 0 in-degree: [<3>, <1>, <14>, <11>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <14>, <11>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<14>, <11>].
Visit node <14> and remove it from the graph.
Nodes with 0 in-degree: [<11>, <2>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <12>, <13>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<12>, <13>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<13>].
Visit node <13> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <10>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
So the result of topological sorting is ","('[[<3>, <1>, <14>, <11>, <2>, <5>, <8>, <7>, <12>, <4>, <13>, <10>, <0>, <6>, <9>], [<3>, <1>, <14>, <11>, <2>, <5>, <8>, <7>, <12>, <13>, <4>, <0>, <10>, <9>, <6>], [<3>, <1>, <14>, <11>, <2>, <4>, <0>, <10>, <9>, <6>, <5>, <8>, <7>, <12>, <13>], [<3>, <12>, <14>, <7>, <9>, <0>, <1>, <2>, <6>, <11>, <10>, <5>, <13>, <8>, <4>]]',)",1,128
topological_sort,"[(<0>, <7>), (<0>, <1>), (<0>, <4>), (<7>, <1>), (<7>, <3>), (<1>, <3>), (<1>, <2>), (<4>, <2>), (<4>, <7>), (<3>, <5>), (<2>, <3>), (<2>, <5>), (<6>, <0>)]","{<0>: [<7>, <1>, <4>],
<7>: [<1>, <3>],
<1>: [<3>, <2>],
<4>: [<2>, <7>],
<3>: [<5>],
<2>: [<3>, <5>],
<5>: [],
<6>: [<0>]}","Node <0> is connected to nodes <7>, <1>, <4>.
Node <7> is connected to nodes <1>, <3>.
Node <1> is connected to nodes <3>, <2>.
Node <4> is connected to nodes <2>, <7>.
Node <3> is connected to node <5>.
Node <2> is connected to nodes <3>, <5>.
Node <6> is connected to node <0>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>]",8,13,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<6>, <0>, <4>, <7>, <1>, <2>, <3>, <5>]","Let's solve it step by step.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
So the result of topological sorting is ","('[[<6>, <3>, <4>, <5>, <1>, <7>, <2>, <0>], [<6>, <0>, <4>, <7>, <1>, <2>, <3>, <5>], [<6>, <0>, <4>, <7>, <5>, <1>, <2>, <3>], [<6>, <0>, <3>, <5>, <4>, <7>, <1>, <2>]]',)",1,129
topological_sort,"[(<0>, <5>), (<0>, <6>), (<0>, <11>), (<0>, <9>), (<5>, <9>), (<5>, <7>), (<6>, <7>), (<6>, <12>), (<6>, <2>), (<11>, <9>), (<11>, <7>), (<11>, <1>), (<9>, <8>), (<9>, <6>), (<7>, <2>), (<8>, <12>), (<2>, <3>), (<1>, <6>), (<10>, <9>), (<10>, <11>), (<4>, <11>)]","{<0>: [<5>, <6>, <11>, <9>],
<5>: [<9>, <7>],
<6>: [<7>, <12>, <2>],
<11>: [<9>, <7>, <1>],
<9>: [<8>, <6>],
<7>: [<2>],
<8>: [<12>],
<12>: [],
<2>: [<3>],
<3>: [],
<1>: [<6>],
<10>: [<9>, <11>],
<4>: [<11>]}","Node <0> is connected to nodes <5>, <6>, <11>, <9>.
Node <5> is connected to nodes <9>, <7>.
Node <6> is connected to nodes <7>, <12>, <2>.
Node <11> is connected to nodes <9>, <7>, <1>.
Node <9> is connected to nodes <8>, <6>.
Node <7> is connected to node <2>.
Node <8> is connected to node <12>.
Node <2> is connected to node <3>.
Node <1> is connected to node <6>.
Node <10> is connected to nodes <9>, <11>.
Node <4> is connected to node <11>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>]",13,21,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<0>, <10>, <4>, <5>, <11>, <9>, <1>, <8>, <6>, <7>, <12>, <2>, <3>]","Let's solve it step by step.
Nodes with 0 in-degree: [<0>, <10>, <4>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<10>, <4>, <5>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <5>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <11>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<11>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<9>, <1>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <8>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<8>, <6>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <12>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<12>, <2>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
So the result of topological sorting is ","('[[<0>, <9>, <1>, <10>, <8>, <5>, <12>, <4>, <7>, <2>, <6>, <3>, <11>], [<0>, <10>, <4>, <5>, <7>, <12>, <2>, <3>, <11>, <9>, <1>, <8>, <6>], [<0>, <10>, <4>, <5>, <11>, <9>, <2>, <3>, <12>, <1>, <7>, <6>, <8>], [<0>, <10>, <4>, <5>, <11>, <9>, <1>, <8>, <6>, <7>, <12>, <2>, <3>]]',)",3,130
topological_sort,"[(<5>, <0>), (<5>, <9>), (<5>, <3>), (<0>, <2>), (<9>, <0>), (<3>, <2>), (<3>, <11>), (<3>, <9>), (<1>, <0>), (<7>, <6>), (<7>, <5>), (<6>, <3>), (<11>, <0>), (<11>, <1>), (<8>, <2>), (<4>, <8>), (<4>, <10>), (<4>, <7>), (<10>, <1>)]","{<5>: [<0>, <9>, <3>],
<0>: [<2>],
<9>: [<0>],
<3>: [<2>, <11>, <9>],
<2>: [],
<1>: [<0>],
<7>: [<6>, <5>],
<6>: [<3>],
<11>: [<0>, <1>],
<8>: [<2>],
<4>: [<8>, <10>, <7>],
<10>: [<1>]}","Node <5> is connected to nodes <0>, <9>, <3>.
Node <0> is connected to node <2>.
Node <9> is connected to node <0>.
Node <3> is connected to nodes <2>, <11>, <9>.
Node <1> is connected to node <0>.
Node <7> is connected to nodes <6>, <5>.
Node <6> is connected to node <3>.
Node <11> is connected to nodes <0>, <1>.
Node <8> is connected to node <2>.
Node <4> is connected to nodes <8>, <10>, <7>.
Node <10> is connected to node <1>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>]",12,19,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<4>, <8>, <10>, <7>, <6>, <5>, <3>, <11>, <9>, <1>, <0>, <2>]","Let's solve it step by step.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<8>, <10>, <7>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<10>, <7>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <5>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<11>, <9>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<9>, <1>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
So the result of topological sorting is ","('[[<4>, <8>, <10>, <7>, <6>, <5>, <3>, <11>, <9>, <1>, <0>, <2>], [<4>, <8>, <10>, <7>, <9>, <1>, <0>, <2>, <6>, <5>, <3>, <11>], [<4>, <8>, <10>, <7>, <6>, <5>, <3>, <11>, <9>, <1>, <0>, <2>], [<4>, <8>, <9>, <1>, <7>, <5>, <10>, <0>, <6>, <3>, <2>, <11>]]',)",2,131
topological_sort,"[(<5>, <10>), (<5>, <6>), (<5>, <1>), (<5>, <3>), (<5>, <9>), (<5>, <7>), (<10>, <4>), (<10>, <1>), (<10>, <3>), (<10>, <2>), (<10>, <11>), (<6>, <8>), (<1>, <2>), (<1>, <9>), (<3>, <0>), (<3>, <4>), (<7>, <3>), (<7>, <6>), (<2>, <9>), (<11>, <9>), (<11>, <7>), (<11>, <4>), (<0>, <1>), (<8>, <0>)]","{<5>: [<10>, <6>, <1>, <3>, <9>, <7>],
<10>: [<4>, <1>, <3>, <2>, <11>],
<6>: [<8>],
<1>: [<2>, <9>],
<3>: [<0>, <4>],
<9>: [],
<7>: [<3>, <6>],
<4>: [],
<2>: [<9>],
<11>: [<9>, <7>, <4>],
<0>: [<1>],
<8>: [<0>]}","Node <5> is connected to nodes <10>, <6>, <1>, <3>, <9>, <7>.
Node <10> is connected to nodes <4>, <1>, <3>, <2>, <11>.
Node <6> is connected to node <8>.
Node <1> is connected to nodes <2>, <9>.
Node <3> is connected to nodes <0>, <4>.
Node <7> is connected to nodes <3>, <6>.
Node <2> is connected to node <9>.
Node <11> is connected to nodes <9>, <7>, <4>.
Node <0> is connected to node <1>.
Node <8> is connected to node <0>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>]",12,24,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<5>, <10>, <11>, <7>, <3>, <6>, <4>, <8>, <0>, <1>, <2>, <9>]","Let's solve it step by step.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<11>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <6>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <4>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <8>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
So the result of topological sorting is ","('[[<5>, <10>, <11>, <7>, <3>, <6>, <4>, <8>, <0>, <1>, <2>, <9>], [<5>, <10>, <11>, <7>, <0>, <1>, <2>, <9>, <3>, <6>, <4>, <8>], [<5>, <10>, <11>, <7>, <3>, <6>, <2>, <0>, <9>, <4>, <8>, <1>], [<5>, <10>, <8>, <11>, <7>, <1>, <3>, <9>, <4>, <2>, <6>, <0>]]',)",0,132
topological_sort,"[(<1>, <2>), (<1>, <5>), (<2>, <7>), (<2>, <0>), (<5>, <6>), (<5>, <4>), (<5>, <2>), (<0>, <7>), (<8>, <6>), (<8>, <7>), (<6>, <7>), (<6>, <4>), (<6>, <2>), (<6>, <0>), (<4>, <7>), (<3>, <7>), (<3>, <2>), (<3>, <1>)]","{<1>: [<2>, <5>],
<2>: [<7>, <0>],
<5>: [<6>, <4>, <2>],
<7>: [],
<0>: [<7>],
<8>: [<6>, <7>],
<6>: [<7>, <4>, <2>, <0>],
<4>: [<7>],
<3>: [<7>, <2>, <1>]}","Node <1> is connected to nodes <2>, <5>.
Node <2> is connected to nodes <7>, <0>.
Node <5> is connected to nodes <6>, <4>, <2>.
Node <0> is connected to node <7>.
Node <8> is connected to nodes <6>, <7>.
Node <6> is connected to nodes <7>, <4>, <2>, <0>.
Node <4> is connected to node <7>.
Node <3> is connected to nodes <7>, <2>, <1>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>]",9,18,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<8>, <3>, <1>, <5>, <6>, <4>, <2>, <0>, <7>]","Let's solve it step by step.
Nodes with 0 in-degree: [<8>, <3>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <2>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
So the result of topological sorting is ","('[[<8>, <3>, <1>, <2>, <0>, <7>, <5>, <6>, <4>], [<8>, <3>, <1>, <5>, <7>, <4>, <6>, <0>, <2>], [<8>, <1>, <3>, <4>, <2>, <5>, <6>, <7>, <0>], [<8>, <3>, <1>, <5>, <6>, <4>, <2>, <0>, <7>]]',)",3,133
topological_sort,"[(<7>, <6>), (<7>, <2>), (<7>, <4>), (<7>, <3>), (<7>, <5>), (<6>, <1>), (<6>, <5>), (<2>, <6>), (<4>, <1>), (<3>, <4>), (<3>, <2>), (<0>, <5>), (<0>, <2>), (<0>, <7>), (<0>, <6>)]","{<7>: [<6>, <2>, <4>, <3>, <5>],
<6>: [<1>, <5>],
<2>: [<6>],
<4>: [<1>],
<3>: [<4>, <2>],
<5>: [],
<1>: [],
<0>: [<5>, <2>, <7>, <6>]}","Node <7> is connected to nodes <6>, <2>, <4>, <3>, <5>.
Node <6> is connected to nodes <1>, <5>.
Node <2> is connected to node <6>.
Node <4> is connected to node <1>.
Node <3> is connected to nodes <4>, <2>.
Node <0> is connected to nodes <5>, <2>, <7>, <6>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>]",8,15,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<0>, <7>, <3>, <4>, <2>, <6>, <1>, <5>]","Let's solve it step by step.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <2>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <5>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
So the result of topological sorting is ","('[[<0>, <7>, <4>, <1>, <3>, <6>, <5>, <2>], [<0>, <7>, <3>, <4>, <2>, <6>, <1>, <5>], [<0>, <7>, <3>, <4>, <2>, <1>, <5>, <6>], [<0>, <7>, <1>, <5>, <3>, <4>, <2>, <6>]]',)",1,134
topological_sort,"[(<2>, <5>), (<2>, <9>), (<2>, <7>), (<5>, <9>), (<7>, <9>), (<7>, <1>), (<6>, <7>), (<6>, <9>), (<6>, <3>), (<3>, <7>), (<0>, <9>), (<0>, <7>), (<4>, <2>), (<4>, <6>), (<8>, <6>)]","{<2>: [<5>, <9>, <7>],
<5>: [<9>],
<9>: [],
<7>: [<9>, <1>],
<6>: [<7>, <9>, <3>],
<3>: [<7>],
<1>: [],
<0>: [<9>, <7>],
<4>: [<2>, <6>],
<8>: [<6>]}","Node <2> is connected to nodes <5>, <9>, <7>.
Node <5> is connected to node <9>.
Node <7> is connected to nodes <9>, <1>.
Node <6> is connected to nodes <7>, <9>, <3>.
Node <3> is connected to node <7>.
Node <0> is connected to nodes <9>, <7>.
Node <4> is connected to nodes <2>, <6>.
Node <8> is connected to node <6>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>]",10,15,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<0>, <4>, <8>, <2>, <6>, <5>, <3>, <7>, <9>, <1>]","Let's solve it step by step.
Nodes with 0 in-degree: [<0>, <4>, <8>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <8>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<8>, <2>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <6>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <5>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <3>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<9>, <1>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
So the result of topological sorting is ","('[[<0>, <4>, <8>, <2>, <6>, <5>, <3>, <7>, <9>, <1>], [<0>, <4>, <8>, <2>, <6>, <5>, <3>, <1>, <9>, <7>], [<0>, <3>, <5>, <9>, <8>, <7>, <2>, <4>, <6>, <1>], [<0>, <4>, <8>, <7>, <9>, <1>, <2>, <6>, <5>, <3>]]',)",0,135
topological_sort,"[(<7>, <10>), (<7>, <9>), (<7>, <4>), (<4>, <10>), (<2>, <0>), (<2>, <1>), (<2>, <9>), (<2>, <13>), (<2>, <8>), (<0>, <9>), (<0>, <10>), (<1>, <10>), (<1>, <0>), (<13>, <7>), (<13>, <9>), (<13>, <0>), (<8>, <1>), (<8>, <0>), (<8>, <10>), (<3>, <14>), (<3>, <12>), (<3>, <7>), (<3>, <13>), (<3>, <0>), (<3>, <8>), (<14>, <10>), (<14>, <4>), (<14>, <2>), (<14>, <8>), (<12>, <5>), (<12>, <4>), (<12>, <8>), (<12>, <6>), (<12>, <1>), (<12>, <10>), (<5>, <0>), (<5>, <9>), (<5>, <11>), (<5>, <8>), (<5>, <10>), (<5>, <4>), (<6>, <0>), (<6>, <7>), (<6>, <5>), (<6>, <11>), (<11>, <14>), (<11>, <0>), (<11>, <4>)]","{<7>: [<10>, <9>, <4>],
<10>: [],
<9>: [],
<4>: [<10>],
<2>: [<0>, <1>, <9>, <13>, <8>],
<0>: [<9>, <10>],
<1>: [<10>, <0>],
<13>: [<7>, <9>, <0>],
<8>: [<1>, <0>, <10>],
<3>: [<14>, <12>, <7>, <13>, <0>, <8>],
<14>: [<10>, <4>, <2>, <8>],
<12>: [<5>, <4>, <8>, <6>, <1>, <10>],
<5>: [<0>, <9>, <11>, <8>, <10>, <4>],
<6>: [<0>, <7>, <5>, <11>],
<11>: [<14>, <0>, <4>]}","Node <7> is connected to nodes <10>, <9>, <4>.
Node <4> is connected to node <10>.
Node <2> is connected to nodes <0>, <1>, <9>, <13>, <8>.
Node <0> is connected to nodes <9>, <10>.
Node <1> is connected to nodes <10>, <0>.
Node <13> is connected to nodes <7>, <9>, <0>.
Node <8> is connected to nodes <1>, <0>, <10>.
Node <3> is connected to nodes <14>, <12>, <7>, <13>, <0>, <8>.
Node <14> is connected to nodes <10>, <4>, <2>, <8>.
Node <12> is connected to nodes <5>, <4>, <8>, <6>, <1>, <10>.
Node <5> is connected to nodes <0>, <9>, <11>, <8>, <10>, <4>.
Node <6> is connected to nodes <0>, <7>, <5>, <11>.
Node <11> is connected to nodes <14>, <0>, <4>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>, <14>]",15,48,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<3>, <12>, <6>, <5>, <11>, <14>, <2>, <13>, <8>, <7>, <1>, <4>, <0>, <9>, <10>]","Let's solve it step by step.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<12>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<11>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<14>].
Visit node <14> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<13>, <8>].
Visit node <13> and remove it from the graph.
Nodes with 0 in-degree: [<8>, <7>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <1>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <4>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <0>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<9>, <10>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
So the result of topological sorting is ","('[[<3>, <10>, <8>, <2>, <7>, <6>, <4>, <9>, <1>, <11>, <0>, <14>, <5>, <12>, <13>], [<3>, <12>, <6>, <5>, <11>, <14>, <2>, <13>, <8>, <7>, <1>, <4>, <0>, <9>, <10>], [<3>, <12>, <6>, <5>, <11>, <14>, <2>, <9>, <4>, <1>, <8>, <10>, <13>, <7>, <0>], [<3>, <12>, <6>, <5>, <11>, <1>, <4>, <0>, <9>, <10>, <14>, <2>, <13>, <8>, <7>]]',)",1,136
topological_sort,"[(<10>, <4>), (<10>, <11>), (<10>, <2>), (<10>, <0>), (<4>, <6>), (<4>, <7>), (<4>, <8>), (<11>, <4>), (<2>, <8>), (<2>, <7>), (<0>, <9>), (<0>, <7>), (<7>, <6>), (<5>, <1>), (<5>, <10>), (<5>, <6>), (<5>, <4>), (<1>, <10>), (<1>, <7>), (<1>, <8>), (<9>, <4>), (<9>, <12>), (<9>, <8>), (<12>, <7>), (<3>, <8>), (<3>, <9>)]","{<10>: [<4>, <11>, <2>, <0>],
<4>: [<6>, <7>, <8>],
<11>: [<4>],
<2>: [<8>, <7>],
<0>: [<9>, <7>],
<6>: [],
<7>: [<6>],
<8>: [],
<5>: [<1>, <10>, <6>, <4>],
<1>: [<10>, <7>, <8>],
<9>: [<4>, <12>, <8>],
<12>: [<7>],
<3>: [<8>, <9>]}","Node <10> is connected to nodes <4>, <11>, <2>, <0>.
Node <4> is connected to nodes <6>, <7>, <8>.
Node <11> is connected to node <4>.
Node <2> is connected to nodes <8>, <7>.
Node <0> is connected to nodes <9>, <7>.
Node <7> is connected to node <6>.
Node <5> is connected to nodes <1>, <10>, <6>, <4>.
Node <1> is connected to nodes <10>, <7>, <8>.
Node <9> is connected to nodes <4>, <12>, <8>.
Node <12> is connected to node <7>.
Node <3> is connected to nodes <8>, <9>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>]",13,26,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<5>, <3>, <1>, <10>, <11>, <2>, <0>, <9>, <4>, <12>, <8>, <7>, <6>]","Let's solve it step by step.
Nodes with 0 in-degree: [<5>, <3>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <1>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<11>, <2>, <0>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <0>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <12>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<12>, <8>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<8>, <7>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
So the result of topological sorting is ","('[[<5>, <3>, <1>, <10>, <11>, <2>, <0>, <9>, <4>, <12>, <8>, <7>, <6>], [<5>, <3>, <1>, <10>, <12>, <8>, <7>, <6>, <11>, <2>, <0>, <9>, <4>], [<5>, <2>, <1>, <0>, <12>, <9>, <7>, <4>, <3>, <6>, <8>, <10>, <11>], [<5>, <3>, <1>, <10>, <11>, <2>, <7>, <8>, <6>, <4>, <9>, <0>, <12>]]',)",0,137
topological_sort,"[(<3>, <10>), (<3>, <11>), (<3>, <4>), (<10>, <0>), (<10>, <8>), (<4>, <11>), (<4>, <7>), (<8>, <0>), (<9>, <1>), (<9>, <10>), (<9>, <7>), (<9>, <6>), (<9>, <8>), (<1>, <4>), (<7>, <10>), (<6>, <1>), (<6>, <5>), (<5>, <1>), (<5>, <11>), (<5>, <4>), (<5>, <2>), (<2>, <8>), (<2>, <7>), (<2>, <11>), (<2>, <3>), (<2>, <1>)]","{<3>: [<10>, <11>, <4>],
<10>: [<0>, <8>],
<11>: [],
<4>: [<11>, <7>],
<0>: [],
<8>: [<0>],
<9>: [<1>, <10>, <7>, <6>, <8>],
<1>: [<4>],
<7>: [<10>],
<6>: [<1>, <5>],
<5>: [<1>, <11>, <4>, <2>],
<2>: [<8>, <7>, <11>, <3>, <1>]}","Node <3> is connected to nodes <10>, <11>, <4>.
Node <10> is connected to nodes <0>, <8>.
Node <4> is connected to nodes <11>, <7>.
Node <8> is connected to node <0>.
Node <9> is connected to nodes <1>, <10>, <7>, <6>, <8>.
Node <1> is connected to node <4>.
Node <7> is connected to node <10>.
Node <6> is connected to nodes <1>, <5>.
Node <5> is connected to nodes <1>, <11>, <4>, <2>.
Node <2> is connected to nodes <8>, <7>, <11>, <3>, <1>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>]",12,26,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<9>, <6>, <5>, <2>, <3>, <1>, <4>, <11>, <7>, <10>, <8>, <0>]","Let's solve it step by step.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <1>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<11>, <7>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
So the result of topological sorting is ","('[[<9>, <6>, <5>, <2>, <3>, <1>, <4>, <11>, <7>, <10>, <8>, <0>], [<9>, <6>, <5>, <2>, <7>, <10>, <8>, <0>, <3>, <1>, <4>, <11>], [<9>, <4>, <2>, <1>, <5>, <3>, <7>, <11>, <6>, <0>, <10>, <8>], [<9>, <6>, <5>, <2>, <3>, <1>, <8>, <10>, <0>, <4>, <7>, <11>]]',)",0,138
topological_sort,"[(<11>, <6>), (<11>, <9>), (<11>, <0>), (<6>, <7>), (<6>, <8>), (<9>, <1>), (<0>, <6>), (<7>, <5>), (<7>, <4>), (<8>, <1>), (<2>, <10>), (<10>, <5>), (<10>, <4>), (<5>, <9>), (<4>, <1>), (<4>, <8>), (<3>, <8>), (<3>, <9>), (<3>, <7>)]","{<11>: [<6>, <9>, <0>],
<6>: [<7>, <8>],
<9>: [<1>],
<0>: [<6>],
<7>: [<5>, <4>],
<8>: [<1>],
<2>: [<10>],
<10>: [<5>, <4>],
<5>: [<9>],
<4>: [<1>, <8>],
<1>: [],
<3>: [<8>, <9>, <7>]}","Node <11> is connected to nodes <6>, <9>, <0>.
Node <6> is connected to nodes <7>, <8>.
Node <9> is connected to node <1>.
Node <0> is connected to node <6>.
Node <7> is connected to nodes <5>, <4>.
Node <8> is connected to node <1>.
Node <2> is connected to node <10>.
Node <10> is connected to nodes <5>, <4>.
Node <5> is connected to node <9>.
Node <4> is connected to nodes <1>, <8>.
Node <3> is connected to nodes <8>, <9>, <7>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>]",12,19,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<11>, <2>, <3>, <0>, <10>, <6>, <7>, <5>, <4>, <9>, <8>, <1>]","Let's solve it step by step.
Nodes with 0 in-degree: [<11>, <2>, <3>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <3>, <0>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <0>, <10>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <10>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<10>, <6>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <4>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <9>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<9>, <8>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
So the result of topological sorting is ","('[[<11>, <2>, <3>, <0>, <10>, <6>, <9>, <1>, <8>, <7>, <5>, <4>], [<11>, <7>, <5>, <8>, <6>, <4>, <0>, <9>, <10>, <1>, <2>, <3>], [<11>, <2>, <3>, <0>, <4>, <9>, <8>, <1>, <10>, <6>, <7>, <5>], [<11>, <2>, <3>, <0>, <10>, <6>, <7>, <5>, <4>, <9>, <8>, <1>]]',)",3,139
topological_sort,"[(<5>, <4>), (<5>, <2>), (<5>, <0>), (<5>, <6>), (<4>, <0>), (<4>, <2>), (<0>, <1>), (<6>, <2>), (<3>, <5>), (<3>, <0>), (<3>, <7>)]","{<5>: [<4>, <2>, <0>, <6>],
<4>: [<0>, <2>],
<2>: [],
<0>: [<1>],
<6>: [<2>],
<1>: [],
<3>: [<5>, <0>, <7>],
<7>: []}","Node <5> is connected to nodes <4>, <2>, <0>, <6>.
Node <4> is connected to nodes <0>, <2>.
Node <0> is connected to node <1>.
Node <6> is connected to node <2>.
Node <3> is connected to nodes <5>, <0>, <7>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>]",8,11,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<3>, <5>, <7>, <4>, <6>, <0>, <2>, <1>]","Let's solve it step by step.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <7>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <4>, <6>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <6>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <0>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <2>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <1>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
So the result of topological sorting is ","('[[<3>, <5>, <7>, <4>, <6>, <1>, <2>, <0>], [<3>, <5>, <7>, <4>, <6>, <0>, <2>, <1>], [<3>, <5>, <2>, <1>, <7>, <4>, <6>, <0>], [<3>, <6>, <1>, <5>, <7>, <0>, <4>, <2>]]',)",1,140
topological_sort,"[(<2>, <7>), (<2>, <1>), (<2>, <8>), (<7>, <6>), (<8>, <4>), (<6>, <1>), (<4>, <6>), (<4>, <7>), (<4>, <1>), (<3>, <6>), (<3>, <4>), (<3>, <7>), (<3>, <0>), (<3>, <8>), (<3>, <1>), (<0>, <4>), (<5>, <7>), (<5>, <4>), (<5>, <0>), (<5>, <8>), (<5>, <2>), (<5>, <1>)]","{<2>: [<7>, <1>, <8>],
<7>: [<6>],
<1>: [],
<8>: [<4>],
<6>: [<1>],
<4>: [<6>, <7>, <1>],
<3>: [<6>, <4>, <7>, <0>, <8>, <1>],
<0>: [<4>],
<5>: [<7>, <4>, <0>, <8>, <2>, <1>]}","Node <2> is connected to nodes <7>, <1>, <8>.
Node <7> is connected to node <6>.
Node <8> is connected to node <4>.
Node <6> is connected to node <1>.
Node <4> is connected to nodes <6>, <7>, <1>.
Node <3> is connected to nodes <6>, <4>, <7>, <0>, <8>, <1>.
Node <0> is connected to node <4>.
Node <5> is connected to nodes <7>, <4>, <0>, <8>, <2>, <1>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>]",9,22,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<3>, <5>, <0>, <2>, <8>, <4>, <7>, <6>, <1>]","Let's solve it step by step.
Nodes with 0 in-degree: [<3>, <5>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <2>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
So the result of topological sorting is ","('[[<3>, <5>, <0>, <2>, <7>, <1>, <8>, <4>, <6>], [<3>, <2>, <7>, <8>, <4>, <1>, <5>, <0>, <6>], [<3>, <5>, <0>, <2>, <8>, <4>, <7>, <6>, <1>], [<3>, <5>, <0>, <7>, <6>, <1>, <2>, <8>, <4>]]',)",2,141
topological_sort,"[(<6>, <1>), (<6>, <7>), (<1>, <8>), (<1>, <9>), (<7>, <0>), (<9>, <5>), (<9>, <13>), (<9>, <11>), (<4>, <5>), (<4>, <12>), (<5>, <13>), (<12>, <7>), (<12>, <8>), (<13>, <8>), (<3>, <13>), (<3>, <1>), (<3>, <4>), (<3>, <0>), (<3>, <14>), (<0>, <11>), (<0>, <8>), (<14>, <6>), (<14>, <9>), (<14>, <1>), (<14>, <7>), (<2>, <10>), (<10>, <6>), (<10>, <0>)]","{<6>: [<1>, <7>],
<1>: [<8>, <9>],
<7>: [<0>],
<8>: [],
<9>: [<5>, <13>, <11>],
<4>: [<5>, <12>],
<5>: [<13>],
<12>: [<7>, <8>],
<13>: [<8>],
<3>: [<13>, <1>, <4>, <0>, <14>],
<0>: [<11>, <8>],
<14>: [<6>, <9>, <1>, <7>],
<2>: [<10>],
<10>: [<6>, <0>],
<11>: []}","Node <6> is connected to nodes <1>, <7>.
Node <1> is connected to nodes <8>, <9>.
Node <7> is connected to node <0>.
Node <9> is connected to nodes <5>, <13>, <11>.
Node <4> is connected to nodes <5>, <12>.
Node <5> is connected to node <13>.
Node <12> is connected to nodes <7>, <8>.
Node <13> is connected to node <8>.
Node <3> is connected to nodes <13>, <1>, <4>, <0>, <14>.
Node <0> is connected to nodes <11>, <8>.
Node <14> is connected to nodes <6>, <9>, <1>, <7>.
Node <2> is connected to node <10>.
Node <10> is connected to nodes <6>, <0>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>, <14>]",15,28,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<3>, <2>, <4>, <14>, <10>, <12>, <6>, <1>, <7>, <9>, <0>, <5>, <11>, <13>, <8>]","Let's solve it step by step.
Nodes with 0 in-degree: [<3>, <2>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <4>, <14>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <14>, <10>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<14>, <10>, <12>].
Visit node <14> and remove it from the graph.
Nodes with 0 in-degree: [<10>, <12>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<12>, <6>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <7>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <9>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<9>, <0>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <5>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <11>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<11>, <13>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<13>].
Visit node <13> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
So the result of topological sorting is ","('[[<3>, <2>, <4>, <14>, <10>, <12>, <6>, <1>, <7>, <9>, <0>, <5>, <11>, <13>, <8>], [<3>, <6>, <1>, <9>, <12>, <10>, <14>, <5>, <7>, <8>, <4>, <2>, <13>, <11>, <0>], [<3>, <2>, <4>, <14>, <10>, <12>, <6>, <1>, <13>, <8>, <0>, <7>, <11>, <9>, <5>], [<3>, <2>, <4>, <14>, <10>, <0>, <5>, <11>, <13>, <8>, <12>, <6>, <1>, <7>, <9>]]',)",0,142
topological_sort,"[(<9>, <10>), (<9>, <2>), (<9>, <6>), (<9>, <7>), (<10>, <2>), (<6>, <5>), (<6>, <4>), (<6>, <10>), (<7>, <5>), (<7>, <10>), (<7>, <2>), (<5>, <2>), (<1>, <4>), (<1>, <7>), (<1>, <8>), (<1>, <6>), (<4>, <0>), (<4>, <7>), (<8>, <3>), (<8>, <2>), (<8>, <4>), (<0>, <5>), (<0>, <7>), (<3>, <5>), (<3>, <4>), (<3>, <9>), (<3>, <10>), (<3>, <6>)]","{<9>: [<10>, <2>, <6>, <7>],
<10>: [<2>],
<2>: [],
<6>: [<5>, <4>, <10>],
<7>: [<5>, <10>, <2>],
<5>: [<2>],
<1>: [<4>, <7>, <8>, <6>],
<4>: [<0>, <7>],
<8>: [<3>, <2>, <4>],
<0>: [<5>, <7>],
<3>: [<5>, <4>, <9>, <10>, <6>]}","Node <9> is connected to nodes <10>, <2>, <6>, <7>.
Node <10> is connected to node <2>.
Node <6> is connected to nodes <5>, <4>, <10>.
Node <7> is connected to nodes <5>, <10>, <2>.
Node <5> is connected to node <2>.
Node <1> is connected to nodes <4>, <7>, <8>, <6>.
Node <4> is connected to nodes <0>, <7>.
Node <8> is connected to nodes <3>, <2>, <4>.
Node <0> is connected to nodes <5>, <7>.
Node <3> is connected to nodes <5>, <4>, <9>, <10>, <6>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>]",11,28,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<1>, <8>, <3>, <9>, <6>, <4>, <0>, <7>, <5>, <10>, <2>]","Let's solve it step by step.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <10>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
So the result of topological sorting is ","('[[<1>, <8>, <3>, <9>, <6>, <5>, <4>, <2>, <7>, <10>, <0>], [<1>, <8>, <3>, <5>, <10>, <2>, <9>, <6>, <4>, <0>, <7>], [<1>, <7>, <4>, <3>, <2>, <0>, <10>, <6>, <5>, <9>, <8>], [<1>, <8>, <3>, <9>, <6>, <4>, <0>, <7>, <5>, <10>, <2>]]',)",3,143
topological_sort,"[(<10>, <3>), (<10>, <7>), (<3>, <8>), (<3>, <2>), (<7>, <2>), (<7>, <3>), (<2>, <8>), (<1>, <11>), (<1>, <3>), (<1>, <10>), (<11>, <12>), (<12>, <7>), (<12>, <14>), (<14>, <10>), (<14>, <8>), (<14>, <7>), (<13>, <5>), (<13>, <3>), (<13>, <6>), (<13>, <1>), (<13>, <12>), (<13>, <14>), (<5>, <9>), (<5>, <10>), (<5>, <12>), (<5>, <0>), (<5>, <8>), (<5>, <14>), (<5>, <11>), (<5>, <2>), (<6>, <11>), (<6>, <3>), (<6>, <10>), (<6>, <8>), (<9>, <8>), (<9>, <4>), (<0>, <12>), (<0>, <11>), (<0>, <3>), (<0>, <1>), (<4>, <6>), (<4>, <14>), (<4>, <0>)]","{<10>: [<3>, <7>],
<3>: [<8>, <2>],
<7>: [<2>, <3>],
<8>: [],
<2>: [<8>],
<1>: [<11>, <3>, <10>],
<11>: [<12>],
<12>: [<7>, <14>],
<14>: [<10>, <8>, <7>],
<13>: [<5>, <3>, <6>, <1>, <12>, <14>],
<5>: [<9>, <10>, <12>, <0>, <8>, <14>, <11>, <2>],
<6>: [<11>, <3>, <10>, <8>],
<9>: [<8>, <4>],
<0>: [<12>, <11>, <3>, <1>],
<4>: [<6>, <14>, <0>]}","Node <10> is connected to nodes <3>, <7>.
Node <3> is connected to nodes <8>, <2>.
Node <7> is connected to nodes <2>, <3>.
Node <2> is connected to node <8>.
Node <1> is connected to nodes <11>, <3>, <10>.
Node <11> is connected to node <12>.
Node <12> is connected to nodes <7>, <14>.
Node <14> is connected to nodes <10>, <8>, <7>.
Node <13> is connected to nodes <5>, <3>, <6>, <1>, <12>, <14>.
Node <5> is connected to nodes <9>, <10>, <12>, <0>, <8>, <14>, <11>, <2>.
Node <6> is connected to nodes <11>, <3>, <10>, <8>.
Node <9> is connected to nodes <8>, <4>.
Node <0> is connected to nodes <12>, <11>, <3>, <1>.
Node <4> is connected to nodes <6>, <14>, <0>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>, <14>]",15,43,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<13>, <5>, <9>, <4>, <6>, <0>, <1>, <11>, <12>, <14>, <10>, <7>, <3>, <2>, <8>]","Let's solve it step by step.
Nodes with 0 in-degree: [<13>].
Visit node <13> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <0>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<11>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<12>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<14>].
Visit node <14> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
So the result of topological sorting is ","('[[<13>, <5>, <9>, <4>, <6>, <10>, <7>, <3>, <2>, <8>, <0>, <1>, <11>, <12>, <14>], [<13>, <5>, <9>, <4>, <6>, <0>, <1>, <11>, <12>, <14>, <10>, <7>, <3>, <2>, <8>], [<13>, <7>, <9>, <2>, <11>, <6>, <12>, <1>, <3>, <4>, <5>, <10>, <14>, <0>, <8>], [<13>, <5>, <9>, <4>, <6>, <0>, <1>, <10>, <7>, <12>, <2>, <8>, <3>, <14>, <11>]]',)",1,144
topological_sort,"[(<3>, <5>), (<3>, <6>), (<3>, <11>), (<3>, <9>), (<3>, <2>), (<6>, <12>), (<6>, <0>), (<6>, <11>), (<11>, <8>), (<9>, <6>), (<9>, <11>), (<9>, <0>), (<9>, <7>), (<2>, <5>), (<2>, <12>), (<10>, <12>), (<10>, <13>), (<10>, <3>), (<12>, <5>), (<13>, <6>), (<13>, <0>), (<13>, <3>), (<13>, <8>), (<13>, <2>), (<1>, <3>), (<1>, <6>), (<1>, <9>), (<1>, <0>), (<1>, <7>), (<1>, <2>), (<1>, <4>), (<0>, <5>), (<7>, <5>), (<7>, <6>), (<4>, <10>), (<8>, <5>), (<8>, <0>)]","{<3>: [<5>, <6>, <11>, <9>, <2>],
<5>: [],
<6>: [<12>, <0>, <11>],
<11>: [<8>],
<9>: [<6>, <11>, <0>, <7>],
<2>: [<5>, <12>],
<10>: [<12>, <13>, <3>],
<12>: [<5>],
<13>: [<6>, <0>, <3>, <8>, <2>],
<1>: [<3>, <6>, <9>, <0>, <7>, <2>, <4>],
<0>: [<5>],
<7>: [<5>, <6>],
<4>: [<10>],
<8>: [<5>, <0>]}","Node <3> is connected to nodes <5>, <6>, <11>, <9>, <2>.
Node <6> is connected to nodes <12>, <0>, <11>.
Node <11> is connected to node <8>.
Node <9> is connected to nodes <6>, <11>, <0>, <7>.
Node <2> is connected to nodes <5>, <12>.
Node <10> is connected to nodes <12>, <13>, <3>.
Node <12> is connected to node <5>.
Node <13> is connected to nodes <6>, <0>, <3>, <8>, <2>.
Node <1> is connected to nodes <3>, <6>, <9>, <0>, <7>, <2>, <4>.
Node <0> is connected to node <5>.
Node <7> is connected to nodes <5>, <6>.
Node <4> is connected to node <10>.
Node <8> is connected to nodes <5>, <0>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>]",14,37,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<1>, <4>, <10>, <13>, <3>, <9>, <2>, <7>, <6>, <12>, <11>, <8>, <0>, <5>]","Let's solve it step by step.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<13>].
Visit node <13> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<9>, <2>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <7>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<12>, <11>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<11>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
So the result of topological sorting is ","('[[<1>, <10>, <12>, <7>, <2>, <3>, <8>, <11>, <9>, <0>, <13>, <6>, <4>, <5>], [<1>, <4>, <10>, <13>, <3>, <9>, <2>, <7>, <6>, <12>, <11>, <8>, <0>, <5>], [<1>, <4>, <10>, <13>, <11>, <8>, <0>, <5>, <3>, <9>, <2>, <7>, <6>, <12>], [<1>, <4>, <10>, <13>, <3>, <9>, <2>, <7>, <6>, <8>, <5>, <0>, <12>, <11>]]',)",1,145
topological_sort,"[(<1>, <7>), (<1>, <10>), (<7>, <5>), (<10>, <5>), (<10>, <7>), (<6>, <10>), (<6>, <7>), (<6>, <9>), (<9>, <5>), (<9>, <10>), (<0>, <6>), (<0>, <10>), (<0>, <8>), (<0>, <7>), (<0>, <9>), (<0>, <4>), (<8>, <9>), (<8>, <5>), (<8>, <7>), (<8>, <10>), (<4>, <8>), (<4>, <1>), (<3>, <0>), (<3>, <11>), (<3>, <9>), (<11>, <0>), (<11>, <10>), (<11>, <4>), (<11>, <8>), (<11>, <5>), (<11>, <9>), (<2>, <9>), (<2>, <5>), (<2>, <3>), (<2>, <10>)]","{<1>: [<7>, <10>],
<7>: [<5>],
<10>: [<5>, <7>],
<5>: [],
<6>: [<10>, <7>, <9>],
<9>: [<5>, <10>],
<0>: [<6>, <10>, <8>, <7>, <9>, <4>],
<8>: [<9>, <5>, <7>, <10>],
<4>: [<8>, <1>],
<3>: [<0>, <11>, <9>],
<11>: [<0>, <10>, <4>, <8>, <5>, <9>],
<2>: [<9>, <5>, <3>, <10>]}","Node <1> is connected to nodes <7>, <10>.
Node <7> is connected to node <5>.
Node <10> is connected to nodes <5>, <7>.
Node <6> is connected to nodes <10>, <7>, <9>.
Node <9> is connected to nodes <5>, <10>.
Node <0> is connected to nodes <6>, <10>, <8>, <7>, <9>, <4>.
Node <8> is connected to nodes <9>, <5>, <7>, <10>.
Node <4> is connected to nodes <8>, <1>.
Node <3> is connected to nodes <0>, <11>, <9>.
Node <11> is connected to nodes <0>, <10>, <4>, <8>, <5>, <9>.
Node <2> is connected to nodes <9>, <5>, <3>, <10>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>]",12,35,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<2>, <3>, <11>, <0>, <6>, <4>, <8>, <1>, <9>, <10>, <7>, <5>]","Let's solve it step by step.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<11>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <4>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<8>, <1>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <9>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
So the result of topological sorting is ","('[[<2>, <3>, <11>, <0>, <9>, <10>, <7>, <5>, <6>, <4>, <8>, <1>], [<2>, <3>, <11>, <0>, <6>, <4>, <8>, <9>, <10>, <7>, <1>, <5>], [<2>, <7>, <4>, <0>, <8>, <1>, <6>, <10>, <5>, <3>, <11>, <9>], [<2>, <3>, <11>, <0>, <6>, <4>, <8>, <1>, <9>, <10>, <7>, <5>]]',)",3,146
topological_sort,"[(<3>, <8>), (<3>, <9>), (<8>, <2>), (<8>, <5>), (<8>, <11>), (<9>, <8>), (<9>, <2>), (<9>, <4>), (<5>, <2>), (<5>, <4>), (<5>, <10>), (<5>, <6>), (<5>, <0>), (<11>, <0>), (<11>, <4>), (<1>, <6>), (<1>, <0>), (<1>, <7>), (<1>, <3>), (<6>, <10>), (<6>, <0>), (<0>, <2>), (<7>, <11>), (<7>, <0>), (<10>, <2>), (<10>, <0>)]","{<3>: [<8>, <9>],
<8>: [<2>, <5>, <11>],
<9>: [<8>, <2>, <4>],
<2>: [],
<5>: [<2>, <4>, <10>, <6>, <0>],
<11>: [<0>, <4>],
<1>: [<6>, <0>, <7>, <3>],
<6>: [<10>, <0>],
<0>: [<2>],
<7>: [<11>, <0>],
<10>: [<2>, <0>],
<4>: []}","Node <3> is connected to nodes <8>, <9>.
Node <8> is connected to nodes <2>, <5>, <11>.
Node <9> is connected to nodes <8>, <2>, <4>.
Node <5> is connected to nodes <2>, <4>, <10>, <6>, <0>.
Node <11> is connected to nodes <0>, <4>.
Node <1> is connected to nodes <6>, <0>, <7>, <3>.
Node <6> is connected to nodes <10>, <0>.
Node <0> is connected to node <2>.
Node <7> is connected to nodes <11>, <0>.
Node <10> is connected to nodes <2>, <0>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>]",12,26,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<1>, <7>, <3>, <9>, <8>, <5>, <11>, <6>, <4>, <10>, <0>, <2>]","Let's solve it step by step.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <3>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <11>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<11>, <6>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <4>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <10>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
So the result of topological sorting is ","('[[<1>, <7>, <3>, <9>, <8>, <5>, <2>, <6>, <4>, <11>, <10>, <0>], [<1>, <7>, <3>, <9>, <8>, <5>, <11>, <6>, <4>, <10>, <0>, <2>], [<1>, <4>, <6>, <8>, <7>, <9>, <3>, <0>, <5>, <11>, <2>, <10>], [<1>, <7>, <3>, <9>, <4>, <10>, <0>, <2>, <8>, <5>, <11>, <6>]]',)",1,147
topological_sort,"[(<2>, <6>), (<2>, <8>), (<2>, <7>), (<2>, <5>), (<6>, <8>), (<6>, <1>), (<8>, <3>), (<7>, <5>), (<7>, <6>), (<7>, <3>), (<5>, <3>), (<1>, <5>), (<9>, <8>), (<9>, <4>), (<9>, <2>), (<4>, <6>), (<4>, <3>), (<4>, <2>), (<4>, <7>), (<0>, <2>)]","{<2>: [<6>, <8>, <7>, <5>],
<6>: [<8>, <1>],
<8>: [<3>],
<7>: [<5>, <6>, <3>],
<5>: [<3>],
<1>: [<5>],
<3>: [],
<9>: [<8>, <4>, <2>],
<4>: [<6>, <3>, <2>, <7>],
<0>: [<2>]}","Node <2> is connected to nodes <6>, <8>, <7>, <5>.
Node <6> is connected to nodes <8>, <1>.
Node <8> is connected to node <3>.
Node <7> is connected to nodes <5>, <6>, <3>.
Node <5> is connected to node <3>.
Node <1> is connected to node <5>.
Node <9> is connected to nodes <8>, <4>, <2>.
Node <4> is connected to nodes <6>, <3>, <2>, <7>.
Node <0> is connected to node <2>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>]",10,20,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<9>, <0>, <4>, <2>, <7>, <6>, <8>, <1>, <5>, <3>]","Let's solve it step by step.
Nodes with 0 in-degree: [<9>, <0>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <4>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<8>, <1>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
So the result of topological sorting is ","('[[<9>, <0>, <8>, <3>, <7>, <1>, <5>, <4>, <2>, <6>], [<9>, <0>, <4>, <1>, <5>, <3>, <2>, <7>, <6>, <8>], [<9>, <0>, <4>, <2>, <7>, <6>, <8>, <1>, <5>, <3>], [<9>, <0>, <4>, <2>, <7>, <5>, <8>, <3>, <6>, <1>]]',)",2,148
topological_sort,"[(<2>, <4>), (<2>, <12>), (<2>, <9>), (<2>, <11>), (<2>, <8>), (<4>, <11>), (<12>, <10>), (<9>, <12>), (<9>, <10>), (<11>, <12>), (<11>, <8>), (<11>, <9>), (<8>, <12>), (<5>, <2>), (<5>, <11>), (<5>, <10>), (<1>, <0>), (<1>, <10>), (<1>, <12>), (<1>, <8>), (<1>, <4>), (<1>, <5>), (<1>, <11>), (<0>, <10>), (<0>, <2>), (<0>, <8>), (<3>, <4>), (<3>, <7>), (<3>, <5>), (<3>, <12>), (<3>, <2>), (<7>, <1>), (<7>, <2>), (<7>, <8>), (<7>, <11>), (<6>, <7>), (<6>, <12>), (<6>, <0>), (<6>, <10>), (<6>, <11>)]","{<2>: [<4>, <12>, <9>, <11>, <8>],
<4>: [<11>],
<12>: [<10>],
<9>: [<12>, <10>],
<11>: [<12>, <8>, <9>],
<8>: [<12>],
<5>: [<2>, <11>, <10>],
<10>: [],
<1>: [<0>, <10>, <12>, <8>, <4>, <5>, <11>],
<0>: [<10>, <2>, <8>],
<3>: [<4>, <7>, <5>, <12>, <2>],
<7>: [<1>, <2>, <8>, <11>],
<6>: [<7>, <12>, <0>, <10>, <11>]}","Node <2> is connected to nodes <4>, <12>, <9>, <11>, <8>.
Node <4> is connected to node <11>.
Node <12> is connected to node <10>.
Node <9> is connected to nodes <12>, <10>.
Node <11> is connected to nodes <12>, <8>, <9>.
Node <8> is connected to node <12>.
Node <5> is connected to nodes <2>, <11>, <10>.
Node <1> is connected to nodes <0>, <10>, <12>, <8>, <4>, <5>, <11>.
Node <0> is connected to nodes <10>, <2>, <8>.
Node <3> is connected to nodes <4>, <7>, <5>, <12>, <2>.
Node <7> is connected to nodes <1>, <2>, <8>, <11>.
Node <6> is connected to nodes <7>, <12>, <0>, <10>, <11>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>]",13,40,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<3>, <6>, <7>, <1>, <0>, <5>, <2>, <4>, <11>, <8>, <9>, <12>, <10>]","Let's solve it step by step.
Nodes with 0 in-degree: [<3>, <6>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <5>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<11>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<8>, <9>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<12>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
So the result of topological sorting is ","('[[<3>, <6>, <7>, <1>, <8>, <9>, <12>, <10>, <0>, <5>, <2>, <4>, <11>], [<3>, <6>, <7>, <1>, <0>, <5>, <2>, <4>, <11>, <8>, <9>, <12>, <10>], [<3>, <1>, <11>, <8>, <5>, <10>, <6>, <4>, <0>, <2>, <9>, <7>, <12>], [<3>, <6>, <7>, <1>, <0>, <5>, <8>, <11>, <9>, <4>, <10>, <2>, <12>]]',)",1,149
topological_sort,"[(<8>, <3>), (<8>, <9>), (<8>, <6>), (<3>, <2>), (<3>, <10>), (<9>, <2>), (<9>, <10>), (<9>, <5>), (<6>, <9>), (<10>, <2>), (<5>, <2>), (<5>, <3>), (<5>, <7>), (<0>, <10>), (<0>, <7>), (<0>, <9>), (<7>, <2>), (<7>, <3>), (<11>, <0>), (<11>, <4>), (<11>, <1>), (<11>, <2>), (<11>, <9>), (<11>, <7>), (<4>, <8>), (<4>, <2>), (<4>, <6>), (<4>, <7>), (<1>, <2>), (<1>, <7>)]","{<8>: [<3>, <9>, <6>],
<3>: [<2>, <10>],
<9>: [<2>, <10>, <5>],
<6>: [<9>],
<2>: [],
<10>: [<2>],
<5>: [<2>, <3>, <7>],
<0>: [<10>, <7>, <9>],
<7>: [<2>, <3>],
<11>: [<0>, <4>, <1>, <2>, <9>, <7>],
<4>: [<8>, <2>, <6>, <7>],
<1>: [<2>, <7>]}","Node <8> is connected to nodes <3>, <9>, <6>.
Node <3> is connected to nodes <2>, <10>.
Node <9> is connected to nodes <2>, <10>, <5>.
Node <6> is connected to node <9>.
Node <10> is connected to node <2>.
Node <5> is connected to nodes <2>, <3>, <7>.
Node <0> is connected to nodes <10>, <7>, <9>.
Node <7> is connected to nodes <2>, <3>.
Node <11> is connected to nodes <0>, <4>, <1>, <2>, <9>, <7>.
Node <4> is connected to nodes <8>, <2>, <6>, <7>.
Node <1> is connected to nodes <2>, <7>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>]",12,30,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<11>, <0>, <4>, <1>, <8>, <6>, <9>, <5>, <7>, <3>, <10>, <2>]","Let's solve it step by step.
Nodes with 0 in-degree: [<11>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <4>, <1>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <1>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <8>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
So the result of topological sorting is ","('[[<11>, <0>, <4>, <1>, <7>, <3>, <10>, <2>, <8>, <6>, <9>, <5>], [<11>, <0>, <4>, <1>, <8>, <6>, <9>, <5>, <7>, <3>, <10>, <2>], [<11>, <6>, <0>, <1>, <2>, <4>, <8>, <3>, <7>, <9>, <5>, <10>], [<11>, <0>, <4>, <1>, <8>, <6>, <2>, <10>, <9>, <7>, <5>, <3>]]',)",1,150
topological_sort,"[(<8>, <1>), (<1>, <7>), (<1>, <6>), (<6>, <3>), (<9>, <10>), (<10>, <7>), (<3>, <5>), (<4>, <6>), (<4>, <11>), (<4>, <10>), (<4>, <9>), (<11>, <2>), (<11>, <3>), (<11>, <1>), (<2>, <1>), (<2>, <9>), (<0>, <11>)]","{<8>: [<1>],
<1>: [<7>, <6>],
<7>: [],
<6>: [<3>],
<9>: [<10>],
<10>: [<7>],
<3>: [<5>],
<5>: [],
<4>: [<6>, <11>, <10>, <9>],
<11>: [<2>, <3>, <1>],
<2>: [<1>, <9>],
<0>: [<11>]}","Node <8> is connected to node <1>.
Node <1> is connected to nodes <7>, <6>.
Node <6> is connected to node <3>.
Node <9> is connected to node <10>.
Node <10> is connected to node <7>.
Node <3> is connected to node <5>.
Node <4> is connected to nodes <6>, <11>, <10>, <9>.
Node <11> is connected to nodes <2>, <3>, <1>.
Node <2> is connected to nodes <1>, <9>.
Node <0> is connected to node <11>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>]",12,17,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<8>, <4>, <0>, <11>, <2>, <1>, <9>, <6>, <10>, <3>, <7>, <5>]","Let's solve it step by step.
Nodes with 0 in-degree: [<8>, <4>, <0>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <0>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<11>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <9>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<9>, <6>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <10>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<10>, <3>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <7>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <5>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
So the result of topological sorting is ","('[[<8>, <4>, <0>, <11>, <10>, <3>, <7>, <5>, <2>, <1>, <9>, <6>], [<8>, <4>, <0>, <11>, <2>, <1>, <9>, <6>, <10>, <3>, <7>, <5>], [<8>, <4>, <7>, <10>, <5>, <2>, <6>, <1>, <0>, <9>, <11>, <3>], [<8>, <4>, <0>, <11>, <2>, <1>, <10>, <3>, <7>, <6>, <9>, <5>]]',)",1,151
topological_sort,"[(<4>, <9>), (<4>, <1>), (<4>, <2>), (<4>, <6>), (<9>, <5>), (<1>, <7>), (<2>, <1>), (<2>, <10>), (<2>, <9>), (<6>, <2>), (<6>, <7>), (<6>, <1>), (<5>, <1>), (<10>, <1>), (<8>, <10>), (<8>, <7>), (<8>, <6>), (<8>, <2>), (<0>, <2>), (<0>, <7>), (<0>, <10>), (<3>, <8>), (<3>, <4>), (<3>, <10>), (<3>, <0>), (<3>, <9>)]","{<4>: [<9>, <1>, <2>, <6>],
<9>: [<5>],
<1>: [<7>],
<2>: [<1>, <10>, <9>],
<6>: [<2>, <7>, <1>],
<5>: [<1>],
<10>: [<1>],
<7>: [],
<8>: [<10>, <7>, <6>, <2>],
<0>: [<2>, <7>, <10>],
<3>: [<8>, <4>, <10>, <0>, <9>]}","Node <4> is connected to nodes <9>, <1>, <2>, <6>.
Node <9> is connected to node <5>.
Node <1> is connected to node <7>.
Node <2> is connected to nodes <1>, <10>, <9>.
Node <6> is connected to nodes <2>, <7>, <1>.
Node <5> is connected to node <1>.
Node <10> is connected to node <1>.
Node <8> is connected to nodes <10>, <7>, <6>, <2>.
Node <0> is connected to nodes <2>, <7>, <10>.
Node <3> is connected to nodes <8>, <4>, <10>, <0>, <9>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>]",11,26,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<3>, <8>, <4>, <0>, <6>, <2>, <10>, <9>, <5>, <1>, <7>]","Let's solve it step by step.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<8>, <4>, <0>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <0>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <6>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<10>, <9>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
So the result of topological sorting is ","('[[<3>, <8>, <4>, <0>, <6>, <9>, <10>, <7>, <2>, <1>, <5>], [<3>, <8>, <4>, <0>, <6>, <2>, <10>, <9>, <5>, <1>, <7>], [<3>, <0>, <4>, <9>, <2>, <6>, <1>, <5>, <10>, <8>, <7>], [<3>, <8>, <4>, <5>, <1>, <7>, <0>, <6>, <2>, <10>, <9>]]',)",1,152
topological_sort,"[(<0>, <7>), (<0>, <6>), (<0>, <5>), (<0>, <4>), (<7>, <3>), (<6>, <5>), (<6>, <7>), (<6>, <1>), (<6>, <3>), (<5>, <7>), (<4>, <6>), (<4>, <7>), (<4>, <5>), (<3>, <1>), (<2>, <0>), (<2>, <4>), (<2>, <6>), (<2>, <1>)]","{<0>: [<7>, <6>, <5>, <4>],
<7>: [<3>],
<6>: [<5>, <7>, <1>, <3>],
<5>: [<7>],
<4>: [<6>, <7>, <5>],
<3>: [<1>],
<2>: [<0>, <4>, <6>, <1>],
<1>: []}","Node <0> is connected to nodes <7>, <6>, <5>, <4>.
Node <7> is connected to node <3>.
Node <6> is connected to nodes <5>, <7>, <1>, <3>.
Node <5> is connected to node <7>.
Node <4> is connected to nodes <6>, <7>, <5>.
Node <3> is connected to node <1>.
Node <2> is connected to nodes <0>, <4>, <6>, <1>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>]",8,18,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<2>, <0>, <4>, <6>, <5>, <7>, <3>, <1>]","Let's solve it step by step.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
So the result of topological sorting is ","('[[<2>, <0>, <4>, <6>, <5>, <1>, <7>, <3>], [<2>, <5>, <0>, <7>, <6>, <3>, <1>, <4>], [<2>, <0>, <4>, <6>, <5>, <7>, <3>, <1>], [<2>, <0>, <3>, <1>, <4>, <6>, <5>, <7>]]',)",2,153
topological_sort,"[(<3>, <0>), (<3>, <4>), (<0>, <2>), (<4>, <0>), (<1>, <4>), (<1>, <0>), (<1>, <2>), (<5>, <1>), (<5>, <2>), (<5>, <0>), (<7>, <4>), (<7>, <5>), (<6>, <4>), (<6>, <2>)]","{<3>: [<0>, <4>],
<0>: [<2>],
<4>: [<0>],
<2>: [],
<1>: [<4>, <0>, <2>],
<5>: [<1>, <2>, <0>],
<7>: [<4>, <5>],
<6>: [<4>, <2>]}","Node <3> is connected to nodes <0>, <4>.
Node <0> is connected to node <2>.
Node <4> is connected to node <0>.
Node <1> is connected to nodes <4>, <0>, <2>.
Node <5> is connected to nodes <1>, <2>, <0>.
Node <7> is connected to nodes <4>, <5>.
Node <6> is connected to nodes <4>, <2>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>]",8,14,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<3>, <7>, <6>, <5>, <1>, <4>, <0>, <2>]","Let's solve it step by step.
Nodes with 0 in-degree: [<3>, <7>, <6>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <6>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <5>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
So the result of topological sorting is ","('[[<3>, <7>, <0>, <2>, <6>, <5>, <1>, <4>], [<3>, <7>, <6>, <5>, <4>, <1>, <2>, <0>], [<3>, <1>, <4>, <2>, <0>, <6>, <5>, <7>], [<3>, <7>, <6>, <5>, <1>, <4>, <0>, <2>]]',)",3,154
topological_sort,"[(<6>, <8>), (<6>, <1>), (<8>, <5>), (<1>, <3>), (<5>, <1>), (<5>, <3>), (<0>, <5>), (<0>, <3>), (<0>, <2>), (<0>, <1>), (<2>, <3>), (<2>, <6>), (<7>, <8>), (<7>, <6>), (<7>, <1>), (<7>, <2>), (<4>, <3>), (<4>, <7>), (<4>, <0>), (<4>, <1>), (<4>, <6>)]","{<6>: [<8>, <1>],
<8>: [<5>],
<1>: [<3>],
<5>: [<1>, <3>],
<3>: [],
<0>: [<5>, <3>, <2>, <1>],
<2>: [<3>, <6>],
<7>: [<8>, <6>, <1>, <2>],
<4>: [<3>, <7>, <0>, <1>, <6>]}","Node <6> is connected to nodes <8>, <1>.
Node <8> is connected to node <5>.
Node <1> is connected to node <3>.
Node <5> is connected to nodes <1>, <3>.
Node <0> is connected to nodes <5>, <3>, <2>, <1>.
Node <2> is connected to nodes <3>, <6>.
Node <7> is connected to nodes <8>, <6>, <1>, <2>.
Node <4> is connected to nodes <3>, <7>, <0>, <1>, <6>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>]",9,21,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<4>, <7>, <0>, <2>, <6>, <8>, <5>, <1>, <3>]","Let's solve it step by step.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <0>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
So the result of topological sorting is ","('[[<4>, <2>, <5>, <0>, <6>, <8>, <3>, <1>, <7>], [<4>, <7>, <0>, <2>, <6>, <8>, <5>, <1>, <3>], [<4>, <7>, <0>, <5>, <1>, <3>, <2>, <6>, <8>], [<4>, <7>, <0>, <2>, <5>, <1>, <3>, <8>, <6>]]',)",1,155
topological_sort,"[(<2>, <9>), (<2>, <11>), (<9>, <0>), (<0>, <11>), (<0>, <3>), (<6>, <2>), (<6>, <7>), (<6>, <4>), (<6>, <10>), (<6>, <9>), (<7>, <9>), (<7>, <12>), (<7>, <8>), (<7>, <10>), (<4>, <9>), (<4>, <2>), (<4>, <10>), (<4>, <7>), (<10>, <12>), (<12>, <3>), (<12>, <8>), (<1>, <5>), (<1>, <9>), (<5>, <10>), (<5>, <3>), (<5>, <4>)]","{<2>: [<9>, <11>],
<9>: [<0>],
<11>: [],
<0>: [<11>, <3>],
<6>: [<2>, <7>, <4>, <10>, <9>],
<7>: [<9>, <12>, <8>, <10>],
<4>: [<9>, <2>, <10>, <7>],
<10>: [<12>],
<12>: [<3>, <8>],
<8>: [],
<3>: [],
<1>: [<5>, <9>],
<5>: [<10>, <3>, <4>]}","Node <2> is connected to nodes <9>, <11>.
Node <9> is connected to node <0>.
Node <0> is connected to nodes <11>, <3>.
Node <6> is connected to nodes <2>, <7>, <4>, <10>, <9>.
Node <7> is connected to nodes <9>, <12>, <8>, <10>.
Node <4> is connected to nodes <9>, <2>, <10>, <7>.
Node <10> is connected to node <12>.
Node <12> is connected to nodes <3>, <8>.
Node <1> is connected to nodes <5>, <9>.
Node <5> is connected to nodes <10>, <3>, <4>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>]",13,26,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<6>, <1>, <5>, <4>, <2>, <7>, <9>, <10>, <0>, <12>, <11>, <3>, <8>]","Let's solve it step by step.
Nodes with 0 in-degree: [<6>, <1>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <7>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<9>, <10>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<10>, <0>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <12>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<12>, <11>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<11>, <3>, <8>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <8>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
So the result of topological sorting is ","('[[<6>, <1>, <5>, <4>, <2>, <7>, <8>, <11>, <10>, <0>, <9>, <12>, <3>], [<6>, <1>, <5>, <4>, <2>, <7>, <9>, <10>, <0>, <12>, <11>, <3>, <8>], [<6>, <1>, <5>, <4>, <12>, <11>, <3>, <8>, <2>, <7>, <9>, <10>, <0>], [<6>, <3>, <12>, <2>, <4>, <7>, <11>, <0>, <10>, <5>, <9>, <1>, <8>]]',)",1,156
topological_sort,"[(<7>, <3>), (<7>, <4>), (<7>, <8>), (<11>, <13>), (<11>, <7>), (<13>, <8>), (<10>, <2>), (<10>, <11>), (<10>, <9>), (<2>, <13>), (<2>, <9>), (<9>, <0>), (<9>, <7>), (<9>, <3>), (<9>, <8>), (<0>, <1>), (<0>, <13>), (<1>, <8>), (<1>, <7>), (<1>, <3>), (<12>, <7>), (<12>, <1>), (<6>, <9>), (<6>, <11>), (<5>, <2>), (<5>, <6>)]","{<7>: [<3>, <4>, <8>],
<3>: [],
<4>: [],
<8>: [],
<11>: [<13>, <7>],
<13>: [<8>],
<10>: [<2>, <11>, <9>],
<2>: [<13>, <9>],
<9>: [<0>, <7>, <3>, <8>],
<0>: [<1>, <13>],
<1>: [<8>, <7>, <3>],
<12>: [<7>, <1>],
<6>: [<9>, <11>],
<5>: [<2>, <6>]}","Node <7> is connected to nodes <3>, <4>, <8>.
Node <11> is connected to nodes <13>, <7>.
Node <13> is connected to node <8>.
Node <10> is connected to nodes <2>, <11>, <9>.
Node <2> is connected to nodes <13>, <9>.
Node <9> is connected to nodes <0>, <7>, <3>, <8>.
Node <0> is connected to nodes <1>, <13>.
Node <1> is connected to nodes <8>, <7>, <3>.
Node <12> is connected to nodes <7>, <1>.
Node <6> is connected to nodes <9>, <11>.
Node <5> is connected to nodes <2>, <6>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>]",14,26,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<10>, <12>, <5>, <2>, <6>, <9>, <11>, <0>, <1>, <13>, <7>, <3>, <4>, <8>]","Let's solve it step by step.
Nodes with 0 in-degree: [<10>, <12>, <5>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<12>, <5>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <6>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<9>, <11>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<11>, <0>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <13>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<13>, <7>].
Visit node <13> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <4>, <8>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <8>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
So the result of topological sorting is ","('[[<10>, <12>, <5>, <2>, <7>, <3>, <4>, <8>, <6>, <9>, <11>, <0>, <1>, <13>], [<10>, <12>, <5>, <2>, <6>, <9>, <11>, <0>, <1>, <13>, <7>, <3>, <4>, <8>], [<10>, <12>, <5>, <2>, <6>, <9>, <11>, <7>, <8>, <3>, <0>, <4>, <1>, <13>], [<10>, <9>, <7>, <2>, <6>, <8>, <0>, <11>, <4>, <12>, <13>, <3>, <1>, <5>]]',)",1,157
topological_sort,"[(<5>, <8>), (<5>, <10>), (<5>, <7>), (<8>, <9>), (<8>, <2>), (<9>, <7>), (<9>, <0>), (<9>, <4>), (<9>, <10>), (<9>, <3>), (<2>, <9>), (<2>, <11>), (<2>, <0>), (<0>, <10>), (<0>, <4>), (<4>, <7>), (<3>, <13>), (<3>, <4>), (<3>, <0>), (<6>, <11>), (<6>, <8>), (<6>, <10>), (<11>, <7>), (<11>, <13>), (<13>, <0>), (<12>, <0>), (<12>, <9>), (<12>, <7>), (<12>, <10>), (<12>, <6>), (<1>, <11>), (<1>, <5>)]","{<5>: [<8>, <10>, <7>],
<8>: [<9>, <2>],
<10>: [],
<7>: [],
<9>: [<7>, <0>, <4>, <10>, <3>],
<2>: [<9>, <11>, <0>],
<0>: [<10>, <4>],
<4>: [<7>],
<3>: [<13>, <4>, <0>],
<6>: [<11>, <8>, <10>],
<11>: [<7>, <13>],
<13>: [<0>],
<12>: [<0>, <9>, <7>, <10>, <6>],
<1>: [<11>, <5>]}","Node <5> is connected to nodes <8>, <10>, <7>.
Node <8> is connected to nodes <9>, <2>.
Node <9> is connected to nodes <7>, <0>, <4>, <10>, <3>.
Node <2> is connected to nodes <9>, <11>, <0>.
Node <0> is connected to nodes <10>, <4>.
Node <4> is connected to node <7>.
Node <3> is connected to nodes <13>, <4>, <0>.
Node <6> is connected to nodes <11>, <8>, <10>.
Node <11> is connected to nodes <7>, <13>.
Node <13> is connected to node <0>.
Node <12> is connected to nodes <0>, <9>, <7>, <10>, <6>.
Node <1> is connected to nodes <11>, <5>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>]",14,32,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<12>, <1>, <6>, <5>, <8>, <2>, <9>, <11>, <3>, <13>, <0>, <10>, <4>, <7>]","Let's solve it step by step.
Nodes with 0 in-degree: [<12>, <1>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <6>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <5>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<9>, <11>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<11>, <3>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<13>].
Visit node <13> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<10>, <4>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
So the result of topological sorting is ","('[[<12>, <4>, <5>, <3>, <10>, <7>, <8>, <11>, <0>, <2>, <1>, <13>, <6>, <9>], [<12>, <1>, <6>, <5>, <8>, <2>, <9>, <11>, <13>, <4>, <3>, <10>, <7>, <0>], [<12>, <1>, <6>, <5>, <8>, <2>, <9>, <11>, <3>, <13>, <0>, <10>, <4>, <7>], [<12>, <1>, <6>, <5>, <0>, <10>, <4>, <7>, <8>, <2>, <9>, <11>, <3>, <13>]]',)",2,158
topological_sort,"[(<7>, <1>), (<9>, <7>), (<9>, <3>), (<3>, <7>), (<3>, <1>), (<8>, <4>), (<8>, <5>), (<8>, <1>), (<4>, <7>), (<4>, <6>), (<4>, <9>), (<4>, <1>), (<5>, <3>), (<6>, <0>), (<6>, <1>), (<6>, <3>), (<6>, <7>), (<2>, <9>), (<2>, <4>), (<2>, <5>), (<0>, <9>), (<0>, <5>)]","{<7>: [<1>],
<1>: [],
<9>: [<7>, <3>],
<3>: [<7>, <1>],
<8>: [<4>, <5>, <1>],
<4>: [<7>, <6>, <9>, <1>],
<5>: [<3>],
<6>: [<0>, <1>, <3>, <7>],
<2>: [<9>, <4>, <5>],
<0>: [<9>, <5>]}","Node <7> is connected to node <1>.
Node <9> is connected to nodes <7>, <3>.
Node <3> is connected to nodes <7>, <1>.
Node <8> is connected to nodes <4>, <5>, <1>.
Node <4> is connected to nodes <7>, <6>, <9>, <1>.
Node <5> is connected to node <3>.
Node <6> is connected to nodes <0>, <1>, <3>, <7>.
Node <2> is connected to nodes <9>, <4>, <5>.
Node <0> is connected to nodes <9>, <5>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>]",10,22,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<8>, <2>, <4>, <6>, <0>, <9>, <5>, <3>, <7>, <1>]","Let's solve it step by step.
Nodes with 0 in-degree: [<8>, <2>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<9>, <5>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
So the result of topological sorting is ","('[[<8>, <2>, <4>, <6>, <0>, <9>, <5>, <3>, <7>, <1>], [<8>, <6>, <9>, <1>, <4>, <3>, <5>, <7>, <0>, <2>], [<8>, <2>, <4>, <3>, <7>, <1>, <6>, <0>, <9>, <5>], [<8>, <2>, <4>, <6>, <0>, <7>, <9>, <5>, <3>, <1>]]',)",0,159
topological_sort,"[(<4>, <0>), (<2>, <7>), (<2>, <5>), (<7>, <5>), (<7>, <1>), (<7>, <6>), (<1>, <6>), (<1>, <0>), (<6>, <4>), (<3>, <6>), (<3>, <7>), (<3>, <0>)]","{<4>: [<0>],
<0>: [],
<2>: [<7>, <5>],
<7>: [<5>, <1>, <6>],
<5>: [],
<1>: [<6>, <0>],
<6>: [<4>],
<3>: [<6>, <7>, <0>]}","Node <4> is connected to node <0>.
Node <2> is connected to nodes <7>, <5>.
Node <7> is connected to nodes <5>, <1>, <6>.
Node <1> is connected to nodes <6>, <0>.
Node <6> is connected to node <4>.
Node <3> is connected to nodes <6>, <7>, <0>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>]",8,12,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<2>, <3>, <7>, <5>, <1>, <6>, <4>, <0>]","Let's solve it step by step.
Nodes with 0 in-degree: [<2>, <3>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <1>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
So the result of topological sorting is ","('[[<2>, <1>, <6>, <4>, <5>, <3>, <7>, <0>], [<2>, <3>, <7>, <5>, <1>, <6>, <4>, <0>], [<2>, <3>, <4>, <0>, <7>, <5>, <1>, <6>], [<2>, <3>, <7>, <5>, <6>, <0>, <1>, <4>]]',)",1,160
topological_sort,"[(<8>, <2>), (<8>, <3>), (<8>, <9>), (<8>, <11>), (<8>, <7>), (<8>, <6>), (<2>, <1>), (<3>, <1>), (<3>, <2>), (<9>, <1>), (<9>, <12>), (<11>, <1>), (<11>, <12>), (<7>, <3>), (<7>, <11>), (<7>, <9>), (<7>, <12>), (<6>, <11>), (<6>, <0>), (<6>, <9>), (<6>, <3>), (<6>, <2>), (<1>, <12>), (<1>, <0>), (<0>, <12>), (<10>, <9>), (<10>, <4>), (<10>, <8>), (<10>, <3>), (<4>, <2>), (<4>, <11>), (<4>, <6>), (<4>, <12>), (<4>, <8>), (<4>, <1>), (<4>, <7>), (<5>, <1>), (<5>, <2>), (<5>, <7>), (<5>, <10>)]","{<8>: [<2>, <3>, <9>, <11>, <7>, <6>],
<2>: [<1>],
<3>: [<1>, <2>],
<9>: [<1>, <12>],
<11>: [<1>, <12>],
<7>: [<3>, <11>, <9>, <12>],
<6>: [<11>, <0>, <9>, <3>, <2>],
<1>: [<12>, <0>],
<0>: [<12>],
<12>: [],
<10>: [<9>, <4>, <8>, <3>],
<4>: [<2>, <11>, <6>, <12>, <8>, <1>, <7>],
<5>: [<1>, <2>, <7>, <10>]}","Node <8> is connected to nodes <2>, <3>, <9>, <11>, <7>, <6>.
Node <2> is connected to node <1>.
Node <3> is connected to nodes <1>, <2>.
Node <9> is connected to nodes <1>, <12>.
Node <11> is connected to nodes <1>, <12>.
Node <7> is connected to nodes <3>, <11>, <9>, <12>.
Node <6> is connected to nodes <11>, <0>, <9>, <3>, <2>.
Node <1> is connected to nodes <12>, <0>.
Node <0> is connected to node <12>.
Node <10> is connected to nodes <9>, <4>, <8>, <3>.
Node <4> is connected to nodes <2>, <11>, <6>, <12>, <8>, <1>, <7>.
Node <5> is connected to nodes <1>, <2>, <7>, <10>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>]",13,40,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<5>, <10>, <4>, <8>, <7>, <6>, <11>, <9>, <3>, <2>, <1>, <0>, <12>]","Let's solve it step by step.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <6>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<11>, <9>, <3>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<9>, <3>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<12>].
Visit node <12> and remove it from the graph.
So the result of topological sorting is ","('[[<5>, <10>, <4>, <8>, <7>, <6>, <2>, <9>, <1>, <12>, <11>, <0>, <3>], [<5>, <3>, <0>, <2>, <7>, <11>, <6>, <10>, <1>, <9>, <4>, <8>, <12>], [<5>, <10>, <4>, <8>, <2>, <1>, <0>, <12>, <7>, <6>, <11>, <9>, <3>], [<5>, <10>, <4>, <8>, <7>, <6>, <11>, <9>, <3>, <2>, <1>, <0>, <12>]]',)",3,161
topological_sort,"[(<5>, <8>), (<5>, <9>), (<5>, <4>), (<5>, <0>), (<5>, <10>), (<5>, <11>), (<5>, <2>), (<8>, <1>), (<8>, <0>), (<8>, <6>), (<8>, <4>), (<8>, <12>), (<8>, <11>), (<8>, <3>), (<9>, <3>), (<4>, <9>), (<4>, <3>), (<4>, <11>), (<0>, <6>), (<0>, <1>), (<0>, <4>), (<0>, <12>), (<0>, <2>), (<0>, <3>), (<10>, <4>), (<10>, <11>), (<10>, <9>), (<10>, <8>), (<11>, <3>), (<2>, <11>), (<2>, <4>), (<2>, <12>), (<2>, <3>), (<1>, <4>), (<1>, <11>), (<6>, <7>), (<6>, <2>), (<6>, <3>), (<12>, <4>), (<7>, <2>), (<13>, <7>), (<13>, <11>), (<13>, <3>), (<13>, <1>), (<13>, <5>), (<13>, <8>)]","{<5>: [<8>, <9>, <4>, <0>, <10>, <11>, <2>],
<8>: [<1>, <0>, <6>, <4>, <12>, <11>, <3>],
<9>: [<3>],
<4>: [<9>, <3>, <11>],
<0>: [<6>, <1>, <4>, <12>, <2>, <3>],
<10>: [<4>, <11>, <9>, <8>],
<11>: [<3>],
<2>: [<11>, <4>, <12>, <3>],
<1>: [<4>, <11>],
<6>: [<7>, <2>, <3>],
<12>: [<4>],
<3>: [],
<7>: [<2>],
<13>: [<7>, <11>, <3>, <1>, <5>, <8>]}","Node <5> is connected to nodes <8>, <9>, <4>, <0>, <10>, <11>, <2>.
Node <8> is connected to nodes <1>, <0>, <6>, <4>, <12>, <11>, <3>.
Node <9> is connected to node <3>.
Node <4> is connected to nodes <9>, <3>, <11>.
Node <0> is connected to nodes <6>, <1>, <4>, <12>, <2>, <3>.
Node <10> is connected to nodes <4>, <11>, <9>, <8>.
Node <11> is connected to node <3>.
Node <2> is connected to nodes <11>, <4>, <12>, <3>.
Node <1> is connected to nodes <4>, <11>.
Node <6> is connected to nodes <7>, <2>, <3>.
Node <12> is connected to node <4>.
Node <7> is connected to node <2>.
Node <13> is connected to nodes <7>, <11>, <3>, <1>, <5>, <8>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>]",14,46,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<13>, <5>, <10>, <8>, <0>, <6>, <1>, <7>, <2>, <12>, <4>, <9>, <11>, <3>]","Let's solve it step by step.
Nodes with 0 in-degree: [<13>].
Visit node <13> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <1>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <7>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<12>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<9>, <11>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<11>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
So the result of topological sorting is ","('[[<13>, <3>, <9>, <7>, <11>, <4>, <6>, <5>, <1>, <2>, <0>, <8>, <12>, <10>], [<13>, <5>, <10>, <8>, <0>, <6>, <1>, <7>, <2>, <12>, <4>, <9>, <11>, <3>], [<13>, <5>, <10>, <8>, <0>, <6>, <1>, <2>, <7>, <9>, <12>, <11>, <4>, <3>], [<13>, <5>, <10>, <8>, <4>, <9>, <11>, <3>, <0>, <6>, <1>, <7>, <2>, <12>]]',)",1,162
topological_sort,"[(<0>, <7>), (<7>, <1>), (<1>, <4>), (<1>, <6>), (<4>, <5>), (<3>, <1>), (<3>, <6>), (<2>, <0>), (<2>, <7>), (<2>, <1>)]","{<0>: [<7>],
<7>: [<1>],
<1>: [<4>, <6>],
<4>: [<5>],
<5>: [],
<6>: [],
<3>: [<1>, <6>],
<2>: [<0>, <7>, <1>]}","Node <0> is connected to node <7>.
Node <7> is connected to node <1>.
Node <1> is connected to nodes <4>, <6>.
Node <4> is connected to node <5>.
Node <3> is connected to nodes <1>, <6>.
Node <2> is connected to nodes <0>, <7>, <1>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>]",8,10,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<3>, <2>, <0>, <7>, <1>, <4>, <6>, <5>]","Let's solve it step by step.
Nodes with 0 in-degree: [<3>, <2>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <6>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <5>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
So the result of topological sorting is ","('[[<3>, <2>, <0>, <7>, <4>, <5>, <1>, <6>], [<3>, <2>, <6>, <5>, <0>, <7>, <1>, <4>], [<3>, <2>, <0>, <6>, <7>, <5>, <4>, <1>], [<3>, <2>, <0>, <7>, <1>, <4>, <6>, <5>]]',)",3,163
topological_sort,"[(<3>, <0>), (<3>, <9>), (<0>, <9>), (<2>, <3>), (<1>, <7>), (<1>, <9>), (<1>, <5>), (<1>, <6>), (<1>, <8>), (<1>, <3>), (<7>, <3>), (<7>, <4>), (<7>, <0>), (<7>, <9>), (<5>, <3>), (<5>, <0>), (<5>, <6>), (<5>, <2>), (<6>, <7>), (<6>, <9>), (<6>, <4>), (<8>, <9>), (<8>, <0>), (<8>, <3>), (<8>, <6>), (<8>, <5>), (<8>, <2>), (<4>, <2>), (<4>, <9>), (<4>, <3>)]","{<3>: [<0>, <9>],
<0>: [<9>],
<9>: [],
<2>: [<3>],
<1>: [<7>, <9>, <5>, <6>, <8>, <3>],
<7>: [<3>, <4>, <0>, <9>],
<5>: [<3>, <0>, <6>, <2>],
<6>: [<7>, <9>, <4>],
<8>: [<9>, <0>, <3>, <6>, <5>, <2>],
<4>: [<2>, <9>, <3>]}","Node <3> is connected to nodes <0>, <9>.
Node <0> is connected to node <9>.
Node <2> is connected to node <3>.
Node <1> is connected to nodes <7>, <9>, <5>, <6>, <8>, <3>.
Node <7> is connected to nodes <3>, <4>, <0>, <9>.
Node <5> is connected to nodes <3>, <0>, <6>, <2>.
Node <6> is connected to nodes <7>, <9>, <4>.
Node <8> is connected to nodes <9>, <0>, <3>, <6>, <5>, <2>.
Node <4> is connected to nodes <2>, <9>, <3>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>]",10,30,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<1>, <8>, <5>, <6>, <7>, <4>, <2>, <3>, <0>, <9>]","Let's solve it step by step.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
So the result of topological sorting is ","('[[<1>, <8>, <5>, <3>, <0>, <9>, <6>, <7>, <4>, <2>], [<1>, <8>, <5>, <6>, <7>, <9>, <3>, <0>, <4>, <2>], [<1>, <6>, <8>, <2>, <3>, <7>, <5>, <4>, <9>, <0>], [<1>, <8>, <5>, <6>, <7>, <4>, <2>, <3>, <0>, <9>]]',)",3,164
topological_sort,"[(<4>, <3>), (<4>, <5>), (<4>, <6>), (<4>, <2>), (<4>, <8>), (<3>, <5>), (<3>, <9>), (<3>, <2>), (<3>, <8>), (<6>, <3>), (<6>, <8>), (<2>, <8>), (<9>, <5>), (<9>, <2>), (<0>, <4>), (<0>, <3>), (<0>, <6>), (<7>, <3>), (<7>, <0>), (<7>, <5>), (<7>, <4>), (<1>, <6>), (<1>, <2>)]","{<4>: [<3>, <5>, <6>, <2>, <8>],
<3>: [<5>, <9>, <2>, <8>],
<5>: [],
<6>: [<3>, <8>],
<2>: [<8>],
<8>: [],
<9>: [<5>, <2>],
<0>: [<4>, <3>, <6>],
<7>: [<3>, <0>, <5>, <4>],
<1>: [<6>, <2>]}","Node <4> is connected to nodes <3>, <5>, <6>, <2>, <8>.
Node <3> is connected to nodes <5>, <9>, <2>, <8>.
Node <6> is connected to nodes <3>, <8>.
Node <2> is connected to node <8>.
Node <9> is connected to nodes <5>, <2>.
Node <0> is connected to nodes <4>, <3>, <6>.
Node <7> is connected to nodes <3>, <0>, <5>, <4>.
Node <1> is connected to nodes <6>, <2>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>]",10,23,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<7>, <1>, <0>, <4>, <6>, <3>, <9>, <5>, <2>, <8>]","Let's solve it step by step.
Nodes with 0 in-degree: [<7>, <1>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <0>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <2>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
So the result of topological sorting is ","('[[<7>, <9>, <5>, <8>, <6>, <3>, <4>, <1>, <2>, <0>], [<7>, <1>, <0>, <4>, <6>, <8>, <9>, <5>, <2>, <3>], [<7>, <1>, <0>, <4>, <6>, <3>, <9>, <5>, <2>, <8>], [<7>, <1>, <0>, <5>, <2>, <8>, <4>, <6>, <3>, <9>]]',)",2,165
topological_sort,"[(<9>, <7>), (<9>, <1>), (<7>, <6>), (<7>, <1>), (<2>, <4>), (<4>, <7>), (<4>, <6>), (<4>, <3>), (<4>, <1>), (<3>, <1>), (<5>, <3>), (<5>, <10>), (<5>, <11>), (<10>, <2>), (<10>, <0>), (<10>, <1>), (<11>, <2>), (<8>, <11>), (<8>, <7>), (<8>, <1>), (<0>, <8>), (<0>, <2>)]","{<9>: [<7>, <1>],
<7>: [<6>, <1>],
<1>: [],
<6>: [],
<2>: [<4>],
<4>: [<7>, <6>, <3>, <1>],
<3>: [<1>],
<5>: [<3>, <10>, <11>],
<10>: [<2>, <0>, <1>],
<11>: [<2>],
<8>: [<11>, <7>, <1>],
<0>: [<8>, <2>]}","Node <9> is connected to nodes <7>, <1>.
Node <7> is connected to nodes <6>, <1>.
Node <2> is connected to node <4>.
Node <4> is connected to nodes <7>, <6>, <3>, <1>.
Node <3> is connected to node <1>.
Node <5> is connected to nodes <3>, <10>, <11>.
Node <10> is connected to nodes <2>, <0>, <1>.
Node <11> is connected to node <2>.
Node <8> is connected to nodes <11>, <7>, <1>.
Node <0> is connected to nodes <8>, <2>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>]",12,22,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<9>, <5>, <10>, <0>, <8>, <11>, <2>, <4>, <7>, <3>, <6>, <1>]","Let's solve it step by step.
Nodes with 0 in-degree: [<9>, <5>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<11>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <3>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <6>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <1>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
So the result of topological sorting is ","('[[<9>, <5>, <10>, <0>, <7>, <3>, <6>, <1>, <8>, <11>, <2>, <4>], [<9>, <11>, <5>, <8>, <7>, <1>, <0>, <6>, <10>, <4>, <3>, <2>], [<9>, <5>, <10>, <0>, <8>, <11>, <2>, <4>, <7>, <3>, <6>, <1>], [<9>, <5>, <10>, <0>, <8>, <11>, <3>, <1>, <2>, <4>, <6>, <7>]]',)",2,166
topological_sort,"[(<6>, <7>), (<6>, <1>), (<6>, <0>), (<6>, <9>), (<6>, <5>), (<7>, <2>), (<1>, <2>), (<1>, <5>), (<1>, <9>), (<0>, <7>), (<9>, <7>), (<5>, <2>), (<5>, <0>), (<5>, <9>), (<8>, <5>), (<8>, <0>), (<8>, <2>), (<8>, <6>), (<8>, <3>), (<8>, <9>), (<8>, <7>), (<3>, <5>), (<3>, <2>), (<4>, <3>), (<4>, <0>), (<4>, <6>), (<4>, <9>), (<4>, <7>), (<4>, <2>)]","{<6>: [<7>, <1>, <0>, <9>, <5>],
<7>: [<2>],
<1>: [<2>, <5>, <9>],
<0>: [<7>],
<9>: [<7>],
<5>: [<2>, <0>, <9>],
<2>: [],
<8>: [<5>, <0>, <2>, <6>, <3>, <9>, <7>],
<3>: [<5>, <2>],
<4>: [<3>, <0>, <6>, <9>, <7>, <2>]}","Node <6> is connected to nodes <7>, <1>, <0>, <9>, <5>.
Node <7> is connected to node <2>.
Node <1> is connected to nodes <2>, <5>, <9>.
Node <0> is connected to node <7>.
Node <9> is connected to node <7>.
Node <5> is connected to nodes <2>, <0>, <9>.
Node <8> is connected to nodes <5>, <0>, <2>, <6>, <3>, <9>, <7>.
Node <3> is connected to nodes <5>, <2>.
Node <4> is connected to nodes <3>, <0>, <6>, <9>, <7>, <2>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>]",10,29,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<8>, <4>, <3>, <6>, <1>, <5>, <0>, <9>, <7>, <2>]","Let's solve it step by step.
Nodes with 0 in-degree: [<8>, <4>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <6>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <9>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
So the result of topological sorting is ","('[[<8>, <4>, <3>, <9>, <7>, <2>, <6>, <1>, <5>, <0>], [<8>, <7>, <4>, <6>, <1>, <2>, <0>, <9>, <3>, <5>], [<8>, <4>, <3>, <6>, <1>, <5>, <0>, <9>, <7>, <2>], [<8>, <4>, <3>, <6>, <1>, <2>, <5>, <9>, <0>, <7>]]',)",2,167
topological_sort,"[(<10>, <6>), (<10>, <1>), (<10>, <9>), (<1>, <9>), (<7>, <3>), (<7>, <8>), (<7>, <5>), (<7>, <10>), (<3>, <5>), (<8>, <3>), (<5>, <1>), (<5>, <9>), (<4>, <5>), (<4>, <10>), (<4>, <3>), (<4>, <9>), (<0>, <7>), (<0>, <2>)]","{<10>: [<6>, <1>, <9>],
<6>: [],
<1>: [<9>],
<9>: [],
<7>: [<3>, <8>, <5>, <10>],
<3>: [<5>],
<8>: [<3>],
<5>: [<1>, <9>],
<4>: [<5>, <10>, <3>, <9>],
<0>: [<7>, <2>],
<2>: []}","Node <10> is connected to nodes <6>, <1>, <9>.
Node <1> is connected to node <9>.
Node <7> is connected to nodes <3>, <8>, <5>, <10>.
Node <3> is connected to node <5>.
Node <8> is connected to node <3>.
Node <5> is connected to nodes <1>, <9>.
Node <4> is connected to nodes <5>, <10>, <3>, <9>.
Node <0> is connected to nodes <7>, <2>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>]",11,18,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<4>, <0>, <7>, <2>, <8>, <10>, <3>, <6>, <5>, <1>, <9>]","Let's solve it step by step.
Nodes with 0 in-degree: [<4>, <0>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <2>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <8>, <10>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<8>, <10>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<10>, <3>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <6>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <5>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
So the result of topological sorting is ","('[[<4>, <0>, <7>, <5>, <1>, <9>, <2>, <8>, <10>, <3>, <6>], [<4>, <0>, <7>, <2>, <8>, <10>, <3>, <6>, <5>, <1>, <9>], [<4>, <3>, <0>, <6>, <8>, <9>, <2>, <10>, <1>, <7>, <5>], [<4>, <0>, <7>, <2>, <8>, <3>, <6>, <5>, <1>, <10>, <9>]]',)",1,168
topological_sort,"[(<13>, <7>), (<13>, <1>), (<13>, <8>), (<7>, <6>), (<7>, <12>), (<7>, <0>), (<7>, <4>), (<1>, <6>), (<1>, <4>), (<8>, <9>), (<8>, <12>), (<8>, <6>), (<12>, <6>), (<12>, <2>), (<0>, <1>), (<0>, <12>), (<0>, <9>), (<0>, <6>), (<4>, <9>), (<4>, <8>), (<4>, <12>), (<11>, <13>), (<11>, <9>), (<11>, <8>), (<11>, <2>), (<11>, <7>), (<9>, <6>), (<9>, <2>), (<10>, <9>), (<10>, <5>), (<10>, <0>), (<10>, <7>), (<5>, <0>), (<3>, <4>), (<3>, <7>), (<3>, <5>)]","{<13>: [<7>, <1>, <8>],
<7>: [<6>, <12>, <0>, <4>],
<1>: [<6>, <4>],
<8>: [<9>, <12>, <6>],
<6>: [],
<12>: [<6>, <2>],
<0>: [<1>, <12>, <9>, <6>],
<4>: [<9>, <8>, <12>],
<11>: [<13>, <9>, <8>, <2>, <7>],
<9>: [<6>, <2>],
<2>: [],
<10>: [<9>, <5>, <0>, <7>],
<5>: [<0>],
<3>: [<4>, <7>, <5>]}","Node <13> is connected to nodes <7>, <1>, <8>.
Node <7> is connected to nodes <6>, <12>, <0>, <4>.
Node <1> is connected to nodes <6>, <4>.
Node <8> is connected to nodes <9>, <12>, <6>.
Node <12> is connected to nodes <6>, <2>.
Node <0> is connected to nodes <1>, <12>, <9>, <6>.
Node <4> is connected to nodes <9>, <8>, <12>.
Node <11> is connected to nodes <13>, <9>, <8>, <2>, <7>.
Node <9> is connected to nodes <6>, <2>.
Node <10> is connected to nodes <9>, <5>, <0>, <7>.
Node <5> is connected to node <0>.
Node <3> is connected to nodes <4>, <7>, <5>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>]",14,36,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<11>, <10>, <3>, <13>, <5>, <7>, <0>, <1>, <4>, <8>, <9>, <12>, <6>, <2>]","Let's solve it step by step.
Nodes with 0 in-degree: [<11>, <10>, <3>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<10>, <3>, <13>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <13>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<13>, <5>].
Visit node <13> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <7>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<9>, <12>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<12>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <2>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
So the result of topological sorting is ","('[[<11>, <10>, <3>, <13>, <9>, <12>, <6>, <2>, <5>, <7>, <0>, <1>, <4>, <8>], [<11>, <10>, <3>, <13>, <5>, <7>, <0>, <1>, <4>, <8>, <9>, <12>, <6>, <2>], [<11>, <10>, <3>, <13>, <5>, <7>, <0>, <1>, <2>, <8>, <4>, <12>, <9>, <6>], [<11>, <1>, <5>, <4>, <7>, <8>, <13>, <0>, <6>, <9>, <12>, <3>, <2>, <10>]]',)",1,169
topological_sort,"[(<7>, <3>), (<7>, <5>), (<3>, <5>), (<5>, <4>), (<5>, <0>), (<4>, <0>), (<2>, <6>), (<6>, <1>), (<1>, <3>)]","{<7>: [<3>, <5>],
<3>: [<5>],
<5>: [<4>, <0>],
<4>: [<0>],
<0>: [],
<2>: [<6>],
<6>: [<1>],
<1>: [<3>]}","Node <7> is connected to nodes <3>, <5>.
Node <3> is connected to node <5>.
Node <5> is connected to nodes <4>, <0>.
Node <4> is connected to node <0>.
Node <2> is connected to node <6>.
Node <6> is connected to node <1>.
Node <1> is connected to node <3>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>]",8,9,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<7>, <2>, <6>, <1>, <3>, <5>, <4>, <0>]","Let's solve it step by step.
Nodes with 0 in-degree: [<7>, <2>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
So the result of topological sorting is ","('[[<7>, <2>, <6>, <1>, <3>, <5>, <4>, <0>], [<7>, <2>, <4>, <0>, <6>, <1>, <3>, <5>], [<7>, <3>, <4>, <0>, <6>, <5>, <2>, <1>], [<7>, <2>, <6>, <1>, <3>, <4>, <5>, <0>]]',)",0,170
topological_sort,"[(<6>, <2>), (<6>, <4>), (<6>, <8>), (<6>, <5>), (<4>, <7>), (<4>, <0>), (<4>, <10>), (<8>, <0>), (<8>, <5>), (<8>, <3>), (<8>, <10>), (<8>, <1>), (<5>, <3>), (<5>, <1>), (<5>, <4>), (<0>, <10>), (<0>, <7>), (<0>, <2>), (<10>, <3>), (<10>, <2>), (<1>, <10>), (<7>, <10>), (<7>, <1>), (<7>, <2>), (<9>, <0>), (<9>, <7>), (<9>, <8>), (<9>, <10>), (<9>, <2>), (<9>, <5>), (<9>, <4>)]","{<6>: [<2>, <4>, <8>, <5>],
<2>: [],
<4>: [<7>, <0>, <10>],
<8>: [<0>, <5>, <3>, <10>, <1>],
<5>: [<3>, <1>, <4>],
<0>: [<10>, <7>, <2>],
<3>: [],
<10>: [<3>, <2>],
<1>: [<10>],
<7>: [<10>, <1>, <2>],
<9>: [<0>, <7>, <8>, <10>, <2>, <5>, <4>]}","Node <6> is connected to nodes <2>, <4>, <8>, <5>.
Node <4> is connected to nodes <7>, <0>, <10>.
Node <8> is connected to nodes <0>, <5>, <3>, <10>, <1>.
Node <5> is connected to nodes <3>, <1>, <4>.
Node <0> is connected to nodes <10>, <7>, <2>.
Node <10> is connected to nodes <3>, <2>.
Node <1> is connected to node <10>.
Node <7> is connected to nodes <10>, <1>, <2>.
Node <9> is connected to nodes <0>, <7>, <8>, <10>, <2>, <5>, <4>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>]",11,31,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<6>, <9>, <8>, <5>, <4>, <0>, <7>, <1>, <10>, <3>, <2>]","Let's solve it step by step.
Nodes with 0 in-degree: [<6>, <9>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <2>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
So the result of topological sorting is ","('[[<6>, <9>, <8>, <5>, <4>, <0>, <7>, <1>, <10>, <3>, <2>], [<6>, <7>, <0>, <9>, <2>, <8>, <10>, <5>, <4>, <1>, <3>], [<6>, <9>, <8>, <5>, <4>, <3>, <10>, <1>, <0>, <2>, <7>], [<6>, <9>, <8>, <10>, <3>, <2>, <5>, <4>, <0>, <7>, <1>]]',)",0,171
topological_sort,"[(<5>, <7>), (<5>, <0>), (<5>, <10>), (<5>, <6>), (<5>, <8>), (<7>, <8>), (<7>, <6>), (<7>, <1>), (<7>, <11>), (<6>, <4>), (<6>, <1>), (<6>, <8>), (<8>, <0>), (<8>, <11>), (<1>, <10>), (<1>, <9>), (<4>, <8>), (<4>, <11>), (<4>, <1>), (<9>, <8>), (<9>, <11>), (<2>, <8>), (<2>, <5>), (<2>, <6>), (<2>, <10>), (<3>, <9>), (<3>, <4>), (<3>, <6>)]","{<5>: [<7>, <0>, <10>, <6>, <8>],
<7>: [<8>, <6>, <1>, <11>],
<0>: [],
<10>: [],
<6>: [<4>, <1>, <8>],
<8>: [<0>, <11>],
<1>: [<10>, <9>],
<11>: [],
<4>: [<8>, <11>, <1>],
<9>: [<8>, <11>],
<2>: [<8>, <5>, <6>, <10>],
<3>: [<9>, <4>, <6>]}","Node <5> is connected to nodes <7>, <0>, <10>, <6>, <8>.
Node <7> is connected to nodes <8>, <6>, <1>, <11>.
Node <6> is connected to nodes <4>, <1>, <8>.
Node <8> is connected to nodes <0>, <11>.
Node <1> is connected to nodes <10>, <9>.
Node <4> is connected to nodes <8>, <11>, <1>.
Node <9> is connected to nodes <8>, <11>.
Node <2> is connected to nodes <8>, <5>, <6>, <10>.
Node <3> is connected to nodes <9>, <4>, <6>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>]",12,28,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<2>, <3>, <5>, <7>, <6>, <4>, <1>, <10>, <9>, <8>, <0>, <11>]","Let's solve it step by step.
Nodes with 0 in-degree: [<2>, <3>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <5>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<10>, <9>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <11>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<11>].
Visit node <11> and remove it from the graph.
So the result of topological sorting is ","('[[<2>, <3>, <5>, <7>, <9>, <8>, <0>, <11>, <6>, <4>, <1>, <10>], [<2>, <3>, <5>, <7>, <6>, <4>, <1>, <10>, <9>, <8>, <0>, <11>], [<2>, <5>, <8>, <0>, <11>, <1>, <4>, <10>, <3>, <9>, <6>, <7>], [<2>, <3>, <5>, <7>, <6>, <4>, <10>, <0>, <11>, <9>, <1>, <8>]]',)",1,172
topological_sort,"[(<13>, <6>), (<13>, <0>), (<13>, <3>), (<13>, <1>), (<13>, <5>), (<6>, <5>), (<6>, <1>), (<6>, <11>), (<0>, <6>), (<0>, <4>), (<3>, <5>), (<1>, <10>), (<1>, <5>), (<14>, <2>), (<14>, <6>), (<9>, <6>), (<9>, <3>), (<4>, <2>), (<7>, <3>), (<8>, <0>), (<12>, <1>)]","{<13>: [<6>, <0>, <3>, <1>, <5>],
<6>: [<5>, <1>, <11>],
<0>: [<6>, <4>],
<3>: [<5>],
<1>: [<10>, <5>],
<5>: [],
<11>: [],
<14>: [<2>, <6>],
<2>: [],
<9>: [<6>, <3>],
<4>: [<2>],
<10>: [],
<7>: [<3>],
<8>: [<0>],
<12>: [<1>]}","Node <13> is connected to nodes <6>, <0>, <3>, <1>, <5>.
Node <6> is connected to nodes <5>, <1>, <11>.
Node <0> is connected to nodes <6>, <4>.
Node <3> is connected to node <5>.
Node <1> is connected to nodes <10>, <5>.
Node <14> is connected to nodes <2>, <6>.
Node <9> is connected to nodes <6>, <3>.
Node <4> is connected to node <2>.
Node <7> is connected to node <3>.
Node <8> is connected to node <0>.
Node <12> is connected to node <1>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>, <14>]",15,21,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<13>, <14>, <9>, <7>, <8>, <12>, <3>, <0>, <6>, <4>, <1>, <11>, <2>, <10>, <5>]","Let's solve it step by step.
Nodes with 0 in-degree: [<13>, <14>, <9>, <7>, <8>, <12>].
Visit node <13> and remove it from the graph.
Nodes with 0 in-degree: [<14>, <9>, <7>, <8>, <12>].
Visit node <14> and remove it from the graph.
Nodes with 0 in-degree: [<9>, <7>, <8>, <12>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <8>, <12>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<8>, <12>, <3>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<12>, <3>, <0>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <0>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <4>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <1>, <11>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <11>, <2>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<11>, <2>, <10>, <5>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <10>, <5>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<10>, <5>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
So the result of topological sorting is ","('[[<13>, <14>, <9>, <7>, <8>, <12>, <3>, <6>, <5>, <4>, <11>, <0>, <2>, <10>, <1>], [<13>, <12>, <1>, <5>, <8>, <2>, <9>, <10>, <7>, <14>, <3>, <11>, <6>, <0>, <4>], [<13>, <14>, <9>, <7>, <8>, <12>, <3>, <0>, <6>, <4>, <1>, <11>, <2>, <10>, <5>], [<13>, <14>, <9>, <7>, <8>, <1>, <11>, <2>, <10>, <5>, <12>, <3>, <0>, <6>, <4>]]',)",2,173
topological_sort,"[(<5>, <9>), (<7>, <0>), (<7>, <10>), (<0>, <3>), (<0>, <8>), (<0>, <1>), (<10>, <9>), (<10>, <5>), (<3>, <2>), (<3>, <1>), (<3>, <9>), (<8>, <5>), (<1>, <8>), (<1>, <2>), (<2>, <6>), (<2>, <10>), (<2>, <9>), (<6>, <8>), (<6>, <10>), (<4>, <8>), (<4>, <7>), (<4>, <0>), (<4>, <5>)]","{<5>: [<9>],
<9>: [],
<7>: [<0>, <10>],
<0>: [<3>, <8>, <1>],
<10>: [<9>, <5>],
<3>: [<2>, <1>, <9>],
<8>: [<5>],
<1>: [<8>, <2>],
<2>: [<6>, <10>, <9>],
<6>: [<8>, <10>],
<4>: [<8>, <7>, <0>, <5>]}","Node <5> is connected to node <9>.
Node <7> is connected to nodes <0>, <10>.
Node <0> is connected to nodes <3>, <8>, <1>.
Node <10> is connected to nodes <9>, <5>.
Node <3> is connected to nodes <2>, <1>, <9>.
Node <8> is connected to node <5>.
Node <1> is connected to nodes <8>, <2>.
Node <2> is connected to nodes <6>, <10>, <9>.
Node <6> is connected to nodes <8>, <10>.
Node <4> is connected to nodes <8>, <7>, <0>, <5>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>]",11,23,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<4>, <7>, <0>, <3>, <1>, <2>, <6>, <8>, <10>, <5>, <9>]","Let's solve it step by step.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<8>, <10>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
So the result of topological sorting is ","('[[<4>, <7>, <0>, <10>, <5>, <9>, <3>, <1>, <2>, <6>, <8>], [<4>, <8>, <0>, <10>, <7>, <3>, <9>, <1>, <5>, <2>, <6>], [<4>, <7>, <0>, <3>, <1>, <10>, <9>, <8>, <6>, <2>, <5>], [<4>, <7>, <0>, <3>, <1>, <2>, <6>, <8>, <10>, <5>, <9>]]',)",3,174
topological_sort,"[(<6>, <4>), (<6>, <7>), (<6>, <2>), (<6>, <0>), (<4>, <5>), (<7>, <4>), (<7>, <2>), (<2>, <0>), (<2>, <4>), (<5>, <0>), (<3>, <6>), (<3>, <1>), (<3>, <7>), (<3>, <0>), (<1>, <7>)]","{<6>: [<4>, <7>, <2>, <0>],
<4>: [<5>],
<7>: [<4>, <2>],
<2>: [<0>, <4>],
<0>: [],
<5>: [<0>],
<3>: [<6>, <1>, <7>, <0>],
<1>: [<7>]}","Node <6> is connected to nodes <4>, <7>, <2>, <0>.
Node <4> is connected to node <5>.
Node <7> is connected to nodes <4>, <2>.
Node <2> is connected to nodes <0>, <4>.
Node <5> is connected to node <0>.
Node <3> is connected to nodes <6>, <1>, <7>, <0>.
Node <1> is connected to node <7>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>]",8,15,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<3>, <6>, <1>, <7>, <2>, <4>, <5>, <0>]","Let's solve it step by step.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <1>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
So the result of topological sorting is ","('[[<3>, <6>, <5>, <0>, <1>, <7>, <2>, <4>], [<3>, <6>, <1>, <7>, <5>, <0>, <4>, <2>], [<3>, <0>, <2>, <1>, <4>, <6>, <5>, <7>], [<3>, <6>, <1>, <7>, <2>, <4>, <5>, <0>]]',)",3,175
topological_sort,"[(<2>, <4>), (<2>, <0>), (<0>, <4>), (<1>, <2>), (<1>, <7>), (<1>, <0>), (<7>, <5>), (<6>, <1>), (<6>, <4>), (<5>, <0>), (<5>, <4>), (<3>, <0>), (<3>, <1>)]","{<2>: [<4>, <0>],
<4>: [],
<0>: [<4>],
<1>: [<2>, <7>, <0>],
<7>: [<5>],
<6>: [<1>, <4>],
<5>: [<0>, <4>],
<3>: [<0>, <1>]}","Node <2> is connected to nodes <4>, <0>.
Node <0> is connected to node <4>.
Node <1> is connected to nodes <2>, <7>, <0>.
Node <7> is connected to node <5>.
Node <6> is connected to nodes <1>, <4>.
Node <5> is connected to nodes <0>, <4>.
Node <3> is connected to nodes <0>, <1>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>]",8,13,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<6>, <3>, <1>, <2>, <7>, <5>, <0>, <4>]","Let's solve it step by step.
Nodes with 0 in-degree: [<6>, <3>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <7>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
So the result of topological sorting is ","('[[<6>, <3>, <1>, <2>, <7>, <5>, <0>, <4>], [<6>, <3>, <1>, <2>, <7>, <0>, <5>, <4>], [<6>, <0>, <1>, <3>, <2>, <4>, <5>, <7>], [<6>, <3>, <0>, <4>, <1>, <2>, <7>, <5>]]',)",0,176
topological_sort,"[(<1>, <5>), (<5>, <8>), (<5>, <11>), (<8>, <4>), (<8>, <3>), (<11>, <8>), (<2>, <5>), (<0>, <2>), (<0>, <8>), (<0>, <12>), (<10>, <11>), (<4>, <7>), (<6>, <5>), (<6>, <12>), (<6>, <11>), (<6>, <3>), (<6>, <1>), (<9>, <11>), (<9>, <3>)]","{<1>: [<5>],
<5>: [<8>, <11>],
<8>: [<4>, <3>],
<11>: [<8>],
<2>: [<5>],
<0>: [<2>, <8>, <12>],
<12>: [],
<10>: [<11>],
<4>: [<7>],
<3>: [],
<6>: [<5>, <12>, <11>, <3>, <1>],
<7>: [],
<9>: [<11>, <3>]}","Node <1> is connected to node <5>.
Node <5> is connected to nodes <8>, <11>.
Node <8> is connected to nodes <4>, <3>.
Node <11> is connected to node <8>.
Node <2> is connected to node <5>.
Node <0> is connected to nodes <2>, <8>, <12>.
Node <10> is connected to node <11>.
Node <4> is connected to node <7>.
Node <6> is connected to nodes <5>, <12>, <11>, <3>, <1>.
Node <9> is connected to nodes <11>, <3>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>]",13,19,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<0>, <10>, <6>, <9>, <2>, <12>, <1>, <5>, <11>, <8>, <4>, <3>, <7>]","Let's solve it step by step.
Nodes with 0 in-degree: [<0>, <10>, <6>, <9>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<10>, <6>, <9>, <2>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <9>, <2>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<9>, <2>, <12>, <1>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <12>, <1>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<12>, <1>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<11>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <3>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <7>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
So the result of topological sorting is ","('[[<0>, <10>, <6>, <9>, <8>, <4>, <3>, <7>, <2>, <12>, <1>, <5>, <11>], [<0>, <2>, <8>, <3>, <12>, <10>, <7>, <9>, <11>, <1>, <4>, <5>, <6>], [<0>, <10>, <6>, <9>, <2>, <12>, <11>, <5>, <8>, <3>, <4>, <7>, <1>], [<0>, <10>, <6>, <9>, <2>, <12>, <1>, <5>, <11>, <8>, <4>, <3>, <7>]]',)",3,177
topological_sort,"[(<7>, <1>), (<7>, <5>), (<7>, <3>), (<7>, <4>), (<7>, <2>), (<7>, <6>), (<7>, <0>), (<1>, <5>), (<1>, <3>), (<1>, <2>), (<5>, <0>), (<3>, <5>), (<3>, <4>), (<3>, <6>), (<3>, <2>), (<4>, <5>), (<4>, <0>), (<2>, <5>), (<2>, <4>), (<6>, <4>), (<6>, <2>)]","{<7>: [<1>, <5>, <3>, <4>, <2>, <6>, <0>],
<1>: [<5>, <3>, <2>],
<5>: [<0>],
<3>: [<5>, <4>, <6>, <2>],
<4>: [<5>, <0>],
<2>: [<5>, <4>],
<6>: [<4>, <2>],
<0>: []}","Node <7> is connected to nodes <1>, <5>, <3>, <4>, <2>, <6>, <0>.
Node <1> is connected to nodes <5>, <3>, <2>.
Node <5> is connected to node <0>.
Node <3> is connected to nodes <5>, <4>, <6>, <2>.
Node <4> is connected to nodes <5>, <0>.
Node <2> is connected to nodes <5>, <4>.
Node <6> is connected to nodes <4>, <2>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>]",8,21,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<7>, <1>, <3>, <6>, <2>, <4>, <5>, <0>]","Let's solve it step by step.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
So the result of topological sorting is ","('[[<7>, <1>, <3>, <6>, <2>, <4>, <5>, <0>], [<7>, <1>, <5>, <0>, <3>, <6>, <2>, <4>], [<7>, <6>, <1>, <4>, <0>, <2>, <3>, <5>], [<7>, <1>, <3>, <6>, <0>, <4>, <2>, <5>]]',)",0,178
topological_sort,"[(<3>, <9>), (<3>, <2>), (<3>, <4>), (<3>, <5>), (<9>, <10>), (<9>, <4>), (<9>, <7>), (<4>, <5>), (<4>, <0>), (<4>, <7>), (<4>, <6>), (<5>, <6>), (<5>, <2>), (<10>, <0>), (<7>, <2>), (<8>, <10>), (<8>, <3>), (<8>, <6>), (<8>, <0>), (<8>, <4>), (<8>, <7>), (<8>, <2>), (<8>, <5>), (<8>, <1>), (<6>, <2>), (<6>, <7>), (<0>, <6>), (<0>, <5>), (<1>, <5>), (<1>, <6>), (<1>, <3>), (<1>, <4>), (<1>, <2>), (<1>, <10>)]","{<3>: [<9>, <2>, <4>, <5>],
<9>: [<10>, <4>, <7>],
<2>: [],
<4>: [<5>, <0>, <7>, <6>],
<5>: [<6>, <2>],
<10>: [<0>],
<7>: [<2>],
<8>: [<10>, <3>, <6>, <0>, <4>, <7>, <2>, <5>, <1>],
<6>: [<2>, <7>],
<0>: [<6>, <5>],
<1>: [<5>, <6>, <3>, <4>, <2>, <10>]}","Node <3> is connected to nodes <9>, <2>, <4>, <5>.
Node <9> is connected to nodes <10>, <4>, <7>.
Node <4> is connected to nodes <5>, <0>, <7>, <6>.
Node <5> is connected to nodes <6>, <2>.
Node <10> is connected to node <0>.
Node <7> is connected to node <2>.
Node <8> is connected to nodes <10>, <3>, <6>, <0>, <4>, <7>, <2>, <5>, <1>.
Node <6> is connected to nodes <2>, <7>.
Node <0> is connected to nodes <6>, <5>.
Node <1> is connected to nodes <5>, <6>, <3>, <4>, <2>, <10>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>]",11,34,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<8>, <1>, <3>, <9>, <10>, <4>, <0>, <5>, <6>, <7>, <2>]","Let's solve it step by step.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<10>, <4>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
So the result of topological sorting is ","('[[<8>, <1>, <3>, <9>, <10>, <4>, <0>, <5>, <6>, <7>, <2>], [<8>, <1>, <3>, <9>, <10>, <2>, <4>, <5>, <0>, <7>, <6>], [<8>, <7>, <2>, <6>, <0>, <5>, <1>, <3>, <10>, <4>, <9>], [<8>, <1>, <3>, <6>, <7>, <2>, <9>, <10>, <4>, <0>, <5>]]',)",0,179
topological_sort,"[(<2>, <3>), (<2>, <0>), (<2>, <9>), (<3>, <7>), (<3>, <0>), (<3>, <9>), (<0>, <7>), (<9>, <0>), (<7>, <5>), (<6>, <4>), (<6>, <10>), (<4>, <8>), (<10>, <4>), (<10>, <8>), (<11>, <0>), (<11>, <12>), (<11>, <10>), (<12>, <2>), (<12>, <10>), (<1>, <3>), (<5>, <6>), (<5>, <4>), (<5>, <8>)]","{<2>: [<3>, <0>, <9>],
<3>: [<7>, <0>, <9>],
<0>: [<7>],
<9>: [<0>],
<7>: [<5>],
<6>: [<4>, <10>],
<4>: [<8>],
<10>: [<4>, <8>],
<8>: [],
<11>: [<0>, <12>, <10>],
<12>: [<2>, <10>],
<1>: [<3>],
<5>: [<6>, <4>, <8>]}","Node <2> is connected to nodes <3>, <0>, <9>.
Node <3> is connected to nodes <7>, <0>, <9>.
Node <0> is connected to node <7>.
Node <9> is connected to node <0>.
Node <7> is connected to node <5>.
Node <6> is connected to nodes <4>, <10>.
Node <4> is connected to node <8>.
Node <10> is connected to nodes <4>, <8>.
Node <11> is connected to nodes <0>, <12>, <10>.
Node <12> is connected to nodes <2>, <10>.
Node <1> is connected to node <3>.
Node <5> is connected to nodes <6>, <4>, <8>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>]",13,23,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<11>, <1>, <12>, <2>, <3>, <9>, <0>, <7>, <5>, <6>, <10>, <4>, <8>]","Let's solve it step by step.
Nodes with 0 in-degree: [<11>, <1>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <12>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<12>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
So the result of topological sorting is ","('[[<11>, <10>, <8>, <0>, <2>, <4>, <6>, <3>, <9>, <5>, <7>, <1>, <12>], [<11>, <1>, <12>, <2>, <3>, <9>, <0>, <7>, <5>, <6>, <10>, <4>, <8>], [<11>, <1>, <12>, <2>, <6>, <10>, <4>, <8>, <3>, <9>, <0>, <7>, <5>], [<11>, <1>, <12>, <2>, <3>, <9>, <5>, <4>, <10>, <8>, <0>, <6>, <7>]]',)",1,180
topological_sort,"[(<4>, <5>), (<5>, <6>), (<5>, <1>), (<6>, <3>), (<0>, <4>), (<0>, <2>), (<2>, <4>), (<7>, <5>)]","{<4>: [<5>],
<5>: [<6>, <1>],
<6>: [<3>],
<1>: [],
<3>: [],
<0>: [<4>, <2>],
<2>: [<4>],
<7>: [<5>]}","Node <4> is connected to node <5>.
Node <5> is connected to nodes <6>, <1>.
Node <6> is connected to node <3>.
Node <0> is connected to nodes <4>, <2>.
Node <2> is connected to node <4>.
Node <7> is connected to node <5>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>]",8,8,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<0>, <7>, <2>, <4>, <5>, <6>, <1>, <3>]","Let's solve it step by step.
Nodes with 0 in-degree: [<0>, <7>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <2>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <1>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <3>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
So the result of topological sorting is ","('[[<0>, <7>, <1>, <3>, <2>, <4>, <5>, <6>], [<0>, <7>, <2>, <4>, <6>, <3>, <1>, <5>], [<0>, <7>, <2>, <4>, <5>, <6>, <1>, <3>], [<0>, <6>, <7>, <1>, <5>, <4>, <2>, <3>]]',)",2,181
topological_sort,"[(<9>, <1>), (<1>, <11>), (<11>, <5>), (<11>, <8>), (<7>, <10>), (<7>, <4>), (<7>, <11>), (<7>, <5>), (<10>, <2>), (<10>, <6>), (<4>, <3>), (<2>, <3>), (<6>, <5>), (<6>, <0>), (<6>, <9>), (<6>, <1>), (<0>, <9>), (<0>, <11>), (<0>, <12>), (<0>, <3>), (<3>, <9>), (<3>, <1>)]","{<9>: [<1>],
<1>: [<11>],
<11>: [<5>, <8>],
<5>: [],
<8>: [],
<7>: [<10>, <4>, <11>, <5>],
<10>: [<2>, <6>],
<4>: [<3>],
<2>: [<3>],
<6>: [<5>, <0>, <9>, <1>],
<0>: [<9>, <11>, <12>, <3>],
<12>: [],
<3>: [<9>, <1>]}","Node <9> is connected to node <1>.
Node <1> is connected to node <11>.
Node <11> is connected to nodes <5>, <8>.
Node <7> is connected to nodes <10>, <4>, <11>, <5>.
Node <10> is connected to nodes <2>, <6>.
Node <4> is connected to node <3>.
Node <2> is connected to node <3>.
Node <6> is connected to nodes <5>, <0>, <9>, <1>.
Node <0> is connected to nodes <9>, <11>, <12>, <3>.
Node <3> is connected to nodes <9>, <1>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>]",13,22,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<7>, <10>, <4>, <2>, <6>, <0>, <12>, <3>, <9>, <1>, <11>, <5>, <8>]","Let's solve it step by step.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<10>, <4>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <2>, <6>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <6>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<12>, <3>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<11>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <8>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
So the result of topological sorting is ","('[[<7>, <0>, <9>, <6>, <4>, <2>, <12>, <8>, <1>, <11>, <5>, <3>, <10>], [<7>, <10>, <4>, <2>, <6>, <0>, <3>, <1>, <5>, <8>, <9>, <11>, <12>], [<7>, <10>, <4>, <2>, <6>, <0>, <12>, <3>, <9>, <1>, <11>, <5>, <8>], [<7>, <10>, <4>, <2>, <1>, <11>, <5>, <8>, <6>, <0>, <12>, <3>, <9>]]',)",2,182
topological_sort,"[(<4>, <8>), (<4>, <1>), (<4>, <5>), (<5>, <7>), (<7>, <1>), (<7>, <8>), (<6>, <7>), (<6>, <4>), (<0>, <7>), (<2>, <8>), (<3>, <2>), (<3>, <5>), (<3>, <8>)]","{<4>: [<8>, <1>, <5>],
<8>: [],
<1>: [],
<5>: [<7>],
<7>: [<1>, <8>],
<6>: [<7>, <4>],
<0>: [<7>],
<2>: [<8>],
<3>: [<2>, <5>, <8>]}","Node <4> is connected to nodes <8>, <1>, <5>.
Node <5> is connected to node <7>.
Node <7> is connected to nodes <1>, <8>.
Node <6> is connected to nodes <7>, <4>.
Node <0> is connected to node <7>.
Node <2> is connected to node <8>.
Node <3> is connected to nodes <2>, <5>, <8>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>]",9,13,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<6>, <0>, <3>, <4>, <2>, <5>, <7>, <1>, <8>]","Let's solve it step by step.
Nodes with 0 in-degree: [<6>, <0>, <3>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <3>, <4>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <4>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <2>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <5>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <8>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
So the result of topological sorting is ","('[[<6>, <5>, <7>, <8>, <1>, <4>, <2>, <3>, <0>], [<6>, <0>, <3>, <4>, <2>, <5>, <7>, <1>, <8>], [<6>, <0>, <3>, <7>, <1>, <8>, <4>, <2>, <5>], [<6>, <0>, <3>, <4>, <1>, <2>, <7>, <5>, <8>]]',)",1,183
topological_sort,"[(<9>, <11>), (<9>, <3>), (<9>, <7>), (<11>, <8>), (<11>, <4>), (<3>, <4>), (<3>, <7>), (<3>, <11>), (<7>, <8>), (<4>, <10>), (<4>, <8>), (<0>, <11>), (<0>, <6>), (<0>, <7>), (<0>, <5>), (<0>, <4>), (<6>, <11>), (<6>, <7>), (<6>, <8>), (<5>, <10>), (<5>, <2>), (<10>, <8>), (<10>, <7>), (<2>, <3>), (<1>, <4>), (<1>, <2>), (<1>, <5>), (<1>, <8>), (<1>, <9>), (<1>, <0>), (<1>, <10>)]","{<9>: [<11>, <3>, <7>],
<11>: [<8>, <4>],
<3>: [<4>, <7>, <11>],
<7>: [<8>],
<8>: [],
<4>: [<10>, <8>],
<0>: [<11>, <6>, <7>, <5>, <4>],
<6>: [<11>, <7>, <8>],
<5>: [<10>, <2>],
<10>: [<8>, <7>],
<2>: [<3>],
<1>: [<4>, <2>, <5>, <8>, <9>, <0>, <10>]}","Node <9> is connected to nodes <11>, <3>, <7>.
Node <11> is connected to nodes <8>, <4>.
Node <3> is connected to nodes <4>, <7>, <11>.
Node <7> is connected to node <8>.
Node <4> is connected to nodes <10>, <8>.
Node <0> is connected to nodes <11>, <6>, <7>, <5>, <4>.
Node <6> is connected to nodes <11>, <7>, <8>.
Node <5> is connected to nodes <10>, <2>.
Node <10> is connected to nodes <8>, <7>.
Node <2> is connected to node <3>.
Node <1> is connected to nodes <4>, <2>, <5>, <8>, <9>, <0>, <10>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>]",12,31,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<1>, <9>, <0>, <6>, <5>, <2>, <3>, <11>, <4>, <10>, <7>, <8>]","Let's solve it step by step.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<9>, <0>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <5>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<11>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
So the result of topological sorting is ","('[[<1>, <9>, <0>, <6>, <4>, <10>, <7>, <8>, <5>, <2>, <3>, <11>], [<1>, <10>, <5>, <8>, <11>, <9>, <2>, <7>, <3>, <6>, <0>, <4>], [<1>, <9>, <0>, <6>, <5>, <2>, <4>, <10>, <8>, <11>, <3>, <7>], [<1>, <9>, <0>, <6>, <5>, <2>, <3>, <11>, <4>, <10>, <7>, <8>]]',)",3,184
topological_sort,"[(<14>, <4>), (<14>, <1>), (<14>, <9>), (<14>, <10>), (<14>, <0>), (<14>, <5>), (<14>, <6>), (<14>, <8>), (<14>, <2>), (<9>, <4>), (<10>, <2>), (<10>, <9>), (<10>, <12>), (<10>, <1>), (<0>, <7>), (<0>, <6>), (<0>, <8>), (<0>, <13>), (<0>, <1>), (<0>, <5>), (<5>, <3>), (<5>, <11>), (<5>, <1>), (<6>, <13>), (<6>, <7>), (<6>, <11>), (<8>, <1>), (<8>, <4>), (<8>, <9>), (<8>, <11>), (<2>, <5>), (<2>, <13>), (<2>, <6>), (<2>, <1>), (<2>, <4>), (<13>, <11>), (<13>, <9>), (<7>, <11>), (<7>, <8>), (<11>, <4>), (<11>, <9>), (<3>, <7>), (<12>, <3>), (<12>, <0>), (<12>, <1>)]","{<14>: [<4>, <1>, <9>, <10>, <0>, <5>, <6>, <8>, <2>],
<4>: [],
<1>: [],
<9>: [<4>],
<10>: [<2>, <9>, <12>, <1>],
<0>: [<7>, <6>, <8>, <13>, <1>, <5>],
<5>: [<3>, <11>, <1>],
<6>: [<13>, <7>, <11>],
<8>: [<1>, <4>, <9>, <11>],
<2>: [<5>, <13>, <6>, <1>, <4>],
<13>: [<11>, <9>],
<7>: [<11>, <8>],
<11>: [<4>, <9>],
<3>: [<7>],
<12>: [<3>, <0>, <1>]}","Node <14> is connected to nodes <4>, <1>, <9>, <10>, <0>, <5>, <6>, <8>, <2>.
Node <9> is connected to node <4>.
Node <10> is connected to nodes <2>, <9>, <12>, <1>.
Node <0> is connected to nodes <7>, <6>, <8>, <13>, <1>, <5>.
Node <5> is connected to nodes <3>, <11>, <1>.
Node <6> is connected to nodes <13>, <7>, <11>.
Node <8> is connected to nodes <1>, <4>, <9>, <11>.
Node <2> is connected to nodes <5>, <13>, <6>, <1>, <4>.
Node <13> is connected to nodes <11>, <9>.
Node <7> is connected to nodes <11>, <8>.
Node <11> is connected to nodes <4>, <9>.
Node <3> is connected to node <7>.
Node <12> is connected to nodes <3>, <0>, <1>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>, <14>]",15,45,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<14>, <10>, <2>, <12>, <0>, <6>, <5>, <13>, <3>, <7>, <8>, <1>, <11>, <9>, <4>]","Let's solve it step by step.
Nodes with 0 in-degree: [<14>].
Visit node <14> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <12>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<12>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <5>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <13>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<13>, <3>].
Visit node <13> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <11>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<11>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
So the result of topological sorting is ","('[[<14>, <10>, <2>, <12>, <0>, <8>, <1>, <11>, <9>, <4>, <6>, <5>, <13>, <3>, <7>], [<14>, <10>, <2>, <12>, <0>, <6>, <5>, <13>, <3>, <7>, <8>, <1>, <11>, <9>, <4>], [<14>, <10>, <2>, <12>, <0>, <6>, <5>, <9>, <1>, <11>, <13>, <3>, <7>, <8>, <4>], [<14>, <6>, <9>, <8>, <0>, <5>, <2>, <13>, <3>, <10>, <1>, <12>, <4>, <11>, <7>]]',)",1,185
topological_sort,"[(<7>, <3>), (<7>, <9>), (<7>, <12>), (<7>, <4>), (<3>, <11>), (<3>, <6>), (<9>, <10>), (<12>, <6>), (<4>, <5>), (<4>, <0>), (<4>, <11>), (<11>, <12>), (<6>, <5>), (<0>, <12>), (<0>, <2>), (<10>, <11>), (<8>, <3>), (<8>, <6>), (<8>, <14>), (<14>, <13>), (<14>, <3>), (<1>, <6>), (<1>, <2>), (<1>, <11>), (<1>, <13>), (<13>, <2>), (<13>, <4>), (<13>, <11>)]","{<7>: [<3>, <9>, <12>, <4>],
<3>: [<11>, <6>],
<9>: [<10>],
<12>: [<6>],
<4>: [<5>, <0>, <11>],
<11>: [<12>],
<6>: [<5>],
<0>: [<12>, <2>],
<2>: [],
<10>: [<11>],
<8>: [<3>, <6>, <14>],
<14>: [<13>, <3>],
<5>: [],
<1>: [<6>, <2>, <11>, <13>],
<13>: [<2>, <4>, <11>]}","Node <7> is connected to nodes <3>, <9>, <12>, <4>.
Node <3> is connected to nodes <11>, <6>.
Node <9> is connected to node <10>.
Node <12> is connected to node <6>.
Node <4> is connected to nodes <5>, <0>, <11>.
Node <11> is connected to node <12>.
Node <6> is connected to node <5>.
Node <0> is connected to nodes <12>, <2>.
Node <10> is connected to node <11>.
Node <8> is connected to nodes <3>, <6>, <14>.
Node <14> is connected to nodes <13>, <3>.
Node <1> is connected to nodes <6>, <2>, <11>, <13>.
Node <13> is connected to nodes <2>, <4>, <11>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>, <14>]",15,28,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<7>, <8>, <1>, <9>, <14>, <10>, <13>, <3>, <4>, <0>, <11>, <2>, <12>, <6>, <5>]","Let's solve it step by step.
Nodes with 0 in-degree: [<7>, <8>, <1>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<8>, <1>, <9>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <9>, <14>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<9>, <14>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<14>, <10>].
Visit node <14> and remove it from the graph.
Nodes with 0 in-degree: [<10>, <13>, <3>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<13>, <3>].
Visit node <13> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <4>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <11>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<11>, <2>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <12>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<12>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
So the result of topological sorting is ","('[[<7>, <9>, <5>, <10>, <3>, <11>, <2>, <4>, <1>, <0>, <13>, <8>, <14>, <12>, <6>], [<7>, <8>, <1>, <9>, <14>, <10>, <13>, <3>, <4>, <0>, <11>, <2>, <12>, <6>, <5>], [<7>, <8>, <1>, <9>, <14>, <11>, <2>, <12>, <6>, <5>, <10>, <13>, <3>, <4>, <0>], [<7>, <8>, <1>, <9>, <14>, <10>, <13>, <5>, <12>, <2>, <3>, <6>, <4>, <0>, <11>]]',)",1,186
topological_sort,"[(<9>, <6>), (<9>, <5>), (<6>, <2>), (<2>, <5>), (<12>, <6>), (<12>, <2>), (<0>, <8>), (<0>, <11>), (<8>, <6>), (<11>, <4>), (<11>, <1>), (<4>, <2>), (<10>, <1>), (<10>, <3>), (<10>, <0>), (<10>, <7>), (<3>, <12>), (<3>, <9>), (<7>, <8>), (<7>, <6>), (<7>, <0>), (<7>, <13>), (<13>, <11>)]","{<9>: [<6>, <5>],
<6>: [<2>],
<5>: [],
<2>: [<5>],
<12>: [<6>, <2>],
<0>: [<8>, <11>],
<8>: [<6>],
<11>: [<4>, <1>],
<4>: [<2>],
<1>: [],
<10>: [<1>, <3>, <0>, <7>],
<3>: [<12>, <9>],
<7>: [<8>, <6>, <0>, <13>],
<13>: [<11>]}","Node <9> is connected to nodes <6>, <5>.
Node <6> is connected to node <2>.
Node <2> is connected to node <5>.
Node <12> is connected to nodes <6>, <2>.
Node <0> is connected to nodes <8>, <11>.
Node <8> is connected to node <6>.
Node <11> is connected to nodes <4>, <1>.
Node <4> is connected to node <2>.
Node <10> is connected to nodes <1>, <3>, <0>, <7>.
Node <3> is connected to nodes <12>, <9>.
Node <7> is connected to nodes <8>, <6>, <0>, <13>.
Node <13> is connected to node <11>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>]",14,23,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<10>, <3>, <7>, <12>, <9>, <0>, <13>, <8>, <11>, <6>, <4>, <1>, <2>, <5>]","Let's solve it step by step.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <7>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <12>, <9>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<12>, <9>, <0>, <13>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<9>, <0>, <13>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <13>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<13>, <8>].
Visit node <13> and remove it from the graph.
Nodes with 0 in-degree: [<8>, <11>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<11>, <6>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <4>, <1>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <1>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <2>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
So the result of topological sorting is ","('[[<10>, <3>, <7>, <12>, <9>, <0>, <13>, <8>, <11>, <2>, <6>, <1>, <5>, <4>], [<10>, <8>, <4>, <2>, <11>, <5>, <1>, <6>, <9>, <7>, <12>, <13>, <0>, <3>], [<10>, <3>, <7>, <12>, <4>, <1>, <2>, <5>, <9>, <0>, <13>, <8>, <11>, <6>], [<10>, <3>, <7>, <12>, <9>, <0>, <13>, <8>, <11>, <6>, <4>, <1>, <2>, <5>]]',)",3,187
topological_sort,"[(<6>, <11>), (<6>, <7>), (<6>, <10>), (<6>, <12>), (<11>, <1>), (<11>, <7>), (<10>, <11>), (<10>, <8>), (<1>, <7>), (<1>, <8>), (<3>, <2>), (<3>, <0>), (<3>, <1>), (<3>, <6>), (<3>, <10>), (<2>, <12>), (<2>, <6>), (<2>, <4>), (<2>, <7>), (<0>, <6>), (<0>, <1>), (<0>, <10>), (<4>, <11>), (<4>, <12>), (<4>, <6>), (<8>, <12>), (<8>, <7>), (<5>, <1>), (<5>, <9>), (<5>, <4>), (<9>, <6>), (<9>, <10>), (<9>, <11>), (<9>, <12>), (<9>, <4>)]","{<6>: [<11>, <7>, <10>, <12>],
<11>: [<1>, <7>],
<7>: [],
<10>: [<11>, <8>],
<12>: [],
<1>: [<7>, <8>],
<3>: [<2>, <0>, <1>, <6>, <10>],
<2>: [<12>, <6>, <4>, <7>],
<0>: [<6>, <1>, <10>],
<4>: [<11>, <12>, <6>],
<8>: [<12>, <7>],
<5>: [<1>, <9>, <4>],
<9>: [<6>, <10>, <11>, <12>, <4>]}","Node <6> is connected to nodes <11>, <7>, <10>, <12>.
Node <11> is connected to nodes <1>, <7>.
Node <10> is connected to nodes <11>, <8>.
Node <1> is connected to nodes <7>, <8>.
Node <3> is connected to nodes <2>, <0>, <1>, <6>, <10>.
Node <2> is connected to nodes <12>, <6>, <4>, <7>.
Node <0> is connected to nodes <6>, <1>, <10>.
Node <4> is connected to nodes <11>, <12>, <6>.
Node <8> is connected to nodes <12>, <7>.
Node <5> is connected to nodes <1>, <9>, <4>.
Node <9> is connected to nodes <6>, <10>, <11>, <12>, <4>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>]",13,35,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<3>, <5>, <2>, <0>, <9>, <4>, <6>, <10>, <11>, <1>, <8>, <12>, <7>]","Let's solve it step by step.
Nodes with 0 in-degree: [<3>, <5>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <2>, <0>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <0>, <9>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <9>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<11>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<12>, <7>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
So the result of topological sorting is ","('[[<3>, <5>, <2>, <0>, <1>, <8>, <12>, <7>, <9>, <4>, <6>, <10>, <11>], [<3>, <5>, <2>, <0>, <9>, <4>, <6>, <10>, <11>, <1>, <8>, <12>, <7>], [<3>, <5>, <2>, <0>, <9>, <4>, <7>, <8>, <6>, <11>, <1>, <10>, <12>], [<3>, <1>, <0>, <8>, <6>, <7>, <5>, <4>, <12>, <10>, <9>, <2>, <11>]]',)",1,188
topological_sort,"[(<8>, <5>), (<8>, <1>), (<8>, <7>), (<8>, <4>), (<5>, <0>), (<7>, <4>), (<4>, <1>), (<0>, <3>), (<2>, <5>), (<2>, <4>), (<6>, <3>), (<6>, <4>), (<6>, <8>), (<6>, <7>)]","{<8>: [<5>, <1>, <7>, <4>],
<5>: [<0>],
<1>: [],
<7>: [<4>],
<4>: [<1>],
<0>: [<3>],
<3>: [],
<2>: [<5>, <4>],
<6>: [<3>, <4>, <8>, <7>]}","Node <8> is connected to nodes <5>, <1>, <7>, <4>.
Node <5> is connected to node <0>.
Node <7> is connected to node <4>.
Node <4> is connected to node <1>.
Node <0> is connected to node <3>.
Node <2> is connected to nodes <5>, <4>.
Node <6> is connected to nodes <3>, <4>, <8>, <7>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>]",9,14,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<2>, <6>, <8>, <5>, <7>, <0>, <4>, <3>, <1>]","Let's solve it step by step.
Nodes with 0 in-degree: [<2>, <6>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <7>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <0>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <4>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <3>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <1>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
So the result of topological sorting is ","('[[<2>, <6>, <8>, <4>, <3>, <1>, <5>, <7>, <0>], [<2>, <6>, <8>, <5>, <0>, <4>, <1>, <7>, <3>], [<2>, <1>, <8>, <5>, <0>, <7>, <6>, <3>, <4>], [<2>, <6>, <8>, <5>, <7>, <0>, <4>, <3>, <1>]]',)",3,189
topological_sort,"[(<4>, <1>), (<4>, <10>), (<4>, <11>), (<1>, <9>), (<1>, <11>), (<10>, <6>), (<10>, <2>), (<10>, <1>), (<10>, <0>), (<10>, <7>), (<10>, <9>), (<11>, <2>), (<7>, <9>), (<7>, <2>), (<7>, <0>), (<7>, <1>), (<0>, <9>), (<13>, <0>), (<13>, <6>), (<13>, <4>), (<6>, <2>), (<5>, <10>), (<5>, <3>), (<5>, <6>), (<5>, <1>), (<3>, <6>), (<3>, <10>), (<3>, <13>), (<3>, <1>), (<3>, <7>), (<12>, <5>), (<12>, <1>), (<12>, <0>), (<12>, <13>), (<12>, <10>), (<8>, <5>)]","{<4>: [<1>, <10>, <11>],
<1>: [<9>, <11>],
<10>: [<6>, <2>, <1>, <0>, <7>, <9>],
<11>: [<2>],
<9>: [],
<7>: [<9>, <2>, <0>, <1>],
<2>: [],
<0>: [<9>],
<13>: [<0>, <6>, <4>],
<6>: [<2>],
<5>: [<10>, <3>, <6>, <1>],
<3>: [<6>, <10>, <13>, <1>, <7>],
<12>: [<5>, <1>, <0>, <13>, <10>],
<8>: [<5>]}","Node <4> is connected to nodes <1>, <10>, <11>.
Node <1> is connected to nodes <9>, <11>.
Node <10> is connected to nodes <6>, <2>, <1>, <0>, <7>, <9>.
Node <11> is connected to node <2>.
Node <7> is connected to nodes <9>, <2>, <0>, <1>.
Node <0> is connected to node <9>.
Node <13> is connected to nodes <0>, <6>, <4>.
Node <6> is connected to node <2>.
Node <5> is connected to nodes <10>, <3>, <6>, <1>.
Node <3> is connected to nodes <6>, <10>, <13>, <1>, <7>.
Node <12> is connected to nodes <5>, <1>, <0>, <13>, <10>.
Node <8> is connected to node <5>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>]",14,36,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<12>, <8>, <5>, <3>, <13>, <4>, <10>, <6>, <7>, <0>, <1>, <9>, <11>, <2>]","Let's solve it step by step.
Nodes with 0 in-degree: [<12>, <8>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<13>].
Visit node <13> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <7>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <1>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<9>, <11>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<11>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
So the result of topological sorting is ","('[[<12>, <6>, <7>, <11>, <5>, <10>, <3>, <13>, <9>, <2>, <4>, <8>, <0>, <1>], [<12>, <8>, <5>, <3>, <13>, <4>, <10>, <6>, <7>, <0>, <1>, <9>, <11>, <2>], [<12>, <8>, <5>, <3>, <1>, <9>, <11>, <2>, <13>, <4>, <10>, <6>, <7>, <0>], [<12>, <8>, <5>, <3>, <13>, <4>, <10>, <6>, <11>, <7>, <9>, <1>, <2>, <0>]]',)",1,190
topological_sort,"[(<4>, <3>), (<4>, <2>), (<4>, <6>), (<3>, <1>), (<3>, <5>), (<3>, <0>), (<2>, <7>), (<2>, <0>), (<2>, <1>), (<6>, <3>), (<6>, <7>), (<0>, <7>), (<0>, <5>), (<7>, <5>), (<7>, <1>)]","{<4>: [<3>, <2>, <6>],
<3>: [<1>, <5>, <0>],
<2>: [<7>, <0>, <1>],
<6>: [<3>, <7>],
<1>: [],
<5>: [],
<0>: [<7>, <5>],
<7>: [<5>, <1>]}","Node <4> is connected to nodes <3>, <2>, <6>.
Node <3> is connected to nodes <1>, <5>, <0>.
Node <2> is connected to nodes <7>, <0>, <1>.
Node <6> is connected to nodes <3>, <7>.
Node <0> is connected to nodes <7>, <5>.
Node <7> is connected to nodes <5>, <1>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>]",8,15,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<4>, <2>, <6>, <3>, <0>, <7>, <5>, <1>]","Let's solve it step by step.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <6>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <1>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
So the result of topological sorting is ","('[[<4>, <2>, <6>, <3>, <0>, <5>, <7>, <1>], [<4>, <2>, <6>, <3>, <0>, <7>, <5>, <1>], [<4>, <0>, <7>, <1>, <2>, <3>, <5>, <6>], [<4>, <2>, <5>, <1>, <6>, <3>, <0>, <7>]]',)",1,191
topological_sort,"[(<7>, <8>), (<7>, <1>), (<1>, <8>), (<5>, <2>), (<5>, <4>), (<5>, <6>), (<2>, <1>), (<2>, <7>), (<4>, <7>), (<4>, <6>), (<6>, <3>), (<0>, <1>), (<3>, <2>), (<3>, <8>), (<3>, <7>), (<3>, <0>), (<3>, <1>)]","{<7>: [<8>, <1>],
<8>: [],
<1>: [<8>],
<5>: [<2>, <4>, <6>],
<2>: [<1>, <7>],
<4>: [<7>, <6>],
<6>: [<3>],
<0>: [<1>],
<3>: [<2>, <8>, <7>, <0>, <1>]}","Node <7> is connected to nodes <8>, <1>.
Node <1> is connected to node <8>.
Node <5> is connected to nodes <2>, <4>, <6>.
Node <2> is connected to nodes <1>, <7>.
Node <4> is connected to nodes <7>, <6>.
Node <6> is connected to node <3>.
Node <0> is connected to node <1>.
Node <3> is connected to nodes <2>, <8>, <7>, <0>, <1>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>]",9,17,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<5>, <4>, <6>, <3>, <2>, <0>, <7>, <1>, <8>]","Let's solve it step by step.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <0>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <7>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
So the result of topological sorting is ","('[[<5>, <0>, <4>, <1>, <6>, <7>, <8>, <3>, <2>], [<5>, <4>, <6>, <3>, <1>, <2>, <0>, <8>, <7>], [<5>, <4>, <6>, <7>, <1>, <8>, <3>, <2>, <0>], [<5>, <4>, <6>, <3>, <2>, <0>, <7>, <1>, <8>]]',)",3,192
topological_sort,"[(<7>, <6>), (<7>, <3>), (<3>, <6>), (<11>, <1>), (<11>, <6>), (<11>, <4>), (<1>, <8>), (<1>, <9>), (<4>, <0>), (<4>, <10>), (<4>, <1>), (<8>, <7>), (<8>, <2>), (<8>, <10>), (<8>, <3>), (<10>, <2>), (<5>, <2>), (<0>, <1>), (<12>, <0>)]","{<7>: [<6>, <3>],
<6>: [],
<3>: [<6>],
<11>: [<1>, <6>, <4>],
<1>: [<8>, <9>],
<4>: [<0>, <10>, <1>],
<8>: [<7>, <2>, <10>, <3>],
<9>: [],
<10>: [<2>],
<2>: [],
<5>: [<2>],
<0>: [<1>],
<12>: [<0>]}","Node <7> is connected to nodes <6>, <3>.
Node <3> is connected to node <6>.
Node <11> is connected to nodes <1>, <6>, <4>.
Node <1> is connected to nodes <8>, <9>.
Node <4> is connected to nodes <0>, <10>, <1>.
Node <8> is connected to nodes <7>, <2>, <10>, <3>.
Node <10> is connected to node <2>.
Node <5> is connected to node <2>.
Node <0> is connected to node <1>.
Node <12> is connected to node <0>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>]",13,19,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<11>, <5>, <12>, <4>, <0>, <1>, <8>, <9>, <7>, <10>, <3>, <2>, <6>]","Let's solve it step by step.
Nodes with 0 in-degree: [<11>, <5>, <12>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <12>, <4>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<12>, <4>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<8>, <9>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<9>, <7>, <10>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <10>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<10>, <3>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <2>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <6>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
So the result of topological sorting is ","('[[<11>, <5>, <12>, <4>, <0>, <1>, <7>, <9>, <3>, <8>, <10>, <6>, <2>], [<11>, <5>, <12>, <4>, <0>, <1>, <8>, <9>, <7>, <10>, <3>, <2>, <6>], [<11>, <5>, <12>, <4>, <10>, <3>, <2>, <6>, <0>, <1>, <8>, <9>, <7>], [<11>, <6>, <9>, <10>, <12>, <5>, <8>, <2>, <4>, <7>, <1>, <0>, <3>]]',)",1,193
topological_sort,"[(<8>, <6>), (<6>, <10>), (<6>, <7>), (<7>, <4>), (<5>, <2>), (<2>, <3>), (<2>, <1>), (<3>, <9>), (<3>, <10>), (<1>, <9>), (<1>, <10>), (<0>, <2>), (<0>, <5>), (<0>, <7>), (<0>, <8>), (<4>, <3>), (<4>, <2>), (<4>, <1>)]","{<8>: [<6>],
<6>: [<10>, <7>],
<10>: [],
<7>: [<4>],
<5>: [<2>],
<2>: [<3>, <1>],
<3>: [<9>, <10>],
<1>: [<9>, <10>],
<0>: [<2>, <5>, <7>, <8>],
<9>: [],
<4>: [<3>, <2>, <1>]}","Node <8> is connected to node <6>.
Node <6> is connected to nodes <10>, <7>.
Node <7> is connected to node <4>.
Node <5> is connected to node <2>.
Node <2> is connected to nodes <3>, <1>.
Node <3> is connected to nodes <9>, <10>.
Node <1> is connected to nodes <9>, <10>.
Node <0> is connected to nodes <2>, <5>, <7>, <8>.
Node <4> is connected to nodes <3>, <2>, <1>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>]",11,18,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<0>, <5>, <8>, <6>, <7>, <4>, <2>, <3>, <1>, <9>, <10>]","Let's solve it step by step.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <8>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <1>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<9>, <10>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
So the result of topological sorting is ","('[[<0>, <5>, <8>, <6>, <7>, <4>, <2>, <3>, <1>, <9>, <10>], [<0>, <3>, <4>, <7>, <2>, <10>, <9>, <5>, <8>, <1>, <6>], [<0>, <5>, <8>, <6>, <7>, <1>, <9>, <3>, <4>, <2>, <10>], [<0>, <5>, <8>, <1>, <9>, <10>, <6>, <7>, <4>, <2>, <3>]]',)",0,194
topological_sort,"[(<0>, <4>), (<0>, <3>), (<0>, <7>), (<0>, <8>), (<0>, <1>), (<4>, <6>), (<4>, <5>), (<4>, <1>), (<3>, <9>), (<3>, <4>), (<3>, <1>), (<3>, <8>), (<7>, <5>), (<7>, <9>), (<7>, <8>), (<1>, <8>), (<6>, <1>), (<6>, <8>), (<2>, <9>), (<2>, <0>), (<2>, <7>), (<2>, <8>), (<2>, <1>), (<9>, <1>), (<9>, <6>), (<9>, <5>)]","{<0>: [<4>, <3>, <7>, <8>, <1>],
<4>: [<6>, <5>, <1>],
<3>: [<9>, <4>, <1>, <8>],
<7>: [<5>, <9>, <8>],
<8>: [],
<1>: [<8>],
<6>: [<1>, <8>],
<5>: [],
<2>: [<9>, <0>, <7>, <8>, <1>],
<9>: [<1>, <6>, <5>]}","Node <0> is connected to nodes <4>, <3>, <7>, <8>, <1>.
Node <4> is connected to nodes <6>, <5>, <1>.
Node <3> is connected to nodes <9>, <4>, <1>, <8>.
Node <7> is connected to nodes <5>, <9>, <8>.
Node <1> is connected to node <8>.
Node <6> is connected to nodes <1>, <8>.
Node <2> is connected to nodes <9>, <0>, <7>, <8>, <1>.
Node <9> is connected to nodes <1>, <6>, <5>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>]",10,26,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<2>, <0>, <3>, <7>, <4>, <9>, <6>, <5>, <1>, <8>]","Let's solve it step by step.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <7>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <4>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <9>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <5>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <1>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
So the result of topological sorting is ","('[[<2>, <0>, <3>, <5>, <1>, <8>, <7>, <4>, <9>, <6>], [<2>, <4>, <8>, <1>, <5>, <9>, <0>, <6>, <7>, <3>], [<2>, <0>, <3>, <7>, <4>, <9>, <6>, <5>, <1>, <8>], [<2>, <0>, <3>, <7>, <4>, <9>, <5>, <6>, <1>, <8>]]',)",2,195
topological_sort,"[(<11>, <4>), (<11>, <5>), (<5>, <4>), (<0>, <12>), (<0>, <8>), (<0>, <1>), (<0>, <4>), (<12>, <4>), (<12>, <8>), (<8>, <11>), (<8>, <4>), (<1>, <12>), (<2>, <9>), (<2>, <11>), (<2>, <3>), (<9>, <6>), (<9>, <0>), (<9>, <10>), (<9>, <1>), (<9>, <11>), (<3>, <1>), (<3>, <11>), (<3>, <12>), (<6>, <12>), (<6>, <4>), (<6>, <0>), (<6>, <11>), (<10>, <12>), (<10>, <3>), (<10>, <6>), (<10>, <5>), (<10>, <8>), (<7>, <9>), (<7>, <8>), (<7>, <11>), (<7>, <0>), (<7>, <1>), (<7>, <10>), (<7>, <4>)]","{<11>: [<4>, <5>],
<4>: [],
<5>: [<4>],
<0>: [<12>, <8>, <1>, <4>],
<12>: [<4>, <8>],
<8>: [<11>, <4>],
<1>: [<12>],
<2>: [<9>, <11>, <3>],
<9>: [<6>, <0>, <10>, <1>, <11>],
<3>: [<1>, <11>, <12>],
<6>: [<12>, <4>, <0>, <11>],
<10>: [<12>, <3>, <6>, <5>, <8>],
<7>: [<9>, <8>, <11>, <0>, <1>, <10>, <4>]}","Node <11> is connected to nodes <4>, <5>.
Node <5> is connected to node <4>.
Node <0> is connected to nodes <12>, <8>, <1>, <4>.
Node <12> is connected to nodes <4>, <8>.
Node <8> is connected to nodes <11>, <4>.
Node <1> is connected to node <12>.
Node <2> is connected to nodes <9>, <11>, <3>.
Node <9> is connected to nodes <6>, <0>, <10>, <1>, <11>.
Node <3> is connected to nodes <1>, <11>, <12>.
Node <6> is connected to nodes <12>, <4>, <0>, <11>.
Node <10> is connected to nodes <12>, <3>, <6>, <5>, <8>.
Node <7> is connected to nodes <9>, <8>, <11>, <0>, <1>, <10>, <4>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>]",13,39,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<2>, <7>, <9>, <10>, <3>, <6>, <0>, <1>, <12>, <8>, <11>, <5>, <4>]","Let's solve it step by step.
Nodes with 0 in-degree: [<2>, <7>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <6>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<12>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<11>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
So the result of topological sorting is ","('[[<2>, <7>, <9>, <10>, <8>, <11>, <5>, <4>, <3>, <6>, <0>, <1>, <12>], [<2>, <7>, <9>, <10>, <3>, <6>, <0>, <1>, <12>, <8>, <11>, <5>, <4>], [<2>, <1>, <8>, <9>, <10>, <0>, <12>, <5>, <11>, <4>, <7>, <3>, <6>], [<2>, <7>, <9>, <10>, <3>, <6>, <1>, <12>, <5>, <11>, <8>, <4>, <0>]]',)",1,196
topological_sort,"[(<10>, <1>), (<1>, <11>), (<8>, <9>), (<8>, <4>), (<8>, <12>), (<9>, <10>), (<9>, <0>), (<4>, <7>), (<4>, <9>), (<12>, <9>), (<12>, <7>), (<0>, <11>), (<6>, <1>), (<6>, <5>), (<6>, <7>), (<5>, <1>), (<5>, <0>), (<7>, <11>), (<7>, <10>), (<7>, <0>), (<7>, <1>), (<13>, <10>), (<13>, <2>), (<13>, <11>), (<13>, <5>), (<13>, <3>), (<13>, <9>), (<2>, <12>), (<2>, <5>), (<2>, <6>), (<2>, <3>), (<3>, <11>), (<3>, <4>), (<3>, <8>)]","{<10>: [<1>],
<1>: [<11>],
<11>: [],
<8>: [<9>, <4>, <12>],
<9>: [<10>, <0>],
<4>: [<7>, <9>],
<12>: [<9>, <7>],
<0>: [<11>],
<6>: [<1>, <5>, <7>],
<5>: [<1>, <0>],
<7>: [<11>, <10>, <0>, <1>],
<13>: [<10>, <2>, <11>, <5>, <3>, <9>],
<2>: [<12>, <5>, <6>, <3>],
<3>: [<11>, <4>, <8>]}","Node <10> is connected to node <1>.
Node <1> is connected to node <11>.
Node <8> is connected to nodes <9>, <4>, <12>.
Node <9> is connected to nodes <10>, <0>.
Node <4> is connected to nodes <7>, <9>.
Node <12> is connected to nodes <9>, <7>.
Node <0> is connected to node <11>.
Node <6> is connected to nodes <1>, <5>, <7>.
Node <5> is connected to nodes <1>, <0>.
Node <7> is connected to nodes <11>, <10>, <0>, <1>.
Node <13> is connected to nodes <10>, <2>, <11>, <5>, <3>, <9>.
Node <2> is connected to nodes <12>, <5>, <6>, <3>.
Node <3> is connected to nodes <11>, <4>, <8>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>]",14,34,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<13>, <2>, <6>, <3>, <5>, <8>, <4>, <12>, <9>, <7>, <10>, <0>, <1>, <11>]","Let's solve it step by step.
Nodes with 0 in-degree: [<13>].
Visit node <13> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <3>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <5>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <8>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <12>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<12>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<9>, <7>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<10>, <0>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <1>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<11>].
Visit node <11> and remove it from the graph.
So the result of topological sorting is ","('[[<13>, <2>, <6>, <3>, <10>, <0>, <1>, <11>, <5>, <8>, <4>, <12>, <9>, <7>], [<13>, <1>, <7>, <6>, <3>, <11>, <5>, <9>, <0>, <8>, <10>, <4>, <12>, <2>], [<13>, <2>, <6>, <3>, <5>, <8>, <4>, <12>, <9>, <7>, <10>, <0>, <1>, <11>], [<13>, <2>, <6>, <3>, <5>, <8>, <4>, <10>, <7>, <11>, <12>, <9>, <0>, <1>]]',)",2,197
topological_sort,"[(<2>, <3>), (<2>, <6>), (<3>, <1>), (<3>, <0>), (<3>, <5>), (<1>, <7>), (<0>, <7>), (<5>, <6>), (<5>, <1>), (<7>, <6>), (<4>, <5>), (<4>, <0>)]","{<2>: [<3>, <6>],
<3>: [<1>, <0>, <5>],
<6>: [],
<1>: [<7>],
<0>: [<7>],
<5>: [<6>, <1>],
<7>: [<6>],
<4>: [<5>, <0>]}","Node <2> is connected to nodes <3>, <6>.
Node <3> is connected to nodes <1>, <0>, <5>.
Node <1> is connected to node <7>.
Node <0> is connected to node <7>.
Node <5> is connected to nodes <6>, <1>.
Node <7> is connected to node <6>.
Node <4> is connected to nodes <5>, <0>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>]",8,12,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<2>, <4>, <3>, <0>, <5>, <1>, <7>, <6>]","Let's solve it step by step.
Nodes with 0 in-degree: [<2>, <4>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <3>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <5>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
So the result of topological sorting is ","('[[<2>, <4>, <3>, <0>, <1>, <7>, <5>, <6>], [<2>, <3>, <7>, <5>, <0>, <6>, <1>, <4>], [<2>, <4>, <7>, <6>, <3>, <0>, <5>, <1>], [<2>, <4>, <3>, <0>, <5>, <1>, <7>, <6>]]',)",3,198
topological_sort,"[(<9>, <2>), (<9>, <1>), (<1>, <2>), (<4>, <8>), (<4>, <0>), (<8>, <0>), (<8>, <7>), (<8>, <3>), (<0>, <7>), (<0>, <1>), (<7>, <1>), (<7>, <2>), (<3>, <7>), (<3>, <9>), (<6>, <2>), (<6>, <7>), (<6>, <8>), (<6>, <3>), (<5>, <4>), (<5>, <1>)]","{<9>: [<2>, <1>],
<2>: [],
<1>: [<2>],
<4>: [<8>, <0>],
<8>: [<0>, <7>, <3>],
<0>: [<7>, <1>],
<7>: [<1>, <2>],
<3>: [<7>, <9>],
<6>: [<2>, <7>, <8>, <3>],
<5>: [<4>, <1>]}","Node <9> is connected to nodes <2>, <1>.
Node <1> is connected to node <2>.
Node <4> is connected to nodes <8>, <0>.
Node <8> is connected to nodes <0>, <7>, <3>.
Node <0> is connected to nodes <7>, <1>.
Node <7> is connected to nodes <1>, <2>.
Node <3> is connected to nodes <7>, <9>.
Node <6> is connected to nodes <2>, <7>, <8>, <3>.
Node <5> is connected to nodes <4>, <1>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>]",10,20,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<6>, <5>, <4>, <8>, <0>, <3>, <7>, <9>, <1>, <2>]","Let's solve it step by step.
Nodes with 0 in-degree: [<6>, <5>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <3>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <9>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
So the result of topological sorting is ","('[[<6>, <5>, <4>, <8>, <0>, <2>, <9>, <3>, <7>, <1>], [<6>, <5>, <4>, <8>, <0>, <3>, <7>, <9>, <1>, <2>], [<6>, <4>, <3>, <2>, <7>, <8>, <9>, <0>, <5>, <1>], [<6>, <5>, <4>, <9>, <1>, <2>, <8>, <0>, <3>, <7>]]',)",1,199
topological_sort,"[(<1>, <7>), (<1>, <6>), (<7>, <3>), (<6>, <7>), (<6>, <5>), (<0>, <7>), (<0>, <4>), (<0>, <3>), (<0>, <2>), (<0>, <6>), (<4>, <1>), (<4>, <3>)]","{<1>: [<7>, <6>],
<7>: [<3>],
<6>: [<7>, <5>],
<3>: [],
<0>: [<7>, <4>, <3>, <2>, <6>],
<4>: [<1>, <3>],
<2>: [],
<5>: []}","Node <1> is connected to nodes <7>, <6>.
Node <7> is connected to node <3>.
Node <6> is connected to nodes <7>, <5>.
Node <0> is connected to nodes <7>, <4>, <3>, <2>, <6>.
Node <4> is connected to nodes <1>, <3>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>]",8,12,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<0>, <4>, <2>, <1>, <6>, <7>, <5>, <3>]","Let's solve it step by step.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <2>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <1>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <5>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <3>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
So the result of topological sorting is ","('[[<0>, <4>, <2>, <1>, <6>, <7>, <5>, <3>], [<0>, <4>, <5>, <3>, <2>, <1>, <6>, <7>], [<0>, <2>, <3>, <6>, <1>, <4>, <5>, <7>], [<0>, <4>, <2>, <1>, <3>, <7>, <5>, <6>]]',)",0,200
topological_sort,"[(<9>, <6>), (<6>, <1>), (<7>, <3>), (<7>, <5>), (<7>, <1>), (<3>, <1>), (<3>, <6>), (<3>, <9>), (<5>, <6>), (<8>, <7>), (<8>, <5>), (<8>, <9>), (<8>, <3>), (<4>, <0>), (<4>, <9>), (<4>, <6>), (<4>, <5>), (<4>, <3>), (<4>, <1>), (<0>, <6>), (<0>, <8>), (<0>, <1>), (<0>, <9>), (<2>, <9>), (<2>, <0>), (<2>, <4>)]","{<9>: [<6>],
<6>: [<1>],
<1>: [],
<7>: [<3>, <5>, <1>],
<3>: [<1>, <6>, <9>],
<5>: [<6>],
<8>: [<7>, <5>, <9>, <3>],
<4>: [<0>, <9>, <6>, <5>, <3>, <1>],
<0>: [<6>, <8>, <1>, <9>],
<2>: [<9>, <0>, <4>]}","Node <9> is connected to node <6>.
Node <6> is connected to node <1>.
Node <7> is connected to nodes <3>, <5>, <1>.
Node <3> is connected to nodes <1>, <6>, <9>.
Node <5> is connected to node <6>.
Node <8> is connected to nodes <7>, <5>, <9>, <3>.
Node <4> is connected to nodes <0>, <9>, <6>, <5>, <3>, <1>.
Node <0> is connected to nodes <6>, <8>, <1>, <9>.
Node <2> is connected to nodes <9>, <0>, <4>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>]",10,26,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<2>, <4>, <0>, <8>, <7>, <3>, <5>, <9>, <6>, <1>]","Let's solve it step by step.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <5>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <9>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
So the result of topological sorting is ","('[[<2>, <4>, <0>, <8>, <7>, <5>, <3>, <1>, <9>, <6>], [<2>, <6>, <1>, <3>, <9>, <0>, <5>, <7>, <4>, <8>], [<2>, <4>, <0>, <8>, <7>, <3>, <5>, <9>, <6>, <1>], [<2>, <4>, <0>, <9>, <6>, <1>, <8>, <7>, <3>, <5>]]',)",2,201
topological_sort,"[(<10>, <5>), (<5>, <7>), (<7>, <6>), (<6>, <0>), (<0>, <4>), (<0>, <9>), (<0>, <2>), (<9>, <4>), (<9>, <8>), (<9>, <1>), (<2>, <9>), (<3>, <0>), (<3>, <9>)]","{<10>: [<5>],
<5>: [<7>],
<7>: [<6>],
<6>: [<0>],
<0>: [<4>, <9>, <2>],
<4>: [],
<9>: [<4>, <8>, <1>],
<2>: [<9>],
<8>: [],
<1>: [],
<3>: [<0>, <9>]}","Node <10> is connected to node <5>.
Node <5> is connected to node <7>.
Node <7> is connected to node <6>.
Node <6> is connected to node <0>.
Node <0> is connected to nodes <4>, <9>, <2>.
Node <9> is connected to nodes <4>, <8>, <1>.
Node <2> is connected to node <9>.
Node <3> is connected to nodes <0>, <9>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>]",11,13,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<10>, <3>, <5>, <7>, <6>, <0>, <2>, <9>, <4>, <8>, <1>]","Let's solve it step by step.
Nodes with 0 in-degree: [<10>, <3>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <5>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <8>, <1>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<8>, <1>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
So the result of topological sorting is ","('[[<10>, <7>, <1>, <0>, <5>, <8>, <2>, <6>, <9>, <3>, <4>], [<10>, <3>, <5>, <7>, <6>, <0>, <2>, <9>, <4>, <8>, <1>], [<10>, <3>, <5>, <7>, <6>, <0>, <2>, <8>, <9>, <1>, <4>], [<10>, <3>, <5>, <4>, <8>, <1>, <7>, <6>, <0>, <2>, <9>]]',)",1,202
topological_sort,"[(<7>, <5>), (<5>, <12>), (<12>, <4>), (<14>, <4>), (<14>, <5>), (<4>, <0>), (<0>, <9>), (<13>, <12>), (<13>, <7>), (<6>, <13>), (<3>, <13>), (<3>, <14>), (<11>, <8>), (<8>, <14>), (<8>, <6>), (<10>, <12>), (<10>, <5>), (<2>, <1>)]","{<7>: [<5>],
<5>: [<12>],
<12>: [<4>],
<14>: [<4>, <5>],
<4>: [<0>],
<0>: [<9>],
<13>: [<12>, <7>],
<9>: [],
<6>: [<13>],
<3>: [<13>, <14>],
<11>: [<8>],
<8>: [<14>, <6>],
<10>: [<12>, <5>],
<2>: [<1>],
<1>: []}","Node <7> is connected to node <5>.
Node <5> is connected to node <12>.
Node <12> is connected to node <4>.
Node <14> is connected to nodes <4>, <5>.
Node <4> is connected to node <0>.
Node <0> is connected to node <9>.
Node <13> is connected to nodes <12>, <7>.
Node <6> is connected to node <13>.
Node <3> is connected to nodes <13>, <14>.
Node <11> is connected to node <8>.
Node <8> is connected to nodes <14>, <6>.
Node <10> is connected to nodes <12>, <5>.
Node <2> is connected to node <1>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>, <14>]",15,18,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<3>, <11>, <10>, <2>, <8>, <1>, <14>, <6>, <13>, <7>, <5>, <12>, <4>, <0>, <9>]","Let's solve it step by step.
Nodes with 0 in-degree: [<3>, <11>, <10>, <2>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<11>, <10>, <2>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<10>, <2>, <8>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <8>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<8>, <1>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <14>, <6>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<14>, <6>].
Visit node <14> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<13>].
Visit node <13> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<12>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
So the result of topological sorting is ","('[[<3>, <11>, <10>, <2>, <8>, <5>, <12>, <4>, <0>, <9>, <1>, <14>, <6>, <13>, <7>], [<3>, <11>, <10>, <2>, <8>, <1>, <14>, <6>, <13>, <7>, <5>, <12>, <4>, <0>, <9>], [<3>, <11>, <10>, <2>, <8>, <1>, <14>, <9>, <4>, <13>, <12>, <0>, <7>, <6>, <5>], [<3>, <13>, <10>, <1>, <4>, <2>, <9>, <0>, <6>, <7>, <12>, <5>, <11>, <14>, <8>]]',)",1,203
topological_sort,"[(<2>, <4>), (<2>, <8>), (<2>, <6>), (<2>, <0>), (<4>, <3>), (<4>, <1>), (<8>, <1>), (<8>, <4>), (<6>, <4>), (<0>, <7>), (<0>, <4>), (<3>, <7>), (<3>, <9>), (<1>, <3>), (<5>, <6>), (<5>, <0>), (<5>, <3>), (<5>, <8>)]","{<2>: [<4>, <8>, <6>, <0>],
<4>: [<3>, <1>],
<8>: [<1>, <4>],
<6>: [<4>],
<0>: [<7>, <4>],
<3>: [<7>, <9>],
<1>: [<3>],
<7>: [],
<9>: [],
<5>: [<6>, <0>, <3>, <8>]}","Node <2> is connected to nodes <4>, <8>, <6>, <0>.
Node <4> is connected to nodes <3>, <1>.
Node <8> is connected to nodes <1>, <4>.
Node <6> is connected to node <4>.
Node <0> is connected to nodes <7>, <4>.
Node <3> is connected to nodes <7>, <9>.
Node <1> is connected to node <3>.
Node <5> is connected to nodes <6>, <0>, <3>, <8>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>]",10,18,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<2>, <5>, <6>, <0>, <8>, <4>, <1>, <3>, <7>, <9>]","Let's solve it step by step.
Nodes with 0 in-degree: [<2>, <5>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <0>, <8>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <8>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <9>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
So the result of topological sorting is ","('[[<2>, <5>, <6>, <0>, <8>, <4>, <1>, <3>, <7>, <9>], [<2>, <5>, <6>, <3>, <7>, <9>, <0>, <8>, <4>, <1>], [<2>, <5>, <6>, <0>, <8>, <7>, <1>, <9>, <4>, <3>], [<2>, <8>, <4>, <5>, <3>, <0>, <6>, <1>, <9>, <7>]]',)",0,204
topological_sort,"[(<0>, <5>), (<0>, <4>), (<0>, <1>), (<0>, <7>), (<0>, <3>), (<7>, <1>), (<7>, <5>), (<7>, <4>), (<7>, <6>), (<3>, <5>), (<3>, <1>), (<3>, <4>), (<3>, <8>), (<8>, <4>), (<6>, <1>), (<6>, <8>), (<2>, <0>), (<2>, <6>), (<2>, <7>)]","{<0>: [<5>, <4>, <1>, <7>, <3>],
<5>: [],
<4>: [],
<1>: [],
<7>: [<1>, <5>, <4>, <6>],
<3>: [<5>, <1>, <4>, <8>],
<8>: [<4>],
<6>: [<1>, <8>],
<2>: [<0>, <6>, <7>]}","Node <0> is connected to nodes <5>, <4>, <1>, <7>, <3>.
Node <7> is connected to nodes <1>, <5>, <4>, <6>.
Node <3> is connected to nodes <5>, <1>, <4>, <8>.
Node <8> is connected to node <4>.
Node <6> is connected to nodes <1>, <8>.
Node <2> is connected to nodes <0>, <6>, <7>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>]",9,19,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<2>, <0>, <7>, <3>, <6>, <5>, <1>, <8>, <4>]","Let's solve it step by step.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <3>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <6>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <5>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <1>, <8>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <8>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
So the result of topological sorting is ","('[[<2>, <0>, <7>, <3>, <6>, <5>, <1>, <8>, <4>], [<2>, <0>, <7>, <3>, <1>, <8>, <4>, <5>, <6>], [<2>, <8>, <0>, <5>, <4>, <3>, <7>, <1>, <6>], [<2>, <0>, <7>, <1>, <8>, <4>, <3>, <6>, <5>]]',)",0,205
topological_sort,"[(<8>, <4>), (<6>, <5>), (<6>, <4>), (<6>, <10>), (<5>, <3>), (<5>, <7>), (<3>, <4>), (<3>, <10>), (<1>, <8>), (<1>, <5>), (<2>, <7>), (<2>, <1>), (<2>, <10>), (<9>, <2>), (<9>, <6>), (<0>, <4>)]","{<8>: [<4>],
<4>: [],
<6>: [<5>, <4>, <10>],
<5>: [<3>, <7>],
<10>: [],
<3>: [<4>, <10>],
<7>: [],
<1>: [<8>, <5>],
<2>: [<7>, <1>, <10>],
<9>: [<2>, <6>],
<0>: [<4>]}","Node <8> is connected to node <4>.
Node <6> is connected to nodes <5>, <4>, <10>.
Node <5> is connected to nodes <3>, <7>.
Node <3> is connected to nodes <4>, <10>.
Node <1> is connected to nodes <8>, <5>.
Node <2> is connected to nodes <7>, <1>, <10>.
Node <9> is connected to nodes <2>, <6>.
Node <0> is connected to node <4>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>]",11,16,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<9>, <0>, <2>, <6>, <1>, <8>, <5>, <3>, <7>, <4>, <10>]","Let's solve it step by step.
Nodes with 0 in-degree: [<9>, <0>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <2>, <6>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <6>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <1>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<8>, <5>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <7>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <4>, <10>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <10>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
So the result of topological sorting is ","('[[<9>, <0>, <4>, <2>, <5>, <7>, <1>, <8>, <10>, <3>, <6>], [<9>, <0>, <2>, <6>, <1>, <5>, <7>, <8>, <10>, <4>, <3>], [<9>, <0>, <2>, <7>, <4>, <10>, <6>, <1>, <8>, <5>, <3>], [<9>, <0>, <2>, <6>, <1>, <8>, <5>, <3>, <7>, <4>, <10>]]',)",3,206
topological_sort,"[(<1>, <7>), (<1>, <8>), (<1>, <5>), (<7>, <2>), (<7>, <3>), (<8>, <5>), (<8>, <7>), (<5>, <2>), (<3>, <2>), (<3>, <5>), (<0>, <1>), (<0>, <4>), (<4>, <8>), (<4>, <2>), (<4>, <7>), (<4>, <3>), (<6>, <0>), (<6>, <5>), (<6>, <2>), (<6>, <8>), (<6>, <7>)]","{<1>: [<7>, <8>, <5>],
<7>: [<2>, <3>],
<8>: [<5>, <7>],
<5>: [<2>],
<2>: [],
<3>: [<2>, <5>],
<0>: [<1>, <4>],
<4>: [<8>, <2>, <7>, <3>],
<6>: [<0>, <5>, <2>, <8>, <7>]}","Node <1> is connected to nodes <7>, <8>, <5>.
Node <7> is connected to nodes <2>, <3>.
Node <8> is connected to nodes <5>, <7>.
Node <5> is connected to node <2>.
Node <3> is connected to nodes <2>, <5>.
Node <0> is connected to nodes <1>, <4>.
Node <4> is connected to nodes <8>, <2>, <7>, <3>.
Node <6> is connected to nodes <0>, <5>, <2>, <8>, <7>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>]",9,21,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<6>, <0>, <1>, <4>, <8>, <7>, <3>, <5>, <2>]","Let's solve it step by step.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <4>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
So the result of topological sorting is ","('[[<6>, <0>, <1>, <4>, <8>, <7>, <3>, <5>, <2>], [<6>, <0>, <1>, <4>, <5>, <7>, <8>, <3>, <2>], [<6>, <0>, <1>, <3>, <5>, <2>, <4>, <8>, <7>], [<6>, <1>, <0>, <3>, <2>, <5>, <4>, <7>, <8>]]',)",0,207
topological_sort,"[(<7>, <1>), (<7>, <12>), (<7>, <8>), (<7>, <3>), (<1>, <3>), (<1>, <12>), (<1>, <6>), (<12>, <3>), (<12>, <14>), (<12>, <11>), (<8>, <2>), (<8>, <11>), (<3>, <14>), (<6>, <3>), (<6>, <11>), (<6>, <14>), (<6>, <12>), (<4>, <6>), (<4>, <2>), (<4>, <7>), (<4>, <13>), (<4>, <3>), (<2>, <13>), (<2>, <14>), (<2>, <3>), (<2>, <11>), (<2>, <1>), (<14>, <13>), (<14>, <11>), (<5>, <4>), (<5>, <9>), (<5>, <0>), (<5>, <3>), (<5>, <10>), (<5>, <7>), (<9>, <3>), (<9>, <7>), (<9>, <1>), (<9>, <4>), (<0>, <4>), (<0>, <13>), (<10>, <6>), (<10>, <13>), (<10>, <3>), (<10>, <2>), (<10>, <12>), (<10>, <7>), (<10>, <1>)]","{<7>: [<1>, <12>, <8>, <3>],
<1>: [<3>, <12>, <6>],
<12>: [<3>, <14>, <11>],
<8>: [<2>, <11>],
<3>: [<14>],
<6>: [<3>, <11>, <14>, <12>],
<4>: [<6>, <2>, <7>, <13>, <3>],
<2>: [<13>, <14>, <3>, <11>, <1>],
<13>: [],
<11>: [],
<14>: [<13>, <11>],
<5>: [<4>, <9>, <0>, <3>, <10>, <7>],
<9>: [<3>, <7>, <1>, <4>],
<0>: [<4>, <13>],
<10>: [<6>, <13>, <3>, <2>, <12>, <7>, <1>]}","Node <7> is connected to nodes <1>, <12>, <8>, <3>.
Node <1> is connected to nodes <3>, <12>, <6>.
Node <12> is connected to nodes <3>, <14>, <11>.
Node <8> is connected to nodes <2>, <11>.
Node <3> is connected to node <14>.
Node <6> is connected to nodes <3>, <11>, <14>, <12>.
Node <4> is connected to nodes <6>, <2>, <7>, <13>, <3>.
Node <2> is connected to nodes <13>, <14>, <3>, <11>, <1>.
Node <14> is connected to nodes <13>, <11>.
Node <5> is connected to nodes <4>, <9>, <0>, <3>, <10>, <7>.
Node <9> is connected to nodes <3>, <7>, <1>, <4>.
Node <0> is connected to nodes <4>, <13>.
Node <10> is connected to nodes <6>, <13>, <3>, <2>, <12>, <7>, <1>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>, <14>]",15,48,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<5>, <9>, <0>, <10>, <4>, <7>, <8>, <2>, <1>, <6>, <12>, <3>, <14>, <13>, <11>]","Let's solve it step by step.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<9>, <0>, <10>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <10>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<10>, <4>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<12>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<14>].
Visit node <14> and remove it from the graph.
Nodes with 0 in-degree: [<13>, <11>].
Visit node <13> and remove it from the graph.
Nodes with 0 in-degree: [<11>].
Visit node <11> and remove it from the graph.
So the result of topological sorting is ","('[[<5>, <9>, <0>, <10>, <4>, <12>, <3>, <14>, <13>, <11>, <7>, <8>, <2>, <1>, <6>], [<5>, <9>, <0>, <10>, <4>, <7>, <8>, <2>, <1>, <6>, <12>, <3>, <14>, <13>, <11>], [<5>, <9>, <0>, <10>, <4>, <7>, <8>, <6>, <11>, <3>, <12>, <2>, <14>, <1>, <13>], [<5>, <8>, <4>, <6>, <1>, <2>, <7>, <13>, <10>, <3>, <14>, <9>, <0>, <12>, <11>]]',)",1,208
topological_sort,"[(<6>, <1>), (<6>, <3>), (<6>, <0>), (<3>, <5>), (<3>, <7>), (<5>, <7>), (<7>, <0>), (<2>, <6>), (<2>, <5>), (<2>, <0>), (<2>, <1>), (<2>, <4>), (<2>, <3>), (<4>, <6>), (<4>, <0>), (<4>, <5>)]","{<6>: [<1>, <3>, <0>],
<1>: [],
<3>: [<5>, <7>],
<0>: [],
<5>: [<7>],
<7>: [<0>],
<2>: [<6>, <5>, <0>, <1>, <4>, <3>],
<4>: [<6>, <0>, <5>]}","Node <6> is connected to nodes <1>, <3>, <0>.
Node <3> is connected to nodes <5>, <7>.
Node <5> is connected to node <7>.
Node <7> is connected to node <0>.
Node <2> is connected to nodes <6>, <5>, <0>, <1>, <4>, <3>.
Node <4> is connected to nodes <6>, <0>, <5>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>]",8,16,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<2>, <4>, <6>, <1>, <3>, <5>, <7>, <0>]","Let's solve it step by step.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <3>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
So the result of topological sorting is ","('[[<2>, <0>, <1>, <3>, <5>, <4>, <6>, <7>], [<2>, <4>, <6>, <1>, <3>, <5>, <7>, <0>], [<2>, <4>, <7>, <0>, <6>, <1>, <3>, <5>], [<2>, <4>, <6>, <1>, <7>, <5>, <3>, <0>]]',)",1,209
topological_sort,"[(<3>, <5>), (<3>, <11>), (<11>, <2>), (<4>, <6>), (<6>, <10>), (<6>, <5>), (<6>, <3>), (<6>, <0>), (<6>, <11>), (<6>, <9>), (<10>, <9>), (<0>, <3>), (<0>, <10>), (<9>, <3>), (<9>, <1>), (<9>, <5>), (<12>, <5>), (<12>, <10>), (<12>, <3>), (<12>, <6>), (<12>, <11>), (<12>, <8>), (<8>, <3>), (<8>, <1>), (<7>, <2>), (<7>, <4>), (<7>, <1>), (<1>, <5>)]","{<3>: [<5>, <11>],
<5>: [],
<11>: [<2>],
<4>: [<6>],
<6>: [<10>, <5>, <3>, <0>, <11>, <9>],
<10>: [<9>],
<0>: [<3>, <10>],
<9>: [<3>, <1>, <5>],
<12>: [<5>, <10>, <3>, <6>, <11>, <8>],
<8>: [<3>, <1>],
<7>: [<2>, <4>, <1>],
<2>: [],
<1>: [<5>]}","Node <3> is connected to nodes <5>, <11>.
Node <11> is connected to node <2>.
Node <4> is connected to node <6>.
Node <6> is connected to nodes <10>, <5>, <3>, <0>, <11>, <9>.
Node <10> is connected to node <9>.
Node <0> is connected to nodes <3>, <10>.
Node <9> is connected to nodes <3>, <1>, <5>.
Node <12> is connected to nodes <5>, <10>, <3>, <6>, <11>, <8>.
Node <8> is connected to nodes <3>, <1>.
Node <7> is connected to nodes <2>, <4>, <1>.
Node <1> is connected to node <5>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>]",13,28,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<12>, <7>, <8>, <4>, <6>, <0>, <10>, <9>, <3>, <1>, <11>, <5>, <2>]","Let's solve it step by step.
Nodes with 0 in-degree: [<12>, <7>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <8>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<8>, <4>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <1>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <11>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<11>, <5>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <2>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
So the result of topological sorting is ","('[[<12>, <7>, <8>, <4>, <1>, <11>, <5>, <2>, <6>, <0>, <10>, <9>, <3>], [<12>, <7>, <8>, <4>, <6>, <0>, <5>, <1>, <9>, <10>, <3>, <11>, <2>], [<12>, <7>, <8>, <4>, <6>, <0>, <10>, <9>, <3>, <1>, <11>, <5>, <2>], [<12>, <8>, <2>, <0>, <9>, <1>, <5>, <10>, <6>, <3>, <4>, <11>, <7>]]',)",2,210
topological_sort,"[(<6>, <10>), (<6>, <8>), (<6>, <9>), (<10>, <12>), (<8>, <2>), (<9>, <3>), (<9>, <12>), (<9>, <10>), (<9>, <2>), (<9>, <5>), (<3>, <1>), (<3>, <5>), (<2>, <5>), (<2>, <1>), (<2>, <3>), (<1>, <11>), (<1>, <13>), (<13>, <10>), (<4>, <0>), (<4>, <12>), (<4>, <6>), (<4>, <1>), (<0>, <7>), (<0>, <6>), (<0>, <8>), (<7>, <3>), (<7>, <8>), (<7>, <12>), (<14>, <9>), (<14>, <0>), (<14>, <7>), (<14>, <6>), (<14>, <1>)]","{<6>: [<10>, <8>, <9>],
<10>: [<12>],
<8>: [<2>],
<9>: [<3>, <12>, <10>, <2>, <5>],
<12>: [],
<3>: [<1>, <5>],
<2>: [<5>, <1>, <3>],
<5>: [],
<1>: [<11>, <13>],
<11>: [],
<13>: [<10>],
<4>: [<0>, <12>, <6>, <1>],
<0>: [<7>, <6>, <8>],
<7>: [<3>, <8>, <12>],
<14>: [<9>, <0>, <7>, <6>, <1>]}","Node <6> is connected to nodes <10>, <8>, <9>.
Node <10> is connected to node <12>.
Node <8> is connected to node <2>.
Node <9> is connected to nodes <3>, <12>, <10>, <2>, <5>.
Node <3> is connected to nodes <1>, <5>.
Node <2> is connected to nodes <5>, <1>, <3>.
Node <1> is connected to nodes <11>, <13>.
Node <13> is connected to node <10>.
Node <4> is connected to nodes <0>, <12>, <6>, <1>.
Node <0> is connected to nodes <7>, <6>, <8>.
Node <7> is connected to nodes <3>, <8>, <12>.
Node <14> is connected to nodes <9>, <0>, <7>, <6>, <1>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>, <14>]",15,33,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<4>, <14>, <0>, <7>, <6>, <8>, <9>, <2>, <3>, <1>, <5>, <11>, <13>, <10>, <12>]","Let's solve it step by step.
Nodes with 0 in-degree: [<4>, <14>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<14>].
Visit node <14> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <6>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<8>, <9>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <5>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <11>, <13>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<11>, <13>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<13>].
Visit node <13> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<12>].
Visit node <12> and remove it from the graph.
So the result of topological sorting is ","('[[<4>, <14>, <0>, <7>, <6>, <5>, <11>, <13>, <10>, <12>, <8>, <9>, <2>, <3>, <1>], [<4>, <14>, <0>, <7>, <6>, <8>, <9>, <12>, <3>, <10>, <2>, <5>, <1>, <11>, <13>], [<4>, <6>, <11>, <12>, <14>, <10>, <0>, <5>, <1>, <9>, <2>, <7>, <13>, <8>, <3>], [<4>, <14>, <0>, <7>, <6>, <8>, <9>, <2>, <3>, <1>, <5>, <11>, <13>, <10>, <12>]]',)",3,211
topological_sort,"[(<4>, <10>), (<4>, <1>), (<4>, <9>), (<4>, <3>), (<10>, <9>), (<10>, <3>), (<10>, <0>), (<10>, <6>), (<10>, <11>), (<10>, <8>), (<10>, <7>), (<1>, <5>), (<9>, <2>), (<3>, <11>), (<0>, <11>), (<0>, <6>), (<0>, <1>), (<0>, <3>), (<6>, <9>), (<6>, <2>), (<8>, <1>), (<8>, <6>), (<8>, <3>), (<7>, <11>), (<2>, <3>), (<2>, <7>), (<5>, <9>), (<5>, <7>), (<5>, <3>)]","{<4>: [<10>, <1>, <9>, <3>],
<10>: [<9>, <3>, <0>, <6>, <11>, <8>, <7>],
<1>: [<5>],
<9>: [<2>],
<3>: [<11>],
<0>: [<11>, <6>, <1>, <3>],
<6>: [<9>, <2>],
<11>: [],
<8>: [<1>, <6>, <3>],
<7>: [<11>],
<2>: [<3>, <7>],
<5>: [<9>, <7>, <3>]}","Node <4> is connected to nodes <10>, <1>, <9>, <3>.
Node <10> is connected to nodes <9>, <3>, <0>, <6>, <11>, <8>, <7>.
Node <1> is connected to node <5>.
Node <9> is connected to node <2>.
Node <3> is connected to node <11>.
Node <0> is connected to nodes <11>, <6>, <1>, <3>.
Node <6> is connected to nodes <9>, <2>.
Node <8> is connected to nodes <1>, <6>, <3>.
Node <7> is connected to node <11>.
Node <2> is connected to nodes <3>, <7>.
Node <5> is connected to nodes <9>, <7>, <3>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>]",12,29,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<4>, <10>, <0>, <8>, <1>, <6>, <5>, <9>, <2>, <3>, <7>, <11>]","Let's solve it step by step.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <8>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <6>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <5>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <7>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<11>].
Visit node <11> and remove it from the graph.
So the result of topological sorting is ","('[[<4>, <10>, <7>, <6>, <5>, <2>, <8>, <9>, <11>, <3>, <0>, <1>], [<4>, <10>, <0>, <8>, <1>, <6>, <5>, <11>, <9>, <2>, <3>, <7>], [<4>, <10>, <0>, <8>, <2>, <3>, <7>, <11>, <1>, <6>, <5>, <9>], [<4>, <10>, <0>, <8>, <1>, <6>, <5>, <9>, <2>, <3>, <7>, <11>]]',)",3,212
topological_sort,"[(<2>, <6>), (<2>, <3>), (<2>, <7>), (<6>, <7>), (<3>, <4>), (<3>, <7>), (<3>, <5>), (<3>, <6>), (<7>, <5>), (<0>, <6>), (<0>, <5>), (<0>, <3>), (<0>, <2>), (<0>, <4>), (<4>, <6>), (<4>, <1>), (<1>, <5>), (<1>, <6>)]","{<2>: [<6>, <3>, <7>],
<6>: [<7>],
<3>: [<4>, <7>, <5>, <6>],
<7>: [<5>],
<0>: [<6>, <5>, <3>, <2>, <4>],
<5>: [],
<4>: [<6>, <1>],
<1>: [<5>, <6>]}","Node <2> is connected to nodes <6>, <3>, <7>.
Node <6> is connected to node <7>.
Node <3> is connected to nodes <4>, <7>, <5>, <6>.
Node <7> is connected to node <5>.
Node <0> is connected to nodes <6>, <5>, <3>, <2>, <4>.
Node <4> is connected to nodes <6>, <1>.
Node <1> is connected to nodes <5>, <6>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>]",8,18,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<0>, <2>, <3>, <4>, <1>, <6>, <7>, <5>]","Let's solve it step by step.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
So the result of topological sorting is ","('[[<0>, <2>, <3>, <4>, <1>, <6>, <7>, <5>], [<0>, <2>, <3>, <4>, <6>, <5>, <1>, <7>], [<0>, <6>, <5>, <2>, <1>, <4>, <3>, <7>], [<0>, <2>, <7>, <5>, <3>, <4>, <1>, <6>]]',)",0,213
topological_sort,"[(<1>, <5>), (<1>, <7>), (<1>, <8>), (<1>, <6>), (<7>, <5>), (<7>, <6>), (<7>, <0>), (<8>, <10>), (<8>, <0>), (<8>, <4>), (<6>, <2>), (<4>, <2>), (<2>, <5>), (<0>, <6>), (<10>, <2>), (<10>, <7>), (<9>, <3>), (<3>, <1>)]","{<1>: [<5>, <7>, <8>, <6>],
<5>: [],
<7>: [<5>, <6>, <0>],
<8>: [<10>, <0>, <4>],
<6>: [<2>],
<4>: [<2>],
<2>: [<5>],
<0>: [<6>],
<10>: [<2>, <7>],
<9>: [<3>],
<3>: [<1>]}","Node <1> is connected to nodes <5>, <7>, <8>, <6>.
Node <7> is connected to nodes <5>, <6>, <0>.
Node <8> is connected to nodes <10>, <0>, <4>.
Node <6> is connected to node <2>.
Node <4> is connected to node <2>.
Node <2> is connected to node <5>.
Node <0> is connected to node <6>.
Node <10> is connected to nodes <2>, <7>.
Node <9> is connected to node <3>.
Node <3> is connected to node <1>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>]",11,18,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<9>, <3>, <1>, <8>, <10>, <4>, <7>, <0>, <6>, <2>, <5>]","Let's solve it step by step.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<10>, <4>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <7>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
So the result of topological sorting is ","('[[<9>, <3>, <1>, <8>, <10>, <4>, <7>, <0>, <6>, <2>, <5>], [<9>, <3>, <1>, <6>, <2>, <5>, <8>, <10>, <4>, <7>, <0>], [<9>, <5>, <6>, <4>, <0>, <8>, <10>, <3>, <2>, <1>, <7>], [<9>, <3>, <1>, <8>, <10>, <2>, <0>, <7>, <6>, <5>, <4>]]',)",0,214
topological_sort,"[(<8>, <9>), (<8>, <10>), (<8>, <7>), (<8>, <6>), (<8>, <4>), (<10>, <3>), (<10>, <7>), (<7>, <1>), (<7>, <5>), (<6>, <5>), (<6>, <2>), (<6>, <10>), (<4>, <5>), (<5>, <9>), (<2>, <3>), (<0>, <5>), (<0>, <8>), (<0>, <9>), (<1>, <2>)]","{<8>: [<9>, <10>, <7>, <6>, <4>],
<9>: [],
<10>: [<3>, <7>],
<7>: [<1>, <5>],
<6>: [<5>, <2>, <10>],
<4>: [<5>],
<5>: [<9>],
<2>: [<3>],
<3>: [],
<0>: [<5>, <8>, <9>],
<1>: [<2>]}","Node <8> is connected to nodes <9>, <10>, <7>, <6>, <4>.
Node <10> is connected to nodes <3>, <7>.
Node <7> is connected to nodes <1>, <5>.
Node <6> is connected to nodes <5>, <2>, <10>.
Node <4> is connected to node <5>.
Node <5> is connected to node <9>.
Node <2> is connected to node <3>.
Node <0> is connected to nodes <5>, <8>, <9>.
Node <1> is connected to node <2>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>]",11,19,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<0>, <8>, <6>, <4>, <10>, <7>, <1>, <5>, <2>, <9>, <3>]","Let's solve it step by step.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <4>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <10>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <5>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <2>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <9>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<9>, <3>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
So the result of topological sorting is ","('[[<0>, <2>, <9>, <6>, <7>, <5>, <1>, <8>, <3>, <4>, <10>], [<0>, <8>, <6>, <2>, <9>, <3>, <4>, <10>, <7>, <1>, <5>], [<0>, <8>, <6>, <4>, <10>, <7>, <1>, <5>, <2>, <9>, <3>], [<0>, <8>, <6>, <4>, <10>, <9>, <5>, <3>, <2>, <7>, <1>]]',)",2,215
topological_sort,"[(<7>, <6>), (<7>, <1>), (<7>, <2>), (<7>, <4>), (<6>, <0>), (<2>, <3>), (<2>, <5>), (<2>, <6>), (<4>, <8>), (<0>, <1>), (<5>, <8>), (<5>, <0>), (<8>, <0>), (<8>, <1>), (<8>, <6>), (<3>, <6>), (<3>, <4>), (<3>, <8>)]","{<7>: [<6>, <1>, <2>, <4>],
<6>: [<0>],
<1>: [],
<2>: [<3>, <5>, <6>],
<4>: [<8>],
<0>: [<1>],
<5>: [<8>, <0>],
<8>: [<0>, <1>, <6>],
<3>: [<6>, <4>, <8>]}","Node <7> is connected to nodes <6>, <1>, <2>, <4>.
Node <6> is connected to node <0>.
Node <2> is connected to nodes <3>, <5>, <6>.
Node <4> is connected to node <8>.
Node <0> is connected to node <1>.
Node <5> is connected to nodes <8>, <0>.
Node <8> is connected to nodes <0>, <1>, <6>.
Node <3> is connected to nodes <6>, <4>, <8>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>]",9,18,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<7>, <2>, <3>, <5>, <4>, <8>, <6>, <0>, <1>]","Let's solve it step by step.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <5>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <4>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
So the result of topological sorting is ","('[[<7>, <4>, <6>, <2>, <3>, <5>, <0>, <8>, <1>], [<7>, <2>, <3>, <5>, <4>, <8>, <6>, <0>, <1>], [<7>, <2>, <3>, <6>, <0>, <1>, <5>, <4>, <8>], [<7>, <2>, <3>, <5>, <6>, <8>, <0>, <4>, <1>]]',)",1,216
topological_sort,"[(<4>, <1>), (<4>, <2>), (<4>, <8>), (<1>, <2>), (<1>, <3>), (<2>, <3>), (<2>, <0>), (<2>, <6>), (<2>, <8>), (<8>, <0>), (<8>, <3>), (<3>, <0>), (<7>, <2>), (<7>, <6>), (<6>, <8>), (<5>, <4>), (<5>, <3>)]","{<4>: [<1>, <2>, <8>],
<1>: [<2>, <3>],
<2>: [<3>, <0>, <6>, <8>],
<8>: [<0>, <3>],
<3>: [<0>],
<0>: [],
<7>: [<2>, <6>],
<6>: [<8>],
<5>: [<4>, <3>]}","Node <4> is connected to nodes <1>, <2>, <8>.
Node <1> is connected to nodes <2>, <3>.
Node <2> is connected to nodes <3>, <0>, <6>, <8>.
Node <8> is connected to nodes <0>, <3>.
Node <3> is connected to node <0>.
Node <7> is connected to nodes <2>, <6>.
Node <6> is connected to node <8>.
Node <5> is connected to nodes <4>, <3>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>]",9,17,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<7>, <5>, <4>, <1>, <2>, <6>, <8>, <3>, <0>]","Let's solve it step by step.
Nodes with 0 in-degree: [<7>, <5>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
So the result of topological sorting is ","('[[<7>, <5>, <4>, <1>, <2>, <6>, <8>, <3>, <0>], [<7>, <8>, <6>, <1>, <3>, <5>, <4>, <0>, <2>], [<7>, <5>, <4>, <1>, <3>, <8>, <2>, <0>, <6>], [<7>, <5>, <4>, <8>, <3>, <0>, <1>, <2>, <6>]]',)",0,217
topological_sort,"[(<2>, <3>), (<2>, <4>), (<2>, <1>), (<2>, <6>), (<3>, <1>), (<3>, <7>), (<4>, <0>), (<1>, <6>), (<1>, <0>), (<1>, <7>), (<6>, <4>), (<6>, <0>), (<7>, <0>), (<7>, <4>), (<5>, <3>), (<5>, <2>)]","{<2>: [<3>, <4>, <1>, <6>],
<3>: [<1>, <7>],
<4>: [<0>],
<1>: [<6>, <0>, <7>],
<6>: [<4>, <0>],
<7>: [<0>, <4>],
<0>: [],
<5>: [<3>, <2>]}","Node <2> is connected to nodes <3>, <4>, <1>, <6>.
Node <3> is connected to nodes <1>, <7>.
Node <4> is connected to node <0>.
Node <1> is connected to nodes <6>, <0>, <7>.
Node <6> is connected to nodes <4>, <0>.
Node <7> is connected to nodes <0>, <4>.
Node <5> is connected to nodes <3>, <2>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>]",8,16,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<5>, <2>, <3>, <1>, <6>, <7>, <4>, <0>]","Let's solve it step by step.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <7>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
So the result of topological sorting is ","('[[<5>, <2>, <3>, <1>, <6>, <0>, <7>, <4>], [<5>, <3>, <2>, <7>, <6>, <1>, <0>, <4>], [<5>, <2>, <4>, <0>, <3>, <1>, <6>, <7>], [<5>, <2>, <3>, <1>, <6>, <7>, <4>, <0>]]',)",3,218
topological_sort,"[(<1>, <7>), (<1>, <12>), (<1>, <10>), (<7>, <4>), (<12>, <0>), (<12>, <13>), (<12>, <9>), (<10>, <7>), (<10>, <0>), (<4>, <13>), (<6>, <11>), (<6>, <10>), (<8>, <7>), (<8>, <10>), (<8>, <4>), (<8>, <13>), (<0>, <7>), (<9>, <11>), (<9>, <4>), (<3>, <9>), (<3>, <2>), (<3>, <7>), (<3>, <4>), (<3>, <6>), (<2>, <13>), (<2>, <8>), (<2>, <0>), (<5>, <1>)]","{<1>: [<7>, <12>, <10>],
<7>: [<4>],
<12>: [<0>, <13>, <9>],
<10>: [<7>, <0>],
<4>: [<13>],
<6>: [<11>, <10>],
<11>: [],
<13>: [],
<8>: [<7>, <10>, <4>, <13>],
<0>: [<7>],
<9>: [<11>, <4>],
<3>: [<9>, <2>, <7>, <4>, <6>],
<2>: [<13>, <8>, <0>],
<5>: [<1>]}","Node <1> is connected to nodes <7>, <12>, <10>.
Node <7> is connected to node <4>.
Node <12> is connected to nodes <0>, <13>, <9>.
Node <10> is connected to nodes <7>, <0>.
Node <4> is connected to node <13>.
Node <6> is connected to nodes <11>, <10>.
Node <8> is connected to nodes <7>, <10>, <4>, <13>.
Node <0> is connected to node <7>.
Node <9> is connected to nodes <11>, <4>.
Node <3> is connected to nodes <9>, <2>, <7>, <4>, <6>.
Node <2> is connected to nodes <13>, <8>, <0>.
Node <5> is connected to node <1>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>]",14,28,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<3>, <5>, <2>, <6>, <1>, <8>, <12>, <10>, <9>, <0>, <11>, <7>, <4>, <13>]","Let's solve it step by step.
Nodes with 0 in-degree: [<3>, <5>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <2>, <6>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <6>, <1>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <1>, <8>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <8>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<8>, <12>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<12>, <10>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<10>, <9>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<9>, <0>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <11>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<11>, <7>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<13>].
Visit node <13> and remove it from the graph.
So the result of topological sorting is ","('[[<3>, <5>, <2>, <6>, <1>, <8>, <12>, <9>, <11>, <4>, <0>, <7>, <13>, <10>], [<3>, <5>, <2>, <6>, <1>, <8>, <12>, <10>, <9>, <0>, <11>, <7>, <4>, <13>], [<3>, <5>, <2>, <9>, <8>, <12>, <11>, <10>, <1>, <4>, <13>, <0>, <7>, <6>], [<3>, <5>, <2>, <6>, <11>, <7>, <4>, <13>, <1>, <8>, <12>, <10>, <9>, <0>]]',)",1,219
topological_sort,"[(<4>, <3>), (<3>, <7>), (<3>, <6>), (<7>, <10>), (<6>, <7>), (<6>, <13>), (<9>, <5>), (<9>, <12>), (<9>, <2>), (<9>, <3>), (<5>, <13>), (<5>, <10>), (<5>, <6>), (<5>, <8>), (<12>, <4>), (<12>, <5>), (<12>, <3>), (<12>, <13>), (<2>, <4>), (<2>, <3>), (<2>, <6>), (<2>, <13>), (<2>, <12>), (<13>, <10>), (<13>, <7>), (<8>, <6>), (<8>, <10>), (<8>, <13>), (<0>, <11>), (<0>, <4>), (<0>, <7>), (<0>, <10>), (<0>, <5>), (<0>, <13>), (<0>, <9>), (<11>, <3>), (<11>, <12>), (<11>, <2>), (<11>, <4>), (<11>, <7>), (<11>, <13>), (<11>, <6>), (<11>, <8>), (<1>, <10>), (<1>, <7>), (<1>, <0>), (<1>, <5>), (<1>, <2>), (<1>, <9>)]","{<4>: [<3>],
<3>: [<7>, <6>],
<7>: [<10>],
<6>: [<7>, <13>],
<9>: [<5>, <12>, <2>, <3>],
<5>: [<13>, <10>, <6>, <8>],
<12>: [<4>, <5>, <3>, <13>],
<2>: [<4>, <3>, <6>, <13>, <12>],
<13>: [<10>, <7>],
<10>: [],
<8>: [<6>, <10>, <13>],
<0>: [<11>, <4>, <7>, <10>, <5>, <13>, <9>],
<11>: [<3>, <12>, <2>, <4>, <7>, <13>, <6>, <8>],
<1>: [<10>, <7>, <0>, <5>, <2>, <9>]}","Node <4> is connected to node <3>.
Node <3> is connected to nodes <7>, <6>.
Node <7> is connected to node <10>.
Node <6> is connected to nodes <7>, <13>.
Node <9> is connected to nodes <5>, <12>, <2>, <3>.
Node <5> is connected to nodes <13>, <10>, <6>, <8>.
Node <12> is connected to nodes <4>, <5>, <3>, <13>.
Node <2> is connected to nodes <4>, <3>, <6>, <13>, <12>.
Node <13> is connected to nodes <10>, <7>.
Node <8> is connected to nodes <6>, <10>, <13>.
Node <0> is connected to nodes <11>, <4>, <7>, <10>, <5>, <13>, <9>.
Node <11> is connected to nodes <3>, <12>, <2>, <4>, <7>, <13>, <6>, <8>.
Node <1> is connected to nodes <10>, <7>, <0>, <5>, <2>, <9>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>]",14,49,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<1>, <0>, <11>, <9>, <2>, <12>, <4>, <5>, <3>, <8>, <6>, <13>, <7>, <10>]","Let's solve it step by step.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<11>, <9>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<12>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <5>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <3>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <8>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<13>].
Visit node <13> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
So the result of topological sorting is ","('[[<1>, <12>, <5>, <10>, <13>, <11>, <0>, <4>, <2>, <6>, <3>, <9>, <7>, <8>], [<1>, <0>, <11>, <9>, <2>, <12>, <4>, <6>, <13>, <7>, <8>, <5>, <10>, <3>], [<1>, <0>, <11>, <9>, <2>, <12>, <4>, <5>, <3>, <8>, <6>, <13>, <7>, <10>], [<1>, <0>, <11>, <9>, <6>, <13>, <7>, <10>, <2>, <12>, <4>, <5>, <3>, <8>]]',)",2,220
topological_sort,"[(<3>, <8>), (<3>, <5>), (<3>, <2>), (<8>, <1>), (<8>, <5>), (<5>, <2>), (<5>, <1>), (<6>, <7>), (<6>, <8>), (<6>, <3>), (<7>, <3>), (<7>, <0>), (<7>, <8>), (<7>, <2>), (<0>, <5>), (<4>, <6>)]","{<3>: [<8>, <5>, <2>],
<8>: [<1>, <5>],
<5>: [<2>, <1>],
<2>: [],
<1>: [],
<6>: [<7>, <8>, <3>],
<7>: [<3>, <0>, <8>, <2>],
<0>: [<5>],
<4>: [<6>]}","Node <3> is connected to nodes <8>, <5>, <2>.
Node <8> is connected to nodes <1>, <5>.
Node <5> is connected to nodes <2>, <1>.
Node <6> is connected to nodes <7>, <8>, <3>.
Node <7> is connected to nodes <3>, <0>, <8>, <2>.
Node <0> is connected to node <5>.
Node <4> is connected to node <6>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>]",9,16,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<4>, <6>, <7>, <3>, <0>, <8>, <5>, <2>, <1>]","Let's solve it step by step.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <0>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <8>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <1>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
So the result of topological sorting is ","('[[<4>, <2>, <6>, <8>, <7>, <3>, <0>, <1>, <5>], [<4>, <6>, <7>, <3>, <0>, <1>, <2>, <5>, <8>], [<4>, <6>, <7>, <5>, <2>, <1>, <3>, <0>, <8>], [<4>, <6>, <7>, <3>, <0>, <8>, <5>, <2>, <1>]]',)",3,221
topological_sort,"[(<5>, <2>), (<5>, <0>), (<5>, <7>), (<5>, <3>), (<5>, <8>), (<2>, <8>), (<2>, <6>), (<2>, <4>), (<0>, <10>), (<7>, <9>), (<7>, <4>), (<7>, <3>), (<7>, <10>), (<3>, <9>), (<8>, <6>), (<8>, <3>), (<8>, <9>), (<6>, <9>), (<10>, <6>), (<10>, <4>), (<10>, <8>), (<10>, <1>), (<1>, <3>), (<1>, <9>), (<1>, <2>)]","{<5>: [<2>, <0>, <7>, <3>, <8>],
<2>: [<8>, <6>, <4>],
<0>: [<10>],
<7>: [<9>, <4>, <3>, <10>],
<3>: [<9>],
<8>: [<6>, <3>, <9>],
<6>: [<9>],
<4>: [],
<9>: [],
<10>: [<6>, <4>, <8>, <1>],
<1>: [<3>, <9>, <2>]}","Node <5> is connected to nodes <2>, <0>, <7>, <3>, <8>.
Node <2> is connected to nodes <8>, <6>, <4>.
Node <0> is connected to node <10>.
Node <7> is connected to nodes <9>, <4>, <3>, <10>.
Node <3> is connected to node <9>.
Node <8> is connected to nodes <6>, <3>, <9>.
Node <6> is connected to node <9>.
Node <10> is connected to nodes <6>, <4>, <8>, <1>.
Node <1> is connected to nodes <3>, <9>, <2>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>]",11,25,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<5>, <0>, <7>, <10>, <1>, <2>, <8>, <4>, <6>, <3>, <9>]","Let's solve it step by step.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <7>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<8>, <4>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <6>, <3>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <3>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
So the result of topological sorting is ","('[[<5>, <0>, <7>, <10>, <1>, <8>, <2>, <6>, <4>, <3>, <9>], [<5>, <0>, <7>, <10>, <1>, <2>, <8>, <4>, <6>, <3>, <9>], [<5>, <0>, <7>, <6>, <3>, <9>, <10>, <1>, <2>, <8>, <4>], [<5>, <7>, <9>, <4>, <3>, <0>, <1>, <6>, <10>, <2>, <8>]]',)",1,222
topological_sort,"[(<9>, <1>), (<9>, <7>), (<1>, <0>), (<7>, <1>), (<8>, <1>), (<8>, <3>), (<8>, <0>), (<8>, <9>), (<3>, <1>), (<3>, <0>), (<4>, <2>), (<4>, <3>), (<4>, <0>), (<4>, <9>), (<4>, <7>), (<4>, <1>), (<4>, <8>), (<2>, <3>), (<2>, <9>), (<2>, <1>), (<2>, <5>), (<5>, <7>), (<5>, <8>), (<6>, <5>), (<6>, <4>)]","{<9>: [<1>, <7>],
<1>: [<0>],
<7>: [<1>],
<0>: [],
<8>: [<1>, <3>, <0>, <9>],
<3>: [<1>, <0>],
<4>: [<2>, <3>, <0>, <9>, <7>, <1>, <8>],
<2>: [<3>, <9>, <1>, <5>],
<5>: [<7>, <8>],
<6>: [<5>, <4>]}","Node <9> is connected to nodes <1>, <7>.
Node <1> is connected to node <0>.
Node <7> is connected to node <1>.
Node <8> is connected to nodes <1>, <3>, <0>, <9>.
Node <3> is connected to nodes <1>, <0>.
Node <4> is connected to nodes <2>, <3>, <0>, <9>, <7>, <1>, <8>.
Node <2> is connected to nodes <3>, <9>, <1>, <5>.
Node <5> is connected to nodes <7>, <8>.
Node <6> is connected to nodes <5>, <4>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>]",10,25,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<6>, <4>, <2>, <5>, <8>, <3>, <9>, <7>, <1>, <0>]","Let's solve it step by step.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <9>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
So the result of topological sorting is ","('[[<6>, <4>, <2>, <5>, <8>, <7>, <3>, <9>, <1>, <0>], [<6>, <4>, <2>, <7>, <1>, <0>, <5>, <8>, <3>, <9>], [<6>, <4>, <2>, <5>, <8>, <3>, <9>, <7>, <1>, <0>], [<6>, <9>, <0>, <7>, <2>, <1>, <5>, <8>, <3>, <4>]]',)",2,223
topological_sort,"[(<1>, <5>), (<1>, <2>), (<5>, <0>), (<2>, <5>), (<2>, <9>), (<0>, <9>), (<8>, <5>), (<8>, <1>), (<9>, <4>), (<3>, <4>), (<3>, <6>), (<6>, <9>), (<6>, <0>), (<6>, <8>), (<7>, <6>), (<7>, <3>)]","{<1>: [<5>, <2>],
<5>: [<0>],
<2>: [<5>, <9>],
<0>: [<9>],
<8>: [<5>, <1>],
<9>: [<4>],
<4>: [],
<3>: [<4>, <6>],
<6>: [<9>, <0>, <8>],
<7>: [<6>, <3>]}","Node <1> is connected to nodes <5>, <2>.
Node <5> is connected to node <0>.
Node <2> is connected to nodes <5>, <9>.
Node <0> is connected to node <9>.
Node <8> is connected to nodes <5>, <1>.
Node <9> is connected to node <4>.
Node <3> is connected to nodes <4>, <6>.
Node <6> is connected to nodes <9>, <0>, <8>.
Node <7> is connected to nodes <6>, <3>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>]",10,16,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<7>, <3>, <6>, <8>, <1>, <2>, <5>, <0>, <9>, <4>]","Let's solve it step by step.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
So the result of topological sorting is ","('[[<7>, <3>, <6>, <8>, <1>, <2>, <5>, <0>, <9>, <4>], [<7>, <3>, <6>, <0>, <9>, <4>, <8>, <1>, <2>, <5>], [<7>, <2>, <5>, <0>, <3>, <4>, <8>, <9>, <1>, <6>], [<7>, <3>, <6>, <8>, <1>, <5>, <0>, <4>, <2>, <9>]]',)",0,224
topological_sort,"[(<10>, <7>), (<10>, <5>), (<7>, <2>), (<7>, <6>), (<7>, <5>), (<5>, <4>), (<5>, <8>), (<2>, <4>), (<0>, <10>), (<0>, <6>), (<1>, <5>), (<1>, <4>), (<1>, <7>), (<4>, <8>), (<4>, <6>), (<8>, <6>), (<3>, <0>), (<11>, <3>), (<9>, <0>)]","{<10>: [<7>, <5>],
<7>: [<2>, <6>, <5>],
<5>: [<4>, <8>],
<2>: [<4>],
<6>: [],
<0>: [<10>, <6>],
<1>: [<5>, <4>, <7>],
<4>: [<8>, <6>],
<8>: [<6>],
<3>: [<0>],
<11>: [<3>],
<9>: [<0>]}","Node <10> is connected to nodes <7>, <5>.
Node <7> is connected to nodes <2>, <6>, <5>.
Node <5> is connected to nodes <4>, <8>.
Node <2> is connected to node <4>.
Node <0> is connected to nodes <10>, <6>.
Node <1> is connected to nodes <5>, <4>, <7>.
Node <4> is connected to nodes <8>, <6>.
Node <8> is connected to node <6>.
Node <3> is connected to node <0>.
Node <11> is connected to node <3>.
Node <9> is connected to node <0>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>]",12,19,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<1>, <11>, <9>, <3>, <0>, <10>, <7>, <2>, <5>, <4>, <8>, <6>]","Let's solve it step by step.
Nodes with 0 in-degree: [<1>, <11>, <9>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<11>, <9>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<9>, <3>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <5>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
So the result of topological sorting is ","('[[<1>, <11>, <9>, <3>, <0>, <10>, <7>, <6>, <4>, <8>, <2>, <5>], [<1>, <11>, <9>, <3>, <5>, <4>, <8>, <6>, <0>, <10>, <7>, <2>], [<1>, <8>, <5>, <9>, <11>, <4>, <0>, <7>, <6>, <2>, <10>, <3>], [<1>, <11>, <9>, <3>, <0>, <10>, <7>, <2>, <5>, <4>, <8>, <6>]]',)",3,225
topological_sort,"[(<3>, <4>), (<3>, <6>), (<4>, <5>), (<4>, <0>), (<4>, <9>), (<6>, <2>), (<6>, <8>), (<0>, <8>), (<0>, <9>), (<0>, <2>), (<1>, <6>), (<1>, <2>), (<1>, <4>), (<2>, <9>), (<8>, <9>), (<7>, <3>), (<7>, <6>), (<7>, <2>)]","{<3>: [<4>, <6>],
<4>: [<5>, <0>, <9>],
<6>: [<2>, <8>],
<5>: [],
<0>: [<8>, <9>, <2>],
<9>: [],
<1>: [<6>, <2>, <4>],
<2>: [<9>],
<8>: [<9>],
<7>: [<3>, <6>, <2>]}","Node <3> is connected to nodes <4>, <6>.
Node <4> is connected to nodes <5>, <0>, <9>.
Node <6> is connected to nodes <2>, <8>.
Node <0> is connected to nodes <8>, <9>, <2>.
Node <1> is connected to nodes <6>, <2>, <4>.
Node <2> is connected to node <9>.
Node <8> is connected to node <9>.
Node <7> is connected to nodes <3>, <6>, <2>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>]",10,18,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<1>, <7>, <3>, <4>, <6>, <5>, <0>, <8>, <2>, <9>]","Let's solve it step by step.
Nodes with 0 in-degree: [<1>, <7>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <6>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <5>, <0>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <0>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<8>, <2>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
So the result of topological sorting is ","('[[<1>, <7>, <3>, <4>, <6>, <2>, <5>, <9>, <0>, <8>], [<1>, <7>, <3>, <8>, <2>, <9>, <4>, <6>, <5>, <0>], [<1>, <7>, <3>, <4>, <6>, <5>, <0>, <8>, <2>, <9>], [<1>, <8>, <4>, <2>, <0>, <5>, <6>, <7>, <9>, <3>]]',)",2,226
topological_sort,"[(<8>, <1>), (<8>, <3>), (<8>, <10>), (<1>, <2>), (<1>, <7>), (<3>, <7>), (<3>, <9>), (<10>, <3>), (<10>, <9>), (<10>, <1>), (<2>, <3>), (<2>, <7>), (<7>, <9>), (<5>, <2>), (<5>, <4>), (<4>, <6>), (<4>, <10>), (<4>, <3>), (<0>, <10>), (<0>, <8>), (<0>, <5>), (<0>, <6>), (<0>, <4>), (<0>, <1>), (<6>, <7>), (<6>, <10>)]","{<8>: [<1>, <3>, <10>],
<1>: [<2>, <7>],
<3>: [<7>, <9>],
<10>: [<3>, <9>, <1>],
<2>: [<3>, <7>],
<7>: [<9>],
<9>: [],
<5>: [<2>, <4>],
<4>: [<6>, <10>, <3>],
<0>: [<10>, <8>, <5>, <6>, <4>, <1>],
<6>: [<7>, <10>]}","Node <8> is connected to nodes <1>, <3>, <10>.
Node <1> is connected to nodes <2>, <7>.
Node <3> is connected to nodes <7>, <9>.
Node <10> is connected to nodes <3>, <9>, <1>.
Node <2> is connected to nodes <3>, <7>.
Node <7> is connected to node <9>.
Node <5> is connected to nodes <2>, <4>.
Node <4> is connected to nodes <6>, <10>, <3>.
Node <0> is connected to nodes <10>, <8>, <5>, <6>, <4>, <1>.
Node <6> is connected to nodes <7>, <10>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>]",11,26,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<0>, <8>, <5>, <4>, <6>, <10>, <1>, <2>, <3>, <7>, <9>]","Let's solve it step by step.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<8>, <5>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
So the result of topological sorting is ","('[[<0>, <8>, <5>, <4>, <6>, <10>, <1>, <2>, <3>, <7>, <9>], [<0>, <8>, <5>, <3>, <7>, <9>, <4>, <6>, <10>, <1>, <2>], [<0>, <8>, <5>, <4>, <6>, <1>, <3>, <9>, <2>, <10>, <7>], [<0>, <9>, <3>, <1>, <10>, <6>, <2>, <4>, <5>, <7>, <8>]]',)",0,227
topological_sort,"[(<5>, <9>), (<5>, <12>), (<5>, <11>), (<5>, <13>), (<5>, <10>), (<5>, <4>), (<9>, <0>), (<9>, <2>), (<9>, <11>), (<9>, <10>), (<9>, <4>), (<9>, <12>), (<12>, <1>), (<12>, <8>), (<12>, <10>), (<12>, <2>), (<12>, <11>), (<12>, <0>), (<12>, <4>), (<11>, <0>), (<11>, <3>), (<11>, <2>), (<11>, <10>), (<11>, <4>), (<11>, <8>), (<10>, <8>), (<10>, <2>), (<10>, <6>), (<10>, <0>), (<4>, <8>), (<4>, <6>), (<4>, <10>), (<4>, <13>), (<4>, <1>), (<0>, <13>), (<2>, <0>), (<8>, <6>), (<8>, <0>), (<6>, <13>), (<6>, <1>), (<7>, <13>), (<7>, <3>), (<7>, <1>), (<7>, <5>), (<3>, <10>), (<3>, <8>), (<3>, <0>), (<3>, <13>)]","{<5>: [<9>, <12>, <11>, <13>, <10>, <4>],
<9>: [<0>, <2>, <11>, <10>, <4>, <12>],
<12>: [<1>, <8>, <10>, <2>, <11>, <0>, <4>],
<11>: [<0>, <3>, <2>, <10>, <4>, <8>],
<13>: [],
<10>: [<8>, <2>, <6>, <0>],
<4>: [<8>, <6>, <10>, <13>, <1>],
<0>: [<13>],
<2>: [<0>],
<8>: [<6>, <0>],
<6>: [<13>, <1>],
<1>: [],
<7>: [<13>, <3>, <1>, <5>],
<3>: [<10>, <8>, <0>, <13>]}","Node <5> is connected to nodes <9>, <12>, <11>, <13>, <10>, <4>.
Node <9> is connected to nodes <0>, <2>, <11>, <10>, <4>, <12>.
Node <12> is connected to nodes <1>, <8>, <10>, <2>, <11>, <0>, <4>.
Node <11> is connected to nodes <0>, <3>, <2>, <10>, <4>, <8>.
Node <10> is connected to nodes <8>, <2>, <6>, <0>.
Node <4> is connected to nodes <8>, <6>, <10>, <13>, <1>.
Node <0> is connected to node <13>.
Node <2> is connected to node <0>.
Node <8> is connected to nodes <6>, <0>.
Node <6> is connected to nodes <13>, <1>.
Node <7> is connected to nodes <13>, <3>, <1>, <5>.
Node <3> is connected to nodes <10>, <8>, <0>, <13>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>]",14,48,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<7>, <5>, <9>, <12>, <11>, <3>, <4>, <10>, <8>, <2>, <6>, <0>, <1>, <13>]","Let's solve it step by step.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<12>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<11>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <4>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<8>, <2>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <6>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <0>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <1>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <13>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<13>].
Visit node <13> and remove it from the graph.
So the result of topological sorting is ","('[[<7>, <5>, <9>, <12>, <11>, <3>, <4>, <10>, <8>, <2>, <6>, <0>, <1>, <13>], [<7>, <5>, <9>, <12>, <11>, <3>, <4>, <6>, <1>, <0>, <8>, <2>, <13>, <10>], [<7>, <5>, <9>, <12>, <6>, <0>, <1>, <13>, <11>, <3>, <4>, <10>, <8>, <2>], [<7>, <2>, <3>, <8>, <12>, <11>, <13>, <1>, <10>, <6>, <5>, <9>, <0>, <4>]]',)",0,228
topological_sort,"[(<8>, <2>), (<8>, <0>), (<8>, <9>), (<8>, <5>), (<8>, <7>), (<9>, <4>), (<5>, <4>), (<4>, <2>), (<6>, <1>), (<6>, <2>), (<6>, <3>), (<3>, <2>), (<3>, <5>), (<10>, <5>), (<10>, <9>), (<10>, <2>)]","{<8>: [<2>, <0>, <9>, <5>, <7>],
<2>: [],
<0>: [],
<9>: [<4>],
<5>: [<4>],
<7>: [],
<4>: [<2>],
<6>: [<1>, <2>, <3>],
<1>: [],
<3>: [<2>, <5>],
<10>: [<5>, <9>, <2>]}","Node <8> is connected to nodes <2>, <0>, <9>, <5>, <7>.
Node <9> is connected to node <4>.
Node <5> is connected to node <4>.
Node <4> is connected to node <2>.
Node <6> is connected to nodes <1>, <2>, <3>.
Node <3> is connected to nodes <2>, <5>.
Node <10> is connected to nodes <5>, <9>, <2>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>]",11,16,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<8>, <6>, <10>, <0>, <7>, <1>, <3>, <9>, <5>, <4>, <2>]","Let's solve it step by step.
Nodes with 0 in-degree: [<8>, <6>, <10>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <10>, <0>, <7>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<10>, <0>, <7>, <1>, <3>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <7>, <1>, <3>, <9>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <1>, <3>, <9>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <3>, <9>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <9>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<9>, <5>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
So the result of topological sorting is ","('[[<8>, <6>, <10>, <5>, <4>, <2>, <0>, <7>, <1>, <3>, <9>], [<8>, <6>, <10>, <0>, <7>, <1>, <3>, <9>, <5>, <4>, <2>], [<8>, <6>, <10>, <0>, <7>, <5>, <1>, <4>, <3>, <2>, <9>], [<8>, <6>, <2>, <10>, <0>, <1>, <9>, <7>, <4>, <5>, <3>]]',)",1,229
topological_sort,"[(<3>, <1>), (<3>, <5>), (<3>, <0>), (<3>, <9>), (<3>, <2>), (<5>, <2>), (<5>, <4>), (<0>, <1>), (<9>, <1>), (<9>, <7>), (<9>, <8>), (<2>, <8>), (<4>, <0>), (<7>, <6>), (<6>, <5>), (<6>, <1>)]","{<3>: [<1>, <5>, <0>, <9>, <2>],
<1>: [],
<5>: [<2>, <4>],
<0>: [<1>],
<9>: [<1>, <7>, <8>],
<2>: [<8>],
<4>: [<0>],
<7>: [<6>],
<6>: [<5>, <1>],
<8>: []}","Node <3> is connected to nodes <1>, <5>, <0>, <9>, <2>.
Node <5> is connected to nodes <2>, <4>.
Node <0> is connected to node <1>.
Node <9> is connected to nodes <1>, <7>, <8>.
Node <2> is connected to node <8>.
Node <4> is connected to node <0>.
Node <7> is connected to node <6>.
Node <6> is connected to nodes <5>, <1>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>]",10,16,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<3>, <9>, <7>, <6>, <5>, <2>, <4>, <8>, <0>, <1>]","Let's solve it step by step.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <4>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <8>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<8>, <0>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
So the result of topological sorting is ","('[[<3>, <9>, <7>, <6>, <5>, <4>, <8>, <0>, <2>, <1>], [<3>, <9>, <7>, <6>, <5>, <2>, <4>, <8>, <0>, <1>], [<3>, <9>, <7>, <8>, <0>, <1>, <6>, <5>, <2>, <4>], [<3>, <4>, <8>, <9>, <7>, <5>, <6>, <1>, <2>, <0>]]',)",1,230
topological_sort,"[(<8>, <7>), (<8>, <3>), (<8>, <5>), (<8>, <2>), (<7>, <0>), (<7>, <5>), (<3>, <0>), (<6>, <3>), (<6>, <7>), (<1>, <4>), (<1>, <5>), (<4>, <0>)]","{<8>: [<7>, <3>, <5>, <2>],
<7>: [<0>, <5>],
<3>: [<0>],
<5>: [],
<2>: [],
<0>: [],
<6>: [<3>, <7>],
<1>: [<4>, <5>],
<4>: [<0>]}","Node <8> is connected to nodes <7>, <3>, <5>, <2>.
Node <7> is connected to nodes <0>, <5>.
Node <3> is connected to node <0>.
Node <6> is connected to nodes <3>, <7>.
Node <1> is connected to nodes <4>, <5>.
Node <4> is connected to node <0>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>]",9,12,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<8>, <6>, <1>, <2>, <3>, <7>, <4>, <5>, <0>]","Let's solve it step by step.
Nodes with 0 in-degree: [<8>, <6>, <1>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <1>, <2>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <2>, <3>, <7>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <3>, <7>, <4>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <7>, <4>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <4>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <5>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <0>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
So the result of topological sorting is ","('[[<8>, <6>, <1>, <2>, <0>, <3>, <4>, <5>, <7>], [<8>, <6>, <1>, <2>, <3>, <7>, <4>, <5>, <0>], [<8>, <6>, <1>, <4>, <5>, <0>, <2>, <3>, <7>], [<8>, <3>, <4>, <6>, <7>, <5>, <2>, <0>, <1>]]',)",1,231
topological_sort,"[(<6>, <8>), (<6>, <0>), (<8>, <5>), (<8>, <1>), (<8>, <9>), (<0>, <5>), (<0>, <1>), (<9>, <2>), (<3>, <7>), (<3>, <1>), (<3>, <9>), (<7>, <9>), (<7>, <5>), (<7>, <8>), (<4>, <6>), (<4>, <8>), (<4>, <0>)]","{<6>: [<8>, <0>],
<8>: [<5>, <1>, <9>],
<0>: [<5>, <1>],
<5>: [],
<1>: [],
<9>: [<2>],
<3>: [<7>, <1>, <9>],
<7>: [<9>, <5>, <8>],
<2>: [],
<4>: [<6>, <8>, <0>]}","Node <6> is connected to nodes <8>, <0>.
Node <8> is connected to nodes <5>, <1>, <9>.
Node <0> is connected to nodes <5>, <1>.
Node <9> is connected to node <2>.
Node <3> is connected to nodes <7>, <1>, <9>.
Node <7> is connected to nodes <9>, <5>, <8>.
Node <4> is connected to nodes <6>, <8>, <0>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>]",10,17,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<3>, <4>, <7>, <6>, <8>, <0>, <9>, <5>, <1>, <2>]","Let's solve it step by step.
Nodes with 0 in-degree: [<3>, <4>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <7>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <6>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<8>, <0>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <9>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<9>, <5>, <1>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <1>, <2>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <2>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
So the result of topological sorting is ","('[[<3>, <4>, <7>, <6>, <8>, <0>, <5>, <1>, <2>, <9>], [<3>, <0>, <2>, <9>, <5>, <8>, <1>, <6>, <7>, <4>], [<3>, <4>, <7>, <5>, <1>, <2>, <6>, <8>, <0>, <9>], [<3>, <4>, <7>, <6>, <8>, <0>, <9>, <5>, <1>, <2>]]',)",3,232
topological_sort,"[(<2>, <0>), (<2>, <8>), (<2>, <9>), (<2>, <1>), (<8>, <0>), (<9>, <0>), (<9>, <8>), (<1>, <7>), (<7>, <5>), (<7>, <9>), (<7>, <8>), (<5>, <0>), (<6>, <3>), (<6>, <4>), (<6>, <9>), (<6>, <5>), (<3>, <2>), (<3>, <1>), (<4>, <2>), (<4>, <3>)]","{<2>: [<0>, <8>, <9>, <1>],
<0>: [],
<8>: [<0>],
<9>: [<0>, <8>],
<1>: [<7>],
<7>: [<5>, <9>, <8>],
<5>: [<0>],
<6>: [<3>, <4>, <9>, <5>],
<3>: [<2>, <1>],
<4>: [<2>, <3>]}","Node <2> is connected to nodes <0>, <8>, <9>, <1>.
Node <8> is connected to node <0>.
Node <9> is connected to nodes <0>, <8>.
Node <1> is connected to node <7>.
Node <7> is connected to nodes <5>, <9>, <8>.
Node <5> is connected to node <0>.
Node <6> is connected to nodes <3>, <4>, <9>, <5>.
Node <3> is connected to nodes <2>, <1>.
Node <4> is connected to nodes <2>, <3>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>]",10,20,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<6>, <4>, <3>, <2>, <1>, <7>, <5>, <9>, <8>, <0>]","Let's solve it step by step.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <9>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
So the result of topological sorting is ","('[[<6>, <4>, <3>, <9>, <8>, <0>, <2>, <1>, <7>, <5>], [<6>, <8>, <7>, <5>, <3>, <0>, <2>, <9>, <4>, <1>], [<6>, <4>, <3>, <2>, <1>, <5>, <0>, <8>, <7>, <9>], [<6>, <4>, <3>, <2>, <1>, <7>, <5>, <9>, <8>, <0>]]',)",3,233
topological_sort,"[(<11>, <2>), (<2>, <4>), (<2>, <0>), (<4>, <6>), (<4>, <3>), (<4>, <0>), (<0>, <8>), (<9>, <10>), (<9>, <0>), (<10>, <5>), (<6>, <10>), (<6>, <0>), (<7>, <11>), (<7>, <1>), (<7>, <4>), (<1>, <5>), (<1>, <11>), (<1>, <0>), (<1>, <3>)]","{<11>: [<2>],
<2>: [<4>, <0>],
<4>: [<6>, <3>, <0>],
<0>: [<8>],
<9>: [<10>, <0>],
<10>: [<5>],
<5>: [],
<6>: [<10>, <0>],
<3>: [],
<7>: [<11>, <1>, <4>],
<1>: [<5>, <11>, <0>, <3>],
<8>: []}","Node <11> is connected to node <2>.
Node <2> is connected to nodes <4>, <0>.
Node <4> is connected to nodes <6>, <3>, <0>.
Node <0> is connected to node <8>.
Node <9> is connected to nodes <10>, <0>.
Node <10> is connected to node <5>.
Node <6> is connected to nodes <10>, <0>.
Node <7> is connected to nodes <11>, <1>, <4>.
Node <1> is connected to nodes <5>, <11>, <0>, <3>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>]",12,19,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<9>, <7>, <1>, <11>, <2>, <4>, <6>, <3>, <10>, <0>, <5>, <8>]","Let's solve it step by step.
Nodes with 0 in-degree: [<9>, <7>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<11>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <3>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <10>, <0>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<10>, <0>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <5>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <8>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
So the result of topological sorting is ","('[[<9>, <7>, <1>, <11>, <2>, <4>, <6>, <3>, <10>, <0>, <5>, <8>], [<9>, <7>, <1>, <11>, <2>, <4>, <0>, <8>, <5>, <10>, <3>, <6>], [<9>, <8>, <4>, <7>, <11>, <2>, <10>, <0>, <1>, <5>, <3>, <6>], [<9>, <7>, <1>, <11>, <10>, <0>, <5>, <8>, <2>, <4>, <6>, <3>]]',)",0,234
topological_sort,"[(<12>, <7>), (<12>, <4>), (<12>, <2>), (<12>, <5>), (<12>, <6>), (<7>, <1>), (<4>, <3>), (<4>, <2>), (<4>, <9>), (<5>, <0>), (<5>, <6>), (<6>, <1>), (<6>, <4>), (<6>, <10>), (<6>, <2>), (<6>, <7>), (<1>, <3>), (<1>, <4>), (<10>, <3>), (<10>, <7>), (<10>, <9>), (<10>, <1>), (<3>, <9>), (<3>, <2>), (<8>, <4>), (<8>, <0>), (<8>, <7>), (<8>, <1>), (<8>, <2>), (<0>, <2>), (<0>, <10>), (<0>, <7>), (<11>, <1>), (<11>, <8>), (<11>, <9>), (<11>, <3>), (<11>, <12>)]","{<12>: [<7>, <4>, <2>, <5>, <6>],
<7>: [<1>],
<4>: [<3>, <2>, <9>],
<2>: [],
<5>: [<0>, <6>],
<6>: [<1>, <4>, <10>, <2>, <7>],
<1>: [<3>, <4>],
<10>: [<3>, <7>, <9>, <1>],
<3>: [<9>, <2>],
<9>: [],
<8>: [<4>, <0>, <7>, <1>, <2>],
<0>: [<2>, <10>, <7>],
<11>: [<1>, <8>, <9>, <3>, <12>]}","Node <12> is connected to nodes <7>, <4>, <2>, <5>, <6>.
Node <7> is connected to node <1>.
Node <4> is connected to nodes <3>, <2>, <9>.
Node <5> is connected to nodes <0>, <6>.
Node <6> is connected to nodes <1>, <4>, <10>, <2>, <7>.
Node <1> is connected to nodes <3>, <4>.
Node <10> is connected to nodes <3>, <7>, <9>, <1>.
Node <3> is connected to nodes <9>, <2>.
Node <8> is connected to nodes <4>, <0>, <7>, <1>, <2>.
Node <0> is connected to nodes <2>, <10>, <7>.
Node <11> is connected to nodes <1>, <8>, <9>, <3>, <12>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>]",13,37,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<11>, <8>, <12>, <5>, <0>, <6>, <10>, <7>, <1>, <4>, <3>, <9>, <2>]","Let's solve it step by step.
Nodes with 0 in-degree: [<11>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<8>, <12>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<12>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <6>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<9>, <2>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
So the result of topological sorting is ","('[[<11>, <8>, <12>, <5>, <0>, <6>, <1>, <7>, <10>, <3>, <2>, <9>, <4>], [<11>, <8>, <12>, <5>, <0>, <6>, <10>, <7>, <1>, <4>, <3>, <9>, <2>], [<11>, <8>, <12>, <5>, <4>, <3>, <9>, <2>, <0>, <6>, <10>, <7>, <1>], [<11>, <5>, <0>, <3>, <4>, <2>, <9>, <10>, <12>, <1>, <6>, <8>, <7>]]',)",1,235
topological_sort,"[(<9>, <0>), (<9>, <2>), (<9>, <6>), (<9>, <3>), (<2>, <13>), (<2>, <10>), (<2>, <14>), (<2>, <11>), (<6>, <0>), (<3>, <4>), (<3>, <2>), (<3>, <7>), (<3>, <1>), (<12>, <13>), (<12>, <14>), (<12>, <2>), (<12>, <10>), (<13>, <10>), (<13>, <11>), (<14>, <8>), (<14>, <7>), (<10>, <14>), (<10>, <8>), (<10>, <6>), (<11>, <10>), (<11>, <0>), (<11>, <8>), (<11>, <7>), (<4>, <6>), (<4>, <7>), (<7>, <8>), (<7>, <0>), (<1>, <13>), (<1>, <5>), (<1>, <8>), (<1>, <14>), (<5>, <7>), (<5>, <11>), (<5>, <12>), (<5>, <8>), (<5>, <0>)]","{<9>: [<0>, <2>, <6>, <3>],
<0>: [],
<2>: [<13>, <10>, <14>, <11>],
<6>: [<0>],
<3>: [<4>, <2>, <7>, <1>],
<12>: [<13>, <14>, <2>, <10>],
<13>: [<10>, <11>],
<14>: [<8>, <7>],
<10>: [<14>, <8>, <6>],
<11>: [<10>, <0>, <8>, <7>],
<4>: [<6>, <7>],
<7>: [<8>, <0>],
<1>: [<13>, <5>, <8>, <14>],
<8>: [],
<5>: [<7>, <11>, <12>, <8>, <0>]}","Node <9> is connected to nodes <0>, <2>, <6>, <3>.
Node <2> is connected to nodes <13>, <10>, <14>, <11>.
Node <6> is connected to node <0>.
Node <3> is connected to nodes <4>, <2>, <7>, <1>.
Node <12> is connected to nodes <13>, <14>, <2>, <10>.
Node <13> is connected to nodes <10>, <11>.
Node <14> is connected to nodes <8>, <7>.
Node <10> is connected to nodes <14>, <8>, <6>.
Node <11> is connected to nodes <10>, <0>, <8>, <7>.
Node <4> is connected to nodes <6>, <7>.
Node <7> is connected to nodes <8>, <0>.
Node <1> is connected to nodes <13>, <5>, <8>, <14>.
Node <5> is connected to nodes <7>, <11>, <12>, <8>, <0>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>, <14>]",15,41,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<9>, <3>, <4>, <1>, <5>, <12>, <2>, <13>, <11>, <10>, <14>, <6>, <7>, <8>, <0>]","Let's solve it step by step.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <1>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<12>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<13>].
Visit node <13> and remove it from the graph.
Nodes with 0 in-degree: [<11>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<14>, <6>].
Visit node <14> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <7>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<8>, <0>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
So the result of topological sorting is ","('[[<9>, <1>, <7>, <0>, <3>, <4>, <12>, <13>, <5>, <8>, <11>, <6>, <10>, <14>, <2>], [<9>, <3>, <4>, <1>, <5>, <12>, <2>, <13>, <11>, <10>, <14>, <6>, <7>, <8>, <0>], [<9>, <3>, <4>, <1>, <5>, <14>, <6>, <7>, <8>, <0>, <12>, <2>, <13>, <11>, <10>], [<9>, <3>, <4>, <1>, <5>, <12>, <2>, <7>, <6>, <0>, <14>, <10>, <8>, <13>, <11>]]',)",1,236
topological_sort,"[(<1>, <0>), (<1>, <5>), (<1>, <3>), (<1>, <12>), (<0>, <3>), (<0>, <4>), (<5>, <9>), (<3>, <8>), (<12>, <7>), (<4>, <3>), (<7>, <5>), (<7>, <4>), (<7>, <2>), (<2>, <9>), (<9>, <13>), (<10>, <12>), (<10>, <7>), (<10>, <11>), (<10>, <13>), (<10>, <9>), (<10>, <3>), (<11>, <1>), (<11>, <2>), (<11>, <0>), (<11>, <4>), (<6>, <7>), (<6>, <4>)]","{<1>: [<0>, <5>, <3>, <12>],
<0>: [<3>, <4>],
<5>: [<9>],
<3>: [<8>],
<12>: [<7>],
<4>: [<3>],
<8>: [],
<7>: [<5>, <4>, <2>],
<2>: [<9>],
<9>: [<13>],
<10>: [<12>, <7>, <11>, <13>, <9>, <3>],
<11>: [<1>, <2>, <0>, <4>],
<13>: [],
<6>: [<7>, <4>]}","Node <1> is connected to nodes <0>, <5>, <3>, <12>.
Node <0> is connected to nodes <3>, <4>.
Node <5> is connected to node <9>.
Node <3> is connected to node <8>.
Node <12> is connected to node <7>.
Node <4> is connected to node <3>.
Node <7> is connected to nodes <5>, <4>, <2>.
Node <2> is connected to node <9>.
Node <9> is connected to node <13>.
Node <10> is connected to nodes <12>, <7>, <11>, <13>, <9>, <3>.
Node <11> is connected to nodes <1>, <2>, <0>, <4>.
Node <6> is connected to nodes <7>, <4>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>]",14,27,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<10>, <6>, <11>, <1>, <0>, <12>, <7>, <5>, <4>, <2>, <3>, <9>, <8>, <13>]","Let's solve it step by step.
Nodes with 0 in-degree: [<10>, <6>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <11>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<11>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <12>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<12>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <4>, <2>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <2>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <3>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <9>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<9>, <8>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<8>, <13>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<13>].
Visit node <13> and remove it from the graph.
So the result of topological sorting is ","('[[<10>, <0>, <13>, <12>, <8>, <4>, <5>, <6>, <7>, <9>, <2>, <11>, <3>, <1>], [<10>, <6>, <11>, <1>, <3>, <9>, <8>, <13>, <0>, <12>, <7>, <5>, <4>, <2>], [<10>, <6>, <11>, <1>, <0>, <12>, <7>, <5>, <4>, <2>, <3>, <9>, <8>, <13>], [<10>, <6>, <11>, <1>, <0>, <12>, <7>, <4>, <5>, <2>, <3>, <8>, <9>, <13>]]',)",2,237
topological_sort,"[(<2>, <7>), (<2>, <8>), (<2>, <3>), (<7>, <0>), (<3>, <4>), (<3>, <7>), (<6>, <3>), (<6>, <9>), (<6>, <2>), (<9>, <8>), (<4>, <9>), (<4>, <8>), (<10>, <7>), (<10>, <3>), (<10>, <2>), (<10>, <1>), (<1>, <7>), (<1>, <9>), (<1>, <6>), (<5>, <0>), (<5>, <6>), (<5>, <10>)]","{<2>: [<7>, <8>, <3>],
<7>: [<0>],
<8>: [],
<3>: [<4>, <7>],
<0>: [],
<6>: [<3>, <9>, <2>],
<9>: [<8>],
<4>: [<9>, <8>],
<10>: [<7>, <3>, <2>, <1>],
<1>: [<7>, <9>, <6>],
<5>: [<0>, <6>, <10>]}","Node <2> is connected to nodes <7>, <8>, <3>.
Node <7> is connected to node <0>.
Node <3> is connected to nodes <4>, <7>.
Node <6> is connected to nodes <3>, <9>, <2>.
Node <9> is connected to node <8>.
Node <4> is connected to nodes <9>, <8>.
Node <10> is connected to nodes <7>, <3>, <2>, <1>.
Node <1> is connected to nodes <7>, <9>, <6>.
Node <5> is connected to nodes <0>, <6>, <10>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>]",11,22,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<5>, <10>, <1>, <6>, <2>, <3>, <4>, <7>, <9>, <0>, <8>]","Let's solve it step by step.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <7>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <9>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<9>, <0>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <8>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
So the result of topological sorting is ","('[[<5>, <4>, <7>, <9>, <1>, <10>, <0>, <2>, <3>, <6>, <8>], [<5>, <10>, <1>, <6>, <2>, <8>, <4>, <7>, <0>, <9>, <3>], [<5>, <10>, <1>, <6>, <2>, <3>, <4>, <7>, <9>, <0>, <8>], [<5>, <10>, <1>, <9>, <0>, <8>, <6>, <2>, <3>, <4>, <7>]]',)",2,238
topological_sort,"[(<4>, <0>), (<4>, <9>), (<9>, <2>), (<3>, <6>), (<3>, <4>), (<3>, <1>), (<6>, <4>), (<6>, <7>), (<1>, <0>), (<1>, <5>), (<7>, <0>), (<7>, <5>), (<10>, <8>), (<10>, <2>), (<10>, <5>), (<8>, <1>), (<8>, <7>), (<8>, <3>), (<2>, <0>), (<2>, <1>), (<2>, <7>)]","{<4>: [<0>, <9>],
<0>: [],
<9>: [<2>],
<3>: [<6>, <4>, <1>],
<6>: [<4>, <7>],
<1>: [<0>, <5>],
<7>: [<0>, <5>],
<10>: [<8>, <2>, <5>],
<8>: [<1>, <7>, <3>],
<2>: [<0>, <1>, <7>],
<5>: []}","Node <4> is connected to nodes <0>, <9>.
Node <9> is connected to node <2>.
Node <3> is connected to nodes <6>, <4>, <1>.
Node <6> is connected to nodes <4>, <7>.
Node <1> is connected to nodes <0>, <5>.
Node <7> is connected to nodes <0>, <5>.
Node <10> is connected to nodes <8>, <2>, <5>.
Node <8> is connected to nodes <1>, <7>, <3>.
Node <2> is connected to nodes <0>, <1>, <7>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>]",11,21,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<10>, <8>, <3>, <6>, <4>, <9>, <2>, <1>, <7>, <0>, <5>]","Let's solve it step by step.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <7>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <5>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
So the result of topological sorting is ","('[[<10>, <8>, <3>, <6>, <4>, <9>, <2>, <1>, <7>, <0>, <5>], [<10>, <8>, <3>, <7>, <0>, <5>, <6>, <4>, <9>, <2>, <1>], [<10>, <1>, <6>, <0>, <8>, <3>, <2>, <5>, <9>, <4>, <7>], [<10>, <8>, <3>, <6>, <4>, <7>, <1>, <5>, <2>, <9>, <0>]]',)",0,239
topological_sort,"[(<2>, <7>), (<2>, <6>), (<2>, <5>), (<5>, <0>), (<9>, <6>), (<9>, <3>), (<9>, <2>), (<3>, <0>), (<8>, <5>), (<8>, <0>), (<1>, <9>), (<4>, <1>), (<4>, <7>)]","{<2>: [<7>, <6>, <5>],
<7>: [],
<6>: [],
<5>: [<0>],
<9>: [<6>, <3>, <2>],
<3>: [<0>],
<0>: [],
<8>: [<5>, <0>],
<1>: [<9>],
<4>: [<1>, <7>]}","Node <2> is connected to nodes <7>, <6>, <5>.
Node <5> is connected to node <0>.
Node <9> is connected to nodes <6>, <3>, <2>.
Node <3> is connected to node <0>.
Node <8> is connected to nodes <5>, <0>.
Node <1> is connected to node <9>.
Node <4> is connected to nodes <1>, <7>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>]",10,13,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<8>, <4>, <1>, <9>, <3>, <2>, <7>, <6>, <5>, <0>]","Let's solve it step by step.
Nodes with 0 in-degree: [<8>, <4>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <2>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <6>, <5>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <5>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
So the result of topological sorting is ","('[[<8>, <4>, <1>, <9>, <3>, <2>, <7>, <6>, <5>, <0>], [<8>, <7>, <0>, <2>, <6>, <3>, <5>, <4>, <9>, <1>], [<8>, <4>, <1>, <9>, <3>, <5>, <0>, <6>, <7>, <2>], [<8>, <4>, <1>, <6>, <5>, <0>, <9>, <3>, <2>, <7>]]',)",0,240
topological_sort,"[(<1>, <3>), (<1>, <4>), (<3>, <7>), (<3>, <8>), (<4>, <7>), (<4>, <10>), (<4>, <3>), (<7>, <8>), (<8>, <10>), (<10>, <0>), (<5>, <6>), (<5>, <1>), (<5>, <0>), (<5>, <9>), (<5>, <7>), (<6>, <1>), (<9>, <1>), (<9>, <0>), (<2>, <10>), (<2>, <4>)]","{<1>: [<3>, <4>],
<3>: [<7>, <8>],
<4>: [<7>, <10>, <3>],
<7>: [<8>],
<8>: [<10>],
<10>: [<0>],
<5>: [<6>, <1>, <0>, <9>, <7>],
<6>: [<1>],
<0>: [],
<9>: [<1>, <0>],
<2>: [<10>, <4>]}","Node <1> is connected to nodes <3>, <4>.
Node <3> is connected to nodes <7>, <8>.
Node <4> is connected to nodes <7>, <10>, <3>.
Node <7> is connected to node <8>.
Node <8> is connected to node <10>.
Node <10> is connected to node <0>.
Node <5> is connected to nodes <6>, <1>, <0>, <9>, <7>.
Node <6> is connected to node <1>.
Node <9> is connected to nodes <1>, <0>.
Node <2> is connected to nodes <10>, <4>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>]",11,20,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<5>, <2>, <6>, <9>, <1>, <4>, <3>, <7>, <8>, <10>, <0>]","Let's solve it step by step.
Nodes with 0 in-degree: [<5>, <2>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <6>, <9>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <9>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
So the result of topological sorting is ","('[[<5>, <2>, <6>, <9>, <1>, <0>, <7>, <3>, <10>, <8>, <4>], [<5>, <6>, <8>, <9>, <10>, <1>, <4>, <2>, <0>, <3>, <7>], [<5>, <2>, <6>, <9>, <1>, <4>, <3>, <7>, <8>, <10>, <0>], [<5>, <2>, <6>, <8>, <10>, <0>, <9>, <1>, <4>, <3>, <7>]]',)",2,241
topological_sort,"[(<7>, <10>), (<7>, <0>), (<7>, <9>), (<10>, <1>), (<10>, <3>), (<0>, <10>), (<0>, <4>), (<0>, <5>), (<0>, <9>), (<0>, <6>), (<1>, <6>), (<3>, <6>), (<3>, <8>), (<3>, <1>), (<3>, <5>), (<6>, <9>), (<8>, <1>), (<8>, <6>), (<5>, <1>), (<4>, <2>), (<4>, <10>), (<2>, <5>), (<2>, <1>), (<2>, <10>), (<11>, <3>), (<11>, <1>), (<11>, <10>), (<11>, <7>)]","{<7>: [<10>, <0>, <9>],
<10>: [<1>, <3>],
<0>: [<10>, <4>, <5>, <9>, <6>],
<9>: [],
<1>: [<6>],
<3>: [<6>, <8>, <1>, <5>],
<6>: [<9>],
<8>: [<1>, <6>],
<5>: [<1>],
<4>: [<2>, <10>],
<2>: [<5>, <1>, <10>],
<11>: [<3>, <1>, <10>, <7>]}","Node <7> is connected to nodes <10>, <0>, <9>.
Node <10> is connected to nodes <1>, <3>.
Node <0> is connected to nodes <10>, <4>, <5>, <9>, <6>.
Node <1> is connected to node <6>.
Node <3> is connected to nodes <6>, <8>, <1>, <5>.
Node <6> is connected to node <9>.
Node <8> is connected to nodes <1>, <6>.
Node <5> is connected to node <1>.
Node <4> is connected to nodes <2>, <10>.
Node <2> is connected to nodes <5>, <1>, <10>.
Node <11> is connected to nodes <3>, <1>, <10>, <7>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>]",12,28,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<11>, <7>, <0>, <4>, <2>, <10>, <3>, <8>, <5>, <1>, <6>, <9>]","Let's solve it step by step.
Nodes with 0 in-degree: [<11>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<8>, <5>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
So the result of topological sorting is ","('[[<11>, <6>, <1>, <5>, <4>, <10>, <0>, <3>, <2>, <8>, <7>, <9>], [<11>, <7>, <0>, <4>, <2>, <10>, <3>, <8>, <5>, <1>, <6>, <9>], [<11>, <7>, <0>, <4>, <5>, <1>, <6>, <9>, <2>, <10>, <3>, <8>], [<11>, <7>, <0>, <4>, <2>, <10>, <1>, <5>, <9>, <3>, <8>, <6>]]',)",1,242
topological_sort,"[(<8>, <5>), (<8>, <11>), (<8>, <3>), (<8>, <1>), (<5>, <12>), (<11>, <12>), (<11>, <9>), (<11>, <3>), (<3>, <5>), (<3>, <7>), (<3>, <9>), (<1>, <9>), (<1>, <5>), (<1>, <7>), (<6>, <5>), (<6>, <1>), (<6>, <4>), (<4>, <5>), (<9>, <12>), (<10>, <0>), (<10>, <1>), (<10>, <5>), (<10>, <2>), (<0>, <4>), (<0>, <11>), (<2>, <1>), (<2>, <11>), (<2>, <7>), (<2>, <0>), (<7>, <5>)]","{<8>: [<5>, <11>, <3>, <1>],
<5>: [<12>],
<11>: [<12>, <9>, <3>],
<3>: [<5>, <7>, <9>],
<1>: [<9>, <5>, <7>],
<12>: [],
<6>: [<5>, <1>, <4>],
<4>: [<5>],
<9>: [<12>],
<10>: [<0>, <1>, <5>, <2>],
<0>: [<4>, <11>],
<2>: [<1>, <11>, <7>, <0>],
<7>: [<5>]}","Node <8> is connected to nodes <5>, <11>, <3>, <1>.
Node <5> is connected to node <12>.
Node <11> is connected to nodes <12>, <9>, <3>.
Node <3> is connected to nodes <5>, <7>, <9>.
Node <1> is connected to nodes <9>, <5>, <7>.
Node <6> is connected to nodes <5>, <1>, <4>.
Node <4> is connected to node <5>.
Node <9> is connected to node <12>.
Node <10> is connected to nodes <0>, <1>, <5>, <2>.
Node <0> is connected to nodes <4>, <11>.
Node <2> is connected to nodes <1>, <11>, <7>, <0>.
Node <7> is connected to node <5>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>]",13,30,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<8>, <6>, <10>, <2>, <1>, <0>, <4>, <11>, <3>, <7>, <9>, <5>, <12>]","Let's solve it step by step.
Nodes with 0 in-degree: [<8>, <6>, <10>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <10>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <0>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <11>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<11>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <9>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<9>, <5>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<12>].
Visit node <12> and remove it from the graph.
So the result of topological sorting is ","('[[<8>, <6>, <10>, <2>, <1>, <0>, <4>, <11>, <3>, <7>, <9>, <5>, <12>], [<8>, <6>, <10>, <2>, <7>, <9>, <5>, <12>, <1>, <0>, <4>, <11>, <3>], [<8>, <1>, <7>, <5>, <9>, <10>, <11>, <3>, <6>, <2>, <0>, <4>, <12>], [<8>, <6>, <10>, <2>, <1>, <0>, <9>, <12>, <11>, <7>, <3>, <5>, <4>]]',)",0,243
topological_sort,"[(<1>, <0>), (<1>, <4>), (<1>, <8>), (<1>, <2>), (<1>, <7>), (<1>, <9>), (<0>, <4>), (<0>, <7>), (<0>, <11>), (<8>, <5>), (<8>, <4>), (<2>, <5>), (<2>, <7>), (<2>, <4>), (<2>, <9>), (<2>, <0>), (<7>, <4>), (<9>, <5>), (<9>, <8>), (<11>, <4>), (<6>, <5>), (<6>, <1>), (<6>, <9>), (<6>, <2>), (<5>, <0>), (<5>, <4>), (<3>, <7>), (<3>, <2>), (<3>, <9>), (<3>, <0>), (<3>, <11>), (<3>, <6>), (<10>, <1>), (<10>, <6>), (<10>, <11>)]","{<1>: [<0>, <4>, <8>, <2>, <7>, <9>],
<0>: [<4>, <7>, <11>],
<4>: [],
<8>: [<5>, <4>],
<2>: [<5>, <7>, <4>, <9>, <0>],
<7>: [<4>],
<9>: [<5>, <8>],
<11>: [<4>],
<6>: [<5>, <1>, <9>, <2>],
<5>: [<0>, <4>],
<3>: [<7>, <2>, <9>, <0>, <11>, <6>],
<10>: [<1>, <6>, <11>]}","Node <1> is connected to nodes <0>, <4>, <8>, <2>, <7>, <9>.
Node <0> is connected to nodes <4>, <7>, <11>.
Node <8> is connected to nodes <5>, <4>.
Node <2> is connected to nodes <5>, <7>, <4>, <9>, <0>.
Node <7> is connected to node <4>.
Node <9> is connected to nodes <5>, <8>.
Node <11> is connected to node <4>.
Node <6> is connected to nodes <5>, <1>, <9>, <2>.
Node <5> is connected to nodes <0>, <4>.
Node <3> is connected to nodes <7>, <2>, <9>, <0>, <11>, <6>.
Node <10> is connected to nodes <1>, <6>, <11>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>]",12,35,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<3>, <10>, <6>, <1>, <2>, <9>, <8>, <5>, <0>, <7>, <11>, <4>]","Let's solve it step by step.
Nodes with 0 in-degree: [<3>, <10>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <11>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<11>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
So the result of topological sorting is ","('[[<3>, <10>, <6>, <1>, <2>, <9>, <8>, <5>, <0>, <7>, <11>, <4>], [<3>, <6>, <10>, <0>, <1>, <11>, <4>, <9>, <7>, <8>, <5>, <2>], [<3>, <10>, <6>, <1>, <2>, <9>, <0>, <8>, <7>, <4>, <11>, <5>], [<3>, <10>, <6>, <1>, <0>, <7>, <11>, <4>, <2>, <9>, <8>, <5>]]',)",0,244
topological_sort,"[(<4>, <2>), (<4>, <1>), (<2>, <1>), (<1>, <6>), (<3>, <7>), (<3>, <8>), (<3>, <4>), (<7>, <2>), (<7>, <0>), (<8>, <5>), (<8>, <4>), (<0>, <5>), (<0>, <8>), (<5>, <6>), (<5>, <2>), (<5>, <4>), (<5>, <1>)]","{<4>: [<2>, <1>],
<2>: [<1>],
<1>: [<6>],
<3>: [<7>, <8>, <4>],
<7>: [<2>, <0>],
<8>: [<5>, <4>],
<0>: [<5>, <8>],
<5>: [<6>, <2>, <4>, <1>],
<6>: []}","Node <4> is connected to nodes <2>, <1>.
Node <2> is connected to node <1>.
Node <1> is connected to node <6>.
Node <3> is connected to nodes <7>, <8>, <4>.
Node <7> is connected to nodes <2>, <0>.
Node <8> is connected to nodes <5>, <4>.
Node <0> is connected to nodes <5>, <8>.
Node <5> is connected to nodes <6>, <2>, <4>, <1>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>]",9,17,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<3>, <7>, <0>, <8>, <5>, <4>, <2>, <1>, <6>]","Let's solve it step by step.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
So the result of topological sorting is ","('[[<3>, <7>, <0>, <5>, <8>, <6>, <1>, <2>, <4>], [<3>, <7>, <0>, <8>, <5>, <4>, <2>, <1>, <6>], [<3>, <7>, <0>, <8>, <1>, <4>, <2>, <5>, <6>], [<3>, <7>, <0>, <2>, <1>, <6>, <8>, <5>, <4>]]',)",1,245
topological_sort,"[(<5>, <8>), (<5>, <10>), (<8>, <13>), (<10>, <8>), (<10>, <7>), (<13>, <2>), (<4>, <2>), (<7>, <4>), (<7>, <9>), (<7>, <2>), (<0>, <2>), (<0>, <6>), (<0>, <4>), (<6>, <5>), (<6>, <9>), (<11>, <1>), (<11>, <9>), (<11>, <8>), (<1>, <4>), (<9>, <8>), (<12>, <5>), (<12>, <7>), (<3>, <5>), (<3>, <13>), (<3>, <8>)]","{<5>: [<8>, <10>],
<8>: [<13>],
<10>: [<8>, <7>],
<13>: [<2>],
<4>: [<2>],
<2>: [],
<7>: [<4>, <9>, <2>],
<0>: [<2>, <6>, <4>],
<6>: [<5>, <9>],
<11>: [<1>, <9>, <8>],
<1>: [<4>],
<9>: [<8>],
<12>: [<5>, <7>],
<3>: [<5>, <13>, <8>]}","Node <5> is connected to nodes <8>, <10>.
Node <8> is connected to node <13>.
Node <10> is connected to nodes <8>, <7>.
Node <13> is connected to node <2>.
Node <4> is connected to node <2>.
Node <7> is connected to nodes <4>, <9>, <2>.
Node <0> is connected to nodes <2>, <6>, <4>.
Node <6> is connected to nodes <5>, <9>.
Node <11> is connected to nodes <1>, <9>, <8>.
Node <1> is connected to node <4>.
Node <9> is connected to node <8>.
Node <12> is connected to nodes <5>, <7>.
Node <3> is connected to nodes <5>, <13>, <8>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>]",14,25,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<0>, <11>, <12>, <3>, <6>, <1>, <5>, <10>, <7>, <4>, <9>, <8>, <13>, <2>]","Let's solve it step by step.
Nodes with 0 in-degree: [<0>, <11>, <12>, <3>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<11>, <12>, <3>, <6>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<12>, <3>, <6>, <1>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <6>, <1>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <1>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <5>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <9>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<13>].
Visit node <13> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
So the result of topological sorting is ","('[[<0>, <11>, <12>, <3>, <9>, <8>, <13>, <2>, <6>, <1>, <5>, <10>, <7>, <4>], [<0>, <13>, <11>, <1>, <2>, <3>, <5>, <10>, <6>, <7>, <4>, <8>, <9>, <12>], [<0>, <11>, <12>, <3>, <6>, <1>, <5>, <10>, <7>, <4>, <9>, <8>, <13>, <2>], [<0>, <11>, <12>, <3>, <6>, <1>, <5>, <4>, <13>, <7>, <10>, <9>, <8>, <2>]]',)",2,246
topological_sort,"[(<5>, <8>), (<5>, <4>), (<8>, <4>), (<8>, <0>), (<0>, <4>), (<1>, <3>), (<1>, <7>), (<1>, <6>), (<3>, <7>), (<3>, <2>), (<7>, <0>), (<6>, <8>), (<6>, <2>), (<2>, <4>), (<2>, <5>)]","{<5>: [<8>, <4>],
<8>: [<4>, <0>],
<4>: [],
<0>: [<4>],
<1>: [<3>, <7>, <6>],
<3>: [<7>, <2>],
<7>: [<0>],
<6>: [<8>, <2>],
<2>: [<4>, <5>]}","Node <5> is connected to nodes <8>, <4>.
Node <8> is connected to nodes <4>, <0>.
Node <0> is connected to node <4>.
Node <1> is connected to nodes <3>, <7>, <6>.
Node <3> is connected to nodes <7>, <2>.
Node <7> is connected to node <0>.
Node <6> is connected to nodes <8>, <2>.
Node <2> is connected to nodes <4>, <5>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>]",9,15,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<1>, <3>, <6>, <7>, <2>, <5>, <8>, <0>, <4>]","Let's solve it step by step.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <6>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <7>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <2>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
So the result of topological sorting is ","('[[<1>, <3>, <6>, <7>, <5>, <0>, <4>, <2>, <8>], [<1>, <3>, <6>, <8>, <0>, <4>, <7>, <2>, <5>], [<1>, <0>, <8>, <4>, <2>, <7>, <3>, <5>, <6>], [<1>, <3>, <6>, <7>, <2>, <5>, <8>, <0>, <4>]]',)",3,247
topological_sort,"[(<11>, <9>), (<11>, <7>), (<9>, <12>), (<9>, <7>), (<7>, <10>), (<12>, <5>), (<12>, <2>), (<5>, <4>), (<5>, <0>), (<5>, <3>), (<2>, <4>), (<4>, <1>), (<0>, <3>), (<8>, <13>), (<8>, <4>), (<13>, <11>), (<10>, <12>), (<10>, <3>), (<1>, <0>), (<6>, <12>), (<6>, <3>)]","{<11>: [<9>, <7>],
<9>: [<12>, <7>],
<7>: [<10>],
<12>: [<5>, <2>],
<5>: [<4>, <0>, <3>],
<2>: [<4>],
<4>: [<1>],
<0>: [<3>],
<3>: [],
<8>: [<13>, <4>],
<13>: [<11>],
<10>: [<12>, <3>],
<1>: [<0>],
<6>: [<12>, <3>]}","Node <11> is connected to nodes <9>, <7>.
Node <9> is connected to nodes <12>, <7>.
Node <7> is connected to node <10>.
Node <12> is connected to nodes <5>, <2>.
Node <5> is connected to nodes <4>, <0>, <3>.
Node <2> is connected to node <4>.
Node <4> is connected to node <1>.
Node <0> is connected to node <3>.
Node <8> is connected to nodes <13>, <4>.
Node <13> is connected to node <11>.
Node <10> is connected to nodes <12>, <3>.
Node <1> is connected to node <0>.
Node <6> is connected to nodes <12>, <3>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>]",14,21,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<8>, <6>, <13>, <11>, <9>, <7>, <10>, <12>, <5>, <2>, <4>, <1>, <0>, <3>]","Let's solve it step by step.
Nodes with 0 in-degree: [<8>, <6>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <13>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<13>].
Visit node <13> and remove it from the graph.
Nodes with 0 in-degree: [<11>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<12>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <2>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
So the result of topological sorting is ","('[[<8>, <6>, <13>, <11>, <4>, <1>, <0>, <3>, <9>, <7>, <10>, <12>, <5>, <2>], [<8>, <6>, <13>, <11>, <9>, <7>, <10>, <4>, <3>, <1>, <5>, <0>, <2>, <12>], [<8>, <10>, <5>, <7>, <11>, <4>, <3>, <9>, <0>, <12>, <13>, <1>, <2>, <6>], [<8>, <6>, <13>, <11>, <9>, <7>, <10>, <12>, <5>, <2>, <4>, <1>, <0>, <3>]]',)",3,248
topological_sort,"[(<8>, <5>), (<8>, <2>), (<8>, <4>), (<8>, <7>), (<8>, <6>), (<8>, <3>), (<5>, <9>), (<5>, <7>), (<2>, <10>), (<7>, <6>), (<7>, <9>), (<7>, <0>), (<3>, <6>), (<3>, <9>), (<9>, <4>), (<9>, <6>), (<9>, <10>), (<0>, <4>), (<0>, <2>), (<0>, <9>), (<1>, <0>)]","{<8>: [<5>, <2>, <4>, <7>, <6>, <3>],
<5>: [<9>, <7>],
<2>: [<10>],
<4>: [],
<7>: [<6>, <9>, <0>],
<6>: [],
<3>: [<6>, <9>],
<9>: [<4>, <6>, <10>],
<10>: [],
<0>: [<4>, <2>, <9>],
<1>: [<0>]}","Node <8> is connected to nodes <5>, <2>, <4>, <7>, <6>, <3>.
Node <5> is connected to nodes <9>, <7>.
Node <2> is connected to node <10>.
Node <7> is connected to nodes <6>, <9>, <0>.
Node <3> is connected to nodes <6>, <9>.
Node <9> is connected to nodes <4>, <6>, <10>.
Node <0> is connected to nodes <4>, <2>, <9>.
Node <1> is connected to node <0>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>]",11,21,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<8>, <1>, <5>, <3>, <7>, <0>, <2>, <9>, <4>, <6>, <10>]","Let's solve it step by step.
Nodes with 0 in-degree: [<8>, <1>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <5>, <3>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <3>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <7>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <9>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <6>, <10>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <10>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
So the result of topological sorting is ","('[[<8>, <1>, <5>, <3>, <7>, <0>, <2>, <9>, <4>, <6>, <10>], [<8>, <10>, <9>, <5>, <0>, <2>, <6>, <3>, <7>, <1>, <4>], [<8>, <1>, <5>, <3>, <7>, <9>, <0>, <10>, <4>, <2>, <6>], [<8>, <1>, <5>, <4>, <6>, <10>, <3>, <7>, <0>, <2>, <9>]]',)",0,249
topological_sort,"[(<6>, <2>), (<6>, <4>), (<6>, <9>), (<6>, <3>), (<2>, <9>), (<4>, <9>), (<9>, <1>), (<3>, <8>), (<3>, <4>), (<3>, <2>), (<8>, <4>), (<8>, <7>), (<7>, <0>), (<7>, <2>), (<10>, <2>), (<5>, <4>), (<5>, <9>), (<0>, <4>), (<0>, <5>)]","{<6>: [<2>, <4>, <9>, <3>],
<2>: [<9>],
<4>: [<9>],
<9>: [<1>],
<3>: [<8>, <4>, <2>],
<8>: [<4>, <7>],
<7>: [<0>, <2>],
<10>: [<2>],
<1>: [],
<5>: [<4>, <9>],
<0>: [<4>, <5>]}","Node <6> is connected to nodes <2>, <4>, <9>, <3>.
Node <2> is connected to node <9>.
Node <4> is connected to node <9>.
Node <9> is connected to node <1>.
Node <3> is connected to nodes <8>, <4>, <2>.
Node <8> is connected to nodes <4>, <7>.
Node <7> is connected to nodes <0>, <2>.
Node <10> is connected to node <2>.
Node <5> is connected to nodes <4>, <9>.
Node <0> is connected to nodes <4>, <5>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>]",11,19,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<6>, <10>, <3>, <8>, <7>, <0>, <2>, <5>, <4>, <9>, <1>]","Let's solve it step by step.
Nodes with 0 in-degree: [<6>, <10>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<10>, <3>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <2>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <5>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
So the result of topological sorting is ","('[[<6>, <2>, <0>, <10>, <1>, <4>, <9>, <7>, <3>, <5>, <8>], [<6>, <10>, <3>, <4>, <9>, <1>, <8>, <7>, <0>, <2>, <5>], [<6>, <10>, <3>, <8>, <7>, <5>, <0>, <2>, <4>, <1>, <9>], [<6>, <10>, <3>, <8>, <7>, <0>, <2>, <5>, <4>, <9>, <1>]]',)",3,250
topological_sort,"[(<2>, <9>), (<2>, <7>), (<2>, <5>), (<2>, <3>), (<9>, <7>), (<9>, <3>), (<7>, <4>), (<7>, <6>), (<5>, <10>), (<5>, <3>), (<5>, <9>), (<5>, <6>), (<5>, <7>), (<3>, <4>), (<11>, <1>), (<11>, <5>), (<11>, <8>), (<11>, <6>), (<1>, <4>), (<1>, <8>), (<1>, <9>), (<1>, <2>), (<1>, <10>), (<1>, <6>), (<8>, <10>), (<8>, <3>), (<8>, <7>), (<8>, <5>), (<6>, <3>), (<10>, <4>), (<10>, <9>), (<12>, <0>), (<12>, <1>), (<12>, <2>), (<12>, <10>), (<12>, <6>), (<12>, <4>), (<0>, <1>), (<0>, <3>), (<0>, <8>)]","{<2>: [<9>, <7>, <5>, <3>],
<9>: [<7>, <3>],
<7>: [<4>, <6>],
<5>: [<10>, <3>, <9>, <6>, <7>],
<3>: [<4>],
<11>: [<1>, <5>, <8>, <6>],
<1>: [<4>, <8>, <9>, <2>, <10>, <6>],
<8>: [<10>, <3>, <7>, <5>],
<6>: [<3>],
<4>: [],
<10>: [<4>, <9>],
<12>: [<0>, <1>, <2>, <10>, <6>, <4>],
<0>: [<1>, <3>, <8>]}","Node <2> is connected to nodes <9>, <7>, <5>, <3>.
Node <9> is connected to nodes <7>, <3>.
Node <7> is connected to nodes <4>, <6>.
Node <5> is connected to nodes <10>, <3>, <9>, <6>, <7>.
Node <3> is connected to node <4>.
Node <11> is connected to nodes <1>, <5>, <8>, <6>.
Node <1> is connected to nodes <4>, <8>, <9>, <2>, <10>, <6>.
Node <8> is connected to nodes <10>, <3>, <7>, <5>.
Node <6> is connected to node <3>.
Node <10> is connected to nodes <4>, <9>.
Node <12> is connected to nodes <0>, <1>, <2>, <10>, <6>, <4>.
Node <0> is connected to nodes <1>, <3>, <8>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>]",13,40,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<11>, <12>, <0>, <1>, <8>, <2>, <5>, <10>, <9>, <7>, <6>, <3>, <4>]","Let's solve it step by step.
Nodes with 0 in-degree: [<11>, <12>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<12>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<8>, <2>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
So the result of topological sorting is ","('[[<11>, <12>, <0>, <1>, <7>, <6>, <3>, <4>, <8>, <2>, <5>, <10>, <9>], [<11>, <5>, <1>, <3>, <4>, <2>, <12>, <8>, <10>, <6>, <9>, <0>, <7>], [<11>, <12>, <0>, <1>, <8>, <2>, <5>, <4>, <10>, <9>, <6>, <3>, <7>], [<11>, <12>, <0>, <1>, <8>, <2>, <5>, <10>, <9>, <7>, <6>, <3>, <4>]]',)",3,251
topological_sort,"[(<6>, <1>), (<6>, <10>), (<6>, <12>), (<10>, <7>), (<10>, <9>), (<10>, <1>), (<10>, <12>), (<12>, <2>), (<11>, <12>), (<11>, <5>), (<11>, <2>), (<5>, <8>), (<2>, <4>), (<2>, <1>), (<7>, <12>), (<7>, <8>), (<9>, <7>), (<3>, <9>), (<3>, <8>), (<3>, <4>), (<3>, <1>), (<0>, <9>), (<0>, <10>)]","{<6>: [<1>, <10>, <12>],
<1>: [],
<10>: [<7>, <9>, <1>, <12>],
<12>: [<2>],
<11>: [<12>, <5>, <2>],
<5>: [<8>],
<2>: [<4>, <1>],
<8>: [],
<7>: [<12>, <8>],
<9>: [<7>],
<4>: [],
<3>: [<9>, <8>, <4>, <1>],
<0>: [<9>, <10>]}","Node <6> is connected to nodes <1>, <10>, <12>.
Node <10> is connected to nodes <7>, <9>, <1>, <12>.
Node <12> is connected to node <2>.
Node <11> is connected to nodes <12>, <5>, <2>.
Node <5> is connected to node <8>.
Node <2> is connected to nodes <4>, <1>.
Node <7> is connected to nodes <12>, <8>.
Node <9> is connected to node <7>.
Node <3> is connected to nodes <9>, <8>, <4>, <1>.
Node <0> is connected to nodes <9>, <10>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>]",13,23,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<6>, <11>, <3>, <0>, <5>, <10>, <9>, <7>, <12>, <8>, <2>, <4>, <1>]","Let's solve it step by step.
Nodes with 0 in-degree: [<6>, <11>, <3>, <0>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<11>, <3>, <0>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <0>, <5>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <5>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <10>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<12>, <8>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<8>, <2>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <1>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
So the result of topological sorting is ","('[[<6>, <9>, <0>, <11>, <2>, <10>, <12>, <8>, <7>, <4>, <3>, <5>, <1>], [<6>, <11>, <3>, <0>, <5>, <10>, <9>, <7>, <12>, <8>, <2>, <4>, <1>], [<6>, <11>, <3>, <0>, <8>, <2>, <4>, <1>, <5>, <10>, <9>, <7>, <12>], [<6>, <11>, <3>, <0>, <5>, <10>, <8>, <9>, <4>, <12>, <2>, <7>, <1>]]',)",1,252
topological_sort,"[(<1>, <10>), (<1>, <4>), (<1>, <9>), (<1>, <8>), (<1>, <3>), (<10>, <5>), (<10>, <11>), (<10>, <6>), (<10>, <0>), (<10>, <7>), (<4>, <2>), (<4>, <0>), (<4>, <7>), (<4>, <9>), (<9>, <7>), (<9>, <0>), (<9>, <2>), (<8>, <4>), (<8>, <3>), (<8>, <2>), (<8>, <9>), (<3>, <6>), (<3>, <2>), (<5>, <9>), (<5>, <8>), (<11>, <4>), (<11>, <5>), (<11>, <0>), (<11>, <3>), (<6>, <4>), (<6>, <0>), (<7>, <0>)]","{<1>: [<10>, <4>, <9>, <8>, <3>],
<10>: [<5>, <11>, <6>, <0>, <7>],
<4>: [<2>, <0>, <7>, <9>],
<9>: [<7>, <0>, <2>],
<8>: [<4>, <3>, <2>, <9>],
<3>: [<6>, <2>],
<5>: [<9>, <8>],
<11>: [<4>, <5>, <0>, <3>],
<6>: [<4>, <0>],
<0>: [],
<7>: [<0>],
<2>: []}","Node <1> is connected to nodes <10>, <4>, <9>, <8>, <3>.
Node <10> is connected to nodes <5>, <11>, <6>, <0>, <7>.
Node <4> is connected to nodes <2>, <0>, <7>, <9>.
Node <9> is connected to nodes <7>, <0>, <2>.
Node <8> is connected to nodes <4>, <3>, <2>, <9>.
Node <3> is connected to nodes <6>, <2>.
Node <5> is connected to nodes <9>, <8>.
Node <11> is connected to nodes <4>, <5>, <0>, <3>.
Node <6> is connected to nodes <4>, <0>.
Node <7> is connected to node <0>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>]",12,32,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<1>, <10>, <11>, <5>, <8>, <3>, <6>, <4>, <9>, <7>, <2>, <0>]","Let's solve it step by step.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<11>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <2>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <0>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
So the result of topological sorting is ","('[[<1>, <10>, <11>, <5>, <8>, <3>, <6>, <4>, <9>, <7>, <2>, <0>], [<1>, <10>, <11>, <5>, <9>, <7>, <2>, <0>, <8>, <3>, <6>, <4>], [<1>, <3>, <4>, <10>, <0>, <6>, <2>, <5>, <7>, <8>, <9>, <11>], [<1>, <10>, <11>, <5>, <8>, <3>, <2>, <9>, <6>, <0>, <7>, <4>]]',)",0,253
topological_sort,"[(<2>, <5>), (<2>, <6>), (<2>, <0>), (<5>, <1>), (<0>, <4>), (<0>, <8>), (<0>, <9>), (<1>, <6>), (<1>, <4>), (<8>, <6>), (<7>, <1>), (<7>, <3>), (<7>, <0>), (<7>, <8>), (<7>, <5>), (<3>, <5>), (<3>, <9>), (<4>, <8>)]","{<2>: [<5>, <6>, <0>],
<5>: [<1>],
<6>: [],
<0>: [<4>, <8>, <9>],
<1>: [<6>, <4>],
<8>: [<6>],
<7>: [<1>, <3>, <0>, <8>, <5>],
<3>: [<5>, <9>],
<4>: [<8>],
<9>: []}","Node <2> is connected to nodes <5>, <6>, <0>.
Node <5> is connected to node <1>.
Node <0> is connected to nodes <4>, <8>, <9>.
Node <1> is connected to nodes <6>, <4>.
Node <8> is connected to node <6>.
Node <7> is connected to nodes <1>, <3>, <0>, <8>, <5>.
Node <3> is connected to nodes <5>, <9>.
Node <4> is connected to node <8>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>]",10,18,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<2>, <7>, <3>, <0>, <5>, <9>, <1>, <4>, <8>, <6>]","Let's solve it step by step.
Nodes with 0 in-degree: [<2>, <7>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <0>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <5>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <9>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<9>, <1>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
So the result of topological sorting is ","('[[<2>, <7>, <3>, <0>, <5>, <8>, <6>, <4>, <1>, <9>], [<2>, <7>, <3>, <0>, <5>, <9>, <1>, <4>, <8>, <6>], [<2>, <7>, <3>, <4>, <8>, <6>, <0>, <5>, <9>, <1>], [<2>, <8>, <7>, <9>, <5>, <0>, <4>, <3>, <1>, <6>]]',)",1,254
topological_sort,"[(<7>, <8>), (<7>, <5>), (<8>, <2>), (<8>, <13>), (<5>, <11>), (<5>, <8>), (<13>, <11>), (<12>, <14>), (<12>, <11>), (<12>, <8>), (<12>, <0>), (<14>, <6>), (<14>, <0>), (<14>, <13>), (<11>, <3>), (<0>, <7>), (<0>, <5>), (<6>, <7>), (<6>, <3>), (<10>, <13>), (<10>, <6>), (<10>, <11>), (<10>, <12>), (<4>, <7>), (<4>, <14>), (<4>, <6>), (<9>, <12>), (<9>, <2>), (<9>, <0>), (<9>, <13>), (<1>, <14>)]","{<7>: [<8>, <5>],
<8>: [<2>, <13>],
<5>: [<11>, <8>],
<2>: [],
<13>: [<11>],
<12>: [<14>, <11>, <8>, <0>],
<14>: [<6>, <0>, <13>],
<11>: [<3>],
<0>: [<7>, <5>],
<6>: [<7>, <3>],
<3>: [],
<10>: [<13>, <6>, <11>, <12>],
<4>: [<7>, <14>, <6>],
<9>: [<12>, <2>, <0>, <13>],
<1>: [<14>]}","Node <7> is connected to nodes <8>, <5>.
Node <8> is connected to nodes <2>, <13>.
Node <5> is connected to nodes <11>, <8>.
Node <13> is connected to node <11>.
Node <12> is connected to nodes <14>, <11>, <8>, <0>.
Node <14> is connected to nodes <6>, <0>, <13>.
Node <11> is connected to node <3>.
Node <0> is connected to nodes <7>, <5>.
Node <6> is connected to nodes <7>, <3>.
Node <10> is connected to nodes <13>, <6>, <11>, <12>.
Node <4> is connected to nodes <7>, <14>, <6>.
Node <9> is connected to nodes <12>, <2>, <0>, <13>.
Node <1> is connected to node <14>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>, <14>]",15,31,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<10>, <4>, <9>, <1>, <12>, <14>, <6>, <0>, <7>, <5>, <8>, <2>, <13>, <11>, <3>]","Let's solve it step by step.
Nodes with 0 in-degree: [<10>, <4>, <9>, <1>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <9>, <1>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<9>, <1>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <12>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<12>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<14>].
Visit node <14> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <0>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <13>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<13>].
Visit node <13> and remove it from the graph.
Nodes with 0 in-degree: [<11>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
So the result of topological sorting is ","('[[<10>, <4>, <9>, <1>, <12>, <14>, <6>, <0>, <7>, <5>, <8>, <2>, <13>, <11>, <3>], [<10>, <6>, <13>, <3>, <1>, <12>, <4>, <7>, <8>, <0>, <2>, <9>, <5>, <14>, <11>], [<10>, <4>, <9>, <1>, <12>, <14>, <6>, <0>, <7>, <3>, <8>, <13>, <2>, <11>, <5>], [<10>, <4>, <9>, <1>, <12>, <8>, <2>, <13>, <11>, <3>, <14>, <6>, <0>, <7>, <5>]]',)",0,255
topological_sort,"[(<1>, <7>), (<1>, <9>), (<7>, <3>), (<7>, <9>), (<9>, <3>), (<11>, <3>), (<11>, <1>), (<11>, <4>), (<4>, <7>), (<4>, <3>), (<5>, <6>), (<5>, <10>), (<5>, <2>), (<5>, <0>), (<5>, <1>), (<5>, <9>), (<6>, <2>), (<6>, <4>), (<6>, <8>), (<6>, <1>), (<10>, <3>), (<10>, <7>), (<10>, <1>), (<10>, <9>), (<10>, <11>), (<2>, <9>), (<2>, <4>), (<2>, <11>), (<2>, <7>), (<0>, <10>), (<0>, <11>), (<8>, <4>), (<8>, <11>)]","{<1>: [<7>, <9>],
<7>: [<3>, <9>],
<9>: [<3>],
<3>: [],
<11>: [<3>, <1>, <4>],
<4>: [<7>, <3>],
<5>: [<6>, <10>, <2>, <0>, <1>, <9>],
<6>: [<2>, <4>, <8>, <1>],
<10>: [<3>, <7>, <1>, <9>, <11>],
<2>: [<9>, <4>, <11>, <7>],
<0>: [<10>, <11>],
<8>: [<4>, <11>]}","Node <1> is connected to nodes <7>, <9>.
Node <7> is connected to nodes <3>, <9>.
Node <9> is connected to node <3>.
Node <11> is connected to nodes <3>, <1>, <4>.
Node <4> is connected to nodes <7>, <3>.
Node <5> is connected to nodes <6>, <10>, <2>, <0>, <1>, <9>.
Node <6> is connected to nodes <2>, <4>, <8>, <1>.
Node <10> is connected to nodes <3>, <7>, <1>, <9>, <11>.
Node <2> is connected to nodes <9>, <4>, <11>, <7>.
Node <0> is connected to nodes <10>, <11>.
Node <8> is connected to nodes <4>, <11>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>]",12,33,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<5>, <6>, <0>, <2>, <8>, <10>, <11>, <1>, <4>, <7>, <9>, <3>]","Let's solve it step by step.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <0>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <2>, <8>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <8>, <10>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<8>, <10>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<11>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <4>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
So the result of topological sorting is ","('[[<5>, <9>, <3>, <0>, <8>, <11>, <10>, <4>, <1>, <7>, <2>, <6>], [<5>, <6>, <0>, <2>, <8>, <10>, <11>, <1>, <4>, <7>, <9>, <3>], [<5>, <6>, <0>, <2>, <4>, <7>, <9>, <3>, <8>, <10>, <11>, <1>], [<5>, <6>, <0>, <2>, <8>, <10>, <1>, <4>, <3>, <7>, <9>, <11>]]',)",1,256
topological_sort,"[(<4>, <3>), (<3>, <2>), (<8>, <4>), (<8>, <5>), (<8>, <3>), (<8>, <1>), (<1>, <5>), (<1>, <7>), (<1>, <2>), (<6>, <11>), (<6>, <0>), (<11>, <1>), (<0>, <11>), (<0>, <7>), (<0>, <9>), (<9>, <2>), (<9>, <1>), (<9>, <4>), (<7>, <10>), (<10>, <3>), (<12>, <10>), (<12>, <8>), (<13>, <11>)]","{<4>: [<3>],
<3>: [<2>],
<2>: [],
<8>: [<4>, <5>, <3>, <1>],
<5>: [],
<1>: [<5>, <7>, <2>],
<6>: [<11>, <0>],
<11>: [<1>],
<0>: [<11>, <7>, <9>],
<9>: [<2>, <1>, <4>],
<7>: [<10>],
<10>: [<3>],
<12>: [<10>, <8>],
<13>: [<11>]}","Node <4> is connected to node <3>.
Node <3> is connected to node <2>.
Node <8> is connected to nodes <4>, <5>, <3>, <1>.
Node <1> is connected to nodes <5>, <7>, <2>.
Node <6> is connected to nodes <11>, <0>.
Node <11> is connected to node <1>.
Node <0> is connected to nodes <11>, <7>, <9>.
Node <9> is connected to nodes <2>, <1>, <4>.
Node <7> is connected to node <10>.
Node <10> is connected to node <3>.
Node <12> is connected to nodes <10>, <8>.
Node <13> is connected to node <11>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>]",14,23,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<6>, <12>, <13>, <0>, <8>, <11>, <9>, <1>, <4>, <5>, <7>, <10>, <3>, <2>]","Let's solve it step by step.
Nodes with 0 in-degree: [<6>, <12>, <13>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<12>, <13>, <0>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<13>, <0>, <8>].
Visit node <13> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <8>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<8>, <11>, <9>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<11>, <9>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <4>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <5>, <7>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <7>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
So the result of topological sorting is ","('[[<6>, <12>, <13>, <0>, <8>, <11>, <9>, <1>, <4>, <5>, <7>, <10>, <3>, <2>], [<6>, <12>, <13>, <0>, <8>, <11>, <9>, <10>, <7>, <5>, <1>, <4>, <3>, <2>], [<6>, <2>, <11>, <0>, <1>, <9>, <10>, <12>, <7>, <4>, <3>, <13>, <8>, <5>], [<6>, <12>, <13>, <0>, <7>, <10>, <3>, <2>, <8>, <11>, <9>, <1>, <4>, <5>]]',)",0,257
topological_sort,"[(<2>, <4>), (<2>, <0>), (<2>, <1>), (<4>, <1>), (<4>, <0>), (<6>, <5>), (<6>, <1>), (<6>, <4>), (<6>, <7>), (<5>, <7>), (<5>, <2>), (<5>, <4>), (<5>, <0>), (<5>, <1>), (<3>, <1>), (<3>, <6>), (<3>, <5>)]","{<2>: [<4>, <0>, <1>],
<4>: [<1>, <0>],
<0>: [],
<1>: [],
<6>: [<5>, <1>, <4>, <7>],
<5>: [<7>, <2>, <4>, <0>, <1>],
<7>: [],
<3>: [<1>, <6>, <5>]}","Node <2> is connected to nodes <4>, <0>, <1>.
Node <4> is connected to nodes <1>, <0>.
Node <6> is connected to nodes <5>, <1>, <4>, <7>.
Node <5> is connected to nodes <7>, <2>, <4>, <0>, <1>.
Node <3> is connected to nodes <1>, <6>, <5>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>]",8,17,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<3>, <6>, <5>, <7>, <2>, <4>, <1>, <0>]","Let's solve it step by step.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <2>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <0>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
So the result of topological sorting is ","('[[<3>, <5>, <6>, <7>, <2>, <4>, <1>, <0>], [<3>, <6>, <5>, <7>, <4>, <1>, <0>, <2>], [<3>, <6>, <1>, <0>, <5>, <7>, <2>, <4>], [<3>, <6>, <5>, <7>, <2>, <4>, <1>, <0>]]',)",3,258
topological_sort,"[(<4>, <5>), (<4>, <1>), (<4>, <2>), (<5>, <7>), (<1>, <6>), (<2>, <1>), (<0>, <5>), (<0>, <2>), (<0>, <7>), (<3>, <4>), (<3>, <7>)]","{<4>: [<5>, <1>, <2>],
<5>: [<7>],
<1>: [<6>],
<2>: [<1>],
<7>: [],
<0>: [<5>, <2>, <7>],
<6>: [],
<3>: [<4>, <7>]}","Node <4> is connected to nodes <5>, <1>, <2>.
Node <5> is connected to node <7>.
Node <1> is connected to node <6>.
Node <2> is connected to node <1>.
Node <0> is connected to nodes <5>, <2>, <7>.
Node <3> is connected to nodes <4>, <7>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>]",8,11,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<0>, <3>, <4>, <5>, <2>, <7>, <1>, <6>]","Let's solve it step by step.
Nodes with 0 in-degree: [<0>, <3>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <2>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <7>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <1>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
So the result of topological sorting is ","('[[<0>, <3>, <4>, <5>, <2>, <7>, <1>, <6>], [<0>, <3>, <4>, <5>, <2>, <7>, <6>, <1>], [<0>, <3>, <4>, <5>, <6>, <7>, <2>, <1>], [<0>, <3>, <1>, <6>, <4>, <5>, <2>, <7>]]',)",0,259
topological_sort,"[(<10>, <1>), (<10>, <9>), (<10>, <5>), (<10>, <2>), (<10>, <3>), (<10>, <6>), (<9>, <0>), (<9>, <2>), (<9>, <6>), (<9>, <5>), (<5>, <1>), (<5>, <7>), (<2>, <6>), (<2>, <0>), (<3>, <9>), (<3>, <5>), (<3>, <6>), (<6>, <7>), (<6>, <5>), (<0>, <7>), (<7>, <1>), (<4>, <0>), (<4>, <7>), (<4>, <2>), (<4>, <5>), (<8>, <4>), (<8>, <0>), (<8>, <9>)]","{<10>: [<1>, <9>, <5>, <2>, <3>, <6>],
<1>: [],
<9>: [<0>, <2>, <6>, <5>],
<5>: [<1>, <7>],
<2>: [<6>, <0>],
<3>: [<9>, <5>, <6>],
<6>: [<7>, <5>],
<0>: [<7>],
<7>: [<1>],
<4>: [<0>, <7>, <2>, <5>],
<8>: [<4>, <0>, <9>]}","Node <10> is connected to nodes <1>, <9>, <5>, <2>, <3>, <6>.
Node <9> is connected to nodes <0>, <2>, <6>, <5>.
Node <5> is connected to nodes <1>, <7>.
Node <2> is connected to nodes <6>, <0>.
Node <3> is connected to nodes <9>, <5>, <6>.
Node <6> is connected to nodes <7>, <5>.
Node <0> is connected to node <7>.
Node <7> is connected to node <1>.
Node <4> is connected to nodes <0>, <7>, <2>, <5>.
Node <8> is connected to nodes <4>, <0>, <9>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>]",11,28,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<10>, <8>, <3>, <4>, <9>, <2>, <6>, <0>, <5>, <7>, <1>]","Let's solve it step by step.
Nodes with 0 in-degree: [<10>, <8>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<8>, <3>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <4>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <9>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <0>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <5>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
So the result of topological sorting is ","('[[<10>, <8>, <3>, <4>, <9>, <2>, <1>, <5>, <6>, <0>, <7>], [<10>, <6>, <3>, <4>, <2>, <1>, <7>, <5>, <9>, <0>, <8>], [<10>, <8>, <3>, <5>, <7>, <1>, <4>, <9>, <2>, <6>, <0>], [<10>, <8>, <3>, <4>, <9>, <2>, <6>, <0>, <5>, <7>, <1>]]',)",3,260
topological_sort,"[(<5>, <10>), (<7>, <1>), (<7>, <4>), (<7>, <10>), (<1>, <5>), (<4>, <5>), (<4>, <2>), (<8>, <1>), (<8>, <4>), (<8>, <2>), (<2>, <10>), (<3>, <4>), (<3>, <8>), (<3>, <7>), (<3>, <5>), (<0>, <7>), (<0>, <2>), (<0>, <4>), (<6>, <1>), (<6>, <3>), (<6>, <2>), (<6>, <5>), (<9>, <6>)]","{<5>: [<10>],
<10>: [],
<7>: [<1>, <4>, <10>],
<1>: [<5>],
<4>: [<5>, <2>],
<8>: [<1>, <4>, <2>],
<2>: [<10>],
<3>: [<4>, <8>, <7>, <5>],
<0>: [<7>, <2>, <4>],
<6>: [<1>, <3>, <2>, <5>],
<9>: [<6>]}","Node <5> is connected to node <10>.
Node <7> is connected to nodes <1>, <4>, <10>.
Node <1> is connected to node <5>.
Node <4> is connected to nodes <5>, <2>.
Node <8> is connected to nodes <1>, <4>, <2>.
Node <2> is connected to node <10>.
Node <3> is connected to nodes <4>, <8>, <7>, <5>.
Node <0> is connected to nodes <7>, <2>, <4>.
Node <6> is connected to nodes <1>, <3>, <2>, <5>.
Node <9> is connected to node <6>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>]",11,23,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<0>, <9>, <6>, <3>, <8>, <7>, <1>, <4>, <5>, <2>, <10>]","Let's solve it step by step.
Nodes with 0 in-degree: [<0>, <9>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<8>, <7>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <4>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <2>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
So the result of topological sorting is ","('[[<0>, <8>, <5>, <1>, <6>, <10>, <2>, <9>, <4>, <3>, <7>], [<0>, <9>, <6>, <3>, <8>, <7>, <1>, <4>, <5>, <2>, <10>], [<0>, <9>, <6>, <5>, <2>, <10>, <3>, <8>, <7>, <1>, <4>], [<0>, <9>, <6>, <3>, <8>, <2>, <1>, <5>, <4>, <10>, <7>]]',)",1,261
topological_sort,"[(<5>, <4>), (<5>, <7>), (<1>, <5>), (<1>, <4>), (<1>, <7>), (<0>, <1>), (<0>, <5>), (<0>, <6>), (<6>, <4>), (<2>, <8>), (<8>, <5>), (<3>, <1>), (<3>, <6>), (<3>, <7>)]","{<5>: [<4>, <7>],
<4>: [],
<7>: [],
<1>: [<5>, <4>, <7>],
<0>: [<1>, <5>, <6>],
<6>: [<4>],
<2>: [<8>],
<8>: [<5>],
<3>: [<1>, <6>, <7>]}","Node <5> is connected to nodes <4>, <7>.
Node <1> is connected to nodes <5>, <4>, <7>.
Node <0> is connected to nodes <1>, <5>, <6>.
Node <6> is connected to node <4>.
Node <2> is connected to node <8>.
Node <8> is connected to node <5>.
Node <3> is connected to nodes <1>, <6>, <7>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>]",9,14,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<0>, <2>, <3>, <8>, <1>, <6>, <5>, <4>, <7>]","Let's solve it step by step.
Nodes with 0 in-degree: [<0>, <2>, <3>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <3>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <8>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<8>, <1>, <6>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <6>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <5>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <7>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
So the result of topological sorting is ","('[[<0>, <2>, <3>, <5>, <4>, <7>, <8>, <1>, <6>], [<0>, <2>, <3>, <8>, <1>, <6>, <5>, <4>, <7>], [<0>, <2>, <3>, <8>, <4>, <5>, <6>, <7>, <1>], [<0>, <5>, <1>, <4>, <7>, <8>, <3>, <6>, <2>]]',)",1,262
topological_sort,"[(<9>, <6>), (<9>, <7>), (<9>, <12>), (<9>, <4>), (<6>, <8>), (<6>, <2>), (<7>, <8>), (<7>, <12>), (<7>, <6>), (<12>, <8>), (<12>, <5>), (<4>, <10>), (<4>, <6>), (<2>, <11>), (<0>, <8>), (<0>, <7>), (<0>, <5>), (<0>, <4>), (<5>, <10>), (<5>, <6>), (<5>, <2>), (<3>, <4>), (<3>, <10>), (<3>, <0>), (<3>, <6>), (<3>, <7>), (<3>, <11>), (<10>, <11>), (<10>, <2>), (<1>, <5>), (<1>, <0>), (<1>, <6>), (<1>, <7>)]","{<9>: [<6>, <7>, <12>, <4>],
<6>: [<8>, <2>],
<7>: [<8>, <12>, <6>],
<12>: [<8>, <5>],
<4>: [<10>, <6>],
<8>: [],
<2>: [<11>],
<0>: [<8>, <7>, <5>, <4>],
<5>: [<10>, <6>, <2>],
<3>: [<4>, <10>, <0>, <6>, <7>, <11>],
<10>: [<11>, <2>],
<11>: [],
<1>: [<5>, <0>, <6>, <7>]}","Node <9> is connected to nodes <6>, <7>, <12>, <4>.
Node <6> is connected to nodes <8>, <2>.
Node <7> is connected to nodes <8>, <12>, <6>.
Node <12> is connected to nodes <8>, <5>.
Node <4> is connected to nodes <10>, <6>.
Node <2> is connected to node <11>.
Node <0> is connected to nodes <8>, <7>, <5>, <4>.
Node <5> is connected to nodes <10>, <6>, <2>.
Node <3> is connected to nodes <4>, <10>, <0>, <6>, <7>, <11>.
Node <10> is connected to nodes <11>, <2>.
Node <1> is connected to nodes <5>, <0>, <6>, <7>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>]",13,33,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<9>, <3>, <1>, <0>, <7>, <4>, <12>, <5>, <10>, <6>, <8>, <2>, <11>]","Let's solve it step by step.
Nodes with 0 in-degree: [<9>, <3>, <1>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <1>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <4>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <12>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<12>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<10>, <6>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<8>, <2>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<11>].
Visit node <11> and remove it from the graph.
So the result of topological sorting is ","('[[<9>, <3>, <1>, <0>, <7>, <4>, <8>, <11>, <6>, <5>, <12>, <10>, <2>], [<9>, <1>, <12>, <5>, <3>, <2>, <11>, <10>, <0>, <4>, <8>, <7>, <6>], [<9>, <3>, <1>, <0>, <6>, <8>, <2>, <11>, <7>, <4>, <12>, <5>, <10>], [<9>, <3>, <1>, <0>, <7>, <4>, <12>, <5>, <10>, <6>, <8>, <2>, <11>]]',)",3,263
topological_sort,"[(<7>, <8>), (<7>, <6>), (<7>, <5>), (<7>, <4>), (<8>, <2>), (<8>, <6>), (<6>, <2>), (<5>, <2>), (<5>, <1>), (<5>, <0>), (<5>, <3>), (<2>, <4>), (<1>, <0>), (<1>, <6>), (<0>, <8>), (<0>, <3>), (<3>, <4>), (<3>, <6>), (<9>, <0>), (<9>, <3>), (<9>, <7>), (<9>, <6>), (<9>, <5>)]","{<7>: [<8>, <6>, <5>, <4>],
<8>: [<2>, <6>],
<6>: [<2>],
<5>: [<2>, <1>, <0>, <3>],
<4>: [],
<2>: [<4>],
<1>: [<0>, <6>],
<0>: [<8>, <3>],
<3>: [<4>, <6>],
<9>: [<0>, <3>, <7>, <6>, <5>]}","Node <7> is connected to nodes <8>, <6>, <5>, <4>.
Node <8> is connected to nodes <2>, <6>.
Node <6> is connected to node <2>.
Node <5> is connected to nodes <2>, <1>, <0>, <3>.
Node <2> is connected to node <4>.
Node <1> is connected to nodes <0>, <6>.
Node <0> is connected to nodes <8>, <3>.
Node <3> is connected to nodes <4>, <6>.
Node <9> is connected to nodes <0>, <3>, <7>, <6>, <5>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>]",10,23,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<9>, <7>, <5>, <1>, <0>, <8>, <3>, <6>, <2>, <4>]","Let's solve it step by step.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<8>, <3>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
So the result of topological sorting is ","('[[<9>, <7>, <5>, <1>, <0>, <8>, <4>, <6>, <3>, <2>], [<9>, <7>, <5>, <6>, <2>, <4>, <1>, <0>, <8>, <3>], [<9>, <0>, <8>, <4>, <6>, <7>, <1>, <5>, <2>, <3>], [<9>, <7>, <5>, <1>, <0>, <8>, <3>, <6>, <2>, <4>]]',)",3,264
topological_sort,"[(<1>, <13>), (<1>, <3>), (<1>, <12>), (<1>, <6>), (<13>, <5>), (<13>, <8>), (<3>, <4>), (<3>, <11>), (<3>, <8>), (<3>, <13>), (<12>, <0>), (<12>, <8>), (<12>, <10>), (<12>, <2>), (<6>, <2>), (<6>, <7>), (<6>, <11>), (<6>, <10>), (<6>, <8>), (<5>, <8>), (<5>, <9>), (<8>, <9>), (<8>, <0>), (<4>, <8>), (<4>, <0>), (<10>, <0>), (<2>, <8>), (<2>, <0>), (<2>, <4>), (<2>, <13>), (<2>, <9>), (<7>, <3>), (<7>, <0>), (<7>, <4>), (<7>, <9>), (<7>, <13>), (<7>, <11>), (<11>, <13>), (<11>, <5>)]","{<1>: [<13>, <3>, <12>, <6>],
<13>: [<5>, <8>],
<3>: [<4>, <11>, <8>, <13>],
<12>: [<0>, <8>, <10>, <2>],
<6>: [<2>, <7>, <11>, <10>, <8>],
<5>: [<8>, <9>],
<8>: [<9>, <0>],
<4>: [<8>, <0>],
<0>: [],
<9>: [],
<10>: [<0>],
<2>: [<8>, <0>, <4>, <13>, <9>],
<7>: [<3>, <0>, <4>, <9>, <13>, <11>],
<11>: [<13>, <5>]}","Node <1> is connected to nodes <13>, <3>, <12>, <6>.
Node <13> is connected to nodes <5>, <8>.
Node <3> is connected to nodes <4>, <11>, <8>, <13>.
Node <12> is connected to nodes <0>, <8>, <10>, <2>.
Node <6> is connected to nodes <2>, <7>, <11>, <10>, <8>.
Node <5> is connected to nodes <8>, <9>.
Node <8> is connected to nodes <9>, <0>.
Node <4> is connected to nodes <8>, <0>.
Node <10> is connected to node <0>.
Node <2> is connected to nodes <8>, <0>, <4>, <13>, <9>.
Node <7> is connected to nodes <3>, <0>, <4>, <9>, <13>, <11>.
Node <11> is connected to nodes <13>, <5>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>]",14,39,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<1>, <12>, <6>, <2>, <7>, <10>, <3>, <4>, <11>, <13>, <5>, <8>, <9>, <0>]","Let's solve it step by step.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<12>, <6>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <7>, <10>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <10>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<10>, <3>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <11>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<11>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<13>].
Visit node <13> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<9>, <0>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
So the result of topological sorting is ","('[[<1>, <12>, <6>, <2>, <7>, <10>, <3>, <4>, <11>, <13>, <5>, <8>, <9>, <0>], [<1>, <12>, <6>, <2>, <5>, <8>, <9>, <0>, <7>, <10>, <3>, <4>, <11>, <13>], [<1>, <8>, <0>, <6>, <12>, <4>, <7>, <9>, <10>, <11>, <5>, <3>, <13>, <2>], [<1>, <12>, <6>, <2>, <7>, <10>, <3>, <8>, <11>, <0>, <9>, <4>, <5>, <13>]]',)",0,265
topological_sort,"[(<1>, <4>), (<1>, <0>), (<1>, <7>), (<4>, <5>), (<4>, <0>), (<0>, <5>), (<7>, <5>), (<7>, <4>), (<8>, <4>), (<8>, <7>), (<8>, <0>), (<8>, <2>), (<8>, <3>), (<2>, <7>), (<2>, <1>), (<2>, <6>), (<3>, <9>), (<3>, <6>), (<3>, <7>), (<3>, <1>), (<6>, <7>), (<6>, <5>), (<6>, <9>), (<6>, <4>), (<9>, <1>), (<9>, <5>)]","{<1>: [<4>, <0>, <7>],
<4>: [<5>, <0>],
<0>: [<5>],
<7>: [<5>, <4>],
<5>: [],
<8>: [<4>, <7>, <0>, <2>, <3>],
<2>: [<7>, <1>, <6>],
<3>: [<9>, <6>, <7>, <1>],
<6>: [<7>, <5>, <9>, <4>],
<9>: [<1>, <5>]}","Node <1> is connected to nodes <4>, <0>, <7>.
Node <4> is connected to nodes <5>, <0>.
Node <0> is connected to node <5>.
Node <7> is connected to nodes <5>, <4>.
Node <8> is connected to nodes <4>, <7>, <0>, <2>, <3>.
Node <2> is connected to nodes <7>, <1>, <6>.
Node <3> is connected to nodes <9>, <6>, <7>, <1>.
Node <6> is connected to nodes <7>, <5>, <9>, <4>.
Node <9> is connected to nodes <1>, <5>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>]",10,26,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<8>, <2>, <3>, <6>, <9>, <1>, <7>, <4>, <0>, <5>]","Let's solve it step by step.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <3>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
So the result of topological sorting is ","('[[<8>, <2>, <3>, <6>, <9>, <1>, <7>, <4>, <0>, <5>], [<8>, <9>, <2>, <6>, <7>, <5>, <3>, <0>, <4>, <1>], [<8>, <2>, <3>, <4>, <0>, <5>, <6>, <9>, <1>, <7>], [<8>, <2>, <3>, <6>, <9>, <5>, <1>, <7>, <4>, <0>]]',)",0,266
topological_sort,"[(<0>, <9>), (<0>, <14>), (<0>, <6>), (<0>, <1>), (<9>, <12>), (<14>, <12>), (<14>, <13>), (<14>, <8>), (<6>, <8>), (<6>, <1>), (<6>, <14>), (<6>, <12>), (<1>, <9>), (<1>, <7>), (<1>, <12>), (<4>, <6>), (<4>, <8>), (<4>, <9>), (<4>, <7>), (<4>, <3>), (<7>, <14>), (<7>, <13>), (<3>, <14>), (<3>, <8>), (<3>, <11>), (<3>, <12>), (<3>, <7>), (<3>, <6>), (<3>, <9>), (<11>, <12>), (<11>, <14>), (<11>, <1>), (<13>, <9>), (<13>, <8>), (<5>, <9>), (<5>, <4>), (<5>, <12>), (<5>, <10>), (<5>, <6>), (<10>, <12>), (<10>, <14>), (<10>, <13>), (<10>, <7>), (<10>, <0>), (<10>, <8>), (<10>, <6>), (<2>, <10>), (<2>, <11>), (<2>, <0>)]","{<0>: [<9>, <14>, <6>, <1>],
<9>: [<12>],
<14>: [<12>, <13>, <8>],
<6>: [<8>, <1>, <14>, <12>],
<1>: [<9>, <7>, <12>],
<12>: [],
<4>: [<6>, <8>, <9>, <7>, <3>],
<8>: [],
<7>: [<14>, <13>],
<3>: [<14>, <8>, <11>, <12>, <7>, <6>, <9>],
<11>: [<12>, <14>, <1>],
<13>: [<9>, <8>],
<5>: [<9>, <4>, <12>, <10>, <6>],
<10>: [<12>, <14>, <13>, <7>, <0>, <8>, <6>],
<2>: [<10>, <11>, <0>]}","Node <0> is connected to nodes <9>, <14>, <6>, <1>.
Node <9> is connected to node <12>.
Node <14> is connected to nodes <12>, <13>, <8>.
Node <6> is connected to nodes <8>, <1>, <14>, <12>.
Node <1> is connected to nodes <9>, <7>, <12>.
Node <4> is connected to nodes <6>, <8>, <9>, <7>, <3>.
Node <7> is connected to nodes <14>, <13>.
Node <3> is connected to nodes <14>, <8>, <11>, <12>, <7>, <6>, <9>.
Node <11> is connected to nodes <12>, <14>, <1>.
Node <13> is connected to nodes <9>, <8>.
Node <5> is connected to nodes <9>, <4>, <12>, <10>, <6>.
Node <10> is connected to nodes <12>, <14>, <13>, <7>, <0>, <8>, <6>.
Node <2> is connected to nodes <10>, <11>, <0>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>, <14>]",15,49,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<5>, <2>, <4>, <10>, <3>, <0>, <11>, <6>, <1>, <7>, <14>, <13>, <9>, <8>, <12>]","Let's solve it step by step.
Nodes with 0 in-degree: [<5>, <2>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <4>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <10>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<10>, <3>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <0>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <11>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<11>, <6>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<14>].
Visit node <14> and remove it from the graph.
Nodes with 0 in-degree: [<13>].
Visit node <13> and remove it from the graph.
Nodes with 0 in-degree: [<9>, <8>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<8>, <12>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<12>].
Visit node <12> and remove it from the graph.
So the result of topological sorting is ","('[[<5>, <2>, <4>, <10>, <3>, <14>, <13>, <9>, <8>, <12>, <0>, <11>, <6>, <1>, <7>], [<5>, <0>, <1>, <13>, <3>, <9>, <12>, <8>, <10>, <6>, <2>, <4>, <7>, <11>, <14>], [<5>, <2>, <4>, <10>, <3>, <0>, <11>, <6>, <1>, <7>, <14>, <13>, <9>, <8>, <12>], [<5>, <2>, <4>, <10>, <3>, <0>, <11>, <1>, <6>, <7>, <12>, <8>, <13>, <14>, <9>]]',)",2,267
topological_sort,"[(<2>, <0>), (<2>, <9>), (<2>, <7>), (<2>, <4>), (<2>, <5>), (<2>, <8>), (<0>, <1>), (<0>, <3>), (<0>, <10>), (<0>, <4>), (<7>, <9>), (<4>, <9>), (<5>, <4>), (<5>, <10>), (<5>, <3>), (<8>, <5>), (<1>, <4>), (<3>, <7>), (<10>, <9>), (<10>, <3>), (<10>, <1>), (<10>, <4>), (<6>, <8>), (<6>, <3>), (<6>, <2>), (<6>, <1>)]","{<2>: [<0>, <9>, <7>, <4>, <5>, <8>],
<0>: [<1>, <3>, <10>, <4>],
<9>: [],
<7>: [<9>],
<4>: [<9>],
<5>: [<4>, <10>, <3>],
<8>: [<5>],
<1>: [<4>],
<3>: [<7>],
<10>: [<9>, <3>, <1>, <4>],
<6>: [<8>, <3>, <2>, <1>]}","Node <2> is connected to nodes <0>, <9>, <7>, <4>, <5>, <8>.
Node <0> is connected to nodes <1>, <3>, <10>, <4>.
Node <7> is connected to node <9>.
Node <4> is connected to node <9>.
Node <5> is connected to nodes <4>, <10>, <3>.
Node <8> is connected to node <5>.
Node <1> is connected to node <4>.
Node <3> is connected to node <7>.
Node <10> is connected to nodes <9>, <3>, <1>, <4>.
Node <6> is connected to nodes <8>, <3>, <2>, <1>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>]",11,26,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<6>, <2>, <0>, <8>, <5>, <10>, <3>, <1>, <7>, <4>, <9>]","Let's solve it step by step.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <8>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <1>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <7>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <4>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
So the result of topological sorting is ","('[[<6>, <2>, <0>, <7>, <4>, <9>, <8>, <5>, <10>, <3>, <1>], [<6>, <8>, <4>, <1>, <9>, <10>, <5>, <3>, <2>, <7>, <0>], [<6>, <2>, <0>, <8>, <5>, <7>, <3>, <1>, <9>, <4>, <10>], [<6>, <2>, <0>, <8>, <5>, <10>, <3>, <1>, <7>, <4>, <9>]]',)",3,268
topological_sort,"[(<0>, <5>), (<0>, <6>), (<0>, <8>), (<0>, <1>), (<5>, <1>), (<5>, <7>), (<1>, <4>), (<7>, <8>), (<7>, <6>), (<7>, <2>), (<2>, <4>), (<3>, <0>)]","{<0>: [<5>, <6>, <8>, <1>],
<5>: [<1>, <7>],
<6>: [],
<8>: [],
<1>: [<4>],
<7>: [<8>, <6>, <2>],
<2>: [<4>],
<3>: [<0>],
<4>: []}","Node <0> is connected to nodes <5>, <6>, <8>, <1>.
Node <5> is connected to nodes <1>, <7>.
Node <1> is connected to node <4>.
Node <7> is connected to nodes <8>, <6>, <2>.
Node <2> is connected to node <4>.
Node <3> is connected to node <0>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>]",9,12,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<3>, <0>, <5>, <1>, <7>, <8>, <6>, <2>, <4>]","Let's solve it step by step.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <7>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<8>, <6>, <2>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <2>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
So the result of topological sorting is ","('[[<3>, <8>, <0>, <1>, <5>, <6>, <7>, <2>, <4>], [<3>, <0>, <5>, <6>, <2>, <4>, <1>, <7>, <8>], [<3>, <0>, <5>, <1>, <8>, <4>, <7>, <6>, <2>], [<3>, <0>, <5>, <1>, <7>, <8>, <6>, <2>, <4>]]',)",3,269
topological_sort,"[(<4>, <9>), (<4>, <10>), (<4>, <2>), (<4>, <7>), (<4>, <3>), (<4>, <0>), (<10>, <0>), (<10>, <3>), (<2>, <9>), (<2>, <0>), (<7>, <0>), (<7>, <6>), (<7>, <2>), (<7>, <11>), (<3>, <11>), (<3>, <2>), (<3>, <0>), (<0>, <9>), (<6>, <11>), (<11>, <2>), (<11>, <0>), (<1>, <0>), (<1>, <7>), (<1>, <6>), (<1>, <5>), (<5>, <9>), (<5>, <3>), (<5>, <4>), (<5>, <11>), (<5>, <10>), (<12>, <11>), (<12>, <10>), (<12>, <1>), (<12>, <6>), (<12>, <5>), (<12>, <8>), (<8>, <1>), (<8>, <0>), (<8>, <6>), (<8>, <4>)]","{<4>: [<9>, <10>, <2>, <7>, <3>, <0>],
<9>: [],
<10>: [<0>, <3>],
<2>: [<9>, <0>],
<7>: [<0>, <6>, <2>, <11>],
<3>: [<11>, <2>, <0>],
<0>: [<9>],
<6>: [<11>],
<11>: [<2>, <0>],
<1>: [<0>, <7>, <6>, <5>],
<5>: [<9>, <3>, <4>, <11>, <10>],
<12>: [<11>, <10>, <1>, <6>, <5>, <8>],
<8>: [<1>, <0>, <6>, <4>]}","Node <4> is connected to nodes <9>, <10>, <2>, <7>, <3>, <0>.
Node <10> is connected to nodes <0>, <3>.
Node <2> is connected to nodes <9>, <0>.
Node <7> is connected to nodes <0>, <6>, <2>, <11>.
Node <3> is connected to nodes <11>, <2>, <0>.
Node <0> is connected to node <9>.
Node <6> is connected to node <11>.
Node <11> is connected to nodes <2>, <0>.
Node <1> is connected to nodes <0>, <7>, <6>, <5>.
Node <5> is connected to nodes <9>, <3>, <4>, <11>, <10>.
Node <12> is connected to nodes <11>, <10>, <1>, <6>, <5>, <8>.
Node <8> is connected to nodes <1>, <0>, <6>, <4>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>]",13,40,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<12>, <8>, <1>, <5>, <4>, <10>, <7>, <3>, <6>, <11>, <2>, <0>, <9>]","Let's solve it step by step.
Nodes with 0 in-degree: [<12>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<10>, <7>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <3>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <6>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<11>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
So the result of topological sorting is ","('[[<12>, <8>, <1>, <5>, <4>, <10>, <6>, <9>, <0>, <11>, <3>, <7>, <2>], [<12>, <8>, <1>, <5>, <4>, <10>, <7>, <3>, <6>, <11>, <2>, <0>, <9>], [<12>, <8>, <1>, <5>, <11>, <2>, <0>, <9>, <4>, <10>, <7>, <3>, <6>], [<12>, <9>, <2>, <0>, <1>, <6>, <8>, <11>, <5>, <3>, <10>, <7>, <4>]]',)",1,270
topological_sort,"[(<1>, <5>), (<1>, <10>), (<1>, <8>), (<5>, <8>), (<5>, <6>), (<5>, <14>), (<10>, <9>), (<10>, <0>), (<8>, <9>), (<6>, <13>), (<6>, <7>), (<14>, <3>), (<14>, <13>), (<9>, <4>), (<9>, <3>), (<13>, <12>), (<7>, <11>), (<7>, <9>), (<12>, <0>), (<12>, <8>), (<12>, <10>), (<2>, <6>)]","{<1>: [<5>, <10>, <8>],
<5>: [<8>, <6>, <14>],
<10>: [<9>, <0>],
<8>: [<9>],
<6>: [<13>, <7>],
<14>: [<3>, <13>],
<9>: [<4>, <3>],
<0>: [],
<4>: [],
<3>: [],
<13>: [<12>],
<7>: [<11>, <9>],
<12>: [<0>, <8>, <10>],
<11>: [],
<2>: [<6>]}","Node <1> is connected to nodes <5>, <10>, <8>.
Node <5> is connected to nodes <8>, <6>, <14>.
Node <10> is connected to nodes <9>, <0>.
Node <8> is connected to node <9>.
Node <6> is connected to nodes <13>, <7>.
Node <14> is connected to nodes <3>, <13>.
Node <9> is connected to nodes <4>, <3>.
Node <13> is connected to node <12>.
Node <7> is connected to nodes <11>, <9>.
Node <12> is connected to nodes <0>, <8>, <10>.
Node <2> is connected to node <6>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>, <14>]",15,22,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<1>, <2>, <5>, <6>, <14>, <7>, <13>, <11>, <12>, <8>, <10>, <9>, <0>, <4>, <3>]","Let's solve it step by step.
Nodes with 0 in-degree: [<1>, <2>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <5>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <14>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<14>, <7>].
Visit node <14> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <13>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<13>, <11>].
Visit node <13> and remove it from the graph.
Nodes with 0 in-degree: [<11>, <12>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<12>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<8>, <10>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<9>, <0>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <4>, <3>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <3>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
So the result of topological sorting is ","('[[<1>, <2>, <5>, <6>, <14>, <7>, <13>, <9>, <12>, <4>, <0>, <11>, <3>, <8>, <10>], [<1>, <0>, <5>, <10>, <6>, <7>, <12>, <11>, <3>, <14>, <13>, <2>, <9>, <4>, <8>], [<1>, <2>, <5>, <6>, <14>, <7>, <13>, <11>, <12>, <8>, <10>, <9>, <0>, <4>, <3>], [<1>, <2>, <5>, <6>, <14>, <10>, <9>, <0>, <4>, <3>, <7>, <13>, <11>, <12>, <8>]]',)",2,271
topological_sort,"[(<2>, <11>), (<2>, <8>), (<2>, <1>), (<8>, <12>), (<1>, <12>), (<0>, <9>), (<0>, <1>), (<0>, <4>), (<0>, <3>), (<9>, <4>), (<9>, <3>), (<9>, <5>), (<9>, <7>), (<9>, <1>), (<9>, <12>), (<4>, <3>), (<4>, <1>), (<3>, <2>), (<3>, <1>), (<5>, <4>), (<5>, <13>), (<5>, <1>), (<5>, <10>), (<7>, <8>), (<7>, <10>), (<7>, <6>), (<7>, <4>), (<12>, <11>), (<10>, <1>), (<10>, <8>), (<10>, <4>), (<10>, <11>), (<6>, <4>), (<6>, <2>), (<13>, <6>), (<13>, <1>), (<13>, <12>), (<13>, <10>)]","{<2>: [<11>, <8>, <1>],
<11>: [],
<8>: [<12>],
<1>: [<12>],
<0>: [<9>, <1>, <4>, <3>],
<9>: [<4>, <3>, <5>, <7>, <1>, <12>],
<4>: [<3>, <1>],
<3>: [<2>, <1>],
<5>: [<4>, <13>, <1>, <10>],
<7>: [<8>, <10>, <6>, <4>],
<12>: [<11>],
<10>: [<1>, <8>, <4>, <11>],
<6>: [<4>, <2>],
<13>: [<6>, <1>, <12>, <10>]}","Node <2> is connected to nodes <11>, <8>, <1>.
Node <8> is connected to node <12>.
Node <1> is connected to node <12>.
Node <0> is connected to nodes <9>, <1>, <4>, <3>.
Node <9> is connected to nodes <4>, <3>, <5>, <7>, <1>, <12>.
Node <4> is connected to nodes <3>, <1>.
Node <3> is connected to nodes <2>, <1>.
Node <5> is connected to nodes <4>, <13>, <1>, <10>.
Node <7> is connected to nodes <8>, <10>, <6>, <4>.
Node <12> is connected to node <11>.
Node <10> is connected to nodes <1>, <8>, <4>, <11>.
Node <6> is connected to nodes <4>, <2>.
Node <13> is connected to nodes <6>, <1>, <12>, <10>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>]",14,38,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<0>, <9>, <5>, <7>, <13>, <6>, <10>, <4>, <3>, <2>, <8>, <1>, <12>, <11>]","Let's solve it step by step.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <7>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <13>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<13>].
Visit node <13> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <10>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<8>, <1>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<12>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<11>].
Visit node <11> and remove it from the graph.
So the result of topological sorting is ","('[[<0>, <9>, <5>, <7>, <13>, <6>, <10>, <12>, <3>, <11>, <2>, <4>, <8>, <1>], [<0>, <4>, <8>, <9>, <2>, <3>, <10>, <13>, <12>, <1>, <7>, <5>, <11>, <6>], [<0>, <9>, <5>, <7>, <13>, <6>, <10>, <4>, <3>, <2>, <8>, <1>, <12>, <11>], [<0>, <9>, <5>, <7>, <8>, <1>, <12>, <11>, <13>, <6>, <10>, <4>, <3>, <2>]]',)",2,272
topological_sort,"[(<7>, <5>), (<7>, <0>), (<1>, <5>), (<1>, <4>), (<1>, <3>), (<1>, <6>), (<4>, <3>), (<4>, <2>), (<3>, <2>), (<3>, <0>), (<3>, <7>), (<6>, <0>), (<6>, <5>), (<6>, <4>)]","{<7>: [<5>, <0>],
<5>: [],
<0>: [],
<1>: [<5>, <4>, <3>, <6>],
<4>: [<3>, <2>],
<3>: [<2>, <0>, <7>],
<6>: [<0>, <5>, <4>],
<2>: []}","Node <7> is connected to nodes <5>, <0>.
Node <1> is connected to nodes <5>, <4>, <3>, <6>.
Node <4> is connected to nodes <3>, <2>.
Node <3> is connected to nodes <2>, <0>, <7>.
Node <6> is connected to nodes <0>, <5>, <4>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>]",8,14,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<1>, <6>, <4>, <3>, <2>, <7>, <5>, <0>]","Let's solve it step by step.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <7>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <0>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
So the result of topological sorting is ","('[[<1>, <6>, <5>, <0>, <4>, <3>, <2>, <7>], [<1>, <6>, <4>, <3>, <2>, <7>, <5>, <0>], [<1>, <0>, <4>, <3>, <6>, <2>, <5>, <7>], [<1>, <6>, <4>, <3>, <7>, <5>, <0>, <2>]]',)",1,273
topological_sort,"[(<0>, <9>), (<8>, <9>), (<2>, <9>), (<2>, <0>), (<2>, <8>), (<3>, <8>), (<3>, <0>), (<6>, <7>), (<6>, <0>), (<7>, <5>), (<5>, <8>), (<5>, <3>), (<4>, <2>), (<1>, <5>)]","{<0>: [<9>],
<9>: [],
<8>: [<9>],
<2>: [<9>, <0>, <8>],
<3>: [<8>, <0>],
<6>: [<7>, <0>],
<7>: [<5>],
<5>: [<8>, <3>],
<4>: [<2>],
<1>: [<5>]}","Node <0> is connected to node <9>.
Node <8> is connected to node <9>.
Node <2> is connected to nodes <9>, <0>, <8>.
Node <3> is connected to nodes <8>, <0>.
Node <6> is connected to nodes <7>, <0>.
Node <7> is connected to node <5>.
Node <5> is connected to nodes <8>, <3>.
Node <4> is connected to node <2>.
Node <1> is connected to node <5>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>]",10,14,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<6>, <4>, <1>, <7>, <2>, <5>, <3>, <8>, <0>, <9>]","Let's solve it step by step.
Nodes with 0 in-degree: [<6>, <4>, <1>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <1>, <7>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <7>, <2>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <2>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <5>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<8>, <0>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
So the result of topological sorting is ","('[[<6>, <4>, <1>, <7>, <2>, <9>, <3>, <0>, <8>, <5>], [<6>, <0>, <3>, <5>, <1>, <2>, <9>, <8>, <7>, <4>], [<6>, <4>, <1>, <7>, <2>, <5>, <3>, <8>, <0>, <9>], [<6>, <4>, <1>, <8>, <0>, <9>, <7>, <2>, <5>, <3>]]',)",2,274
topological_sort,"[(<5>, <1>), (<5>, <7>), (<1>, <7>), (<0>, <2>), (<0>, <8>), (<2>, <5>), (<2>, <1>), (<2>, <8>), (<8>, <7>), (<8>, <1>), (<6>, <9>), (<6>, <4>), (<9>, <4>), (<9>, <2>), (<9>, <7>), (<9>, <0>), (<4>, <2>), (<4>, <0>), (<4>, <8>), (<3>, <0>), (<3>, <2>), (<3>, <8>)]","{<5>: [<1>, <7>],
<1>: [<7>],
<7>: [],
<0>: [<2>, <8>],
<2>: [<5>, <1>, <8>],
<8>: [<7>, <1>],
<6>: [<9>, <4>],
<9>: [<4>, <2>, <7>, <0>],
<4>: [<2>, <0>, <8>],
<3>: [<0>, <2>, <8>]}","Node <5> is connected to nodes <1>, <7>.
Node <1> is connected to node <7>.
Node <0> is connected to nodes <2>, <8>.
Node <2> is connected to nodes <5>, <1>, <8>.
Node <8> is connected to nodes <7>, <1>.
Node <6> is connected to nodes <9>, <4>.
Node <9> is connected to nodes <4>, <2>, <7>, <0>.
Node <4> is connected to nodes <2>, <0>, <8>.
Node <3> is connected to nodes <0>, <2>, <8>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>]",10,22,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<6>, <3>, <9>, <4>, <0>, <2>, <5>, <8>, <1>, <7>]","Let's solve it step by step.
Nodes with 0 in-degree: [<6>, <3>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <9>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <8>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
So the result of topological sorting is ","('[[<6>, <3>, <9>, <8>, <1>, <7>, <4>, <0>, <2>, <5>], [<6>, <0>, <4>, <3>, <7>, <9>, <5>, <2>, <1>, <8>], [<6>, <3>, <9>, <4>, <0>, <5>, <8>, <1>, <7>, <2>], [<6>, <3>, <9>, <4>, <0>, <2>, <5>, <8>, <1>, <7>]]',)",3,275
topological_sort,"[(<1>, <0>), (<4>, <7>), (<4>, <6>), (<4>, <2>), (<7>, <2>), (<6>, <1>), (<6>, <5>), (<6>, <0>), (<5>, <2>), (<5>, <7>), (<3>, <8>), (<3>, <1>), (<3>, <0>), (<8>, <7>), (<8>, <1>), (<8>, <4>), (<8>, <2>), (<8>, <6>), (<8>, <5>)]","{<1>: [<0>],
<0>: [],
<4>: [<7>, <6>, <2>],
<7>: [<2>],
<6>: [<1>, <5>, <0>],
<2>: [],
<5>: [<2>, <7>],
<3>: [<8>, <1>, <0>],
<8>: [<7>, <1>, <4>, <2>, <6>, <5>]}","Node <1> is connected to node <0>.
Node <4> is connected to nodes <7>, <6>, <2>.
Node <7> is connected to node <2>.
Node <6> is connected to nodes <1>, <5>, <0>.
Node <5> is connected to nodes <2>, <7>.
Node <3> is connected to nodes <8>, <1>, <0>.
Node <8> is connected to nodes <7>, <1>, <4>, <2>, <6>, <5>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>]",9,19,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<3>, <8>, <4>, <6>, <1>, <5>, <0>, <7>, <2>]","Let's solve it step by step.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <5>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <0>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <7>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
So the result of topological sorting is ","('[[<3>, <8>, <4>, <6>, <1>, <7>, <0>, <2>, <5>], [<3>, <6>, <0>, <7>, <4>, <8>, <2>, <1>, <5>], [<3>, <8>, <4>, <6>, <1>, <5>, <0>, <7>, <2>], [<3>, <8>, <4>, <0>, <7>, <2>, <6>, <1>, <5>]]',)",2,276
topological_sort,"[(<2>, <5>), (<2>, <8>), (<5>, <9>), (<5>, <7>), (<5>, <8>), (<9>, <8>), (<0>, <5>), (<0>, <9>), (<1>, <5>), (<1>, <6>), (<1>, <9>), (<6>, <0>), (<10>, <9>), (<10>, <5>), (<10>, <1>), (<4>, <5>), (<3>, <8>), (<3>, <1>)]","{<2>: [<5>, <8>],
<5>: [<9>, <7>, <8>],
<8>: [],
<9>: [<8>],
<7>: [],
<0>: [<5>, <9>],
<1>: [<5>, <6>, <9>],
<6>: [<0>],
<10>: [<9>, <5>, <1>],
<4>: [<5>],
<3>: [<8>, <1>]}","Node <2> is connected to nodes <5>, <8>.
Node <5> is connected to nodes <9>, <7>, <8>.
Node <9> is connected to node <8>.
Node <0> is connected to nodes <5>, <9>.
Node <1> is connected to nodes <5>, <6>, <9>.
Node <6> is connected to node <0>.
Node <10> is connected to nodes <9>, <5>, <1>.
Node <4> is connected to node <5>.
Node <3> is connected to nodes <8>, <1>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>]",11,18,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<2>, <10>, <4>, <3>, <1>, <6>, <0>, <5>, <9>, <7>, <8>]","Let's solve it step by step.
Nodes with 0 in-degree: [<2>, <10>, <4>, <3>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<10>, <4>, <3>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <3>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<9>, <7>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <8>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
So the result of topological sorting is ","('[[<2>, <10>, <4>, <3>, <1>, <6>, <0>, <5>, <9>, <7>, <8>], [<2>, <10>, <4>, <3>, <1>, <6>, <0>, <9>, <5>, <8>, <7>], [<2>, <10>, <4>, <9>, <7>, <8>, <3>, <1>, <6>, <0>, <5>], [<2>, <0>, <9>, <3>, <5>, <8>, <10>, <1>, <4>, <7>, <6>]]',)",0,277
topological_sort,"[(<5>, <11>), (<5>, <7>), (<5>, <8>), (<5>, <12>), (<11>, <1>), (<11>, <0>), (<11>, <13>), (<7>, <8>), (<7>, <13>), (<7>, <11>), (<8>, <1>), (<8>, <0>), (<8>, <4>), (<8>, <9>), (<8>, <10>), (<12>, <4>), (<12>, <1>), (<12>, <3>), (<12>, <13>), (<1>, <13>), (<1>, <10>), (<2>, <11>), (<2>, <8>), (<2>, <4>), (<2>, <12>), (<2>, <5>), (<4>, <11>), (<4>, <13>), (<4>, <0>), (<3>, <0>), (<3>, <13>), (<3>, <9>), (<3>, <1>), (<3>, <6>), (<9>, <10>), (<9>, <4>), (<9>, <13>), (<6>, <4>), (<6>, <10>), (<6>, <8>), (<6>, <13>)]","{<5>: [<11>, <7>, <8>, <12>],
<11>: [<1>, <0>, <13>],
<7>: [<8>, <13>, <11>],
<8>: [<1>, <0>, <4>, <9>, <10>],
<12>: [<4>, <1>, <3>, <13>],
<1>: [<13>, <10>],
<0>: [],
<13>: [],
<2>: [<11>, <8>, <4>, <12>, <5>],
<4>: [<11>, <13>, <0>],
<3>: [<0>, <13>, <9>, <1>, <6>],
<9>: [<10>, <4>, <13>],
<10>: [],
<6>: [<4>, <10>, <8>, <13>]}","Node <5> is connected to nodes <11>, <7>, <8>, <12>.
Node <11> is connected to nodes <1>, <0>, <13>.
Node <7> is connected to nodes <8>, <13>, <11>.
Node <8> is connected to nodes <1>, <0>, <4>, <9>, <10>.
Node <12> is connected to nodes <4>, <1>, <3>, <13>.
Node <1> is connected to nodes <13>, <10>.
Node <2> is connected to nodes <11>, <8>, <4>, <12>, <5>.
Node <4> is connected to nodes <11>, <13>, <0>.
Node <3> is connected to nodes <0>, <13>, <9>, <1>, <6>.
Node <9> is connected to nodes <10>, <4>, <13>.
Node <6> is connected to nodes <4>, <10>, <8>, <13>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>]",14,41,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<2>, <5>, <7>, <12>, <3>, <6>, <8>, <9>, <4>, <11>, <1>, <0>, <13>, <10>]","Let's solve it step by step.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <12>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<12>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<11>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <0>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <13>, <10>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<13>, <10>].
Visit node <13> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
So the result of topological sorting is ","('[[<2>, <5>, <7>, <12>, <3>, <6>, <8>, <9>, <4>, <11>, <1>, <0>, <13>, <10>], [<2>, <5>, <7>, <12>, <1>, <0>, <13>, <10>, <3>, <6>, <8>, <9>, <4>, <11>], [<2>, <5>, <7>, <12>, <3>, <6>, <8>, <9>, <11>, <1>, <13>, <4>, <0>, <10>], [<2>, <7>, <11>, <4>, <5>, <13>, <8>, <1>, <12>, <9>, <6>, <3>, <10>, <0>]]',)",0,278
topological_sort,"[(<6>, <8>), (<3>, <2>), (<3>, <8>), (<2>, <6>), (<2>, <8>), (<4>, <6>), (<4>, <2>), (<4>, <7>), (<4>, <0>), (<7>, <3>), (<7>, <5>), (<0>, <7>), (<5>, <3>), (<5>, <2>), (<1>, <7>)]","{<6>: [<8>],
<8>: [],
<3>: [<2>, <8>],
<2>: [<6>, <8>],
<4>: [<6>, <2>, <7>, <0>],
<7>: [<3>, <5>],
<0>: [<7>],
<5>: [<3>, <2>],
<1>: [<7>]}","Node <6> is connected to node <8>.
Node <3> is connected to nodes <2>, <8>.
Node <2> is connected to nodes <6>, <8>.
Node <4> is connected to nodes <6>, <2>, <7>, <0>.
Node <7> is connected to nodes <3>, <5>.
Node <0> is connected to node <7>.
Node <5> is connected to nodes <3>, <2>.
Node <1> is connected to node <7>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>]",9,15,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<4>, <1>, <0>, <7>, <5>, <3>, <2>, <6>, <8>]","Let's solve it step by step.
Nodes with 0 in-degree: [<4>, <1>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <0>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
So the result of topological sorting is ","('[[<4>, <1>, <0>, <7>, <5>, <3>, <2>, <6>, <8>], [<4>, <1>, <0>, <7>, <3>, <5>, <6>, <8>, <2>], [<4>, <1>, <0>, <2>, <6>, <8>, <7>, <5>, <3>], [<4>, <0>, <7>, <3>, <5>, <2>, <1>, <8>, <6>]]',)",0,279
topological_sort,"[(<6>, <1>), (<6>, <7>), (<2>, <6>), (<2>, <8>), (<2>, <1>), (<2>, <5>), (<2>, <0>), (<8>, <1>), (<8>, <6>), (<8>, <5>), (<5>, <7>), (<5>, <6>), (<0>, <8>), (<0>, <7>), (<0>, <5>), (<0>, <1>), (<3>, <5>), (<3>, <4>), (<3>, <1>), (<3>, <7>), (<4>, <2>), (<4>, <0>), (<4>, <8>)]","{<6>: [<1>, <7>],
<1>: [],
<7>: [],
<2>: [<6>, <8>, <1>, <5>, <0>],
<8>: [<1>, <6>, <5>],
<5>: [<7>, <6>],
<0>: [<8>, <7>, <5>, <1>],
<3>: [<5>, <4>, <1>, <7>],
<4>: [<2>, <0>, <8>]}","Node <6> is connected to nodes <1>, <7>.
Node <2> is connected to nodes <6>, <8>, <1>, <5>, <0>.
Node <8> is connected to nodes <1>, <6>, <5>.
Node <5> is connected to nodes <7>, <6>.
Node <0> is connected to nodes <8>, <7>, <5>, <1>.
Node <3> is connected to nodes <5>, <4>, <1>, <7>.
Node <4> is connected to nodes <2>, <0>, <8>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>]",9,23,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<3>, <4>, <2>, <0>, <8>, <5>, <6>, <1>, <7>]","Let's solve it step by step.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <7>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
So the result of topological sorting is ","('[[<3>, <4>, <2>, <0>, <5>, <8>, <6>, <1>, <7>], [<3>, <4>, <2>, <0>, <8>, <5>, <6>, <1>, <7>], [<3>, <4>, <2>, <6>, <1>, <7>, <0>, <8>, <5>], [<3>, <4>, <2>, <0>, <7>, <1>, <6>, <8>, <5>]]',)",1,280
topological_sort,"[(<7>, <3>), (<7>, <10>), (<7>, <0>), (<7>, <1>), (<3>, <1>), (<3>, <2>), (<10>, <0>), (<10>, <6>), (<10>, <4>), (<0>, <11>), (<1>, <2>), (<1>, <11>), (<2>, <12>), (<2>, <0>), (<4>, <5>), (<4>, <6>), (<4>, <3>), (<4>, <0>), (<5>, <2>), (<6>, <0>), (<6>, <5>), (<13>, <0>), (<13>, <7>), (<13>, <12>), (<13>, <2>), (<9>, <12>), (<9>, <3>), (<9>, <10>), (<9>, <7>), (<9>, <5>), (<8>, <10>), (<8>, <13>), (<8>, <7>), (<8>, <5>), (<8>, <1>), (<8>, <12>)]","{<7>: [<3>, <10>, <0>, <1>],
<3>: [<1>, <2>],
<10>: [<0>, <6>, <4>],
<0>: [<11>],
<1>: [<2>, <11>],
<2>: [<12>, <0>],
<4>: [<5>, <6>, <3>, <0>],
<5>: [<2>],
<6>: [<0>, <5>],
<12>: [],
<13>: [<0>, <7>, <12>, <2>],
<11>: [],
<9>: [<12>, <3>, <10>, <7>, <5>],
<8>: [<10>, <13>, <7>, <5>, <1>, <12>]}","Node <7> is connected to nodes <3>, <10>, <0>, <1>.
Node <3> is connected to nodes <1>, <2>.
Node <10> is connected to nodes <0>, <6>, <4>.
Node <0> is connected to node <11>.
Node <1> is connected to nodes <2>, <11>.
Node <2> is connected to nodes <12>, <0>.
Node <4> is connected to nodes <5>, <6>, <3>, <0>.
Node <5> is connected to node <2>.
Node <6> is connected to nodes <0>, <5>.
Node <13> is connected to nodes <0>, <7>, <12>, <2>.
Node <9> is connected to nodes <12>, <3>, <10>, <7>, <5>.
Node <8> is connected to nodes <10>, <13>, <7>, <5>, <1>, <12>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>]",14,36,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<9>, <8>, <13>, <7>, <10>, <4>, <6>, <3>, <5>, <1>, <2>, <12>, <0>, <11>]","Let's solve it step by step.
Nodes with 0 in-degree: [<9>, <8>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<13>].
Visit node <13> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <3>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <5>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <1>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<12>, <0>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<11>].
Visit node <11> and remove it from the graph.
So the result of topological sorting is ","('[[<9>, <8>, <13>, <7>, <10>, <4>, <6>, <3>, <5>, <1>, <2>, <12>, <0>, <11>], [<9>, <8>, <13>, <7>, <2>, <12>, <0>, <11>, <10>, <4>, <6>, <3>, <5>, <1>], [<9>, <7>, <6>, <8>, <2>, <13>, <3>, <1>, <10>, <5>, <0>, <11>, <12>, <4>], [<9>, <8>, <13>, <7>, <10>, <4>, <6>, <12>, <0>, <11>, <5>, <1>, <2>, <3>]]',)",0,281
topological_sort,"[(<10>, <3>), (<10>, <8>), (<10>, <4>), (<10>, <6>), (<10>, <5>), (<3>, <7>), (<3>, <8>), (<4>, <6>), (<6>, <8>), (<6>, <1>), (<5>, <4>), (<7>, <0>), (<7>, <5>), (<7>, <4>), (<7>, <1>), (<9>, <1>), (<9>, <4>), (<9>, <8>), (<9>, <3>), (<9>, <2>), (<2>, <10>), (<0>, <5>), (<0>, <4>)]","{<10>: [<3>, <8>, <4>, <6>, <5>],
<3>: [<7>, <8>],
<8>: [],
<4>: [<6>],
<6>: [<8>, <1>],
<5>: [<4>],
<7>: [<0>, <5>, <4>, <1>],
<1>: [],
<9>: [<1>, <4>, <8>, <3>, <2>],
<2>: [<10>],
<0>: [<5>, <4>]}","Node <10> is connected to nodes <3>, <8>, <4>, <6>, <5>.
Node <3> is connected to nodes <7>, <8>.
Node <4> is connected to node <6>.
Node <6> is connected to nodes <8>, <1>.
Node <5> is connected to node <4>.
Node <7> is connected to nodes <0>, <5>, <4>, <1>.
Node <9> is connected to nodes <1>, <4>, <8>, <3>, <2>.
Node <2> is connected to node <10>.
Node <0> is connected to nodes <5>, <4>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>]",11,23,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<9>, <2>, <10>, <3>, <7>, <0>, <5>, <4>, <6>, <8>, <1>]","Let's solve it step by step.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<8>, <1>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
So the result of topological sorting is ","('[[<9>, <2>, <10>, <3>, <7>, <0>, <5>, <4>, <6>, <8>, <1>], [<9>, <10>, <3>, <0>, <8>, <6>, <1>, <7>, <2>, <5>, <4>], [<9>, <2>, <10>, <3>, <7>, <5>, <4>, <8>, <1>, <6>, <0>], [<9>, <2>, <10>, <6>, <8>, <1>, <3>, <7>, <0>, <5>, <4>]]',)",0,282
topological_sort,"[(<1>, <4>), (<1>, <8>), (<1>, <7>), (<1>, <0>), (<4>, <2>), (<7>, <2>), (<2>, <0>), (<5>, <7>), (<5>, <0>), (<3>, <7>), (<3>, <1>), (<6>, <3>), (<6>, <0>), (<6>, <2>)]","{<1>: [<4>, <8>, <7>, <0>],
<4>: [<2>],
<8>: [],
<7>: [<2>],
<0>: [],
<2>: [<0>],
<5>: [<7>, <0>],
<3>: [<7>, <1>],
<6>: [<3>, <0>, <2>]}","Node <1> is connected to nodes <4>, <8>, <7>, <0>.
Node <4> is connected to node <2>.
Node <7> is connected to node <2>.
Node <2> is connected to node <0>.
Node <5> is connected to nodes <7>, <0>.
Node <3> is connected to nodes <7>, <1>.
Node <6> is connected to nodes <3>, <0>, <2>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>]",9,14,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<5>, <6>, <3>, <1>, <4>, <8>, <7>, <2>, <0>]","Let's solve it step by step.
Nodes with 0 in-degree: [<5>, <6>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <8>, <7>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<8>, <7>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
So the result of topological sorting is ","('[[<5>, <6>, <3>, <1>, <4>, <8>, <7>, <2>, <0>], [<5>, <6>, <3>, <7>, <2>, <0>, <1>, <4>, <8>], [<5>, <1>, <0>, <4>, <6>, <7>, <3>, <2>, <8>], [<5>, <6>, <3>, <1>, <8>, <7>, <0>, <2>, <4>]]',)",0,283
topological_sort,"[(<10>, <0>), (<1>, <9>), (<1>, <7>), (<1>, <5>), (<5>, <7>), (<8>, <10>), (<11>, <5>), (<11>, <10>), (<11>, <12>), (<11>, <9>), (<11>, <0>), (<11>, <13>), (<13>, <2>), (<3>, <2>), (<3>, <1>), (<3>, <6>), (<2>, <12>), (<2>, <0>), (<2>, <6>), (<6>, <1>), (<4>, <2>)]","{<10>: [<0>],
<0>: [],
<1>: [<9>, <7>, <5>],
<9>: [],
<7>: [],
<5>: [<7>],
<8>: [<10>],
<11>: [<5>, <10>, <12>, <9>, <0>, <13>],
<12>: [],
<13>: [<2>],
<3>: [<2>, <1>, <6>],
<2>: [<12>, <0>, <6>],
<6>: [<1>],
<4>: [<2>]}","Node <10> is connected to node <0>.
Node <1> is connected to nodes <9>, <7>, <5>.
Node <5> is connected to node <7>.
Node <8> is connected to node <10>.
Node <11> is connected to nodes <5>, <10>, <12>, <9>, <0>, <13>.
Node <13> is connected to node <2>.
Node <3> is connected to nodes <2>, <1>, <6>.
Node <2> is connected to nodes <12>, <0>, <6>.
Node <6> is connected to node <1>.
Node <4> is connected to node <2>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>]",14,21,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<8>, <11>, <3>, <4>, <10>, <13>, <2>, <12>, <0>, <6>, <1>, <9>, <5>, <7>]","Let's solve it step by step.
Nodes with 0 in-degree: [<8>, <11>, <3>, <4>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<11>, <3>, <4>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <4>, <10>, <13>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <10>, <13>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<10>, <13>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<13>].
Visit node <13> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<12>, <0>, <6>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <6>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<9>, <5>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
So the result of topological sorting is ","('[[<8>, <11>, <3>, <4>, <10>, <13>, <2>, <12>, <0>, <6>, <1>, <9>, <5>, <7>], [<8>, <11>, <1>, <12>, <10>, <13>, <2>, <6>, <4>, <3>, <0>, <7>, <9>, <5>], [<8>, <11>, <3>, <4>, <1>, <9>, <5>, <7>, <10>, <13>, <2>, <12>, <0>, <6>], [<8>, <11>, <3>, <4>, <10>, <13>, <2>, <1>, <12>, <7>, <5>, <0>, <6>, <9>]]',)",0,284
topological_sort,"[(<7>, <10>), (<10>, <6>), (<6>, <12>), (<6>, <4>), (<3>, <0>), (<3>, <9>), (<3>, <13>), (<3>, <8>), (<3>, <7>), (<9>, <11>), (<13>, <7>), (<13>, <11>), (<13>, <12>), (<13>, <0>), (<8>, <7>), (<8>, <9>), (<12>, <0>), (<11>, <10>), (<2>, <13>), (<2>, <7>), (<2>, <10>), (<1>, <12>), (<1>, <13>), (<5>, <3>), (<5>, <6>), (<5>, <10>)]","{<7>: [<10>],
<10>: [<6>],
<6>: [<12>, <4>],
<3>: [<0>, <9>, <13>, <8>, <7>],
<0>: [],
<9>: [<11>],
<13>: [<7>, <11>, <12>, <0>],
<8>: [<7>, <9>],
<12>: [<0>],
<11>: [<10>],
<2>: [<13>, <7>, <10>],
<4>: [],
<1>: [<12>, <13>],
<5>: [<3>, <6>, <10>]}","Node <7> is connected to node <10>.
Node <10> is connected to node <6>.
Node <6> is connected to nodes <12>, <4>.
Node <3> is connected to nodes <0>, <9>, <13>, <8>, <7>.
Node <9> is connected to node <11>.
Node <13> is connected to nodes <7>, <11>, <12>, <0>.
Node <8> is connected to nodes <7>, <9>.
Node <12> is connected to node <0>.
Node <11> is connected to node <10>.
Node <2> is connected to nodes <13>, <7>, <10>.
Node <1> is connected to nodes <12>, <13>.
Node <5> is connected to nodes <3>, <6>, <10>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>]",14,26,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<2>, <1>, <5>, <3>, <13>, <8>, <7>, <9>, <11>, <10>, <6>, <12>, <4>, <0>]","Let's solve it step by step.
Nodes with 0 in-degree: [<2>, <1>, <5>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <5>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<13>, <8>].
Visit node <13> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <9>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<11>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<12>, <4>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <0>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
So the result of topological sorting is ","('[[<2>, <0>, <7>, <4>, <10>, <11>, <9>, <3>, <5>, <8>, <1>, <12>, <13>, <6>], [<2>, <1>, <5>, <3>, <13>, <8>, <7>, <9>, <10>, <6>, <4>, <11>, <12>, <0>], [<2>, <1>, <5>, <3>, <13>, <8>, <7>, <9>, <11>, <10>, <6>, <12>, <4>, <0>], [<2>, <1>, <5>, <3>, <6>, <12>, <4>, <0>, <13>, <8>, <7>, <9>, <11>, <10>]]',)",2,285
topological_sort,"[(<3>, <5>), (<3>, <7>), (<5>, <7>), (<2>, <1>), (<2>, <0>), (<2>, <7>), (<2>, <6>), (<1>, <3>), (<0>, <5>), (<0>, <6>), (<6>, <1>), (<6>, <7>), (<4>, <5>), (<4>, <2>), (<4>, <3>)]","{<3>: [<5>, <7>],
<5>: [<7>],
<7>: [],
<2>: [<1>, <0>, <7>, <6>],
<1>: [<3>],
<0>: [<5>, <6>],
<6>: [<1>, <7>],
<4>: [<5>, <2>, <3>]}","Node <3> is connected to nodes <5>, <7>.
Node <5> is connected to node <7>.
Node <2> is connected to nodes <1>, <0>, <7>, <6>.
Node <1> is connected to node <3>.
Node <0> is connected to nodes <5>, <6>.
Node <6> is connected to nodes <1>, <7>.
Node <4> is connected to nodes <5>, <2>, <3>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>]",8,15,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<4>, <2>, <0>, <6>, <1>, <3>, <5>, <7>]","Let's solve it step by step.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
So the result of topological sorting is ","('[[<4>, <2>, <0>, <6>, <1>, <3>, <5>, <7>], [<4>, <2>, <0>, <6>, <7>, <5>, <3>, <1>], [<4>, <2>, <5>, <7>, <0>, <6>, <1>, <3>], [<4>, <7>, <6>, <5>, <0>, <2>, <3>, <1>]]',)",0,286
topological_sort,"[(<9>, <11>), (<9>, <10>), (<9>, <3>), (<9>, <5>), (<9>, <4>), (<11>, <10>), (<11>, <8>), (<11>, <4>), (<3>, <10>), (<5>, <1>), (<5>, <8>), (<5>, <3>), (<4>, <1>), (<4>, <5>), (<8>, <3>), (<0>, <6>), (<0>, <10>), (<0>, <1>), (<0>, <11>), (<0>, <9>), (<0>, <2>), (<6>, <8>), (<6>, <4>), (<1>, <2>), (<2>, <10>), (<7>, <1>), (<7>, <9>), (<7>, <8>)]","{<9>: [<11>, <10>, <3>, <5>, <4>],
<11>: [<10>, <8>, <4>],
<10>: [],
<3>: [<10>],
<5>: [<1>, <8>, <3>],
<4>: [<1>, <5>],
<8>: [<3>],
<0>: [<6>, <10>, <1>, <11>, <9>, <2>],
<6>: [<8>, <4>],
<1>: [<2>],
<2>: [<10>],
<7>: [<1>, <9>, <8>]}","Node <9> is connected to nodes <11>, <10>, <3>, <5>, <4>.
Node <11> is connected to nodes <10>, <8>, <4>.
Node <3> is connected to node <10>.
Node <5> is connected to nodes <1>, <8>, <3>.
Node <4> is connected to nodes <1>, <5>.
Node <8> is connected to node <3>.
Node <0> is connected to nodes <6>, <10>, <1>, <11>, <9>, <2>.
Node <6> is connected to nodes <8>, <4>.
Node <1> is connected to node <2>.
Node <2> is connected to node <10>.
Node <7> is connected to nodes <1>, <9>, <8>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>]",12,28,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<0>, <7>, <6>, <9>, <11>, <4>, <5>, <1>, <8>, <2>, <3>, <10>]","Let's solve it step by step.
Nodes with 0 in-degree: [<0>, <7>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <6>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <9>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<11>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <8>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<8>, <2>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <3>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
So the result of topological sorting is ","('[[<0>, <10>, <1>, <11>, <9>, <3>, <2>, <7>, <4>, <6>, <5>, <8>], [<0>, <7>, <6>, <9>, <8>, <2>, <3>, <10>, <11>, <4>, <5>, <1>], [<0>, <7>, <6>, <9>, <11>, <4>, <5>, <1>, <8>, <2>, <3>, <10>], [<0>, <7>, <6>, <9>, <11>, <4>, <3>, <1>, <8>, <5>, <10>, <2>]]',)",2,287
topological_sort,"[(<4>, <9>), (<4>, <11>), (<4>, <2>), (<4>, <3>), (<4>, <12>), (<4>, <1>), (<4>, <5>), (<4>, <6>), (<9>, <0>), (<9>, <1>), (<11>, <10>), (<11>, <6>), (<11>, <3>), (<11>, <1>), (<11>, <2>), (<2>, <1>), (<2>, <10>), (<12>, <0>), (<12>, <3>), (<1>, <0>), (<1>, <6>), (<5>, <2>), (<5>, <6>), (<5>, <0>), (<6>, <8>), (<6>, <10>), (<6>, <0>), (<6>, <3>), (<0>, <8>), (<0>, <3>), (<10>, <12>), (<10>, <8>), (<7>, <6>), (<7>, <9>)]","{<4>: [<9>, <11>, <2>, <3>, <12>, <1>, <5>, <6>],
<9>: [<0>, <1>],
<11>: [<10>, <6>, <3>, <1>, <2>],
<2>: [<1>, <10>],
<3>: [],
<12>: [<0>, <3>],
<1>: [<0>, <6>],
<5>: [<2>, <6>, <0>],
<6>: [<8>, <10>, <0>, <3>],
<0>: [<8>, <3>],
<10>: [<12>, <8>],
<8>: [],
<7>: [<6>, <9>]}","Node <4> is connected to nodes <9>, <11>, <2>, <3>, <12>, <1>, <5>, <6>.
Node <9> is connected to nodes <0>, <1>.
Node <11> is connected to nodes <10>, <6>, <3>, <1>, <2>.
Node <2> is connected to nodes <1>, <10>.
Node <12> is connected to nodes <0>, <3>.
Node <1> is connected to nodes <0>, <6>.
Node <5> is connected to nodes <2>, <6>, <0>.
Node <6> is connected to nodes <8>, <10>, <0>, <3>.
Node <0> is connected to nodes <8>, <3>.
Node <10> is connected to nodes <12>, <8>.
Node <7> is connected to nodes <6>, <9>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>]",13,34,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<4>, <7>, <11>, <5>, <9>, <2>, <1>, <6>, <10>, <12>, <0>, <8>, <3>]","Let's solve it step by step.
Nodes with 0 in-degree: [<4>, <7>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <11>, <5>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<11>, <5>, <9>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <9>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<9>, <2>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<12>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<8>, <3>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
So the result of topological sorting is ","('[[<4>, <10>, <7>, <8>, <1>, <6>, <0>, <2>, <11>, <5>, <3>, <12>, <9>], [<4>, <7>, <11>, <5>, <12>, <0>, <8>, <3>, <9>, <2>, <1>, <6>, <10>], [<4>, <7>, <11>, <5>, <9>, <2>, <1>, <6>, <10>, <12>, <0>, <8>, <3>], [<4>, <7>, <11>, <5>, <9>, <2>, <1>, <0>, <12>, <8>, <3>, <10>, <6>]]',)",2,288
topological_sort,"[(<7>, <1>), (<7>, <5>), (<7>, <6>), (<7>, <2>), (<2>, <1>), (<2>, <6>), (<4>, <2>), (<4>, <7>), (<3>, <7>), (<3>, <5>), (<3>, <4>), (<8>, <6>), (<0>, <3>)]","{<7>: [<1>, <5>, <6>, <2>],
<1>: [],
<5>: [],
<6>: [],
<2>: [<1>, <6>],
<4>: [<2>, <7>],
<3>: [<7>, <5>, <4>],
<8>: [<6>],
<0>: [<3>]}","Node <7> is connected to nodes <1>, <5>, <6>, <2>.
Node <2> is connected to nodes <1>, <6>.
Node <4> is connected to nodes <2>, <7>.
Node <3> is connected to nodes <7>, <5>, <4>.
Node <8> is connected to node <6>.
Node <0> is connected to node <3>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>]",9,13,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<8>, <0>, <3>, <4>, <7>, <5>, <2>, <1>, <6>]","Let's solve it step by step.
Nodes with 0 in-degree: [<8>, <0>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <2>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <6>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
So the result of topological sorting is ","('[[<8>, <4>, <1>, <3>, <5>, <6>, <0>, <7>, <2>], [<8>, <0>, <3>, <4>, <7>, <5>, <2>, <1>, <6>], [<8>, <0>, <3>, <4>, <7>, <2>, <5>, <1>, <6>], [<8>, <0>, <3>, <2>, <1>, <6>, <4>, <7>, <5>]]',)",1,289
topological_sort,"[(<5>, <4>), (<5>, <2>), (<5>, <13>), (<5>, <8>), (<5>, <6>), (<5>, <14>), (<5>, <12>), (<5>, <1>), (<5>, <7>), (<4>, <2>), (<13>, <14>), (<13>, <1>), (<8>, <14>), (<8>, <0>), (<8>, <4>), (<8>, <2>), (<8>, <13>), (<6>, <14>), (<6>, <12>), (<6>, <8>), (<6>, <10>), (<6>, <1>), (<6>, <3>), (<6>, <2>), (<6>, <0>), (<12>, <0>), (<12>, <8>), (<12>, <14>), (<12>, <7>), (<1>, <2>), (<1>, <4>), (<1>, <10>), (<7>, <1>), (<7>, <8>), (<7>, <14>), (<7>, <4>), (<10>, <4>), (<3>, <0>), (<3>, <4>), (<3>, <9>), (<3>, <11>), (<3>, <8>), (<0>, <2>), (<0>, <13>), (<9>, <12>), (<9>, <10>), (<9>, <0>), (<9>, <4>), (<9>, <14>), (<9>, <2>), (<11>, <4>), (<11>, <0>), (<11>, <13>), (<11>, <1>)]","{<5>: [<4>, <2>, <13>, <8>, <6>, <14>, <12>, <1>, <7>],
<4>: [<2>],
<2>: [],
<13>: [<14>, <1>],
<8>: [<14>, <0>, <4>, <2>, <13>],
<6>: [<14>, <12>, <8>, <10>, <1>, <3>, <2>, <0>],
<14>: [],
<12>: [<0>, <8>, <14>, <7>],
<1>: [<2>, <4>, <10>],
<7>: [<1>, <8>, <14>, <4>],
<10>: [<4>],
<3>: [<0>, <4>, <9>, <11>, <8>],
<0>: [<2>, <13>],
<9>: [<12>, <10>, <0>, <4>, <14>, <2>],
<11>: [<4>, <0>, <13>, <1>]}","Node <5> is connected to nodes <4>, <2>, <13>, <8>, <6>, <14>, <12>, <1>, <7>.
Node <4> is connected to node <2>.
Node <13> is connected to nodes <14>, <1>.
Node <8> is connected to nodes <14>, <0>, <4>, <2>, <13>.
Node <6> is connected to nodes <14>, <12>, <8>, <10>, <1>, <3>, <2>, <0>.
Node <12> is connected to nodes <0>, <8>, <14>, <7>.
Node <1> is connected to nodes <2>, <4>, <10>.
Node <7> is connected to nodes <1>, <8>, <14>, <4>.
Node <10> is connected to node <4>.
Node <3> is connected to nodes <0>, <4>, <9>, <11>, <8>.
Node <0> is connected to nodes <2>, <13>.
Node <9> is connected to nodes <12>, <10>, <0>, <4>, <14>, <2>.
Node <11> is connected to nodes <4>, <0>, <13>, <1>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>, <14>]",15,54,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<5>, <6>, <3>, <9>, <11>, <12>, <7>, <8>, <0>, <13>, <14>, <1>, <10>, <4>, <2>]","Let's solve it step by step.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<9>, <11>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<11>, <12>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<12>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<13>].
Visit node <13> and remove it from the graph.
Nodes with 0 in-degree: [<14>, <1>].
Visit node <14> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
So the result of topological sorting is ","('[[<5>, <6>, <3>, <9>, <11>, <14>, <1>, <10>, <4>, <2>, <12>, <7>, <8>, <0>, <13>], [<5>, <6>, <3>, <9>, <11>, <12>, <7>, <8>, <0>, <13>, <14>, <1>, <10>, <4>, <2>], [<5>, <6>, <3>, <9>, <11>, <12>, <7>, <0>, <4>, <2>, <13>, <14>, <10>, <1>, <8>], [<5>, <0>, <2>, <7>, <13>, <9>, <12>, <1>, <11>, <6>, <3>, <8>, <4>, <14>, <10>]]',)",1,290
topological_sort,"[(<12>, <3>), (<12>, <4>), (<12>, <8>), (<12>, <5>), (<12>, <1>), (<12>, <2>), (<3>, <2>), (<3>, <14>), (<4>, <10>), (<8>, <9>), (<8>, <3>), (<1>, <8>), (<1>, <9>), (<1>, <14>), (<1>, <5>), (<2>, <14>), (<2>, <5>), (<2>, <13>), (<6>, <7>), (<6>, <1>), (<6>, <2>), (<6>, <10>), (<6>, <12>), (<7>, <1>), (<7>, <2>), (<7>, <11>), (<7>, <3>), (<7>, <9>), (<7>, <14>), (<10>, <9>), (<10>, <13>), (<10>, <11>), (<10>, <5>), (<11>, <1>), (<9>, <5>), (<9>, <14>), (<0>, <2>), (<0>, <6>)]","{<12>: [<3>, <4>, <8>, <5>, <1>, <2>],
<3>: [<2>, <14>],
<4>: [<10>],
<8>: [<9>, <3>],
<5>: [],
<1>: [<8>, <9>, <14>, <5>],
<2>: [<14>, <5>, <13>],
<14>: [],
<6>: [<7>, <1>, <2>, <10>, <12>],
<7>: [<1>, <2>, <11>, <3>, <9>, <14>],
<10>: [<9>, <13>, <11>, <5>],
<11>: [<1>],
<9>: [<5>, <14>],
<13>: [],
<0>: [<2>, <6>]}","Node <12> is connected to nodes <3>, <4>, <8>, <5>, <1>, <2>.
Node <3> is connected to nodes <2>, <14>.
Node <4> is connected to node <10>.
Node <8> is connected to nodes <9>, <3>.
Node <1> is connected to nodes <8>, <9>, <14>, <5>.
Node <2> is connected to nodes <14>, <5>, <13>.
Node <6> is connected to nodes <7>, <1>, <2>, <10>, <12>.
Node <7> is connected to nodes <1>, <2>, <11>, <3>, <9>, <14>.
Node <10> is connected to nodes <9>, <13>, <11>, <5>.
Node <11> is connected to node <1>.
Node <9> is connected to nodes <5>, <14>.
Node <0> is connected to nodes <2>, <6>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>, <14>]",15,38,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<0>, <6>, <7>, <12>, <4>, <10>, <11>, <1>, <8>, <9>, <3>, <2>, <14>, <5>, <13>]","Let's solve it step by step.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <12>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<12>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<11>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<9>, <3>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<14>, <5>, <13>].
Visit node <14> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <13>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<13>].
Visit node <13> and remove it from the graph.
So the result of topological sorting is ","('[[<0>, <5>, <12>, <8>, <9>, <1>, <3>, <13>, <6>, <2>, <10>, <11>, <14>, <7>, <4>], [<0>, <6>, <7>, <12>, <4>, <10>, <11>, <14>, <9>, <2>, <5>, <3>, <13>, <8>, <1>], [<0>, <6>, <7>, <12>, <4>, <10>, <11>, <1>, <8>, <9>, <3>, <2>, <14>, <5>, <13>], [<0>, <6>, <7>, <12>, <4>, <3>, <2>, <14>, <5>, <13>, <10>, <11>, <1>, <8>, <9>]]',)",2,291
topological_sort,"[(<4>, <0>), (<4>, <9>), (<4>, <7>), (<4>, <2>), (<0>, <9>), (<0>, <5>), (<0>, <8>), (<9>, <10>), (<7>, <10>), (<7>, <2>), (<2>, <9>), (<2>, <10>), (<2>, <12>), (<5>, <11>), (<5>, <9>), (<5>, <10>), (<10>, <8>), (<12>, <9>), (<6>, <4>), (<6>, <10>), (<6>, <1>), (<6>, <11>), (<1>, <0>), (<1>, <7>), (<11>, <8>), (<11>, <12>), (<11>, <2>), (<3>, <1>), (<3>, <0>), (<3>, <4>), (<3>, <12>), (<3>, <6>)]","{<4>: [<0>, <9>, <7>, <2>],
<0>: [<9>, <5>, <8>],
<9>: [<10>],
<7>: [<10>, <2>],
<2>: [<9>, <10>, <12>],
<5>: [<11>, <9>, <10>],
<8>: [],
<10>: [<8>],
<12>: [<9>],
<6>: [<4>, <10>, <1>, <11>],
<1>: [<0>, <7>],
<11>: [<8>, <12>, <2>],
<3>: [<1>, <0>, <4>, <12>, <6>]}","Node <4> is connected to nodes <0>, <9>, <7>, <2>.
Node <0> is connected to nodes <9>, <5>, <8>.
Node <9> is connected to node <10>.
Node <7> is connected to nodes <10>, <2>.
Node <2> is connected to nodes <9>, <10>, <12>.
Node <5> is connected to nodes <11>, <9>, <10>.
Node <10> is connected to node <8>.
Node <12> is connected to node <9>.
Node <6> is connected to nodes <4>, <10>, <1>, <11>.
Node <1> is connected to nodes <0>, <7>.
Node <11> is connected to nodes <8>, <12>, <2>.
Node <3> is connected to nodes <1>, <0>, <4>, <12>, <6>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>]",13,32,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<3>, <6>, <4>, <1>, <0>, <7>, <5>, <11>, <2>, <12>, <9>, <10>, <8>]","Let's solve it step by step.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <1>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <7>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <5>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<11>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<12>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
So the result of topological sorting is ","('[[<3>, <1>, <9>, <2>, <10>, <5>, <0>, <7>, <12>, <8>, <4>, <11>, <6>], [<3>, <6>, <4>, <1>, <0>, <7>, <12>, <10>, <9>, <8>, <2>, <11>, <5>], [<3>, <6>, <4>, <1>, <0>, <7>, <5>, <11>, <2>, <12>, <9>, <10>, <8>], [<3>, <6>, <4>, <1>, <12>, <9>, <10>, <8>, <0>, <7>, <5>, <11>, <2>]]',)",2,292
topological_sort,"[(<10>, <2>), (<10>, <6>), (<10>, <1>), (<10>, <5>), (<10>, <9>), (<10>, <8>), (<2>, <3>), (<6>, <4>), (<6>, <2>), (<6>, <5>), (<6>, <7>), (<1>, <3>), (<5>, <1>), (<5>, <2>), (<9>, <1>), (<9>, <2>), (<8>, <4>), (<8>, <6>), (<8>, <1>), (<8>, <5>), (<8>, <0>), (<4>, <7>), (<7>, <3>), (<7>, <5>), (<7>, <9>), (<0>, <9>), (<0>, <4>), (<12>, <11>), (<12>, <7>), (<12>, <4>), (<12>, <9>), (<11>, <8>), (<11>, <0>)]","{<10>: [<2>, <6>, <1>, <5>, <9>, <8>],
<2>: [<3>],
<6>: [<4>, <2>, <5>, <7>],
<1>: [<3>],
<5>: [<1>, <2>],
<9>: [<1>, <2>],
<8>: [<4>, <6>, <1>, <5>, <0>],
<3>: [],
<4>: [<7>],
<7>: [<3>, <5>, <9>],
<0>: [<9>, <4>],
<12>: [<11>, <7>, <4>, <9>],
<11>: [<8>, <0>]}","Node <10> is connected to nodes <2>, <6>, <1>, <5>, <9>, <8>.
Node <2> is connected to node <3>.
Node <6> is connected to nodes <4>, <2>, <5>, <7>.
Node <1> is connected to node <3>.
Node <5> is connected to nodes <1>, <2>.
Node <9> is connected to nodes <1>, <2>.
Node <8> is connected to nodes <4>, <6>, <1>, <5>, <0>.
Node <4> is connected to node <7>.
Node <7> is connected to nodes <3>, <5>, <9>.
Node <0> is connected to nodes <9>, <4>.
Node <12> is connected to nodes <11>, <7>, <4>, <9>.
Node <11> is connected to nodes <8>, <0>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>]",13,33,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<10>, <12>, <11>, <8>, <6>, <0>, <4>, <7>, <5>, <9>, <1>, <2>, <3>]","Let's solve it step by step.
Nodes with 0 in-degree: [<10>, <12>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<12>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<11>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <0>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <9>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <2>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
So the result of topological sorting is ","('[[<10>, <12>, <11>, <8>, <6>, <0>, <2>, <7>, <5>, <4>, <1>, <9>, <3>], [<10>, <12>, <11>, <8>, <9>, <1>, <2>, <3>, <6>, <0>, <4>, <7>, <5>], [<10>, <12>, <11>, <8>, <6>, <0>, <4>, <7>, <5>, <9>, <1>, <2>, <3>], [<10>, <3>, <5>, <12>, <7>, <4>, <2>, <0>, <9>, <6>, <1>, <11>, <8>]]',)",2,293
topological_sort,"[(<5>, <4>), (<5>, <6>), (<5>, <10>), (<5>, <12>), (<5>, <7>), (<6>, <12>), (<6>, <10>), (<12>, <4>), (<7>, <4>), (<9>, <7>), (<9>, <2>), (<9>, <0>), (<9>, <1>), (<2>, <0>), (<2>, <3>), (<2>, <11>), (<2>, <8>), (<2>, <10>), (<0>, <6>), (<0>, <1>), (<0>, <12>), (<0>, <10>), (<0>, <5>), (<0>, <7>), (<3>, <5>), (<3>, <7>), (<11>, <6>), (<11>, <12>), (<8>, <6>), (<8>, <10>), (<8>, <7>)]","{<5>: [<4>, <6>, <10>, <12>, <7>],
<4>: [],
<6>: [<12>, <10>],
<10>: [],
<12>: [<4>],
<7>: [<4>],
<9>: [<7>, <2>, <0>, <1>],
<2>: [<0>, <3>, <11>, <8>, <10>],
<0>: [<6>, <1>, <12>, <10>, <5>, <7>],
<1>: [],
<3>: [<5>, <7>],
<11>: [<6>, <12>],
<8>: [<6>, <10>, <7>]}","Node <5> is connected to nodes <4>, <6>, <10>, <12>, <7>.
Node <6> is connected to nodes <12>, <10>.
Node <12> is connected to node <4>.
Node <7> is connected to node <4>.
Node <9> is connected to nodes <7>, <2>, <0>, <1>.
Node <2> is connected to nodes <0>, <3>, <11>, <8>, <10>.
Node <0> is connected to nodes <6>, <1>, <12>, <10>, <5>, <7>.
Node <3> is connected to nodes <5>, <7>.
Node <11> is connected to nodes <6>, <12>.
Node <8> is connected to nodes <6>, <10>, <7>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>]",13,31,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<9>, <2>, <0>, <3>, <11>, <8>, <1>, <5>, <6>, <7>, <12>, <10>, <4>]","Let's solve it step by step.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <3>, <11>, <8>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <11>, <8>, <1>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<11>, <8>, <1>, <5>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<8>, <1>, <5>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <5>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <7>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <12>, <10>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<12>, <10>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<10>, <4>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
So the result of topological sorting is ","('[[<9>, <2>, <0>, <3>, <11>, <8>, <4>, <1>, <12>, <7>, <6>, <5>, <10>], [<9>, <10>, <3>, <6>, <7>, <4>, <2>, <11>, <0>, <5>, <12>, <8>, <1>], [<9>, <2>, <0>, <3>, <7>, <12>, <10>, <4>, <11>, <8>, <1>, <5>, <6>], [<9>, <2>, <0>, <3>, <11>, <8>, <1>, <5>, <6>, <7>, <12>, <10>, <4>]]',)",3,294
topological_sort,"[(<2>, <12>), (<2>, <0>), (<2>, <10>), (<2>, <13>), (<2>, <9>), (<12>, <9>), (<12>, <6>), (<12>, <4>), (<12>, <0>), (<12>, <8>), (<12>, <11>), (<12>, <1>), (<0>, <14>), (<0>, <3>), (<10>, <0>), (<13>, <9>), (<9>, <6>), (<4>, <0>), (<4>, <8>), (<4>, <5>), (<8>, <5>), (<8>, <3>), (<8>, <10>), (<11>, <0>), (<11>, <10>), (<11>, <3>), (<11>, <8>), (<1>, <9>), (<1>, <6>), (<14>, <3>), (<3>, <9>), (<5>, <1>), (<5>, <14>), (<7>, <3>)]","{<2>: [<12>, <0>, <10>, <13>, <9>],
<12>: [<9>, <6>, <4>, <0>, <8>, <11>, <1>],
<0>: [<14>, <3>],
<10>: [<0>],
<13>: [<9>],
<9>: [<6>],
<6>: [],
<4>: [<0>, <8>, <5>],
<8>: [<5>, <3>, <10>],
<11>: [<0>, <10>, <3>, <8>],
<1>: [<9>, <6>],
<14>: [<3>],
<3>: [<9>],
<5>: [<1>, <14>],
<7>: [<3>]}","Node <2> is connected to nodes <12>, <0>, <10>, <13>, <9>.
Node <12> is connected to nodes <9>, <6>, <4>, <0>, <8>, <11>, <1>.
Node <0> is connected to nodes <14>, <3>.
Node <10> is connected to node <0>.
Node <13> is connected to node <9>.
Node <9> is connected to node <6>.
Node <4> is connected to nodes <0>, <8>, <5>.
Node <8> is connected to nodes <5>, <3>, <10>.
Node <11> is connected to nodes <0>, <10>, <3>, <8>.
Node <1> is connected to nodes <9>, <6>.
Node <14> is connected to node <3>.
Node <3> is connected to node <9>.
Node <5> is connected to nodes <1>, <14>.
Node <7> is connected to node <3>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>, <14>]",15,34,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<2>, <7>, <12>, <13>, <4>, <11>, <8>, <5>, <10>, <1>, <0>, <14>, <3>, <9>, <6>]","Let's solve it step by step.
Nodes with 0 in-degree: [<2>, <7>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <12>, <13>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<12>, <13>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<13>, <4>, <11>].
Visit node <13> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <11>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<11>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <10>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<10>, <1>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <0>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<14>].
Visit node <14> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
So the result of topological sorting is ","('[[<2>, <7>, <12>, <13>, <4>, <11>, <8>, <0>, <14>, <9>, <1>, <6>, <10>, <5>, <3>], [<2>, <7>, <12>, <13>, <4>, <0>, <14>, <3>, <9>, <6>, <11>, <8>, <5>, <10>, <1>], [<2>, <7>, <12>, <13>, <4>, <11>, <8>, <5>, <10>, <1>, <0>, <14>, <3>, <9>, <6>], [<2>, <13>, <3>, <10>, <5>, <11>, <4>, <7>, <8>, <1>, <14>, <6>, <12>, <0>, <9>]]',)",2,295
topological_sort,"[(<7>, <5>), (<5>, <4>), (<5>, <8>), (<5>, <3>), (<4>, <9>), (<3>, <4>), (<3>, <0>), (<1>, <0>), (<0>, <8>), (<6>, <7>), (<2>, <5>)]","{<7>: [<5>],
<5>: [<4>, <8>, <3>],
<4>: [<9>],
<8>: [],
<3>: [<4>, <0>],
<9>: [],
<1>: [<0>],
<0>: [<8>],
<6>: [<7>],
<2>: [<5>]}","Node <7> is connected to node <5>.
Node <5> is connected to nodes <4>, <8>, <3>.
Node <4> is connected to node <9>.
Node <3> is connected to nodes <4>, <0>.
Node <1> is connected to node <0>.
Node <0> is connected to node <8>.
Node <6> is connected to node <7>.
Node <2> is connected to node <5>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>]",10,11,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<1>, <6>, <2>, <7>, <5>, <3>, <4>, <0>, <9>, <8>]","Let's solve it step by step.
Nodes with 0 in-degree: [<1>, <6>, <2>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <2>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <7>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <0>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <9>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<9>, <8>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
So the result of topological sorting is ","('[[<1>, <6>, <2>, <0>, <9>, <8>, <7>, <5>, <3>, <4>], [<1>, <6>, <2>, <7>, <5>, <3>, <4>, <0>, <9>, <8>], [<1>, <6>, <2>, <7>, <5>, <9>, <8>, <3>, <0>, <4>], [<1>, <7>, <5>, <9>, <8>, <6>, <0>, <3>, <2>, <4>]]',)",1,296
topological_sort,"[(<7>, <6>), (<7>, <11>), (<6>, <14>), (<6>, <3>), (<0>, <10>), (<0>, <3>), (<0>, <4>), (<0>, <9>), (<10>, <6>), (<4>, <12>), (<4>, <10>), (<4>, <3>), (<4>, <6>), (<9>, <7>), (<12>, <14>), (<12>, <9>), (<13>, <6>), (<13>, <12>), (<5>, <8>), (<8>, <11>), (<1>, <4>), (<1>, <2>), (<2>, <5>), (<2>, <9>)]","{<7>: [<6>, <11>],
<6>: [<14>, <3>],
<11>: [],
<14>: [],
<3>: [],
<0>: [<10>, <3>, <4>, <9>],
<10>: [<6>],
<4>: [<12>, <10>, <3>, <6>],
<9>: [<7>],
<12>: [<14>, <9>],
<13>: [<6>, <12>],
<5>: [<8>],
<8>: [<11>],
<1>: [<4>, <2>],
<2>: [<5>, <9>]}","Node <7> is connected to nodes <6>, <11>.
Node <6> is connected to nodes <14>, <3>.
Node <0> is connected to nodes <10>, <3>, <4>, <9>.
Node <10> is connected to node <6>.
Node <4> is connected to nodes <12>, <10>, <3>, <6>.
Node <9> is connected to node <7>.
Node <12> is connected to nodes <14>, <9>.
Node <13> is connected to nodes <6>, <12>.
Node <5> is connected to node <8>.
Node <8> is connected to node <11>.
Node <1> is connected to nodes <4>, <2>.
Node <2> is connected to nodes <5>, <9>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>, <14>]",15,24,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<0>, <13>, <1>, <4>, <2>, <12>, <10>, <5>, <9>, <8>, <7>, <6>, <11>, <14>, <3>]","Let's solve it step by step.
Nodes with 0 in-degree: [<0>, <13>, <1>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<13>, <1>].
Visit node <13> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <2>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <12>, <10>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<12>, <10>, <5>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<10>, <5>, <9>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <9>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<9>, <8>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<8>, <7>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<7>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <11>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<11>, <14>, <3>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<14>, <3>].
Visit node <14> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
So the result of topological sorting is ","('[[<0>, <14>, <11>, <12>, <13>, <1>, <7>, <5>, <4>, <9>, <10>, <3>, <6>, <8>, <2>], [<0>, <13>, <1>, <4>, <2>, <12>, <10>, <7>, <6>, <9>, <11>, <8>, <3>, <14>, <5>], [<0>, <13>, <1>, <4>, <2>, <7>, <6>, <11>, <14>, <3>, <12>, <10>, <5>, <9>, <8>], [<0>, <13>, <1>, <4>, <2>, <12>, <10>, <5>, <9>, <8>, <7>, <6>, <11>, <14>, <3>]]',)",3,297
topological_sort,"[(<10>, <8>), (<10>, <7>), (<10>, <0>), (<8>, <7>), (<8>, <2>), (<7>, <0>), (<7>, <1>), (<2>, <1>), (<4>, <2>), (<4>, <7>), (<4>, <8>), (<4>, <10>), (<9>, <1>), (<9>, <10>), (<9>, <0>), (<9>, <6>), (<6>, <2>), (<6>, <0>), (<5>, <8>), (<3>, <9>), (<3>, <8>), (<3>, <0>), (<3>, <7>), (<3>, <5>)]","{<10>: [<8>, <7>, <0>],
<8>: [<7>, <2>],
<7>: [<0>, <1>],
<0>: [],
<2>: [<1>],
<4>: [<2>, <7>, <8>, <10>],
<1>: [],
<9>: [<1>, <10>, <0>, <6>],
<6>: [<2>, <0>],
<5>: [<8>],
<3>: [<9>, <8>, <0>, <7>, <5>]}","Node <10> is connected to nodes <8>, <7>, <0>.
Node <8> is connected to nodes <7>, <2>.
Node <7> is connected to nodes <0>, <1>.
Node <2> is connected to node <1>.
Node <4> is connected to nodes <2>, <7>, <8>, <10>.
Node <9> is connected to nodes <1>, <10>, <0>, <6>.
Node <6> is connected to nodes <2>, <0>.
Node <5> is connected to node <8>.
Node <3> is connected to nodes <9>, <8>, <0>, <7>, <5>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>]",11,24,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<4>, <3>, <9>, <5>, <10>, <6>, <8>, <7>, <2>, <0>, <1>]","Let's solve it step by step.
Nodes with 0 in-degree: [<4>, <3>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<9>, <5>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <10>, <6>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<10>, <6>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <8>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<7>, <2>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <0>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <1>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
So the result of topological sorting is ","('[[<4>, <3>, <9>, <2>, <0>, <1>, <5>, <10>, <6>, <8>, <7>], [<4>, <3>, <9>, <5>, <10>, <6>, <8>, <7>, <2>, <0>, <1>], [<4>, <3>, <9>, <5>, <10>, <7>, <8>, <0>, <1>, <6>, <2>], [<4>, <0>, <7>, <9>, <3>, <10>, <6>, <1>, <5>, <8>, <2>]]',)",1,298
topological_sort,"[(<12>, <2>), (<9>, <2>), (<9>, <6>), (<9>, <12>), (<6>, <0>), (<6>, <3>), (<6>, <5>), (<6>, <8>), (<7>, <4>), (<7>, <2>), (<7>, <1>), (<7>, <12>), (<4>, <2>), (<1>, <9>), (<1>, <8>), (<11>, <4>), (<11>, <2>), (<11>, <3>), (<3>, <2>), (<3>, <4>), (<10>, <3>), (<10>, <1>), (<10>, <0>), (<10>, <9>), (<10>, <11>), (<0>, <8>), (<0>, <4>), (<8>, <12>), (<8>, <11>), (<8>, <3>), (<8>, <2>), (<8>, <5>), (<5>, <3>), (<5>, <4>)]","{<12>: [<2>],
<2>: [],
<9>: [<2>, <6>, <12>],
<6>: [<0>, <3>, <5>, <8>],
<7>: [<4>, <2>, <1>, <12>],
<4>: [<2>],
<1>: [<9>, <8>],
<11>: [<4>, <2>, <3>],
<3>: [<2>, <4>],
<10>: [<3>, <1>, <0>, <9>, <11>],
<0>: [<8>, <4>],
<8>: [<12>, <11>, <3>, <2>, <5>],
<5>: [<3>, <4>]}","Node <12> is connected to node <2>.
Node <9> is connected to nodes <2>, <6>, <12>.
Node <6> is connected to nodes <0>, <3>, <5>, <8>.
Node <7> is connected to nodes <4>, <2>, <1>, <12>.
Node <4> is connected to node <2>.
Node <1> is connected to nodes <9>, <8>.
Node <11> is connected to nodes <4>, <2>, <3>.
Node <3> is connected to nodes <2>, <4>.
Node <10> is connected to nodes <3>, <1>, <0>, <9>, <11>.
Node <0> is connected to nodes <8>, <4>.
Node <8> is connected to nodes <12>, <11>, <3>, <2>, <5>.
Node <5> is connected to nodes <3>, <4>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>]",13,34,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<7>, <10>, <1>, <9>, <6>, <0>, <8>, <12>, <11>, <5>, <3>, <4>, <2>]","Let's solve it step by step.
Nodes with 0 in-degree: [<7>, <10>].
Visit node <7> and remove it from the graph.
Nodes with 0 in-degree: [<10>].
Visit node <10> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<9>].
Visit node <9> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<8>].
Visit node <8> and remove it from the graph.
Nodes with 0 in-degree: [<12>, <11>, <5>].
Visit node <12> and remove it from the graph.
Nodes with 0 in-degree: [<11>, <5>].
Visit node <11> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
So the result of topological sorting is ","('[[<7>, <10>, <1>, <9>, <5>, <3>, <4>, <2>, <6>, <0>, <8>, <12>, <11>], [<7>, <10>, <1>, <9>, <6>, <0>, <12>, <11>, <8>, <3>, <5>, <4>, <2>], [<7>, <10>, <1>, <9>, <6>, <0>, <8>, <12>, <11>, <5>, <3>, <4>, <2>], [<7>, <3>, <9>, <8>, <11>, <0>, <1>, <10>, <12>, <4>, <6>, <5>, <2>]]',)",2,299
