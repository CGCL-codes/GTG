####### sample 1 #######

>> task:

BFS

>> graph:

[(<8>, <0>), (<8>, <4>), (<0>, <5>), (<4>, <5>), (<4>, <2>), (<4>, <1>), (<5>, <3>), (<3>, <7>), (<7>, <6>)]

>> graph_adj:

{<8>: [<0>, <4>],
<0>: [<8>, <5>],
<4>: [<8>, <5>, <2>, <1>],
<5>: [<0>, <4>, <3>],
<3>: [<5>, <7>],
<2>: [<4>],
<1>: [<4>],
<7>: [<6>, <3>],
<6>: [<7>]}

>> graph_nl:

Node <8> is connected to nodes <0>, <4>.
Node <0> is connected to nodes <8>, <5>.
Node <4> is connected to nodes <8>, <5>, <2>, <1>.
Node <5> is connected to nodes <0>, <4>, <3>.
Node <3> is connected to nodes <5>, <7>.
Node <2> is connected to node <4>.
Node <1> is connected to node <4>.
Node <7> is connected to nodes <6>, <3>.
Node <6> is connected to node <7>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>]

>> num_nodes:

9

>> num_edges:

9

>> directed:

False

>> question:

Start from node <8>, output a sequence of traversal in breadth-first search (BFS) order.

>> answer:

[<8>, <0>, <4>, <5>, <2>, <1>, <3>, <7>, <6>]

>> steps:

Let's run breadth-first search (BFS) step by step.
Visit node <8>. Unvisited neighbors of node <8> are [<0>, <4>].
Visit node <0>. Unvisited neighbors of node <0> are [<5>].
Visit node <4>. Unvisited neighbors of node <4> are [<2>, <1>].
Visit node <5>. Unvisited neighbors of node <5> are [<3>].
Visit node <2>. 
Visit node <1>. 
Visit node <3>. Unvisited neighbors of node <3> are [<7>].
Visit node <7>. Unvisited neighbors of node <7> are [<6>].
Visit node <6>. 
So the BFS traversal is 

>> choices:

('[[<8>, <4>, <7>, <5>, <6>, <0>, <1>, <3>, <2>], [<8>, <0>, <4>, <5>, <6>, <7>, <2>, <1>, <3>], [<8>, <0>, <4>, <3>, <7>, <6>, <5>, <2>, <1>], [<8>, <0>, <4>, <5>, <2>, <1>, <3>, <7>, <6>]]',)

>> label:

3

####### sample 2 #######

>> task:

BFS

>> graph:

[(<5>, <0>), (<5>, <1>), (<0>, <2>), (<0>, <6>), (<0>, <8>), (<0>, <7>), (<0>, <3>), (<1>, <2>), (<1>, <3>), (<1>, <8>), (<2>, <4>), (<6>, <8>), (<7>, <3>), (<3>, <4>)]

>> graph_adj:

{<5>: [<0>, <1>],
<0>: [<5>, <2>, <6>, <8>, <7>, <3>],
<1>: [<5>, <2>, <3>, <8>],
<2>: [<0>, <4>, <1>],
<6>: [<0>, <8>],
<8>: [<0>, <1>, <6>],
<7>: [<0>, <3>],
<3>: [<0>, <1>, <4>, <7>],
<4>: [<2>, <3>]}

>> graph_nl:

Node <5> is connected to nodes <0>, <1>.
Node <0> is connected to nodes <5>, <2>, <6>, <8>, <7>, <3>.
Node <1> is connected to nodes <5>, <2>, <3>, <8>.
Node <2> is connected to nodes <0>, <4>, <1>.
Node <6> is connected to nodes <0>, <8>.
Node <8> is connected to nodes <0>, <1>, <6>.
Node <7> is connected to nodes <0>, <3>.
Node <3> is connected to nodes <0>, <1>, <4>, <7>.
Node <4> is connected to nodes <2>, <3>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>]

>> num_nodes:

9

>> num_edges:

14

>> directed:

False

>> question:

Start from node <6>, output a sequence of traversal in breadth-first search (BFS) order.

>> answer:

[<6>, <0>, <8>, <5>, <2>, <7>, <3>, <1>, <4>]

>> steps:

Let's run breadth-first search (BFS) step by step.
Visit node <6>. Unvisited neighbors of node <6> are [<0>, <8>].
Visit node <0>. Unvisited neighbors of node <0> are [<5>, <2>, <7>, <3>].
Visit node <8>. Unvisited neighbors of node <8> are [<1>].
Visit node <5>. 
Visit node <2>. Unvisited neighbors of node <2> are [<4>].
Visit node <7>. 
Visit node <3>. 
Visit node <1>. 
Visit node <4>. 
So the BFS traversal is 

>> choices:

('[[<6>, <0>, <8>, <5>, <3>, <2>, <7>, <4>, <1>], [<6>, <1>, <2>, <5>, <7>, <0>, <8>, <3>, <4>], [<6>, <0>, <8>, <3>, <1>, <4>, <5>, <2>, <7>], [<6>, <0>, <8>, <5>, <2>, <7>, <3>, <1>, <4>]]',)

>> label:

3

####### sample 3 #######

>> task:

BFS

>> graph:

[(<6>, <4>), (<6>, <0>), (<6>, <2>), (<6>, <5>), (<4>, <7>), (<4>, <9>), (<4>, <0>), (<4>, <2>), (<0>, <7>), (<0>, <8>), (<0>, <3>), (<2>, <7>), (<2>, <8>), (<2>, <3>), (<2>, <1>), (<5>, <3>), (<5>, <10>), (<7>, <1>), (<1>, <8>), (<1>, <3>), (<1>, <10>)]

>> graph_adj:

{<6>: [<4>, <0>, <2>, <5>],
<4>: [<6>, <7>, <9>, <0>, <2>],
<0>: [<6>, <7>, <8>, <4>, <3>],
<2>: [<6>, <7>, <8>, <4>, <3>, <1>],
<5>: [<6>, <3>, <10>],
<7>: [<4>, <0>, <2>, <1>],
<1>: [<7>, <8>, <3>, <2>, <10>],
<9>: [<4>],
<8>: [<0>, <2>, <1>],
<3>: [<0>, <2>, <5>, <1>],
<10>: [<5>, <1>]}

>> graph_nl:

Node <6> is connected to nodes <4>, <0>, <2>, <5>.
Node <4> is connected to nodes <6>, <7>, <9>, <0>, <2>.
Node <0> is connected to nodes <6>, <7>, <8>, <4>, <3>.
Node <2> is connected to nodes <6>, <7>, <8>, <4>, <3>, <1>.
Node <5> is connected to nodes <6>, <3>, <10>.
Node <7> is connected to nodes <4>, <0>, <2>, <1>.
Node <1> is connected to nodes <7>, <8>, <3>, <2>, <10>.
Node <9> is connected to node <4>.
Node <8> is connected to nodes <0>, <2>, <1>.
Node <3> is connected to nodes <0>, <2>, <5>, <1>.
Node <10> is connected to nodes <5>, <1>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>]

>> num_nodes:

11

>> num_edges:

21

>> directed:

False

>> question:

Start from node <0>, output a sequence of traversal in breadth-first search (BFS) order.

>> answer:

[<0>, <6>, <7>, <8>, <4>, <3>, <2>, <5>, <1>, <9>, <10>]

>> steps:

Let's run breadth-first search (BFS) step by step.
Visit node <0>. Unvisited neighbors of node <0> are [<6>, <7>, <8>, <4>, <3>].
Visit node <6>. Unvisited neighbors of node <6> are [<2>, <5>].
Visit node <7>. Unvisited neighbors of node <7> are [<1>].
Visit node <8>. 
Visit node <4>. Unvisited neighbors of node <4> are [<9>].
Visit node <3>. 
Visit node <2>. 
Visit node <5>. Unvisited neighbors of node <5> are [<10>].
Visit node <1>. 
Visit node <9>. 
Visit node <10>. 
So the BFS traversal is 

>> choices:

('[[<0>, <6>, <7>, <1>, <9>, <10>, <8>, <4>, <3>, <2>, <5>], [<0>, <6>, <7>, <8>, <4>, <5>, <3>, <2>, <1>, <9>, <10>], [<0>, <6>, <7>, <8>, <4>, <3>, <2>, <5>, <1>, <9>, <10>], [<0>, <8>, <4>, <5>, <1>, <3>, <10>, <7>, <6>, <9>, <2>]]',)

>> label:

2

####### sample 4 #######

>> task:

BFS

>> graph:

[(<12>, <2>), (<12>, <8>), (<12>, <11>), (<12>, <3>), (<12>, <9>), (<12>, <10>), (<2>, <1>), (<2>, <13>), (<2>, <3>), (<2>, <4>), (<2>, <0>), (<2>, <9>), (<2>, <6>), (<8>, <7>), (<8>, <13>), (<8>, <3>), (<8>, <9>), (<8>, <10>), (<11>, <3>), (<11>, <0>), (<11>, <9>), (<11>, <10>), (<11>, <6>), (<3>, <7>), (<3>, <1>), (<3>, <13>), (<3>, <0>), (<3>, <5>), (<3>, <9>), (<9>, <7>), (<9>, <1>), (<9>, <13>), (<9>, <0>), (<9>, <10>), (<9>, <6>), (<10>, <7>), (<10>, <1>), (<10>, <6>), (<7>, <4>), (<7>, <5>), (<7>, <6>), (<4>, <13>), (<4>, <5>), (<5>, <1>), (<5>, <6>), (<6>, <13>), (<1>, <13>), (<1>, <0>), (<13>, <0>)]

>> graph_adj:

{<12>: [<2>, <8>, <11>, <3>, <9>, <10>],
<2>: [<12>, <1>, <13>, <3>, <4>, <0>, <9>, <6>],
<8>: [<12>, <7>, <13>, <3>, <9>, <10>],
<11>: [<12>, <3>, <0>, <9>, <10>, <6>],
<3>: [<12>, <7>, <1>, <13>, <2>, <8>, <11>, <0>, <5>, <9>],
<9>: [<12>, <7>, <1>, <13>, <2>, <8>, <11>, <3>, <0>, <10>, <6>],
<10>: [<12>, <7>, <1>, <8>, <11>, <9>, <6>],
<7>: [<8>, <3>, <4>, <5>, <9>, <10>, <6>],
<4>: [<7>, <13>, <2>, <5>],
<5>: [<7>, <1>, <3>, <4>, <6>],
<6>: [<7>, <13>, <2>, <11>, <5>, <9>, <10>],
<1>: [<13>, <2>, <3>, <0>, <5>, <9>, <10>],
<13>: [<1>, <2>, <8>, <3>, <4>, <0>, <9>, <6>],
<0>: [<1>, <13>, <2>, <11>, <3>, <9>]}

>> graph_nl:

Node <12> is connected to nodes <2>, <8>, <11>, <3>, <9>, <10>.
Node <2> is connected to nodes <12>, <1>, <13>, <3>, <4>, <0>, <9>, <6>.
Node <8> is connected to nodes <12>, <7>, <13>, <3>, <9>, <10>.
Node <11> is connected to nodes <12>, <3>, <0>, <9>, <10>, <6>.
Node <3> is connected to nodes <12>, <7>, <1>, <13>, <2>, <8>, <11>, <0>, <5>, <9>.
Node <9> is connected to nodes <12>, <7>, <1>, <13>, <2>, <8>, <11>, <3>, <0>, <10>, <6>.
Node <10> is connected to nodes <12>, <7>, <1>, <8>, <11>, <9>, <6>.
Node <7> is connected to nodes <8>, <3>, <4>, <5>, <9>, <10>, <6>.
Node <4> is connected to nodes <7>, <13>, <2>, <5>.
Node <5> is connected to nodes <7>, <1>, <3>, <4>, <6>.
Node <6> is connected to nodes <7>, <13>, <2>, <11>, <5>, <9>, <10>.
Node <1> is connected to nodes <13>, <2>, <3>, <0>, <5>, <9>, <10>.
Node <13> is connected to nodes <1>, <2>, <8>, <3>, <4>, <0>, <9>, <6>.
Node <0> is connected to nodes <1>, <13>, <2>, <11>, <3>, <9>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>]

>> num_nodes:

14

>> num_edges:

49

>> directed:

False

>> question:

Start from node <8>, output a sequence of traversal in breadth-first search (BFS) order.

>> answer:

[<8>, <12>, <7>, <13>, <3>, <9>, <10>, <2>, <11>, <4>, <5>, <6>, <1>, <0>]

>> steps:

Let's run breadth-first search (BFS) step by step.
Visit node <8>. Unvisited neighbors of node <8> are [<12>, <7>, <13>, <3>, <9>, <10>].
Visit node <12>. Unvisited neighbors of node <12> are [<2>, <11>].
Visit node <7>. Unvisited neighbors of node <7> are [<4>, <5>, <6>].
Visit node <13>. Unvisited neighbors of node <13> are [<1>, <0>].
Visit node <3>. 
Visit node <9>. 
Visit node <10>. 
Visit node <2>. 
Visit node <11>. 
Visit node <4>. 
Visit node <5>. 
Visit node <6>. 
Visit node <1>. 
Visit node <0>. 
So the BFS traversal is 

>> choices:

('[[<8>, <12>, <7>, <13>, <3>, <9>, <10>, <2>, <11>, <4>, <5>, <6>, <1>, <0>], [<8>, <2>, <10>, <11>, <0>, <1>, <6>, <12>, <9>, <4>, <13>, <5>, <3>, <7>], [<8>, <12>, <7>, <13>, <5>, <6>, <1>, <0>, <3>, <9>, <10>, <2>, <11>, <4>], [<8>, <12>, <7>, <13>, <3>, <9>, <10>, <5>, <11>, <2>, <4>, <6>, <0>, <1>]]',)

>> label:

0

####### sample 5 #######

>> task:

BFS

>> graph:

[(<4>, <3>), (<4>, <6>), (<6>, <1>), (<6>, <2>), (<6>, <7>), (<5>, <6>), (<5>, <4>), (<2>, <7>), (<2>, <0>), (<2>, <5>), (<7>, <8>), (<0>, <1>), (<0>, <3>), (<0>, <5>), (<1>, <4>), (<1>, <2>)]

>> graph_adj:

{<4>: [<3>, <6>],
<3>: [],
<6>: [<1>, <2>, <7>],
<5>: [<6>, <4>],
<2>: [<7>, <0>, <5>],
<7>: [<8>],
<0>: [<1>, <3>, <5>],
<8>: [],
<1>: [<4>, <2>]}

>> graph_nl:

Node <4> is connected to nodes <3>, <6>.
Node <6> is connected to nodes <1>, <2>, <7>.
Node <5> is connected to nodes <6>, <4>.
Node <2> is connected to nodes <7>, <0>, <5>.
Node <7> is connected to node <8>.
Node <0> is connected to nodes <1>, <3>, <5>.
Node <1> is connected to nodes <4>, <2>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>]

>> num_nodes:

9

>> num_edges:

16

>> directed:

True

>> question:

Start from node <4>, output a sequence of traversal in breadth-first search (BFS) order.

>> answer:

[<4>, <3>, <6>, <1>, <2>, <7>, <0>, <5>, <8>]

>> steps:

Let's run breadth-first search (BFS) step by step.
Visit node <4>. Unvisited neighbors of node <4> are [<3>, <6>].
Visit node <3>. 
Visit node <6>. Unvisited neighbors of node <6> are [<1>, <2>, <7>].
Visit node <1>. 
Visit node <2>. Unvisited neighbors of node <2> are [<0>, <5>].
Visit node <7>. Unvisited neighbors of node <7> are [<8>].
Visit node <0>. 
Visit node <5>. 
Visit node <8>. 
So the BFS traversal is 

>> choices:

('[[<4>, <2>, <7>, <1>, <5>, <0>, <3>, <6>, <8>], [<4>, <3>, <6>, <1>, <8>, <2>, <0>, <5>, <7>], [<4>, <3>, <6>, <1>, <2>, <7>, <0>, <5>, <8>], [<4>, <3>, <6>, <0>, <5>, <8>, <1>, <2>, <7>]]',)

>> label:

2

####### sample 6 #######

>> task:

BFS

>> graph:

[(<12>, <6>), (<12>, <4>), (<12>, <13>), (<12>, <10>), (<12>, <0>), (<12>, <7>), (<6>, <5>), (<6>, <13>), (<6>, <10>), (<4>, <0>), (<4>, <14>), (<4>, <6>), (<13>, <10>), (<13>, <3>), (<13>, <7>), (<13>, <2>), (<13>, <6>), (<10>, <0>), (<10>, <3>), (<10>, <12>), (<0>, <7>), (<0>, <2>), (<0>, <9>), (<0>, <10>), (<7>, <9>), (<7>, <14>), (<7>, <12>), (<7>, <8>), (<7>, <1>), (<7>, <10>), (<7>, <3>), (<5>, <10>), (<5>, <3>), (<5>, <12>), (<14>, <4>), (<14>, <2>), (<8>, <13>), (<8>, <10>), (<8>, <0>), (<1>, <10>), (<1>, <9>), (<1>, <11>), (<1>, <8>), (<9>, <12>), (<9>, <6>), (<9>, <3>), (<9>, <7>), (<11>, <0>), (<11>, <7>), (<11>, <2>), (<3>, <1>), (<3>, <13>), (<2>, <12>), (<2>, <5>), (<2>, <13>), (<2>, <0>), (<2>, <3>)]

>> graph_adj:

{<12>: [<6>, <4>, <13>, <10>, <0>, <7>],
<6>: [<5>, <13>, <10>],
<4>: [<0>, <14>, <6>],
<13>: [<10>, <3>, <7>, <2>, <6>],
<10>: [<0>, <3>, <12>],
<0>: [<7>, <2>, <9>, <10>],
<7>: [<9>, <14>, <12>, <8>, <1>, <10>, <3>],
<5>: [<10>, <3>, <12>],
<14>: [<4>, <2>],
<8>: [<13>, <10>, <0>],
<1>: [<10>, <9>, <11>, <8>],
<9>: [<12>, <6>, <3>, <7>],
<11>: [<0>, <7>, <2>],
<3>: [<1>, <13>],
<2>: [<12>, <5>, <13>, <0>, <3>]}

>> graph_nl:

Node <12> is connected to nodes <6>, <4>, <13>, <10>, <0>, <7>.
Node <6> is connected to nodes <5>, <13>, <10>.
Node <4> is connected to nodes <0>, <14>, <6>.
Node <13> is connected to nodes <10>, <3>, <7>, <2>, <6>.
Node <10> is connected to nodes <0>, <3>, <12>.
Node <0> is connected to nodes <7>, <2>, <9>, <10>.
Node <7> is connected to nodes <9>, <14>, <12>, <8>, <1>, <10>, <3>.
Node <5> is connected to nodes <10>, <3>, <12>.
Node <14> is connected to nodes <4>, <2>.
Node <8> is connected to nodes <13>, <10>, <0>.
Node <1> is connected to nodes <10>, <9>, <11>, <8>.
Node <9> is connected to nodes <12>, <6>, <3>, <7>.
Node <11> is connected to nodes <0>, <7>, <2>.
Node <3> is connected to nodes <1>, <13>.
Node <2> is connected to nodes <12>, <5>, <13>, <0>, <3>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>, <14>]

>> num_nodes:

15

>> num_edges:

57

>> directed:

True

>> question:

Start from node <4>, output a sequence of traversal in breadth-first search (BFS) order.

>> answer:

[<4>, <0>, <14>, <6>, <7>, <2>, <9>, <10>, <5>, <13>, <12>, <8>, <1>, <3>, <11>]

>> steps:

Let's run breadth-first search (BFS) step by step.
Visit node <4>. Unvisited neighbors of node <4> are [<0>, <14>, <6>].
Visit node <0>. Unvisited neighbors of node <0> are [<7>, <2>, <9>, <10>].
Visit node <14>. 
Visit node <6>. Unvisited neighbors of node <6> are [<5>, <13>].
Visit node <7>. Unvisited neighbors of node <7> are [<12>, <8>, <1>, <3>].
Visit node <2>. 
Visit node <9>. 
Visit node <10>. 
Visit node <5>. 
Visit node <13>. 
Visit node <12>. 
Visit node <8>. 
Visit node <1>. Unvisited neighbors of node <1> are [<11>].
Visit node <3>. 
Visit node <11>. 
So the BFS traversal is 

>> choices:

('[[<4>, <1>, <12>, <0>, <11>, <5>, <8>, <14>, <2>, <7>, <6>, <10>, <3>, <9>, <13>], [<4>, <0>, <14>, <6>, <7>, <2>, <9>, <13>, <8>, <1>, <10>, <11>, <12>, <5>, <3>], [<4>, <0>, <14>, <6>, <7>, <2>, <9>, <10>, <5>, <13>, <12>, <8>, <1>, <3>, <11>], [<4>, <0>, <14>, <6>, <7>, <12>, <8>, <1>, <3>, <11>, <2>, <9>, <10>, <5>, <13>]]',)

>> label:

2

####### sample 7 #######

>> task:

BFS

>> graph:

[(<1>, <5>), (<1>, <7>), (<1>, <6>), (<5>, <6>), (<7>, <0>), (<7>, <2>), (<7>, <3>), (<6>, <1>), (<6>, <2>), (<6>, <7>), (<2>, <7>), (<2>, <0>), (<0>, <5>), (<0>, <4>), (<0>, <7>), (<4>, <7>), (<4>, <2>), (<4>, <5>), (<3>, <7>), (<3>, <6>), (<3>, <1>), (<3>, <2>), (<3>, <5>), (<3>, <4>)]

>> graph_adj:

{<1>: [<5>, <7>, <6>],
<5>: [<6>],
<7>: [<0>, <2>, <3>],
<6>: [<1>, <2>, <7>],
<2>: [<7>, <0>],
<0>: [<5>, <4>, <7>],
<4>: [<7>, <2>, <5>],
<3>: [<7>, <6>, <1>, <2>, <5>, <4>]}

>> graph_nl:

Node <1> is connected to nodes <5>, <7>, <6>.
Node <5> is connected to node <6>.
Node <7> is connected to nodes <0>, <2>, <3>.
Node <6> is connected to nodes <1>, <2>, <7>.
Node <2> is connected to nodes <7>, <0>.
Node <0> is connected to nodes <5>, <4>, <7>.
Node <4> is connected to nodes <7>, <2>, <5>.
Node <3> is connected to nodes <7>, <6>, <1>, <2>, <5>, <4>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>]

>> num_nodes:

8

>> num_edges:

24

>> directed:

True

>> question:

Start from node <2>, output a sequence of traversal in breadth-first search (BFS) order.

>> answer:

[<2>, <7>, <0>, <3>, <5>, <4>, <6>, <1>]

>> steps:

Let's run breadth-first search (BFS) step by step.
Visit node <2>. Unvisited neighbors of node <2> are [<7>, <0>].
Visit node <7>. Unvisited neighbors of node <7> are [<3>].
Visit node <0>. Unvisited neighbors of node <0> are [<5>, <4>].
Visit node <3>. Unvisited neighbors of node <3> are [<6>, <1>].
Visit node <5>. 
Visit node <4>. 
Visit node <6>. 
Visit node <1>. 
So the BFS traversal is 

>> choices:

('[[<2>, <7>, <0>, <3>, <1>, <6>, <4>, <5>], [<2>, <7>, <6>, <1>, <0>, <3>, <5>, <4>], [<2>, <7>, <6>, <5>, <3>, <1>, <4>, <0>], [<2>, <7>, <0>, <3>, <5>, <4>, <6>, <1>]]',)

>> label:

3

####### sample 8 #######

>> task:

BFS

>> graph:

[(<10>, <2>), (<10>, <0>), (<10>, <7>), (<10>, <1>), (<2>, <4>), (<2>, <3>), (<0>, <14>), (<0>, <7>), (<0>, <6>), (<7>, <14>), (<7>, <5>), (<7>, <1>), (<1>, <12>), (<1>, <13>), (<1>, <5>), (<4>, <3>), (<4>, <8>), (<4>, <6>), (<3>, <8>), (<14>, <12>), (<14>, <6>), (<14>, <8>), (<12>, <9>), (<12>, <13>), (<6>, <8>), (<6>, <9>), (<9>, <11>), (<13>, <11>), (<13>, <5>), (<11>, <5>)]

>> graph_adj:

{<10>: [<2>, <0>, <7>, <1>],
<2>: [<10>, <4>, <3>],
<0>: [<10>, <14>, <7>, <6>],
<7>: [<10>, <14>, <0>, <5>, <1>],
<1>: [<10>, <12>, <13>, <7>, <5>],
<4>: [<2>, <3>, <8>, <6>],
<3>: [<2>, <8>, <4>],
<14>: [<12>, <6>, <7>, <8>, <0>],
<12>: [<14>, <9>, <13>, <1>],
<6>: [<14>, <0>, <8>, <9>, <4>],
<8>: [<14>, <3>, <4>, <6>],
<9>: [<12>, <11>, <6>],
<13>: [<12>, <11>, <5>, <1>],
<11>: [<13>, <5>, <9>],
<5>: [<11>, <13>, <7>, <1>]}

>> graph_nl:

Node <10> is connected to nodes <2>, <0>, <7>, <1>.
Node <2> is connected to nodes <10>, <4>, <3>.
Node <0> is connected to nodes <10>, <14>, <7>, <6>.
Node <7> is connected to nodes <10>, <14>, <0>, <5>, <1>.
Node <1> is connected to nodes <10>, <12>, <13>, <7>, <5>.
Node <4> is connected to nodes <2>, <3>, <8>, <6>.
Node <3> is connected to nodes <2>, <8>, <4>.
Node <14> is connected to nodes <12>, <6>, <7>, <8>, <0>.
Node <12> is connected to nodes <14>, <9>, <13>, <1>.
Node <6> is connected to nodes <14>, <0>, <8>, <9>, <4>.
Node <8> is connected to nodes <14>, <3>, <4>, <6>.
Node <9> is connected to nodes <12>, <11>, <6>.
Node <13> is connected to nodes <12>, <11>, <5>, <1>.
Node <11> is connected to nodes <13>, <5>, <9>.
Node <5> is connected to nodes <11>, <13>, <7>, <1>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>, <14>]

>> num_nodes:

15

>> num_edges:

30

>> directed:

False

>> question:

Start from node <1>, output a sequence of traversal in breadth-first search (BFS) order.

>> answer:

[<1>, <10>, <12>, <13>, <7>, <5>, <2>, <0>, <14>, <9>, <11>, <4>, <3>, <6>, <8>]

>> steps:

Let's run breadth-first search (BFS) step by step.
Visit node <1>. Unvisited neighbors of node <1> are [<10>, <12>, <13>, <7>, <5>].
Visit node <10>. Unvisited neighbors of node <10> are [<2>, <0>].
Visit node <12>. Unvisited neighbors of node <12> are [<14>, <9>].
Visit node <13>. Unvisited neighbors of node <13> are [<11>].
Visit node <7>. 
Visit node <5>. 
Visit node <2>. Unvisited neighbors of node <2> are [<4>, <3>].
Visit node <0>. Unvisited neighbors of node <0> are [<6>].
Visit node <14>. Unvisited neighbors of node <14> are [<8>].
Visit node <9>. 
Visit node <11>. 
Visit node <4>. 
Visit node <3>. 
Visit node <6>. 
Visit node <8>. 
So the BFS traversal is 

>> choices:

('[[<1>, <6>, <12>, <7>, <4>, <8>, <10>, <2>, <14>, <3>, <5>, <13>, <9>, <0>, <11>], [<1>, <10>, <12>, <13>, <7>, <5>, <2>, <11>, <9>, <0>, <4>, <3>, <8>, <6>, <14>], [<1>, <10>, <12>, <13>, <7>, <5>, <2>, <0>, <14>, <9>, <11>, <4>, <3>, <6>, <8>], [<1>, <10>, <12>, <13>, <7>, <11>, <4>, <3>, <6>, <8>, <5>, <2>, <0>, <14>, <9>]]',)

>> label:

2

####### sample 9 #######

>> task:

BFS

>> graph:

[(<5>, <8>), (<5>, <7>), (<5>, <9>), (<5>, <3>), (<5>, <1>), (<5>, <4>), (<5>, <12>), (<5>, <14>), (<8>, <1>), (<8>, <4>), (<8>, <13>), (<7>, <9>), (<7>, <1>), (<7>, <4>), (<7>, <11>), (<7>, <12>), (<7>, <14>), (<7>, <0>), (<7>, <6>), (<7>, <13>), (<7>, <5>), (<7>, <8>), (<9>, <4>), (<9>, <11>), (<9>, <12>), (<9>, <6>), (<9>, <13>), (<9>, <2>), (<3>, <1>), (<3>, <4>), (<3>, <6>), (<3>, <7>), (<3>, <9>), (<1>, <11>), (<1>, <12>), (<1>, <14>), (<1>, <0>), (<1>, <10>), (<1>, <5>), (<1>, <7>), (<1>, <2>), (<4>, <14>), (<4>, <13>), (<4>, <3>), (<12>, <13>), (<12>, <8>), (<12>, <1>), (<14>, <0>), (<14>, <6>), (<14>, <13>), (<14>, <9>), (<13>, <7>), (<13>, <4>), (<13>, <12>), (<11>, <5>), (<11>, <2>), (<0>, <6>), (<0>, <13>), (<0>, <5>), (<0>, <8>), (<6>, <13>), (<6>, <2>), (<6>, <1>), (<2>, <9>), (<2>, <1>), (<2>, <4>), (<2>, <14>), (<2>, <10>), (<2>, <13>), (<10>, <5>), (<10>, <8>), (<10>, <2>), (<10>, <1>), (<10>, <12>), (<10>, <0>)]

>> graph_adj:

{<5>: [<8>, <7>, <9>, <3>, <1>, <4>, <12>, <14>],
<8>: [<1>, <4>, <13>],
<7>: [<9>, <1>, <4>, <11>, <12>, <14>, <0>, <6>, <13>, <5>, <8>],
<9>: [<4>, <11>, <12>, <6>, <13>, <2>],
<3>: [<1>, <4>, <6>, <7>, <9>],
<1>: [<11>, <12>, <14>, <0>, <10>, <5>, <7>, <2>],
<4>: [<14>, <13>, <3>],
<12>: [<13>, <8>, <1>],
<14>: [<0>, <6>, <13>, <9>],
<13>: [<7>, <4>, <12>],
<11>: [<5>, <2>],
<0>: [<6>, <13>, <5>, <8>],
<6>: [<13>, <2>, <1>],
<2>: [<9>, <1>, <4>, <14>, <10>, <13>],
<10>: [<5>, <8>, <2>, <1>, <12>, <0>]}

>> graph_nl:

Node <5> is connected to nodes <8>, <7>, <9>, <3>, <1>, <4>, <12>, <14>.
Node <8> is connected to nodes <1>, <4>, <13>.
Node <7> is connected to nodes <9>, <1>, <4>, <11>, <12>, <14>, <0>, <6>, <13>, <5>, <8>.
Node <9> is connected to nodes <4>, <11>, <12>, <6>, <13>, <2>.
Node <3> is connected to nodes <1>, <4>, <6>, <7>, <9>.
Node <1> is connected to nodes <11>, <12>, <14>, <0>, <10>, <5>, <7>, <2>.
Node <4> is connected to nodes <14>, <13>, <3>.
Node <12> is connected to nodes <13>, <8>, <1>.
Node <14> is connected to nodes <0>, <6>, <13>, <9>.
Node <13> is connected to nodes <7>, <4>, <12>.
Node <11> is connected to nodes <5>, <2>.
Node <0> is connected to nodes <6>, <13>, <5>, <8>.
Node <6> is connected to nodes <13>, <2>, <1>.
Node <2> is connected to nodes <9>, <1>, <4>, <14>, <10>, <13>.
Node <10> is connected to nodes <5>, <8>, <2>, <1>, <12>, <0>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>, <14>]

>> num_nodes:

15

>> num_edges:

75

>> directed:

True

>> question:

Start from node <12>, output a sequence of traversal in breadth-first search (BFS) order.

>> answer:

[<12>, <13>, <8>, <1>, <7>, <4>, <11>, <14>, <0>, <10>, <5>, <2>, <9>, <6>, <3>]

>> steps:

Let's run breadth-first search (BFS) step by step.
Visit node <12>. Unvisited neighbors of node <12> are [<13>, <8>, <1>].
Visit node <13>. Unvisited neighbors of node <13> are [<7>, <4>].
Visit node <8>. 
Visit node <1>. Unvisited neighbors of node <1> are [<11>, <14>, <0>, <10>, <5>, <2>].
Visit node <7>. Unvisited neighbors of node <7> are [<9>, <6>].
Visit node <4>. Unvisited neighbors of node <4> are [<3>].
Visit node <11>. 
Visit node <14>. 
Visit node <0>. 
Visit node <10>. 
Visit node <5>. 
Visit node <2>. 
Visit node <9>. 
Visit node <6>. 
Visit node <3>. 
So the BFS traversal is 

>> choices:

('[[<12>, <13>, <8>, <1>, <7>, <4>, <11>, <5>, <14>, <2>, <10>, <3>, <0>, <6>, <9>], [<12>, <13>, <8>, <1>, <7>, <5>, <2>, <9>, <6>, <3>, <4>, <11>, <14>, <0>, <10>], [<12>, <13>, <8>, <1>, <7>, <4>, <11>, <14>, <0>, <10>, <5>, <2>, <9>, <6>, <3>], [<12>, <8>, <5>, <10>, <13>, <9>, <6>, <7>, <3>, <0>, <1>, <14>, <11>, <4>, <2>]]',)

>> label:

2

####### sample 10 #######

>> task:

BFS

>> graph:

[(<9>, <11>), (<9>, <1>), (<9>, <14>), (<9>, <7>), (<9>, <5>), (<11>, <1>), (<11>, <14>), (<11>, <7>), (<11>, <6>), (<11>, <10>), (<11>, <5>), (<11>, <2>), (<11>, <8>), (<11>, <4>), (<1>, <3>), (<1>, <12>), (<1>, <7>), (<1>, <6>), (<1>, <5>), (<1>, <8>), (<1>, <4>), (<14>, <3>), (<14>, <12>), (<14>, <10>), (<14>, <8>), (<14>, <4>), (<7>, <3>), (<7>, <10>), (<7>, <2>), (<5>, <13>), (<5>, <8>), (<6>, <12>), (<6>, <13>), (<6>, <2>), (<10>, <0>), (<10>, <13>), (<10>, <2>), (<10>, <8>), (<10>, <4>), (<2>, <12>), (<2>, <8>), (<8>, <0>), (<4>, <13>), (<3>, <0>), (<3>, <12>), (<3>, <13>), (<0>, <12>)]

>> graph_adj:

{<9>: [<11>, <1>, <14>, <7>, <5>],
<11>: [<9>, <1>, <14>, <7>, <6>, <10>, <5>, <2>, <8>, <4>],
<1>: [<9>, <11>, <3>, <12>, <7>, <6>, <5>, <8>, <4>],
<14>: [<9>, <11>, <3>, <12>, <10>, <8>, <4>],
<7>: [<9>, <11>, <3>, <1>, <10>, <2>],
<5>: [<9>, <11>, <1>, <13>, <8>],
<6>: [<11>, <1>, <12>, <13>, <2>],
<10>: [<11>, <0>, <14>, <7>, <13>, <2>, <8>, <4>],
<2>: [<11>, <12>, <7>, <6>, <10>, <8>],
<8>: [<11>, <1>, <0>, <14>, <10>, <5>, <2>],
<4>: [<11>, <1>, <14>, <13>, <10>],
<3>: [<1>, <0>, <12>, <14>, <7>, <13>],
<0>: [<3>, <12>, <10>, <8>],
<12>: [<3>, <1>, <0>, <14>, <6>, <2>],
<13>: [<3>, <6>, <10>, <5>, <4>]}

>> graph_nl:

Node <9> is connected to nodes <11>, <1>, <14>, <7>, <5>.
Node <11> is connected to nodes <9>, <1>, <14>, <7>, <6>, <10>, <5>, <2>, <8>, <4>.
Node <1> is connected to nodes <9>, <11>, <3>, <12>, <7>, <6>, <5>, <8>, <4>.
Node <14> is connected to nodes <9>, <11>, <3>, <12>, <10>, <8>, <4>.
Node <7> is connected to nodes <9>, <11>, <3>, <1>, <10>, <2>.
Node <5> is connected to nodes <9>, <11>, <1>, <13>, <8>.
Node <6> is connected to nodes <11>, <1>, <12>, <13>, <2>.
Node <10> is connected to nodes <11>, <0>, <14>, <7>, <13>, <2>, <8>, <4>.
Node <2> is connected to nodes <11>, <12>, <7>, <6>, <10>, <8>.
Node <8> is connected to nodes <11>, <1>, <0>, <14>, <10>, <5>, <2>.
Node <4> is connected to nodes <11>, <1>, <14>, <13>, <10>.
Node <3> is connected to nodes <1>, <0>, <12>, <14>, <7>, <13>.
Node <0> is connected to nodes <3>, <12>, <10>, <8>.
Node <12> is connected to nodes <3>, <1>, <0>, <14>, <6>, <2>.
Node <13> is connected to nodes <3>, <6>, <10>, <5>, <4>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>, <14>]

>> num_nodes:

15

>> num_edges:

47

>> directed:

False

>> question:

Start from node <3>, output a sequence of traversal in breadth-first search (BFS) order.

>> answer:

[<3>, <1>, <0>, <12>, <14>, <7>, <13>, <9>, <11>, <6>, <5>, <8>, <4>, <10>, <2>]

>> steps:

Let's run breadth-first search (BFS) step by step.
Visit node <3>. Unvisited neighbors of node <3> are [<1>, <0>, <12>, <14>, <7>, <13>].
Visit node <1>. Unvisited neighbors of node <1> are [<9>, <11>, <6>, <5>, <8>, <4>].
Visit node <0>. Unvisited neighbors of node <0> are [<10>].
Visit node <12>. Unvisited neighbors of node <12> are [<2>].
Visit node <14>. 
Visit node <7>. 
Visit node <13>. 
Visit node <9>. 
Visit node <11>. 
Visit node <6>. 
Visit node <5>. 
Visit node <8>. 
Visit node <4>. 
Visit node <10>. 
Visit node <2>. 
So the BFS traversal is 

>> choices:

('[[<3>, <1>, <0>, <12>, <14>, <7>, <13>, <8>, <6>, <10>, <4>, <5>, <11>, <2>, <9>], [<3>, <1>, <0>, <12>, <14>, <5>, <8>, <4>, <10>, <2>, <7>, <13>, <9>, <11>, <6>], [<3>, <10>, <1>, <2>, <8>, <14>, <7>, <4>, <5>, <12>, <9>, <0>, <11>, <13>, <6>], [<3>, <1>, <0>, <12>, <14>, <7>, <13>, <9>, <11>, <6>, <5>, <8>, <4>, <10>, <2>]]',)

>> label:

3

