####### sample 1 #######

>> task:

edge

>> graph:

[(<7>, <2>), (<7>, <5>), (<7>, <6>), (<2>, <5>), (<5>, <0>), (<6>, <1>), (<8>, <0>), (<8>, <3>), (<1>, <4>)]

>> graph_adj:

{<7>: [<2>, <5>, <6>],
<2>: [<7>, <5>],
<5>: [<7>, <2>, <0>],
<6>: [<7>, <1>],
<8>: [<0>, <3>],
<0>: [<8>, <5>],
<3>: [<8>],
<1>: [<6>, <4>],
<4>: [<1>]}

>> graph_nl:

Node <7> is connected to nodes <2>, <5>, <6>.
Node <2> is connected to nodes <7>, <5>.
Node <5> is connected to nodes <7>, <2>, <0>.
Node <6> is connected to nodes <7>, <1>.
Node <8> is connected to nodes <0>, <3>.
Node <0> is connected to nodes <8>, <5>.
Node <3> is connected to node <8>.
Node <1> is connected to nodes <6>, <4>.
Node <4> is connected to node <1>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>]

>> num_nodes:

9

>> num_edges:

9

>> directed:

False

>> question:

Is there an edge between node <0> and node <6>?

>> answer:

No

>> steps:

Let's do it step by step.
The neighbors of node <0> are: [<8>, <5>], which does not contain node <6>. So the answer is 

>> choices:

('[Yes, No]',)

>> label:

1

####### sample 2 #######

>> task:

edge

>> graph:

[(<3>, <2>), (<3>, <5>), (<3>, <4>), (<2>, <3>), (<5>, <0>), (<5>, <1>), (<5>, <2>), (<5>, <8>), (<5>, <7>), (<4>, <2>), (<4>, <8>), (<4>, <10>), (<4>, <0>), (<4>, <1>), (<11>, <5>), (<11>, <0>), (<11>, <4>), (<11>, <3>), (<0>, <6>), (<0>, <2>), (<0>, <8>), (<0>, <9>), (<0>, <5>), (<8>, <10>), (<8>, <0>), (<8>, <1>), (<10>, <0>), (<10>, <3>), (<10>, <11>), (<10>, <8>), (<10>, <7>), (<10>, <9>), (<1>, <3>), (<1>, <8>), (<7>, <9>), (<7>, <0>), (<7>, <4>), (<7>, <8>), (<9>, <5>), (<9>, <3>), (<9>, <11>), (<6>, <2>), (<6>, <7>), (<6>, <9>), (<6>, <5>), (<6>, <10>), (<6>, <0>)]

>> graph_adj:

{<3>: [<2>, <5>, <4>],
<2>: [<3>],
<5>: [<0>, <1>, <2>, <8>, <7>],
<4>: [<2>, <8>, <10>, <0>, <1>],
<11>: [<5>, <0>, <4>, <3>],
<0>: [<6>, <2>, <8>, <9>, <5>],
<8>: [<10>, <0>, <1>],
<10>: [<0>, <3>, <11>, <8>, <7>, <9>],
<1>: [<3>, <8>],
<7>: [<9>, <0>, <4>, <8>],
<9>: [<5>, <3>, <11>],
<6>: [<2>, <7>, <9>, <5>, <10>, <0>]}

>> graph_nl:

Node <3> is connected to nodes <2>, <5>, <4>.
Node <2> is connected to node <3>.
Node <5> is connected to nodes <0>, <1>, <2>, <8>, <7>.
Node <4> is connected to nodes <2>, <8>, <10>, <0>, <1>.
Node <11> is connected to nodes <5>, <0>, <4>, <3>.
Node <0> is connected to nodes <6>, <2>, <8>, <9>, <5>.
Node <8> is connected to nodes <10>, <0>, <1>.
Node <10> is connected to nodes <0>, <3>, <11>, <8>, <7>, <9>.
Node <1> is connected to nodes <3>, <8>.
Node <7> is connected to nodes <9>, <0>, <4>, <8>.
Node <9> is connected to nodes <5>, <3>, <11>.
Node <6> is connected to nodes <2>, <7>, <9>, <5>, <10>, <0>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>]

>> num_nodes:

12

>> num_edges:

47

>> directed:

True

>> question:

Is there a directed edge from node <2> to node <3>?

>> answer:

Yes

>> steps:

Let's do it step by step.
The successors of node <2> are: [<3>], which contains node <3>. So the answer is 

>> choices:

('[Yes, No]',)

>> label:

0

####### sample 3 #######

>> task:

edge

>> graph:

[(<6>, <7>), (<6>, <0>), (<6>, <4>), (<6>, <1>), (<7>, <4>), (<0>, <4>), (<0>, <5>), (<0>, <3>), (<4>, <1>), (<4>, <2>), (<4>, <5>), (<4>, <3>)]

>> graph_adj:

{<6>: [<7>, <0>, <4>, <1>],
<7>: [<6>, <4>],
<0>: [<6>, <4>, <5>, <3>],
<4>: [<6>, <7>, <1>, <0>, <2>, <5>, <3>],
<1>: [<6>, <4>],
<2>: [<4>],
<5>: [<4>, <0>],
<3>: [<4>, <0>]}

>> graph_nl:

Node <6> is connected to nodes <7>, <0>, <4>, <1>.
Node <7> is connected to nodes <6>, <4>.
Node <0> is connected to nodes <6>, <4>, <5>, <3>.
Node <4> is connected to nodes <6>, <7>, <1>, <0>, <2>, <5>, <3>.
Node <1> is connected to nodes <6>, <4>.
Node <2> is connected to node <4>.
Node <5> is connected to nodes <4>, <0>.
Node <3> is connected to nodes <4>, <0>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>]

>> num_nodes:

8

>> num_edges:

12

>> directed:

False

>> question:

Is there an edge between node <7> and node <4>?

>> answer:

Yes

>> steps:

Let's do it step by step.
The neighbors of node <7> are: [<6>, <4>], which contains node <4>. So the answer is 

>> choices:

('[Yes, No]',)

>> label:

0

####### sample 4 #######

>> task:

edge

>> graph:

[(<1>, <8>), (<1>, <7>), (<1>, <6>), (<1>, <3>), (<1>, <2>), (<1>, <9>), (<1>, <10>), (<8>, <0>), (<8>, <5>), (<7>, <2>), (<7>, <6>), (<7>, <10>), (<6>, <5>), (<6>, <0>), (<6>, <10>), (<6>, <4>), (<3>, <5>), (<3>, <9>), (<2>, <5>), (<2>, <0>), (<2>, <9>), (<10>, <4>), (<0>, <5>), (<0>, <4>)]

>> graph_adj:

{<1>: [<8>, <7>, <6>, <3>, <2>, <9>, <10>],
<8>: [<1>, <0>, <5>],
<7>: [<1>, <2>, <6>, <10>],
<6>: [<1>, <5>, <0>, <7>, <10>, <4>],
<3>: [<1>, <5>, <9>],
<2>: [<1>, <5>, <0>, <7>, <9>],
<9>: [<1>, <2>, <3>],
<10>: [<1>, <6>, <7>, <4>],
<0>: [<8>, <5>, <2>, <6>, <4>],
<5>: [<8>, <0>, <2>, <6>, <3>],
<4>: [<0>, <6>, <10>]}

>> graph_nl:

Node <1> is connected to nodes <8>, <7>, <6>, <3>, <2>, <9>, <10>.
Node <8> is connected to nodes <1>, <0>, <5>.
Node <7> is connected to nodes <1>, <2>, <6>, <10>.
Node <6> is connected to nodes <1>, <5>, <0>, <7>, <10>, <4>.
Node <3> is connected to nodes <1>, <5>, <9>.
Node <2> is connected to nodes <1>, <5>, <0>, <7>, <9>.
Node <9> is connected to nodes <1>, <2>, <3>.
Node <10> is connected to nodes <1>, <6>, <7>, <4>.
Node <0> is connected to nodes <8>, <5>, <2>, <6>, <4>.
Node <5> is connected to nodes <8>, <0>, <2>, <6>, <3>.
Node <4> is connected to nodes <0>, <6>, <10>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>]

>> num_nodes:

11

>> num_edges:

24

>> directed:

False

>> question:

Is there an edge between node <9> and node <4>?

>> answer:

No

>> steps:

Let's do it step by step.
The neighbors of node <9> are: [<1>, <2>, <3>], which does not contain node <4>. So the answer is 

>> choices:

('[Yes, No]',)

>> label:

1

####### sample 5 #######

>> task:

edge

>> graph:

[(<6>, <2>), (<6>, <9>), (<6>, <3>), (<6>, <7>), (<6>, <0>), (<6>, <4>), (<6>, <8>), (<2>, <5>), (<2>, <9>), (<2>, <1>), (<2>, <3>), (<2>, <10>), (<2>, <7>), (<2>, <0>), (<2>, <8>), (<9>, <5>), (<9>, <1>), (<9>, <3>), (<9>, <10>), (<9>, <0>), (<9>, <4>), (<9>, <8>), (<3>, <5>), (<3>, <10>), (<3>, <7>), (<3>, <8>), (<7>, <5>), (<7>, <1>), (<7>, <10>), (<7>, <0>), (<7>, <4>), (<7>, <8>), (<0>, <5>), (<0>, <1>), (<0>, <10>), (<0>, <4>), (<0>, <8>), (<4>, <5>), (<4>, <1>), (<4>, <10>), (<4>, <8>), (<8>, <5>), (<8>, <10>), (<5>, <10>), (<10>, <1>)]

>> graph_adj:

{<6>: [<2>, <9>, <3>, <7>, <0>, <4>, <8>],
<2>: [<6>, <5>, <9>, <1>, <3>, <10>, <7>, <0>, <8>],
<9>: [<6>, <5>, <2>, <1>, <3>, <10>, <0>, <4>, <8>],
<3>: [<6>, <5>, <2>, <9>, <10>, <7>, <8>],
<7>: [<6>, <5>, <2>, <1>, <3>, <10>, <0>, <4>, <8>],
<0>: [<6>, <5>, <2>, <9>, <1>, <10>, <7>, <4>, <8>],
<4>: [<6>, <5>, <9>, <1>, <10>, <7>, <0>, <8>],
<8>: [<6>, <5>, <2>, <9>, <3>, <10>, <7>, <0>, <4>],
<5>: [<2>, <9>, <3>, <10>, <7>, <0>, <4>, <8>],
<10>: [<5>, <2>, <9>, <1>, <3>, <7>, <0>, <4>, <8>],
<1>: [<2>, <9>, <10>, <7>, <0>, <4>]}

>> graph_nl:

Node <6> is connected to nodes <2>, <9>, <3>, <7>, <0>, <4>, <8>.
Node <2> is connected to nodes <6>, <5>, <9>, <1>, <3>, <10>, <7>, <0>, <8>.
Node <9> is connected to nodes <6>, <5>, <2>, <1>, <3>, <10>, <0>, <4>, <8>.
Node <3> is connected to nodes <6>, <5>, <2>, <9>, <10>, <7>, <8>.
Node <7> is connected to nodes <6>, <5>, <2>, <1>, <3>, <10>, <0>, <4>, <8>.
Node <0> is connected to nodes <6>, <5>, <2>, <9>, <1>, <10>, <7>, <4>, <8>.
Node <4> is connected to nodes <6>, <5>, <9>, <1>, <10>, <7>, <0>, <8>.
Node <8> is connected to nodes <6>, <5>, <2>, <9>, <3>, <10>, <7>, <0>, <4>.
Node <5> is connected to nodes <2>, <9>, <3>, <10>, <7>, <0>, <4>, <8>.
Node <10> is connected to nodes <5>, <2>, <9>, <1>, <3>, <7>, <0>, <4>, <8>.
Node <1> is connected to nodes <2>, <9>, <10>, <7>, <0>, <4>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>]

>> num_nodes:

11

>> num_edges:

45

>> directed:

False

>> question:

Is there an edge between node <4> and node <5>?

>> answer:

Yes

>> steps:

Let's do it step by step.
The neighbors of node <4> are: [<6>, <5>, <9>, <1>, <10>, <7>, <0>, <8>], which contains node <5>. So the answer is 

>> choices:

('[Yes, No]',)

>> label:

0

####### sample 6 #######

>> task:

edge

>> graph:

[(<8>, <10>), (<8>, <1>), (<8>, <3>), (<8>, <12>), (<10>, <0>), (<10>, <9>), (<1>, <5>), (<1>, <4>), (<1>, <6>), (<3>, <7>), (<5>, <11>), (<7>, <2>)]

>> graph_adj:

{<8>: [<10>, <1>, <3>, <12>],
<10>: [<8>, <0>, <9>],
<1>: [<8>, <5>, <4>, <6>],
<3>: [<8>, <7>],
<12>: [<8>],
<0>: [<10>],
<9>: [<10>],
<5>: [<1>, <11>],
<4>: [<1>],
<6>: [<1>],
<11>: [<5>],
<7>: [<3>, <2>],
<2>: [<7>]}

>> graph_nl:

Node <8> is connected to nodes <10>, <1>, <3>, <12>.
Node <10> is connected to nodes <8>, <0>, <9>.
Node <1> is connected to nodes <8>, <5>, <4>, <6>.
Node <3> is connected to nodes <8>, <7>.
Node <12> is connected to node <8>.
Node <0> is connected to node <10>.
Node <9> is connected to node <10>.
Node <5> is connected to nodes <1>, <11>.
Node <4> is connected to node <1>.
Node <6> is connected to node <1>.
Node <11> is connected to node <5>.
Node <7> is connected to nodes <3>, <2>.
Node <2> is connected to node <7>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>]

>> num_nodes:

13

>> num_edges:

12

>> directed:

False

>> question:

Is there an edge between node <10> and node <11>?

>> answer:

No

>> steps:

Let's do it step by step.
The neighbors of node <10> are: [<8>, <0>, <9>], which does not contain node <11>. So the answer is 

>> choices:

('[Yes, No]',)

>> label:

1

####### sample 7 #######

>> task:

edge

>> graph:

[(<1>, <6>), (<6>, <4>), (<6>, <0>), (<4>, <5>), (<4>, <7>), (<0>, <8>), (<0>, <12>), (<5>, <10>), (<10>, <9>), (<10>, <11>), (<9>, <13>), (<11>, <2>), (<13>, <3>), (<3>, <7>)]

>> graph_adj:

{<1>: [<6>],
<6>: [<1>, <4>, <0>],
<4>: [<6>, <5>, <7>],
<0>: [<6>, <8>, <12>],
<5>: [<10>, <4>],
<10>: [<5>, <9>, <11>],
<9>: [<10>, <13>],
<11>: [<10>, <2>],
<13>: [<9>, <3>],
<3>: [<7>, <13>],
<7>: [<3>, <4>],
<8>: [<0>],
<12>: [<0>],
<2>: [<11>]}

>> graph_nl:

Node <1> is connected to node <6>.
Node <6> is connected to nodes <1>, <4>, <0>.
Node <4> is connected to nodes <6>, <5>, <7>.
Node <0> is connected to nodes <6>, <8>, <12>.
Node <5> is connected to nodes <10>, <4>.
Node <10> is connected to nodes <5>, <9>, <11>.
Node <9> is connected to nodes <10>, <13>.
Node <11> is connected to nodes <10>, <2>.
Node <13> is connected to nodes <9>, <3>.
Node <3> is connected to nodes <7>, <13>.
Node <7> is connected to nodes <3>, <4>.
Node <8> is connected to node <0>.
Node <12> is connected to node <0>.
Node <2> is connected to node <11>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>]

>> num_nodes:

14

>> num_edges:

14

>> directed:

False

>> question:

Is there an edge between node <1> and node <10>?

>> answer:

No

>> steps:

Let's do it step by step.
The neighbors of node <1> are: [<6>], which does not contain node <10>. So the answer is 

>> choices:

('[Yes, No]',)

>> label:

1

####### sample 8 #######

>> task:

edge

>> graph:

[(<3>, <6>), (<3>, <4>), (<6>, <0>), (<4>, <5>), (<0>, <7>), (<1>, <2>), (<1>, <7>), (<2>, <5>)]

>> graph_adj:

{<3>: [<6>, <4>],
<6>: [<3>, <0>],
<4>: [<3>, <5>],
<0>: [<6>, <7>],
<1>: [<2>, <7>],
<2>: [<1>, <5>],
<7>: [<1>, <0>],
<5>: [<2>, <4>]}

>> graph_nl:

Node <3> is connected to nodes <6>, <4>.
Node <6> is connected to nodes <3>, <0>.
Node <4> is connected to nodes <3>, <5>.
Node <0> is connected to nodes <6>, <7>.
Node <1> is connected to nodes <2>, <7>.
Node <2> is connected to nodes <1>, <5>.
Node <7> is connected to nodes <1>, <0>.
Node <5> is connected to nodes <2>, <4>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>]

>> num_nodes:

8

>> num_edges:

8

>> directed:

False

>> question:

Is there an edge between node <7> and node <0>?

>> answer:

Yes

>> steps:

Let's do it step by step.
The neighbors of node <7> are: [<1>, <0>], which contains node <0>. So the answer is 

>> choices:

('[Yes, No]',)

>> label:

0

####### sample 9 #######

>> task:

edge

>> graph:

[(<5>, <3>), (<5>, <1>), (<5>, <10>), (<5>, <0>), (<3>, <11>), (<3>, <1>), (<3>, <6>), (<3>, <7>), (<3>, <12>), (<1>, <0>), (<1>, <12>), (<1>, <9>), (<1>, <4>), (<10>, <0>), (<10>, <13>), (<10>, <2>), (<0>, <12>), (<0>, <4>), (<11>, <9>), (<11>, <8>), (<6>, <7>), (<6>, <8>), (<7>, <13>), (<12>, <2>), (<12>, <8>), (<12>, <4>), (<8>, <9>), (<8>, <13>)]

>> graph_adj:

{<5>: [<3>, <1>, <10>, <0>],
<3>: [<5>, <11>, <1>, <6>, <7>, <12>],
<1>: [<5>, <3>, <0>, <12>, <9>, <4>],
<10>: [<5>, <0>, <13>, <2>],
<0>: [<5>, <12>, <4>, <10>, <1>],
<11>: [<3>, <9>, <8>],
<6>: [<3>, <7>, <8>],
<7>: [<3>, <13>, <6>],
<12>: [<3>, <0>, <1>, <2>, <8>, <4>],
<4>: [<0>, <12>, <1>],
<2>: [<12>, <10>],
<8>: [<12>, <11>, <9>, <13>, <6>],
<9>: [<11>, <8>, <1>],
<13>: [<7>, <8>, <10>]}

>> graph_nl:

Node <5> is connected to nodes <3>, <1>, <10>, <0>.
Node <3> is connected to nodes <5>, <11>, <1>, <6>, <7>, <12>.
Node <1> is connected to nodes <5>, <3>, <0>, <12>, <9>, <4>.
Node <10> is connected to nodes <5>, <0>, <13>, <2>.
Node <0> is connected to nodes <5>, <12>, <4>, <10>, <1>.
Node <11> is connected to nodes <3>, <9>, <8>.
Node <6> is connected to nodes <3>, <7>, <8>.
Node <7> is connected to nodes <3>, <13>, <6>.
Node <12> is connected to nodes <3>, <0>, <1>, <2>, <8>, <4>.
Node <4> is connected to nodes <0>, <12>, <1>.
Node <2> is connected to nodes <12>, <10>.
Node <8> is connected to nodes <12>, <11>, <9>, <13>, <6>.
Node <9> is connected to nodes <11>, <8>, <1>.
Node <13> is connected to nodes <7>, <8>, <10>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>, <11>, <12>, <13>]

>> num_nodes:

14

>> num_edges:

28

>> directed:

False

>> question:

Is there an edge between node <4> and node <0>?

>> answer:

Yes

>> steps:

Let's do it step by step.
The neighbors of node <4> are: [<0>, <12>, <1>], which contains node <0>. So the answer is 

>> choices:

('[Yes, No]',)

>> label:

0

####### sample 10 #######

>> task:

edge

>> graph:

[(<0>, <6>), (<0>, <5>), (<6>, <2>), (<6>, <3>), (<6>, <5>), (<5>, <4>), (<5>, <7>), (<5>, <1>), (<2>, <7>), (<2>, <3>), (<7>, <3>), (<3>, <4>), (<3>, <1>)]

>> graph_adj:

{<0>: [<6>, <5>],
<6>: [<0>, <2>, <3>, <5>],
<5>: [<0>, <4>, <7>, <6>, <1>],
<2>: [<7>, <6>, <3>],
<7>: [<2>, <3>, <5>],
<3>: [<2>, <4>, <7>, <6>, <1>],
<4>: [<3>, <5>],
<1>: [<3>, <5>]}

>> graph_nl:

Node <0> is connected to nodes <6>, <5>.
Node <6> is connected to nodes <0>, <2>, <3>, <5>.
Node <5> is connected to nodes <0>, <4>, <7>, <6>, <1>.
Node <2> is connected to nodes <7>, <6>, <3>.
Node <7> is connected to nodes <2>, <3>, <5>.
Node <3> is connected to nodes <2>, <4>, <7>, <6>, <1>.
Node <4> is connected to nodes <3>, <5>.
Node <1> is connected to nodes <3>, <5>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>, <6>, <7>]

>> num_nodes:

8

>> num_edges:

13

>> directed:

False

>> question:

Is there an edge between node <3> and node <1>?

>> answer:

Yes

>> steps:

Let's do it step by step.
The neighbors of node <3> are: [<2>, <4>, <7>, <6>, <1>], which contains node <1>. So the answer is 

>> choices:

('[Yes, No]',)

>> label:

0

