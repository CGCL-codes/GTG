####### sample 1 #######

>> task:

BFS

>> graph:

[(<6>, <1>), (<1>, <6>), (<1>, <4>), (<1>, <5>), (<1>, <0>), (<3>, <1>), (<4>, <0>), (<4>, <3>), (<0>, <1>), (<0>, <4>), (<0>, <2>), (<5>, <3>)]

>> graph_adj:

{<6>: [<1>],
<1>: [<6>, <4>, <5>, <0>],
<3>: [<1>],
<4>: [<0>, <3>],
<0>: [<1>, <4>, <2>],
<5>: [<3>],
<2>: []}

>> graph_nl:

Node <6> is connected to node <1>.
Node <1> is connected to nodes <6>, <4>, <5>, <0>.
Node <3> is connected to node <1>.
Node <4> is connected to nodes <0>, <3>.
Node <0> is connected to nodes <1>, <4>, <2>.
Node <5> is connected to node <3>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>, <6>]

>> num_nodes:

7

>> num_edges:

12

>> directed:

True

>> question:

Start from node <1>, output a sequence of traversal in breadth-first search (BFS) order.

>> answer:

[<1>, <6>, <4>, <5>, <0>, <3>, <2>]

>> steps:

Let's run breadth-first search (BFS) step by step.
Visit node <1>. Unvisited neighbors of node <1> are [<6>, <4>, <5>, <0>].
Visit node <6>. 
Visit node <4>. Unvisited neighbors of node <4> are [<3>].
Visit node <5>. 
Visit node <0>. Unvisited neighbors of node <0> are [<2>].
Visit node <3>. 
Visit node <2>. 
So the BFS traversal is 

>> choices:

('[[<1>, <6>, <4>, <5>, <0>, <3>, <2>], [<1>, <6>, <4>, <0>, <3>, <2>, <5>], [<1>, <6>, <3>, <2>, <4>, <5>, <0>], [<1>, <4>, <3>, <0>, <2>, <6>, <5>]]',)

>> label:

0

####### sample 2 #######

>> task:

BFS

>> graph:

[(<2>, <0>), (<2>, <5>), (<2>, <3>), (<2>, <6>), (<2>, <1>), (<5>, <4>)]

>> graph_adj:

{<2>: [<0>, <5>, <3>, <6>, <1>],
<0>: [<2>],
<5>: [<2>, <4>],
<3>: [<2>],
<6>: [<2>],
<1>: [<2>],
<4>: [<5>]}

>> graph_nl:

Node <2> is connected to nodes <0>, <5>, <3>, <6>, <1>.
Node <0> is connected to node <2>.
Node <5> is connected to nodes <2>, <4>.
Node <3> is connected to node <2>.
Node <6> is connected to node <2>.
Node <1> is connected to node <2>.
Node <4> is connected to node <5>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>, <6>]

>> num_nodes:

7

>> num_edges:

6

>> directed:

False

>> question:

Start from node <6>, output a sequence of traversal in breadth-first search (BFS) order.

>> answer:

[<6>, <2>, <0>, <5>, <3>, <1>, <4>]

>> steps:

Let's run breadth-first search (BFS) step by step.
Visit node <6>. Unvisited neighbors of node <6> are [<2>].
Visit node <2>. Unvisited neighbors of node <2> are [<0>, <5>, <3>, <1>].
Visit node <0>. 
Visit node <5>. Unvisited neighbors of node <5> are [<4>].
Visit node <3>. 
Visit node <1>. 
Visit node <4>. 
So the BFS traversal is 

>> choices:

('[[<6>, <2>, <0>, <5>, <3>, <1>, <4>], [<6>, <2>, <0>, <1>, <5>, <3>, <4>], [<6>, <3>, <2>, <4>, <5>, <0>, <1>], [<6>, <2>, <1>, <4>, <0>, <5>, <3>]]',)

>> label:

0

####### sample 3 #######

>> task:

BFS

>> graph:

[(<0>, <4>), (<0>, <3>), (<0>, <2>), (<3>, <1>)]

>> graph_adj:

{<0>: [<4>, <3>, <2>],
<4>: [<0>],
<3>: [<0>, <1>],
<2>: [<0>],
<1>: [<3>]}

>> graph_nl:

Node <0> is connected to nodes <4>, <3>, <2>.
Node <4> is connected to node <0>.
Node <3> is connected to nodes <0>, <1>.
Node <2> is connected to node <0>.
Node <1> is connected to node <3>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>]

>> num_nodes:

5

>> num_edges:

4

>> directed:

False

>> question:

Start from node <2>, output a sequence of traversal in breadth-first search (BFS) order.

>> answer:

[<2>, <0>, <4>, <3>, <1>]

>> steps:

Let's run breadth-first search (BFS) step by step.
Visit node <2>. Unvisited neighbors of node <2> are [<0>].
Visit node <0>. Unvisited neighbors of node <0> are [<4>, <3>].
Visit node <4>. 
Visit node <3>. Unvisited neighbors of node <3> are [<1>].
Visit node <1>. 
So the BFS traversal is 

>> choices:

('[[<2>, <0>, <4>, <3>, <1>], [<2>, <4>, <3>, <0>, <1>], [<2>, <1>, <0>, <4>, <3>], [<2>, <0>, <1>, <4>, <3>]]',)

>> label:

0

####### sample 4 #######

>> task:

BFS

>> graph:

[(<1>, <4>), (<1>, <0>), (<1>, <5>), (<1>, <3>), (<4>, <2>), (<4>, <0>), (<4>, <5>), (<4>, <3>), (<0>, <2>), (<0>, <3>), (<5>, <2>), (<5>, <3>)]

>> graph_adj:

{<1>: [<4>, <0>, <5>, <3>],
<4>: [<1>, <2>, <0>, <5>, <3>],
<0>: [<1>, <2>, <4>, <3>],
<5>: [<1>, <2>, <4>, <3>],
<3>: [<1>, <4>, <0>, <5>],
<2>: [<4>, <0>, <5>]}

>> graph_nl:

Node <1> is connected to nodes <4>, <0>, <5>, <3>.
Node <4> is connected to nodes <1>, <2>, <0>, <5>, <3>.
Node <0> is connected to nodes <1>, <2>, <4>, <3>.
Node <5> is connected to nodes <1>, <2>, <4>, <3>.
Node <3> is connected to nodes <1>, <4>, <0>, <5>.
Node <2> is connected to nodes <4>, <0>, <5>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>]

>> num_nodes:

6

>> num_edges:

12

>> directed:

False

>> question:

Start from node <4>, output a sequence of traversal in breadth-first search (BFS) order.

>> answer:

[<4>, <1>, <2>, <0>, <5>, <3>]

>> steps:

Let's run breadth-first search (BFS) step by step.
Visit node <4>. Unvisited neighbors of node <4> are [<1>, <2>, <0>, <5>, <3>].
Visit node <1>. 
Visit node <2>. 
Visit node <0>. 
Visit node <5>. 
Visit node <3>. 
So the BFS traversal is 

>> choices:

('[[<4>, <0>, <2>, <1>, <5>, <3>], [<4>, <1>, <5>, <3>, <2>, <0>], [<4>, <1>, <2>, <3>, <0>, <5>], [<4>, <1>, <2>, <0>, <5>, <3>]]',)

>> label:

3

####### sample 5 #######

>> task:

BFS

>> graph:

[(<4>, <0>), (<4>, <1>), (<4>, <2>), (<0>, <1>), (<0>, <2>), (<0>, <3>), (<0>, <4>), (<1>, <3>), (<2>, <4>), (<2>, <0>), (<3>, <4>), (<3>, <1>), (<3>, <2>)]

>> graph_adj:

{<4>: [<0>, <1>, <2>],
<0>: [<1>, <2>, <3>, <4>],
<1>: [<3>],
<2>: [<4>, <0>],
<3>: [<4>, <1>, <2>]}

>> graph_nl:

Node <4> is connected to nodes <0>, <1>, <2>.
Node <0> is connected to nodes <1>, <2>, <3>, <4>.
Node <1> is connected to node <3>.
Node <2> is connected to nodes <4>, <0>.
Node <3> is connected to nodes <4>, <1>, <2>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>]

>> num_nodes:

5

>> num_edges:

13

>> directed:

True

>> question:

Start from node <2>, output a sequence of traversal in breadth-first search (BFS) order.

>> answer:

[<2>, <4>, <0>, <1>, <3>]

>> steps:

Let's run breadth-first search (BFS) step by step.
Visit node <2>. Unvisited neighbors of node <2> are [<4>, <0>].
Visit node <4>. Unvisited neighbors of node <4> are [<1>].
Visit node <0>. Unvisited neighbors of node <0> are [<3>].
Visit node <1>. 
Visit node <3>. 
So the BFS traversal is 

>> choices:

('[[<2>, <3>, <4>, <0>, <1>], [<2>, <1>, <0>, <3>, <4>], [<2>, <4>, <0>, <1>, <3>], [<2>, <4>, <0>, <3>, <1>]]',)

>> label:

2

####### sample 6 #######

>> task:

BFS

>> graph:

[(<1>, <3>), (<1>, <5>), (<1>, <4>), (<3>, <2>), (<5>, <4>), (<2>, <0>)]

>> graph_adj:

{<1>: [<3>, <5>, <4>],
<3>: [<1>, <2>],
<5>: [<1>, <4>],
<4>: [<1>, <5>],
<2>: [<3>, <0>],
<0>: [<2>]}

>> graph_nl:

Node <1> is connected to nodes <3>, <5>, <4>.
Node <3> is connected to nodes <1>, <2>.
Node <5> is connected to nodes <1>, <4>.
Node <4> is connected to nodes <1>, <5>.
Node <2> is connected to nodes <3>, <0>.
Node <0> is connected to node <2>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>]

>> num_nodes:

6

>> num_edges:

6

>> directed:

False

>> question:

Start from node <5>, output a sequence of traversal in breadth-first search (BFS) order.

>> answer:

[<5>, <1>, <4>, <3>, <2>, <0>]

>> steps:

Let's run breadth-first search (BFS) step by step.
Visit node <5>. Unvisited neighbors of node <5> are [<1>, <4>].
Visit node <1>. Unvisited neighbors of node <1> are [<3>].
Visit node <4>. 
Visit node <3>. Unvisited neighbors of node <3> are [<2>].
Visit node <2>. Unvisited neighbors of node <2> are [<0>].
Visit node <0>. 
So the BFS traversal is 

>> choices:

('[[<5>, <1>, <4>, <3>, <2>, <0>], [<5>, <1>, <2>, <0>, <4>, <3>], [<5>, <1>, <4>, <2>, <3>, <0>], [<5>, <4>, <1>, <3>, <2>, <0>]]',)

>> label:

0

####### sample 7 #######

>> task:

BFS

>> graph:

[(<2>, <5>), (<2>, <3>), (<2>, <0>), (<5>, <3>), (<3>, <1>), (<3>, <4>), (<3>, <0>), (<0>, <6>), (<1>, <4>), (<4>, <6>)]

>> graph_adj:

{<2>: [<5>, <3>, <0>],
<5>: [<2>, <3>],
<3>: [<2>, <5>, <1>, <4>, <0>],
<0>: [<2>, <3>, <6>],
<1>: [<3>, <4>],
<4>: [<3>, <1>, <6>],
<6>: [<4>, <0>]}

>> graph_nl:

Node <2> is connected to nodes <5>, <3>, <0>.
Node <5> is connected to nodes <2>, <3>.
Node <3> is connected to nodes <2>, <5>, <1>, <4>, <0>.
Node <0> is connected to nodes <2>, <3>, <6>.
Node <1> is connected to nodes <3>, <4>.
Node <4> is connected to nodes <3>, <1>, <6>.
Node <6> is connected to nodes <4>, <0>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>, <6>]

>> num_nodes:

7

>> num_edges:

10

>> directed:

False

>> question:

Start from node <5>, output a sequence of traversal in breadth-first search (BFS) order.

>> answer:

[<5>, <2>, <3>, <0>, <1>, <4>, <6>]

>> steps:

Let's run breadth-first search (BFS) step by step.
Visit node <5>. Unvisited neighbors of node <5> are [<2>, <3>].
Visit node <2>. Unvisited neighbors of node <2> are [<0>].
Visit node <3>. Unvisited neighbors of node <3> are [<1>, <4>].
Visit node <0>. Unvisited neighbors of node <0> are [<6>].
Visit node <1>. 
Visit node <4>. 
Visit node <6>. 
So the BFS traversal is 

>> choices:

('[[<5>, <2>, <3>, <6>, <0>, <1>, <4>], [<5>, <2>, <4>, <6>, <3>, <0>, <1>], [<5>, <2>, <3>, <0>, <1>, <4>, <6>], [<5>, <0>, <3>, <2>, <4>, <1>, <6>]]',)

>> label:

2

####### sample 8 #######

>> task:

BFS

>> graph:

[(<1>, <0>), (<1>, <4>), (<0>, <6>), (<0>, <2>), (<4>, <6>), (<2>, <3>), (<5>, <3>)]

>> graph_adj:

{<1>: [<0>, <4>],
<0>: [<1>, <6>, <2>],
<4>: [<1>, <6>],
<6>: [<0>, <4>],
<2>: [<0>, <3>],
<5>: [<3>],
<3>: [<5>, <2>]}

>> graph_nl:

Node <1> is connected to nodes <0>, <4>.
Node <0> is connected to nodes <1>, <6>, <2>.
Node <4> is connected to nodes <1>, <6>.
Node <6> is connected to nodes <0>, <4>.
Node <2> is connected to nodes <0>, <3>.
Node <5> is connected to node <3>.
Node <3> is connected to nodes <5>, <2>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>, <6>]

>> num_nodes:

7

>> num_edges:

7

>> directed:

False

>> question:

Start from node <3>, output a sequence of traversal in breadth-first search (BFS) order.

>> answer:

[<3>, <5>, <2>, <0>, <1>, <6>, <4>]

>> steps:

Let's run breadth-first search (BFS) step by step.
Visit node <3>. Unvisited neighbors of node <3> are [<5>, <2>].
Visit node <5>. 
Visit node <2>. Unvisited neighbors of node <2> are [<0>].
Visit node <0>. Unvisited neighbors of node <0> are [<1>, <6>].
Visit node <1>. Unvisited neighbors of node <1> are [<4>].
Visit node <6>. 
Visit node <4>. 
So the BFS traversal is 

>> choices:

('[[<3>, <2>, <1>, <5>, <0>, <6>, <4>], [<3>, <5>, <2>, <0>, <1>, <6>, <4>], [<3>, <5>, <2>, <0>, <1>, <4>, <6>], [<3>, <5>, <6>, <4>, <2>, <0>, <1>]]',)

>> label:

1

####### sample 9 #######

>> task:

BFS

>> graph:

[(<3>, <4>), (<3>, <1>), (<3>, <5>), (<4>, <5>), (<4>, <2>), (<1>, <0>)]

>> graph_adj:

{<3>: [<4>, <1>, <5>],
<4>: [<3>, <5>, <2>],
<1>: [<3>, <0>],
<5>: [<3>, <4>],
<2>: [<4>],
<0>: [<1>]}

>> graph_nl:

Node <3> is connected to nodes <4>, <1>, <5>.
Node <4> is connected to nodes <3>, <5>, <2>.
Node <1> is connected to nodes <3>, <0>.
Node <5> is connected to nodes <3>, <4>.
Node <2> is connected to node <4>.
Node <0> is connected to node <1>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>]

>> num_nodes:

6

>> num_edges:

6

>> directed:

False

>> question:

Start from node <5>, output a sequence of traversal in breadth-first search (BFS) order.

>> answer:

[<5>, <3>, <4>, <1>, <2>, <0>]

>> steps:

Let's run breadth-first search (BFS) step by step.
Visit node <5>. Unvisited neighbors of node <5> are [<3>, <4>].
Visit node <3>. Unvisited neighbors of node <3> are [<1>].
Visit node <4>. Unvisited neighbors of node <4> are [<2>].
Visit node <1>. Unvisited neighbors of node <1> are [<0>].
Visit node <2>. 
Visit node <0>. 
So the BFS traversal is 

>> choices:

('[[<5>, <3>, <2>, <0>, <4>, <1>], [<5>, <3>, <4>, <2>, <1>, <0>], [<5>, <3>, <4>, <1>, <2>, <0>], [<5>, <4>, <0>, <3>, <1>, <2>]]',)

>> label:

2

####### sample 10 #######

>> task:

BFS

>> graph:

[(<3>, <0>), (<3>, <4>), (<0>, <4>), (<4>, <1>), (<1>, <5>), (<5>, <2>)]

>> graph_adj:

{<3>: [<0>, <4>],
<0>: [<3>, <4>],
<4>: [<3>, <0>, <1>],
<1>: [<5>, <4>],
<5>: [<1>, <2>],
<2>: [<5>]}

>> graph_nl:

Node <3> is connected to nodes <0>, <4>.
Node <0> is connected to nodes <3>, <4>.
Node <4> is connected to nodes <3>, <0>, <1>.
Node <1> is connected to nodes <5>, <4>.
Node <5> is connected to nodes <1>, <2>.
Node <2> is connected to node <5>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>]

>> num_nodes:

6

>> num_edges:

6

>> directed:

False

>> question:

Start from node <2>, output a sequence of traversal in breadth-first search (BFS) order.

>> answer:

[<2>, <5>, <1>, <4>, <3>, <0>]

>> steps:

Let's run breadth-first search (BFS) step by step.
Visit node <2>. Unvisited neighbors of node <2> are [<5>].
Visit node <5>. Unvisited neighbors of node <5> are [<1>].
Visit node <1>. Unvisited neighbors of node <1> are [<4>].
Visit node <4>. Unvisited neighbors of node <4> are [<3>, <0>].
Visit node <3>. 
Visit node <0>. 
So the BFS traversal is 

>> choices:

('[[<2>, <5>, <1>, <3>, <4>, <0>], [<2>, <5>, <3>, <0>, <1>, <4>], [<2>, <4>, <3>, <5>, <1>, <0>], [<2>, <5>, <1>, <4>, <3>, <0>]]',)

>> label:

3

