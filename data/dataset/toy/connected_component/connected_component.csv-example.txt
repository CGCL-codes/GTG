####### sample 1 #######

>> task:

connected_component

>> graph:

[(<6>, <1>), (<6>, <0>), (<6>, <5>), (<1>, <0>), (<1>, <3>), (<1>, <2>), (<1>, <5>), (<0>, <2>), (<0>, <6>), (<0>, <4>), (<5>, <6>), (<5>, <4>), (<5>, <1>), (<5>, <3>), (<5>, <2>), (<4>, <1>), (<4>, <3>), (<4>, <2>), (<4>, <5>), (<2>, <4>), (<2>, <1>), (<2>, <3>)]

>> graph_adj:

{<6>: [<1>, <0>, <5>],
<1>: [<0>, <3>, <2>, <5>],
<0>: [<2>, <6>, <4>],
<5>: [<6>, <4>, <1>, <3>, <2>],
<4>: [<1>, <3>, <2>, <5>],
<3>: [],
<2>: [<4>, <1>, <3>]}

>> graph_nl:

Node <6> is connected to nodes <1>, <0>, <5>.
Node <1> is connected to nodes <0>, <3>, <2>, <5>.
Node <0> is connected to nodes <2>, <6>, <4>.
Node <5> is connected to nodes <6>, <4>, <1>, <3>, <2>.
Node <4> is connected to nodes <1>, <3>, <2>, <5>.
Node <2> is connected to nodes <4>, <1>, <3>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>, <6>]

>> num_nodes:

7

>> num_edges:

22

>> directed:

True

>> question:

Find the strongly connected component containing node <6>. 

>> answer:

[<4>, <5>, <1>, <2>, <0>, <6>]

>> steps:

Let's find the strongly connected component step by step, and we can use the Tarjan algorithm.
Search from node <6>.
Visit neighbor node <0>.
Search from node <0>.
Visit neighbor node <2>.
Search from node <2>.
Visit neighbor node <1>.
Search from node <1>.
Visit neighbor node <3>.
Search from node <3>.
Node <3> is a root node, find a new strongly connected component: [<3>].
Visit neighbor node <5>.
Search from node <5>.
Visit neighbor node <4>.
Search from node <4>.
Node <6> is a root node, find a new strongly connected component: [<4>, <5>, <1>, <2>, <0>, <6>].
So the strongly connected component containing node <6> is 

>> cc_node_ratio:

0.8571428571428571

####### sample 2 #######

>> task:

connected_component

>> graph:

[(<0>, <5>), (<0>, <2>), (<5>, <3>), (<2>, <3>), (<2>, <5>), (<2>, <4>), (<3>, <4>), (<3>, <2>), (<1>, <4>), (<1>, <3>), (<1>, <5>)]

>> graph_adj:

{<0>: [<5>, <2>],
<5>: [<3>],
<2>: [<3>, <5>, <4>],
<3>: [<4>, <2>],
<1>: [<4>, <3>, <5>],
<4>: []}

>> graph_nl:

Node <0> is connected to nodes <5>, <2>.
Node <5> is connected to node <3>.
Node <2> is connected to nodes <3>, <5>, <4>.
Node <3> is connected to nodes <4>, <2>.
Node <1> is connected to nodes <4>, <3>, <5>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>]

>> num_nodes:

6

>> num_edges:

11

>> directed:

True

>> question:

Find the strongly connected component containing node <5>. 

>> answer:

[<2>, <3>, <5>]

>> steps:

Let's find the strongly connected component step by step, and we can use the Tarjan algorithm.
Search from node <5>.
Visit neighbor node <3>.
Search from node <3>.
Visit neighbor node <2>.
Search from node <2>.
Visit neighbor node <4>.
Search from node <4>.
Node <4> is a root node, find a new strongly connected component: [<4>].
Node <5> is a root node, find a new strongly connected component: [<2>, <3>, <5>].
So the strongly connected component containing node <5> is 

>> cc_node_ratio:

0.5

####### sample 3 #######

>> task:

connected_component

>> graph:

[(<0>, <3>), (<0>, <4>), (<0>, <2>), (<0>, <1>), (<3>, <2>), (<4>, <5>), (<2>, <0>), (<2>, <5>), (<2>, <3>), (<2>, <4>)]

>> graph_adj:

{<0>: [<3>, <4>, <2>, <1>],
<3>: [<2>],
<4>: [<5>],
<2>: [<0>, <5>, <3>, <4>],
<1>: [],
<5>: []}

>> graph_nl:

Node <0> is connected to nodes <3>, <4>, <2>, <1>.
Node <3> is connected to node <2>.
Node <4> is connected to node <5>.
Node <2> is connected to nodes <0>, <5>, <3>, <4>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>]

>> num_nodes:

6

>> num_edges:

10

>> directed:

True

>> question:

Find the strongly connected component containing node <4>. 

>> answer:

[<4>]

>> steps:

Let's find the strongly connected component step by step, and we can use the Tarjan algorithm.
Search from node <4>.
Visit neighbor node <5>.
Search from node <5>.
Node <5> is a root node, find a new strongly connected component: [<5>].
Node <4> is a root node, find a new strongly connected component: [<4>].
So the strongly connected component containing node <4> is 

>> cc_node_ratio:

0.16666666666666666

####### sample 4 #######

>> task:

connected_component

>> graph:

[(<5>, <2>), (<5>, <4>), (<2>, <4>), (<4>, <0>), (<4>, <5>), (<4>, <2>), (<0>, <4>), (<3>, <1>), (<3>, <2>), (<3>, <0>)]

>> graph_adj:

{<5>: [<2>, <4>],
<2>: [<4>],
<4>: [<0>, <5>, <2>],
<0>: [<4>],
<3>: [<1>, <2>, <0>],
<1>: []}

>> graph_nl:

Node <5> is connected to nodes <2>, <4>.
Node <2> is connected to node <4>.
Node <4> is connected to nodes <0>, <5>, <2>.
Node <0> is connected to node <4>.
Node <3> is connected to nodes <1>, <2>, <0>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>]

>> num_nodes:

6

>> num_edges:

10

>> directed:

True

>> question:

Find the strongly connected component containing node <5>. 

>> answer:

[<0>, <4>, <2>, <5>]

>> steps:

Let's find the strongly connected component step by step, and we can use the Tarjan algorithm.
Search from node <5>.
Visit neighbor node <2>.
Search from node <2>.
Visit neighbor node <4>.
Search from node <4>.
Visit neighbor node <0>.
Search from node <0>.
Node <5> is a root node, find a new strongly connected component: [<0>, <4>, <2>, <5>].
So the strongly connected component containing node <5> is 

>> cc_node_ratio:

0.6666666666666666

####### sample 5 #######

>> task:

connected_component

>> graph:

[(<4>, <3>), (<4>, <2>), (<3>, <2>), (<2>, <4>), (<2>, <3>), (<5>, <0>), (<5>, <2>), (<1>, <3>), (<1>, <2>)]

>> graph_adj:

{<4>: [<3>, <2>],
<3>: [<2>],
<2>: [<4>, <3>],
<5>: [<0>, <2>],
<0>: [],
<1>: [<3>, <2>]}

>> graph_nl:

Node <4> is connected to nodes <3>, <2>.
Node <3> is connected to node <2>.
Node <2> is connected to nodes <4>, <3>.
Node <5> is connected to nodes <0>, <2>.
Node <1> is connected to nodes <3>, <2>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>]

>> num_nodes:

6

>> num_edges:

9

>> directed:

True

>> question:

Find the strongly connected component containing node <0>. 

>> answer:

[<0>]

>> steps:

Let's find the strongly connected component step by step, and we can use the Tarjan algorithm.
Search from node <0>.
Node <0> is a root node, find a new strongly connected component: [<0>].
So the strongly connected component containing node <0> is 

>> cc_node_ratio:

0.16666666666666666

####### sample 6 #######

>> task:

connected_component

>> graph:

[(<0>, <4>), (<4>, <3>), (<4>, <2>), (<4>, <1>), (<3>, <1>), (<3>, <0>), (<2>, <0>), (<2>, <4>), (<1>, <3>), (<1>, <2>), (<5>, <1>), (<5>, <0>), (<5>, <4>)]

>> graph_adj:

{<0>: [<4>],
<4>: [<3>, <2>, <1>],
<3>: [<1>, <0>],
<2>: [<0>, <4>],
<1>: [<3>, <2>],
<5>: [<1>, <0>, <4>]}

>> graph_nl:

Node <0> is connected to node <4>.
Node <4> is connected to nodes <3>, <2>, <1>.
Node <3> is connected to nodes <1>, <0>.
Node <2> is connected to nodes <0>, <4>.
Node <1> is connected to nodes <3>, <2>.
Node <5> is connected to nodes <1>, <0>, <4>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>]

>> num_nodes:

6

>> num_edges:

13

>> directed:

True

>> question:

Find the strongly connected component containing node <3>. 

>> answer:

[<2>, <1>, <4>, <0>, <3>]

>> steps:

Let's find the strongly connected component step by step, and we can use the Tarjan algorithm.
Search from node <3>.
Visit neighbor node <0>.
Search from node <0>.
Visit neighbor node <4>.
Search from node <4>.
Visit neighbor node <1>.
Search from node <1>.
Visit neighbor node <2>.
Search from node <2>.
Node <3> is a root node, find a new strongly connected component: [<2>, <1>, <4>, <0>, <3>].
So the strongly connected component containing node <3> is 

>> cc_node_ratio:

0.8333333333333334

####### sample 7 #######

>> task:

connected_component

>> graph:

[(<4>, <3>), (<4>, <0>), (<0>, <1>), (<0>, <2>)]

>> graph_adj:

{<4>: [<3>, <0>],
<3>: [<4>],
<0>: [<4>, <1>, <2>],
<1>: [<0>],
<2>: [<0>]}

>> graph_nl:

Node <4> is connected to nodes <3>, <0>.
Node <3> is connected to node <4>.
Node <0> is connected to nodes <4>, <1>, <2>.
Node <1> is connected to node <0>.
Node <2> is connected to node <0>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>]

>> num_nodes:

5

>> num_edges:

4

>> directed:

False

>> question:

Find the connected component containing node <0>. 

>> answer:

[<0>, <4>, <3>, <2>, <1>]

>> steps:

Let's find the connected component step by step, and we can use Depth-First Search.
Visit node <0>, add it to the connected component. The current connected component is [<0>].
Visit node <4>, add it to the connected component. The current connected component is [<0>, <4>].
Visit node <3>, add it to the connected component. The current connected component is [<0>, <4>, <3>].
Visit node <2>, add it to the connected component. The current connected component is [<0>, <4>, <3>, <2>].
Visit node <1>, add it to the connected component. The current connected component is [<0>, <4>, <3>, <2>, <1>].
Thus, the connected component containing node <0> is 

>> cc_node_ratio:

1.0

####### sample 8 #######

>> task:

connected_component

>> graph:

[(<2>, <0>), (<0>, <2>), (<0>, <3>), (<0>, <4>), (<5>, <1>), (<1>, <3>), (<4>, <5>)]

>> graph_adj:

{<2>: [<0>],
<0>: [<2>, <3>, <4>],
<5>: [<1>],
<1>: [<3>],
<4>: [<5>],
<3>: []}

>> graph_nl:

Node <2> is connected to node <0>.
Node <0> is connected to nodes <2>, <3>, <4>.
Node <5> is connected to node <1>.
Node <1> is connected to node <3>.
Node <4> is connected to node <5>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>]

>> num_nodes:

6

>> num_edges:

7

>> directed:

True

>> question:

Find the strongly connected component containing node <4>. 

>> answer:

[<4>]

>> steps:

Let's find the strongly connected component step by step, and we can use the Tarjan algorithm.
Search from node <4>.
Visit neighbor node <5>.
Search from node <5>.
Visit neighbor node <1>.
Search from node <1>.
Visit neighbor node <3>.
Search from node <3>.
Node <3> is a root node, find a new strongly connected component: [<3>].
Node <1> is a root node, find a new strongly connected component: [<1>].
Node <5> is a root node, find a new strongly connected component: [<5>].
Node <4> is a root node, find a new strongly connected component: [<4>].
So the strongly connected component containing node <4> is 

>> cc_node_ratio:

0.16666666666666666

####### sample 9 #######

>> task:

connected_component

>> graph:

[(<2>, <4>), (<4>, <6>), (<4>, <1>), (<4>, <2>), (<4>, <3>), (<5>, <3>), (<5>, <0>), (<0>, <1>), (<6>, <1>), (<6>, <5>), (<6>, <3>), (<6>, <4>), (<1>, <3>)]

>> graph_adj:

{<2>: [<4>],
<4>: [<6>, <1>, <2>, <3>],
<5>: [<3>, <0>],
<3>: [],
<0>: [<1>],
<6>: [<1>, <5>, <3>, <4>],
<1>: [<3>]}

>> graph_nl:

Node <2> is connected to node <4>.
Node <4> is connected to nodes <6>, <1>, <2>, <3>.
Node <5> is connected to nodes <3>, <0>.
Node <0> is connected to node <1>.
Node <6> is connected to nodes <1>, <5>, <3>, <4>.
Node <1> is connected to node <3>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>, <6>]

>> num_nodes:

7

>> num_edges:

13

>> directed:

True

>> question:

Find the strongly connected component containing node <3>. 

>> answer:

[<3>]

>> steps:

Let's find the strongly connected component step by step, and we can use the Tarjan algorithm.
Search from node <3>.
Node <3> is a root node, find a new strongly connected component: [<3>].
So the strongly connected component containing node <3> is 

>> cc_node_ratio:

0.14285714285714285

####### sample 10 #######

>> task:

connected_component

>> graph:

[(<1>, <4>), (<1>, <0>), (<1>, <3>), (<0>, <3>), (<0>, <1>), (<0>, <2>), (<0>, <4>), (<3>, <4>), (<2>, <4>)]

>> graph_adj:

{<1>: [<4>, <0>, <3>],
<4>: [],
<0>: [<3>, <1>, <2>, <4>],
<3>: [<4>],
<2>: [<4>]}

>> graph_nl:

Node <1> is connected to nodes <4>, <0>, <3>.
Node <0> is connected to nodes <3>, <1>, <2>, <4>.
Node <3> is connected to node <4>.
Node <2> is connected to node <4>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>]

>> num_nodes:

5

>> num_edges:

9

>> directed:

True

>> question:

Find the strongly connected component containing node <2>. 

>> answer:

[<2>]

>> steps:

Let's find the strongly connected component step by step, and we can use the Tarjan algorithm.
Search from node <2>.
Visit neighbor node <4>.
Search from node <4>.
Node <4> is a root node, find a new strongly connected component: [<4>].
Node <2> is a root node, find a new strongly connected component: [<2>].
So the strongly connected component containing node <2> is 

>> cc_node_ratio:

0.2

