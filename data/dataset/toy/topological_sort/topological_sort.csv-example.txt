####### sample 1 #######

>> task:

topological_sort

>> graph:

[(<3>, <0>), (<0>, <1>), (<0>, <6>), (<6>, <1>), (<2>, <1>), (<2>, <5>), (<2>, <6>), (<5>, <3>), (<5>, <0>), (<5>, <6>), (<4>, <0>), (<4>, <2>)]

>> graph_adj:

{<3>: [<0>],
<0>: [<1>, <6>],
<1>: [],
<6>: [<1>],
<2>: [<1>, <5>, <6>],
<5>: [<3>, <0>, <6>],
<4>: [<0>, <2>]}

>> graph_nl:

Node <3> is connected to node <0>.
Node <0> is connected to nodes <1>, <6>.
Node <6> is connected to node <1>.
Node <2> is connected to nodes <1>, <5>, <6>.
Node <5> is connected to nodes <3>, <0>, <6>.
Node <4> is connected to nodes <0>, <2>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>, <6>]

>> num_nodes:

7

>> num_edges:

12

>> directed:

True

>> question:

Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.

>> answer:

[<4>, <2>, <5>, <3>, <0>, <6>, <1>]

>> steps:

Let's solve it step by step.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
So the result of topological sorting is 

>> choices:

('[[<4>, <2>, <6>, <1>, <5>, <3>, <0>], [<4>, <2>, <5>, <3>, <0>, <6>, <1>], [<4>, <2>, <5>, <1>, <6>, <0>, <3>], [<4>, <3>, <2>, <5>, <0>, <6>, <1>]]',)

>> label:

1

####### sample 2 #######

>> task:

topological_sort

>> graph:

[(<4>, <1>), (<4>, <2>), (<1>, <2>), (<3>, <4>), (<3>, <1>), (<0>, <4>), (<0>, <2>), (<0>, <3>)]

>> graph_adj:

{<4>: [<1>, <2>],
<1>: [<2>],
<2>: [],
<3>: [<4>, <1>],
<0>: [<4>, <2>, <3>]}

>> graph_nl:

Node <4> is connected to nodes <1>, <2>.
Node <1> is connected to node <2>.
Node <3> is connected to nodes <4>, <1>.
Node <0> is connected to nodes <4>, <2>, <3>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>]

>> num_nodes:

5

>> num_edges:

8

>> directed:

True

>> question:

Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.

>> answer:

[<0>, <3>, <4>, <1>, <2>]

>> steps:

Let's solve it step by step.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
So the result of topological sorting is 

>> choices:

('[[<0>, <3>, <4>, <1>, <2>], [<0>, <2>, <3>, <4>, <1>], [<0>, <3>, <4>, <1>, <2>], [<0>, <3>, <2>, <1>, <4>]]',)

>> label:

2

####### sample 3 #######

>> task:

topological_sort

>> graph:

[(<2>, <3>), (<2>, <4>), (<3>, <4>), (<1>, <3>), (<1>, <2>), (<1>, <4>), (<1>, <0>), (<0>, <4>), (<0>, <3>), (<5>, <0>), (<5>, <1>), (<5>, <2>)]

>> graph_adj:

{<2>: [<3>, <4>],
<3>: [<4>],
<4>: [],
<1>: [<3>, <2>, <4>, <0>],
<0>: [<4>, <3>],
<5>: [<0>, <1>, <2>]}

>> graph_nl:

Node <2> is connected to nodes <3>, <4>.
Node <3> is connected to node <4>.
Node <1> is connected to nodes <3>, <2>, <4>, <0>.
Node <0> is connected to nodes <4>, <3>.
Node <5> is connected to nodes <0>, <1>, <2>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>]

>> num_nodes:

6

>> num_edges:

12

>> directed:

True

>> question:

Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.

>> answer:

[<5>, <1>, <2>, <0>, <3>, <4>]

>> steps:

Let's solve it step by step.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <0>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
So the result of topological sorting is 

>> choices:

('[[<5>, <1>, <2>, <3>, <4>, <0>], [<5>, <3>, <1>, <2>, <0>, <4>], [<5>, <1>, <3>, <4>, <2>, <0>], [<5>, <1>, <2>, <0>, <3>, <4>]]',)

>> label:

3

####### sample 4 #######

>> task:

topological_sort

>> graph:

[(<4>, <1>), (<4>, <3>), (<1>, <0>), (<1>, <2>), (<3>, <0>), (<3>, <1>)]

>> graph_adj:

{<4>: [<1>, <3>],
<1>: [<0>, <2>],
<3>: [<0>, <1>],
<0>: [],
<2>: []}

>> graph_nl:

Node <4> is connected to nodes <1>, <3>.
Node <1> is connected to nodes <0>, <2>.
Node <3> is connected to nodes <0>, <1>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>]

>> num_nodes:

5

>> num_edges:

6

>> directed:

True

>> question:

Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.

>> answer:

[<4>, <3>, <1>, <0>, <2>]

>> steps:

Let's solve it step by step.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <2>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
So the result of topological sorting is 

>> choices:

('[[<4>, <3>, <1>, <2>, <0>], [<4>, <2>, <3>, <1>, <0>], [<4>, <1>, <0>, <3>, <2>], [<4>, <3>, <1>, <0>, <2>]]',)

>> label:

3

####### sample 5 #######

>> task:

topological_sort

>> graph:

[(<5>, <4>), (<5>, <3>), (<3>, <4>), (<2>, <1>), (<2>, <3>), (<1>, <5>), (<1>, <0>), (<0>, <4>), (<0>, <5>)]

>> graph_adj:

{<5>: [<4>, <3>],
<4>: [],
<3>: [<4>],
<2>: [<1>, <3>],
<1>: [<5>, <0>],
<0>: [<4>, <5>]}

>> graph_nl:

Node <5> is connected to nodes <4>, <3>.
Node <3> is connected to node <4>.
Node <2> is connected to nodes <1>, <3>.
Node <1> is connected to nodes <5>, <0>.
Node <0> is connected to nodes <4>, <5>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>]

>> num_nodes:

6

>> num_edges:

9

>> directed:

True

>> question:

Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.

>> answer:

[<2>, <1>, <0>, <5>, <3>, <4>]

>> steps:

Let's solve it step by step.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
So the result of topological sorting is 

>> choices:

('[[<2>, <1>, <0>, <4>, <3>, <5>], [<2>, <3>, <5>, <4>, <0>, <1>], [<2>, <1>, <0>, <5>, <3>, <4>], [<2>, <1>, <3>, <4>, <0>, <5>]]',)

>> label:

2

####### sample 6 #######

>> task:

topological_sort

>> graph:

[(<1>, <3>), (<1>, <0>), (<1>, <2>), (<3>, <2>), (<4>, <1>), (<4>, <3>), (<5>, <1>), (<5>, <4>)]

>> graph_adj:

{<1>: [<3>, <0>, <2>],
<3>: [<2>],
<0>: [],
<2>: [],
<4>: [<1>, <3>],
<5>: [<1>, <4>]}

>> graph_nl:

Node <1> is connected to nodes <3>, <0>, <2>.
Node <3> is connected to node <2>.
Node <4> is connected to nodes <1>, <3>.
Node <5> is connected to nodes <1>, <4>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>]

>> num_nodes:

6

>> num_edges:

8

>> directed:

True

>> question:

Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.

>> answer:

[<5>, <4>, <1>, <3>, <0>, <2>]

>> steps:

Let's solve it step by step.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <0>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <2>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
So the result of topological sorting is 

>> choices:

('[[<5>, <4>, <1>, <2>, <3>, <0>], [<5>, <4>, <1>, <3>, <2>, <0>], [<5>, <4>, <1>, <3>, <0>, <2>], [<5>, <4>, <0>, <2>, <1>, <3>]]',)

>> label:

2

####### sample 7 #######

>> task:

topological_sort

>> graph:

[(<0>, <4>), (<0>, <1>), (<0>, <3>), (<4>, <2>), (<1>, <4>), (<1>, <2>), (<3>, <4>), (<3>, <1>)]

>> graph_adj:

{<0>: [<4>, <1>, <3>],
<4>: [<2>],
<1>: [<4>, <2>],
<3>: [<4>, <1>],
<2>: []}

>> graph_nl:

Node <0> is connected to nodes <4>, <1>, <3>.
Node <4> is connected to node <2>.
Node <1> is connected to nodes <4>, <2>.
Node <3> is connected to nodes <4>, <1>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>]

>> num_nodes:

5

>> num_edges:

8

>> directed:

True

>> question:

Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.

>> answer:

[<0>, <3>, <1>, <4>, <2>]

>> steps:

Let's solve it step by step.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
So the result of topological sorting is 

>> choices:

('[[<0>, <3>, <1>, <4>, <2>], [<0>, <3>, <4>, <2>, <1>], [<0>, <3>, <1>, <4>, <2>], [<0>, <2>, <3>, <1>, <4>]]',)

>> label:

2

####### sample 8 #######

>> task:

topological_sort

>> graph:

[(<5>, <1>), (<5>, <0>), (<5>, <3>), (<5>, <4>), (<0>, <1>), (<3>, <0>), (<4>, <3>), (<2>, <0>)]

>> graph_adj:

{<5>: [<1>, <0>, <3>, <4>],
<1>: [],
<0>: [<1>],
<3>: [<0>],
<4>: [<3>],
<2>: [<0>]}

>> graph_nl:

Node <5> is connected to nodes <1>, <0>, <3>, <4>.
Node <0> is connected to node <1>.
Node <3> is connected to node <0>.
Node <4> is connected to node <3>.
Node <2> is connected to node <0>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>]

>> num_nodes:

6

>> num_edges:

8

>> directed:

True

>> question:

Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.

>> answer:

[<5>, <2>, <4>, <3>, <0>, <1>]

>> steps:

Let's solve it step by step.
Nodes with 0 in-degree: [<5>, <2>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <4>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
So the result of topological sorting is 

>> choices:

('[[<5>, <2>, <4>, <3>, <0>, <1>], [<5>, <2>, <4>, <1>, <0>, <3>], [<5>, <4>, <3>, <2>, <0>, <1>], [<5>, <2>, <0>, <1>, <4>, <3>]]',)

>> label:

0

####### sample 9 #######

>> task:

topological_sort

>> graph:

[(<0>, <6>), (<0>, <5>), (<0>, <1>), (<0>, <2>), (<6>, <2>), (<1>, <2>), (<4>, <5>), (<4>, <6>), (<4>, <1>), (<4>, <3>), (<3>, <6>), (<3>, <5>), (<3>, <2>)]

>> graph_adj:

{<0>: [<6>, <5>, <1>, <2>],
<6>: [<2>],
<5>: [],
<1>: [<2>],
<2>: [],
<4>: [<5>, <6>, <1>, <3>],
<3>: [<6>, <5>, <2>]}

>> graph_nl:

Node <0> is connected to nodes <6>, <5>, <1>, <2>.
Node <6> is connected to node <2>.
Node <1> is connected to node <2>.
Node <4> is connected to nodes <5>, <6>, <1>, <3>.
Node <3> is connected to nodes <6>, <5>, <2>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>, <6>]

>> num_nodes:

7

>> num_edges:

13

>> directed:

True

>> question:

Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.

>> answer:

[<0>, <4>, <1>, <3>, <6>, <5>, <2>]

>> steps:

Let's solve it step by step.
Nodes with 0 in-degree: [<0>, <4>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <3>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <5>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <2>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
So the result of topological sorting is 

>> choices:

('[[<0>, <1>, <6>, <4>, <2>, <3>, <5>], [<0>, <4>, <1>, <3>, <2>, <6>, <5>], [<0>, <4>, <5>, <2>, <1>, <3>, <6>], [<0>, <4>, <1>, <3>, <6>, <5>, <2>]]',)

>> label:

3

####### sample 10 #######

>> task:

topological_sort

>> graph:

[(<1>, <5>), (<1>, <3>), (<1>, <4>), (<3>, <5>), (<4>, <2>), (<0>, <4>), (<0>, <2>), (<2>, <3>)]

>> graph_adj:

{<1>: [<5>, <3>, <4>],
<5>: [],
<3>: [<5>],
<4>: [<2>],
<0>: [<4>, <2>],
<2>: [<3>]}

>> graph_nl:

Node <1> is connected to nodes <5>, <3>, <4>.
Node <3> is connected to node <5>.
Node <4> is connected to node <2>.
Node <0> is connected to nodes <4>, <2>.
Node <2> is connected to node <3>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>]

>> num_nodes:

6

>> num_edges:

8

>> directed:

True

>> question:

Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.

>> answer:

[<1>, <0>, <4>, <2>, <3>, <5>]

>> steps:

Let's solve it step by step.
Nodes with 0 in-degree: [<1>, <0>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
So the result of topological sorting is 

>> choices:

('[[<1>, <0>, <3>, <5>, <4>, <2>], [<1>, <0>, <4>, <2>, <3>, <5>], [<1>, <4>, <3>, <2>, <5>, <0>], [<1>, <0>, <4>, <2>, <5>, <3>]]',)

>> label:

1

