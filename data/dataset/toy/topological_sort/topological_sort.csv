task,graph,graph_adj,graph_nl,nodes,num_nodes,num_edges,directed,question,answer,steps,choices,label,id
topological_sort,"[(<4>, <5>), (<3>, <4>), (<3>, <2>), (<2>, <4>), (<2>, <0>), (<2>, <1>), (<1>, <0>), (<1>, <5>), (<1>, <4>), (<6>, <3>), (<6>, <2>), (<6>, <0>)]","{<4>: [<5>],
<5>: [],
<3>: [<4>, <2>],
<2>: [<4>, <0>, <1>],
<0>: [],
<1>: [<0>, <5>, <4>],
<6>: [<3>, <2>, <0>]}","Node <4> is connected to node <5>.
Node <3> is connected to nodes <4>, <2>.
Node <2> is connected to nodes <4>, <0>, <1>.
Node <1> is connected to nodes <0>, <5>, <4>.
Node <6> is connected to nodes <3>, <2>, <0>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,12,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<6>, <3>, <2>, <1>, <0>, <4>, <5>]","Let's solve it step by step.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <4>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
So the result of topological sorting is ","('[[<6>, <3>, <4>, <5>, <2>, <1>, <0>], [<6>, <3>, <2>, <0>, <1>, <4>, <5>], [<6>, <3>, <2>, <4>, <5>, <1>, <0>], [<6>, <3>, <2>, <1>, <0>, <4>, <5>]]',)",3,0
topological_sort,"[(<1>, <5>), (<1>, <4>), (<5>, <3>), (<5>, <2>), (<3>, <2>), (<3>, <0>), (<3>, <4>), (<0>, <2>)]","{<1>: [<5>, <4>],
<5>: [<3>, <2>],
<4>: [],
<3>: [<2>, <0>, <4>],
<2>: [],
<0>: [<2>]}","Node <1> is connected to nodes <5>, <4>.
Node <5> is connected to nodes <3>, <2>.
Node <3> is connected to nodes <2>, <0>, <4>.
Node <0> is connected to node <2>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,8,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<1>, <5>, <3>, <0>, <4>, <2>]","Let's solve it step by step.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <4>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <2>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
So the result of topological sorting is ","('[[<1>, <5>, <3>, <0>, <4>, <2>], [<1>, <2>, <0>, <5>, <4>, <3>], [<1>, <5>, <4>, <2>, <3>, <0>], [<1>, <5>, <3>, <0>, <4>, <2>]]',)",3,1
topological_sort,"[(<2>, <4>), (<2>, <0>), (<4>, <0>), (<0>, <3>), (<0>, <1>), (<1>, <3>)]","{<2>: [<4>, <0>],
<4>: [<0>],
<0>: [<3>, <1>],
<3>: [],
<1>: [<3>]}","Node <2> is connected to nodes <4>, <0>.
Node <4> is connected to node <0>.
Node <0> is connected to nodes <3>, <1>.
Node <1> is connected to node <3>.","[<0>, <1>, <2>, <3>, <4>]",5,6,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<2>, <4>, <0>, <1>, <3>]","Let's solve it step by step.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
So the result of topological sorting is ","('[[<2>, <3>, <4>, <1>, <0>], [<2>, <4>, <0>, <1>, <3>], [<2>, <4>, <0>, <1>, <3>], [<2>, <3>, <4>, <0>, <1>]]',)",1,2
topological_sort,"[(<3>, <1>), (<3>, <4>), (<0>, <4>), (<0>, <2>), (<0>, <1>), (<0>, <3>)]","{<3>: [<1>, <4>],
<1>: [],
<4>: [],
<0>: [<4>, <2>, <1>, <3>],
<2>: []}","Node <3> is connected to nodes <1>, <4>.
Node <0> is connected to nodes <4>, <2>, <1>, <3>.","[<0>, <1>, <2>, <3>, <4>]",5,6,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<0>, <2>, <3>, <1>, <4>]","Let's solve it step by step.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <3>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <4>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
So the result of topological sorting is ","('[[<0>, <2>, <3>, <1>, <4>], [<0>, <2>, <3>, <4>, <1>], [<0>, <4>, <2>, <3>, <1>], [<0>, <3>, <4>, <1>, <2>]]',)",0,3
topological_sort,"[(<4>, <1>), (<4>, <0>), (<4>, <6>), (<6>, <0>), (<6>, <2>), (<3>, <1>), (<3>, <5>), (<3>, <6>), (<3>, <4>), (<5>, <1>), (<5>, <6>), (<2>, <1>)]","{<4>: [<1>, <0>, <6>],
<1>: [],
<0>: [],
<6>: [<0>, <2>],
<3>: [<1>, <5>, <6>, <4>],
<5>: [<1>, <6>],
<2>: [<1>]}","Node <4> is connected to nodes <1>, <0>, <6>.
Node <6> is connected to nodes <0>, <2>.
Node <3> is connected to nodes <1>, <5>, <6>, <4>.
Node <5> is connected to nodes <1>, <6>.
Node <2> is connected to node <1>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,12,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<3>, <5>, <4>, <6>, <0>, <2>, <1>]","Let's solve it step by step.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <4>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <2>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
So the result of topological sorting is ","('[[<3>, <5>, <4>, <0>, <1>, <2>, <6>], [<3>, <1>, <5>, <2>, <4>, <6>, <0>], [<3>, <5>, <2>, <1>, <4>, <6>, <0>], [<3>, <5>, <4>, <6>, <0>, <2>, <1>]]',)",3,4
topological_sort,"[(<5>, <6>), (<5>, <2>), (<2>, <6>), (<3>, <2>), (<3>, <5>), (<4>, <6>), (<4>, <1>), (<4>, <2>), (<4>, <0>), (<1>, <3>), (<1>, <2>), (<1>, <5>), (<1>, <0>), (<0>, <5>), (<0>, <6>)]","{<5>: [<6>, <2>],
<6>: [],
<2>: [<6>],
<3>: [<2>, <5>],
<4>: [<6>, <1>, <2>, <0>],
<1>: [<3>, <2>, <5>, <0>],
<0>: [<5>, <6>]}","Node <5> is connected to nodes <6>, <2>.
Node <2> is connected to node <6>.
Node <3> is connected to nodes <2>, <5>.
Node <4> is connected to nodes <6>, <1>, <2>, <0>.
Node <1> is connected to nodes <3>, <2>, <5>, <0>.
Node <0> is connected to nodes <5>, <6>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,15,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<4>, <1>, <3>, <0>, <5>, <2>, <6>]","Let's solve it step by step.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <0>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
So the result of topological sorting is ","('[[<4>, <1>, <2>, <6>, <3>, <0>, <5>], [<4>, <1>, <3>, <0>, <5>, <2>, <6>], [<4>, <5>, <0>, <3>, <2>, <6>, <1>], [<4>, <1>, <3>, <5>, <0>, <6>, <2>]]',)",1,5
topological_sort,"[(<0>, <3>), (<0>, <5>), (<0>, <4>), (<3>, <5>), (<1>, <0>), (<1>, <4>), (<1>, <2>), (<2>, <5>), (<2>, <0>), (<2>, <4>)]","{<0>: [<3>, <5>, <4>],
<3>: [<5>],
<5>: [],
<4>: [],
<1>: [<0>, <4>, <2>],
<2>: [<5>, <0>, <4>]}","Node <0> is connected to nodes <3>, <5>, <4>.
Node <3> is connected to node <5>.
Node <1> is connected to nodes <0>, <4>, <2>.
Node <2> is connected to nodes <5>, <0>, <4>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,10,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<1>, <2>, <0>, <3>, <4>, <5>]","Let's solve it step by step.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <4>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <5>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
So the result of topological sorting is ","('[[<1>, <2>, <0>, <3>, <4>, <5>], [<1>, <2>, <0>, <4>, <5>, <3>], [<1>, <4>, <2>, <3>, <0>, <5>], [<1>, <2>, <4>, <5>, <0>, <3>]]',)",0,6
topological_sort,"[(<3>, <0>), (<3>, <4>), (<4>, <0>), (<2>, <1>), (<2>, <3>), (<2>, <5>), (<2>, <0>), (<1>, <0>), (<5>, <4>)]","{<3>: [<0>, <4>],
<0>: [],
<4>: [<0>],
<2>: [<1>, <3>, <5>, <0>],
<1>: [<0>],
<5>: [<4>]}","Node <3> is connected to nodes <0>, <4>.
Node <4> is connected to node <0>.
Node <2> is connected to nodes <1>, <3>, <5>, <0>.
Node <1> is connected to node <0>.
Node <5> is connected to node <4>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,9,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<2>, <1>, <3>, <5>, <4>, <0>]","Let's solve it step by step.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <3>, <5>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <5>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
So the result of topological sorting is ","('[[<2>, <5>, <0>, <3>, <1>, <4>], [<2>, <1>, <4>, <0>, <3>, <5>], [<2>, <1>, <3>, <4>, <0>, <5>], [<2>, <1>, <3>, <5>, <4>, <0>]]',)",3,7
topological_sort,"[(<5>, <6>), (<5>, <4>), (<5>, <3>), (<5>, <0>), (<6>, <3>), (<4>, <0>), (<4>, <6>), (<4>, <3>), (<0>, <6>), (<1>, <5>), (<1>, <6>), (<1>, <0>), (<2>, <4>), (<2>, <3>), (<2>, <1>), (<2>, <5>), (<2>, <6>)]","{<5>: [<6>, <4>, <3>, <0>],
<6>: [<3>],
<4>: [<0>, <6>, <3>],
<3>: [],
<0>: [<6>],
<1>: [<5>, <6>, <0>],
<2>: [<4>, <3>, <1>, <5>, <6>]}","Node <5> is connected to nodes <6>, <4>, <3>, <0>.
Node <6> is connected to node <3>.
Node <4> is connected to nodes <0>, <6>, <3>.
Node <0> is connected to node <6>.
Node <1> is connected to nodes <5>, <6>, <0>.
Node <2> is connected to nodes <4>, <3>, <1>, <5>, <6>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,17,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<2>, <1>, <5>, <4>, <0>, <6>, <3>]","Let's solve it step by step.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
So the result of topological sorting is ","('[[<2>, <1>, <6>, <3>, <5>, <4>, <0>], [<2>, <6>, <4>, <0>, <1>, <3>, <5>], [<2>, <1>, <5>, <3>, <0>, <4>, <6>], [<2>, <1>, <5>, <4>, <0>, <6>, <3>]]',)",3,8
topological_sort,"[(<5>, <4>), (<5>, <2>), (<5>, <1>), (<4>, <3>), (<4>, <1>), (<4>, <2>), (<1>, <2>), (<0>, <1>), (<0>, <3>)]","{<5>: [<4>, <2>, <1>],
<4>: [<3>, <1>, <2>],
<2>: [],
<1>: [<2>],
<3>: [],
<0>: [<1>, <3>]}","Node <5> is connected to nodes <4>, <2>, <1>.
Node <4> is connected to nodes <3>, <1>, <2>.
Node <1> is connected to node <2>.
Node <0> is connected to nodes <1>, <3>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,9,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<5>, <0>, <4>, <3>, <1>, <2>]","Let's solve it step by step.
Nodes with 0 in-degree: [<5>, <0>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <4>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <1>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
So the result of topological sorting is ","('[[<5>, <0>, <4>, <3>, <1>, <2>], [<5>, <0>, <1>, <2>, <3>, <4>], [<5>, <0>, <4>, <2>, <3>, <1>], [<5>, <0>, <1>, <2>, <4>, <3>]]',)",0,9
topological_sort,"[(<2>, <0>), (<2>, <1>), (<0>, <3>), (<1>, <5>), (<5>, <0>), (<4>, <2>), (<4>, <1>)]","{<2>: [<0>, <1>],
<0>: [<3>],
<1>: [<5>],
<3>: [],
<5>: [<0>],
<4>: [<2>, <1>]}","Node <2> is connected to nodes <0>, <1>.
Node <0> is connected to node <3>.
Node <1> is connected to node <5>.
Node <5> is connected to node <0>.
Node <4> is connected to nodes <2>, <1>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,7,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<4>, <2>, <1>, <5>, <0>, <3>]","Let's solve it step by step.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
So the result of topological sorting is ","('[[<4>, <2>, <0>, <3>, <1>, <5>], [<4>, <5>, <1>, <0>, <2>, <3>], [<4>, <2>, <1>, <5>, <3>, <0>], [<4>, <2>, <1>, <5>, <0>, <3>]]',)",3,10
topological_sort,"[(<3>, <4>), (<3>, <6>), (<3>, <2>), (<6>, <2>), (<0>, <3>), (<0>, <4>), (<0>, <5>), (<5>, <6>), (<5>, <2>), (<5>, <3>), (<1>, <2>), (<1>, <0>)]","{<3>: [<4>, <6>, <2>],
<4>: [],
<6>: [<2>],
<2>: [],
<0>: [<3>, <4>, <5>],
<5>: [<6>, <2>, <3>],
<1>: [<2>, <0>]}","Node <3> is connected to nodes <4>, <6>, <2>.
Node <6> is connected to node <2>.
Node <0> is connected to nodes <3>, <4>, <5>.
Node <5> is connected to nodes <6>, <2>, <3>.
Node <1> is connected to nodes <2>, <0>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,12,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<1>, <0>, <5>, <3>, <4>, <6>, <2>]","Let's solve it step by step.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <6>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
So the result of topological sorting is ","('[[<1>, <6>, <3>, <0>, <4>, <5>, <2>], [<1>, <0>, <5>, <6>, <3>, <4>, <2>], [<1>, <0>, <5>, <3>, <4>, <6>, <2>], [<1>, <0>, <6>, <2>, <5>, <3>, <4>]]',)",2,11
topological_sort,"[(<1>, <4>), (<1>, <3>), (<4>, <3>), (<5>, <4>), (<5>, <1>), (<5>, <0>), (<0>, <3>), (<2>, <3>), (<2>, <5>), (<2>, <0>), (<6>, <3>), (<6>, <2>), (<6>, <5>)]","{<1>: [<4>, <3>],
<4>: [<3>],
<3>: [],
<5>: [<4>, <1>, <0>],
<0>: [<3>],
<2>: [<3>, <5>, <0>],
<6>: [<3>, <2>, <5>]}","Node <1> is connected to nodes <4>, <3>.
Node <4> is connected to node <3>.
Node <5> is connected to nodes <4>, <1>, <0>.
Node <0> is connected to node <3>.
Node <2> is connected to nodes <3>, <5>, <0>.
Node <6> is connected to nodes <3>, <2>, <5>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,13,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<6>, <2>, <5>, <1>, <0>, <4>, <3>]","Let's solve it step by step.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <0>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <4>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
So the result of topological sorting is ","('[[<6>, <2>, <5>, <1>, <0>, <4>, <3>], [<6>, <4>, <2>, <0>, <5>, <3>, <1>], [<6>, <2>, <5>, <3>, <1>, <4>, <0>], [<6>, <2>, <4>, <3>, <5>, <1>, <0>]]',)",0,12
topological_sort,"[(<3>, <1>), (<1>, <4>), (<0>, <2>), (<0>, <1>), (<0>, <3>), (<2>, <1>), (<2>, <3>), (<2>, <5>), (<5>, <1>)]","{<3>: [<1>],
<1>: [<4>],
<4>: [],
<0>: [<2>, <1>, <3>],
<2>: [<1>, <3>, <5>],
<5>: [<1>]}","Node <3> is connected to node <1>.
Node <1> is connected to node <4>.
Node <0> is connected to nodes <2>, <1>, <3>.
Node <2> is connected to nodes <1>, <3>, <5>.
Node <5> is connected to node <1>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,9,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<0>, <2>, <3>, <5>, <1>, <4>]","Let's solve it step by step.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <5>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
So the result of topological sorting is ","('[[<0>, <2>, <3>, <5>, <1>, <4>], [<0>, <2>, <3>, <4>, <1>, <5>], [<0>, <2>, <5>, <1>, <3>, <4>], [<0>, <2>, <1>, <4>, <3>, <5>]]',)",0,13
topological_sort,"[(<0>, <5>), (<0>, <3>), (<4>, <5>), (<4>, <0>), (<4>, <3>), (<1>, <4>), (<1>, <2>), (<2>, <0>)]","{<0>: [<5>, <3>],
<5>: [],
<3>: [],
<4>: [<5>, <0>, <3>],
<1>: [<4>, <2>],
<2>: [<0>]}","Node <0> is connected to nodes <5>, <3>.
Node <4> is connected to nodes <5>, <0>, <3>.
Node <1> is connected to nodes <4>, <2>.
Node <2> is connected to node <0>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,8,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<1>, <4>, <2>, <0>, <5>, <3>]","Let's solve it step by step.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <2>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <3>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
So the result of topological sorting is ","('[[<1>, <4>, <5>, <3>, <2>, <0>], [<1>, <4>, <2>, <5>, <0>, <3>], [<1>, <4>, <3>, <2>, <5>, <0>], [<1>, <4>, <2>, <0>, <5>, <3>]]',)",3,14
topological_sort,"[(<2>, <1>), (<2>, <0>), (<2>, <4>), (<1>, <0>), (<4>, <0>), (<4>, <1>), (<3>, <4>), (<3>, <1>), (<3>, <2>)]","{<2>: [<1>, <0>, <4>],
<1>: [<0>],
<0>: [],
<4>: [<0>, <1>],
<3>: [<4>, <1>, <2>]}","Node <2> is connected to nodes <1>, <0>, <4>.
Node <1> is connected to node <0>.
Node <4> is connected to nodes <0>, <1>.
Node <3> is connected to nodes <4>, <1>, <2>.","[<0>, <1>, <2>, <3>, <4>]",5,9,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<3>, <2>, <4>, <1>, <0>]","Let's solve it step by step.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
So the result of topological sorting is ","('[[<3>, <0>, <2>, <4>, <1>], [<3>, <2>, <1>, <0>, <4>], [<3>, <2>, <4>, <1>, <0>], [<3>, <2>, <1>, <0>, <4>]]',)",2,15
topological_sort,"[(<4>, <5>), (<4>, <1>), (<4>, <0>), (<0>, <5>), (<2>, <1>), (<2>, <5>), (<3>, <5>), (<3>, <4>)]","{<4>: [<5>, <1>, <0>],
<5>: [],
<1>: [],
<0>: [<5>],
<2>: [<1>, <5>],
<3>: [<5>, <4>]}","Node <4> is connected to nodes <5>, <1>, <0>.
Node <0> is connected to node <5>.
Node <2> is connected to nodes <1>, <5>.
Node <3> is connected to nodes <5>, <4>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,8,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<2>, <3>, <4>, <1>, <0>, <5>]","Let's solve it step by step.
Nodes with 0 in-degree: [<2>, <3>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <0>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
So the result of topological sorting is ","('[[<2>, <3>, <4>, <5>, <0>, <1>], [<2>, <3>, <4>, <1>, <5>, <0>], [<2>, <3>, <4>, <1>, <0>, <5>], [<2>, <3>, <0>, <5>, <4>, <1>]]',)",2,16
topological_sort,"[(<2>, <3>), (<3>, <1>), (<3>, <5>), (<1>, <5>), (<4>, <0>), (<4>, <3>), (<0>, <5>), (<0>, <2>), (<0>, <1>), (<6>, <2>), (<6>, <4>)]","{<2>: [<3>],
<3>: [<1>, <5>],
<1>: [<5>],
<5>: [],
<4>: [<0>, <3>],
<0>: [<5>, <2>, <1>],
<6>: [<2>, <4>]}","Node <2> is connected to node <3>.
Node <3> is connected to nodes <1>, <5>.
Node <1> is connected to node <5>.
Node <4> is connected to nodes <0>, <3>.
Node <0> is connected to nodes <5>, <2>, <1>.
Node <6> is connected to nodes <2>, <4>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,11,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<6>, <4>, <0>, <2>, <3>, <1>, <5>]","Let's solve it step by step.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
So the result of topological sorting is ","('[[<6>, <4>, <0>, <2>, <1>, <3>, <5>], [<6>, <3>, <2>, <1>, <0>, <5>, <4>], [<6>, <4>, <0>, <2>, <3>, <1>, <5>], [<6>, <4>, <1>, <5>, <0>, <2>, <3>]]',)",2,17
topological_sort,"[(<0>, <2>), (<0>, <4>), (<2>, <5>), (<5>, <4>), (<3>, <1>), (<1>, <0>), (<1>, <2>)]","{<0>: [<2>, <4>],
<2>: [<5>],
<4>: [],
<5>: [<4>],
<3>: [<1>],
<1>: [<0>, <2>]}","Node <0> is connected to nodes <2>, <4>.
Node <2> is connected to node <5>.
Node <5> is connected to node <4>.
Node <3> is connected to node <1>.
Node <1> is connected to nodes <0>, <2>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,7,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<3>, <1>, <0>, <2>, <5>, <4>]","Let's solve it step by step.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
So the result of topological sorting is ","('[[<3>, <1>, <5>, <4>, <0>, <2>], [<3>, <1>, <0>, <2>, <5>, <4>], [<3>, <1>, <0>, <2>, <4>, <5>], [<3>, <4>, <5>, <2>, <0>, <1>]]',)",1,18
topological_sort,"[(<4>, <3>), (<4>, <2>), (<4>, <1>), (<4>, <0>), (<2>, <0>), (<1>, <3>), (<1>, <2>), (<1>, <0>), (<0>, <3>)]","{<4>: [<3>, <2>, <1>, <0>],
<3>: [],
<2>: [<0>],
<1>: [<3>, <2>, <0>],
<0>: [<3>]}","Node <4> is connected to nodes <3>, <2>, <1>, <0>.
Node <2> is connected to node <0>.
Node <1> is connected to nodes <3>, <2>, <0>.
Node <0> is connected to node <3>.","[<0>, <1>, <2>, <3>, <4>]",5,9,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<4>, <1>, <2>, <0>, <3>]","Let's solve it step by step.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
So the result of topological sorting is ","('[[<4>, <1>, <2>, <0>, <3>], [<4>, <1>, <0>, <3>, <2>], [<4>, <1>, <3>, <2>, <0>], [<4>, <3>, <1>, <2>, <0>]]',)",0,19
topological_sort,"[(<4>, <1>), (<4>, <2>), (<1>, <5>), (<5>, <2>), (<0>, <5>), (<0>, <1>), (<3>, <0>), (<3>, <5>)]","{<4>: [<1>, <2>],
<1>: [<5>],
<2>: [],
<5>: [<2>],
<0>: [<5>, <1>],
<3>: [<0>, <5>]}","Node <4> is connected to nodes <1>, <2>.
Node <1> is connected to node <5>.
Node <5> is connected to node <2>.
Node <0> is connected to nodes <5>, <1>.
Node <3> is connected to nodes <0>, <5>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,8,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<4>, <3>, <0>, <1>, <5>, <2>]","Let's solve it step by step.
Nodes with 0 in-degree: [<4>, <3>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
So the result of topological sorting is ","('[[<4>, <3>, <5>, <2>, <0>, <1>], [<4>, <3>, <0>, <1>, <2>, <5>], [<4>, <0>, <1>, <5>, <2>, <3>], [<4>, <3>, <0>, <1>, <5>, <2>]]',)",3,20
topological_sort,"[(<1>, <3>), (<1>, <6>), (<1>, <4>), (<1>, <2>), (<3>, <2>), (<3>, <6>), (<3>, <4>), (<6>, <2>), (<4>, <0>), (<4>, <2>), (<0>, <2>), (<0>, <6>), (<5>, <0>), (<5>, <4>)]","{<1>: [<3>, <6>, <4>, <2>],
<3>: [<2>, <6>, <4>],
<6>: [<2>],
<4>: [<0>, <2>],
<2>: [],
<0>: [<2>, <6>],
<5>: [<0>, <4>]}","Node <1> is connected to nodes <3>, <6>, <4>, <2>.
Node <3> is connected to nodes <2>, <6>, <4>.
Node <6> is connected to node <2>.
Node <4> is connected to nodes <0>, <2>.
Node <0> is connected to nodes <2>, <6>.
Node <5> is connected to nodes <0>, <4>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,14,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<1>, <5>, <3>, <4>, <0>, <6>, <2>]","Let's solve it step by step.
Nodes with 0 in-degree: [<1>, <5>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <3>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
So the result of topological sorting is ","('[[<1>, <5>, <3>, <4>, <0>, <6>, <2>], [<1>, <5>, <6>, <2>, <3>, <4>, <0>], [<1>, <5>, <3>, <2>, <6>, <0>, <4>], [<1>, <4>, <3>, <6>, <5>, <2>, <0>]]',)",0,21
topological_sort,"[(<3>, <0>), (<1>, <3>), (<1>, <0>), (<4>, <5>), (<4>, <3>), (<4>, <1>), (<5>, <2>), (<5>, <0>), (<2>, <0>)]","{<3>: [<0>],
<0>: [],
<1>: [<3>, <0>],
<4>: [<5>, <3>, <1>],
<5>: [<2>, <0>],
<2>: [<0>]}","Node <3> is connected to node <0>.
Node <1> is connected to nodes <3>, <0>.
Node <4> is connected to nodes <5>, <3>, <1>.
Node <5> is connected to nodes <2>, <0>.
Node <2> is connected to node <0>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,9,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<4>, <5>, <1>, <2>, <3>, <0>]","Let's solve it step by step.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <1>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <2>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <3>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
So the result of topological sorting is ","('[[<4>, <5>, <1>, <2>, <3>, <0>], [<4>, <5>, <1>, <3>, <0>, <2>], [<4>, <5>, <3>, <0>, <1>, <2>], [<4>, <1>, <3>, <2>, <5>, <0>]]',)",0,22
topological_sort,"[(<2>, <5>), (<2>, <1>), (<2>, <4>), (<2>, <0>), (<5>, <0>), (<5>, <6>), (<1>, <4>), (<1>, <0>), (<1>, <3>), (<4>, <0>), (<6>, <4>), (<6>, <0>), (<3>, <6>)]","{<2>: [<5>, <1>, <4>, <0>],
<5>: [<0>, <6>],
<1>: [<4>, <0>, <3>],
<4>: [<0>],
<0>: [],
<6>: [<4>, <0>],
<3>: [<6>]}","Node <2> is connected to nodes <5>, <1>, <4>, <0>.
Node <5> is connected to nodes <0>, <6>.
Node <1> is connected to nodes <4>, <0>, <3>.
Node <4> is connected to node <0>.
Node <6> is connected to nodes <4>, <0>.
Node <3> is connected to node <6>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,13,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<2>, <5>, <1>, <3>, <6>, <4>, <0>]","Let's solve it step by step.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <1>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
So the result of topological sorting is ","('[[<2>, <6>, <1>, <4>, <0>, <3>, <5>], [<2>, <5>, <1>, <0>, <3>, <6>, <4>], [<2>, <5>, <4>, <0>, <1>, <3>, <6>], [<2>, <5>, <1>, <3>, <6>, <4>, <0>]]',)",3,23
topological_sort,"[(<3>, <1>), (<3>, <4>), (<4>, <2>), (<2>, <1>), (<0>, <1>), (<0>, <3>), (<0>, <2>), (<0>, <4>)]","{<3>: [<1>, <4>],
<1>: [],
<4>: [<2>],
<2>: [<1>],
<0>: [<1>, <3>, <2>, <4>]}","Node <3> is connected to nodes <1>, <4>.
Node <4> is connected to node <2>.
Node <2> is connected to node <1>.
Node <0> is connected to nodes <1>, <3>, <2>, <4>.","[<0>, <1>, <2>, <3>, <4>]",5,8,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<0>, <3>, <4>, <2>, <1>]","Let's solve it step by step.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
So the result of topological sorting is ","('[[<0>, <1>, <3>, <4>, <2>], [<0>, <3>, <2>, <4>, <1>], [<0>, <3>, <4>, <2>, <1>], [<0>, <3>, <2>, <1>, <4>]]',)",2,24
topological_sort,"[(<0>, <2>), (<0>, <1>), (<0>, <3>), (<1>, <2>), (<3>, <1>), (<4>, <1>), (<4>, <0>), (<4>, <3>)]","{<0>: [<2>, <1>, <3>],
<2>: [],
<1>: [<2>],
<3>: [<1>],
<4>: [<1>, <0>, <3>]}","Node <0> is connected to nodes <2>, <1>, <3>.
Node <1> is connected to node <2>.
Node <3> is connected to node <1>.
Node <4> is connected to nodes <1>, <0>, <3>.","[<0>, <1>, <2>, <3>, <4>]",5,8,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<4>, <0>, <3>, <1>, <2>]","Let's solve it step by step.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
So the result of topological sorting is ","('[[<4>, <0>, <3>, <1>, <2>], [<4>, <0>, <3>, <2>, <1>], [<4>, <2>, <0>, <3>, <1>], [<4>, <2>, <0>, <3>, <1>]]',)",0,25
topological_sort,"[(<3>, <0>), (<0>, <1>), (<1>, <2>), (<4>, <2>), (<5>, <3>)]","{<3>: [<0>],
<0>: [<1>],
<1>: [<2>],
<2>: [],
<4>: [<2>],
<5>: [<3>]}","Node <3> is connected to node <0>.
Node <0> is connected to node <1>.
Node <1> is connected to node <2>.
Node <4> is connected to node <2>.
Node <5> is connected to node <3>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,5,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<4>, <5>, <3>, <0>, <1>, <2>]","Let's solve it step by step.
Nodes with 0 in-degree: [<4>, <5>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
So the result of topological sorting is ","('[[<4>, <5>, <1>, <2>, <3>, <0>], [<4>, <5>, <3>, <1>, <2>, <0>], [<4>, <3>, <0>, <1>, <2>, <5>], [<4>, <5>, <3>, <0>, <1>, <2>]]',)",3,26
topological_sort,"[(<0>, <2>), (<2>, <4>), (<5>, <3>), (<5>, <2>), (<5>, <0>), (<5>, <4>), (<1>, <5>)]","{<0>: [<2>],
<2>: [<4>],
<4>: [],
<5>: [<3>, <2>, <0>, <4>],
<3>: [],
<1>: [<5>]}","Node <0> is connected to node <2>.
Node <2> is connected to node <4>.
Node <5> is connected to nodes <3>, <2>, <0>, <4>.
Node <1> is connected to node <5>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,7,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<1>, <5>, <3>, <0>, <2>, <4>]","Let's solve it step by step.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <0>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
So the result of topological sorting is ","('[[<1>, <5>, <3>, <4>, <2>, <0>], [<1>, <5>, <3>, <0>, <2>, <4>], [<1>, <5>, <2>, <4>, <3>, <0>], [<1>, <2>, <3>, <4>, <5>, <0>]]',)",1,27
topological_sort,"[(<3>, <2>), (<3>, <4>), (<3>, <5>), (<3>, <0>), (<2>, <1>), (<4>, <2>), (<4>, <5>), (<5>, <1>), (<0>, <4>)]","{<3>: [<2>, <4>, <5>, <0>],
<2>: [<1>],
<4>: [<2>, <5>],
<5>: [<1>],
<0>: [<4>],
<1>: []}","Node <3> is connected to nodes <2>, <4>, <5>, <0>.
Node <2> is connected to node <1>.
Node <4> is connected to nodes <2>, <5>.
Node <5> is connected to node <1>.
Node <0> is connected to node <4>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,9,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<3>, <0>, <4>, <2>, <5>, <1>]","Let's solve it step by step.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <5>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
So the result of topological sorting is ","('[[<3>, <1>, <2>, <5>, <0>, <4>], [<3>, <0>, <4>, <2>, <5>, <1>], [<3>, <0>, <5>, <1>, <4>, <2>], [<3>, <0>, <4>, <2>, <5>, <1>]]',)",1,28
topological_sort,"[(<1>, <0>), (<1>, <3>), (<2>, <1>), (<2>, <0>), (<4>, <3>), (<4>, <1>), (<5>, <1>)]","{<1>: [<0>, <3>],
<0>: [],
<3>: [],
<2>: [<1>, <0>],
<4>: [<3>, <1>],
<5>: [<1>]}","Node <1> is connected to nodes <0>, <3>.
Node <2> is connected to nodes <1>, <0>.
Node <4> is connected to nodes <3>, <1>.
Node <5> is connected to node <1>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,7,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<2>, <4>, <5>, <1>, <0>, <3>]","Let's solve it step by step.
Nodes with 0 in-degree: [<2>, <4>, <5>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <5>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <3>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
So the result of topological sorting is ","('[[<2>, <0>, <3>, <1>, <4>, <5>], [<2>, <4>, <5>, <0>, <1>, <3>], [<2>, <4>, <0>, <3>, <5>, <1>], [<2>, <4>, <5>, <1>, <0>, <3>]]',)",3,29
topological_sort,"[(<2>, <5>), (<1>, <5>), (<1>, <3>), (<3>, <4>), (<4>, <6>), (<4>, <2>), (<6>, <5>), (<0>, <1>)]","{<2>: [<5>],
<5>: [],
<1>: [<5>, <3>],
<3>: [<4>],
<4>: [<6>, <2>],
<6>: [<5>],
<0>: [<1>]}","Node <2> is connected to node <5>.
Node <1> is connected to nodes <5>, <3>.
Node <3> is connected to node <4>.
Node <4> is connected to nodes <6>, <2>.
Node <6> is connected to node <5>.
Node <0> is connected to node <1>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,8,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<0>, <1>, <3>, <4>, <6>, <2>, <5>]","Let's solve it step by step.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <2>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
So the result of topological sorting is ","('[[<0>, <1>, <3>, <5>, <4>, <6>, <2>], [<0>, <1>, <2>, <5>, <3>, <4>, <6>], [<0>, <5>, <4>, <6>, <2>, <3>, <1>], [<0>, <1>, <3>, <4>, <6>, <2>, <5>]]',)",3,30
topological_sort,"[(<3>, <4>), (<3>, <5>), (<4>, <5>), (<2>, <4>), (<2>, <3>), (<2>, <0>), (<1>, <4>), (<1>, <2>)]","{<3>: [<4>, <5>],
<4>: [<5>],
<5>: [],
<2>: [<4>, <3>, <0>],
<0>: [],
<1>: [<4>, <2>]}","Node <3> is connected to nodes <4>, <5>.
Node <4> is connected to node <5>.
Node <2> is connected to nodes <4>, <3>, <0>.
Node <1> is connected to nodes <4>, <2>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,8,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<1>, <2>, <3>, <0>, <4>, <5>]","Let's solve it step by step.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <0>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <4>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
So the result of topological sorting is ","('[[<1>, <5>, <3>, <4>, <2>, <0>], [<1>, <2>, <3>, <5>, <4>, <0>], [<1>, <2>, <4>, <5>, <3>, <0>], [<1>, <2>, <3>, <0>, <4>, <5>]]',)",3,31
topological_sort,"[(<1>, <0>), (<1>, <3>), (<1>, <4>), (<0>, <3>), (<3>, <2>), (<3>, <4>), (<4>, <2>)]","{<1>: [<0>, <3>, <4>],
<0>: [<3>],
<3>: [<2>, <4>],
<4>: [<2>],
<2>: []}","Node <1> is connected to nodes <0>, <3>, <4>.
Node <0> is connected to node <3>.
Node <3> is connected to nodes <2>, <4>.
Node <4> is connected to node <2>.","[<0>, <1>, <2>, <3>, <4>]",5,7,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<1>, <0>, <3>, <4>, <2>]","Let's solve it step by step.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
So the result of topological sorting is ","('[[<1>, <2>, <0>, <3>, <4>], [<1>, <0>, <3>, <2>, <4>], [<1>, <0>, <3>, <4>, <2>], [<1>, <0>, <3>, <2>, <4>]]',)",2,32
topological_sort,"[(<3>, <2>), (<3>, <5>), (<3>, <1>), (<2>, <1>), (<5>, <2>), (<1>, <0>), (<4>, <1>), (<4>, <0>), (<4>, <2>)]","{<3>: [<2>, <5>, <1>],
<2>: [<1>],
<5>: [<2>],
<1>: [<0>],
<0>: [],
<4>: [<1>, <0>, <2>]}","Node <3> is connected to nodes <2>, <5>, <1>.
Node <2> is connected to node <1>.
Node <5> is connected to node <2>.
Node <1> is connected to node <0>.
Node <4> is connected to nodes <1>, <0>, <2>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,9,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<3>, <4>, <5>, <2>, <1>, <0>]","Let's solve it step by step.
Nodes with 0 in-degree: [<3>, <4>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <5>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
So the result of topological sorting is ","('[[<3>, <4>, <5>, <2>, <1>, <0>], [<3>, <4>, <5>, <2>, <1>, <0>], [<3>, <4>, <1>, <0>, <5>, <2>], [<3>, <1>, <4>, <0>, <2>, <5>]]',)",0,33
topological_sort,"[(<0>, <2>), (<0>, <4>), (<2>, <3>), (<4>, <3>), (<4>, <2>), (<1>, <4>), (<1>, <0>), (<1>, <2>)]","{<0>: [<2>, <4>],
<2>: [<3>],
<4>: [<3>, <2>],
<3>: [],
<1>: [<4>, <0>, <2>]}","Node <0> is connected to nodes <2>, <4>.
Node <2> is connected to node <3>.
Node <4> is connected to nodes <3>, <2>.
Node <1> is connected to nodes <4>, <0>, <2>.","[<0>, <1>, <2>, <3>, <4>]",5,8,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<1>, <0>, <4>, <2>, <3>]","Let's solve it step by step.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
So the result of topological sorting is ","('[[<1>, <3>, <0>, <4>, <2>], [<1>, <0>, <4>, <2>, <3>], [<1>, <4>, <0>, <3>, <2>], [<1>, <0>, <3>, <4>, <2>]]',)",1,34
topological_sort,"[(<3>, <0>), (<3>, <4>), (<3>, <1>), (<3>, <2>), (<0>, <2>), (<0>, <1>), (<0>, <4>), (<4>, <1>), (<4>, <2>), (<1>, <2>)]","{<3>: [<0>, <4>, <1>, <2>],
<0>: [<2>, <1>, <4>],
<4>: [<1>, <2>],
<1>: [<2>],
<2>: []}","Node <3> is connected to nodes <0>, <4>, <1>, <2>.
Node <0> is connected to nodes <2>, <1>, <4>.
Node <4> is connected to nodes <1>, <2>.
Node <1> is connected to node <2>.","[<0>, <1>, <2>, <3>, <4>]",5,10,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<3>, <0>, <4>, <1>, <2>]","Let's solve it step by step.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
So the result of topological sorting is ","('[[<3>, <4>, <1>, <2>, <0>], [<3>, <0>, <2>, <4>, <1>], [<3>, <2>, <0>, <4>, <1>], [<3>, <0>, <4>, <1>, <2>]]',)",3,35
topological_sort,"[(<4>, <3>), (<4>, <1>), (<4>, <2>), (<3>, <0>), (<2>, <3>), (<0>, <1>)]","{<4>: [<3>, <1>, <2>],
<3>: [<0>],
<1>: [],
<2>: [<3>],
<0>: [<1>]}","Node <4> is connected to nodes <3>, <1>, <2>.
Node <3> is connected to node <0>.
Node <2> is connected to node <3>.
Node <0> is connected to node <1>.","[<0>, <1>, <2>, <3>, <4>]",5,6,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<4>, <2>, <3>, <0>, <1>]","Let's solve it step by step.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
So the result of topological sorting is ","('[[<4>, <1>, <2>, <3>, <0>], [<4>, <1>, <0>, <2>, <3>], [<4>, <2>, <3>, <0>, <1>], [<4>, <2>, <0>, <1>, <3>]]',)",2,36
topological_sort,"[(<1>, <0>), (<0>, <4>), (<0>, <2>), (<0>, <3>), (<2>, <3>)]","{<1>: [<0>],
<0>: [<4>, <2>, <3>],
<4>: [],
<2>: [<3>],
<3>: []}","Node <1> is connected to node <0>.
Node <0> is connected to nodes <4>, <2>, <3>.
Node <2> is connected to node <3>.","[<0>, <1>, <2>, <3>, <4>]",5,5,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<1>, <0>, <4>, <2>, <3>]","Let's solve it step by step.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <2>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
So the result of topological sorting is ","('[[<1>, <3>, <0>, <4>, <2>], [<1>, <0>, <3>, <4>, <2>], [<1>, <0>, <4>, <2>, <3>], [<1>, <3>, <4>, <2>, <0>]]',)",2,37
topological_sort,"[(<6>, <4>), (<6>, <1>), (<6>, <2>), (<6>, <0>), (<4>, <0>), (<1>, <3>), (<2>, <0>), (<2>, <5>), (<2>, <4>), (<0>, <1>), (<0>, <3>), (<5>, <0>)]","{<6>: [<4>, <1>, <2>, <0>],
<4>: [<0>],
<1>: [<3>],
<2>: [<0>, <5>, <4>],
<0>: [<1>, <3>],
<3>: [],
<5>: [<0>]}","Node <6> is connected to nodes <4>, <1>, <2>, <0>.
Node <4> is connected to node <0>.
Node <1> is connected to node <3>.
Node <2> is connected to nodes <0>, <5>, <4>.
Node <0> is connected to nodes <1>, <3>.
Node <5> is connected to node <0>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,12,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<6>, <2>, <5>, <4>, <0>, <1>, <3>]","Let's solve it step by step.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <4>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
So the result of topological sorting is ","('[[<6>, <2>, <4>, <3>, <0>, <1>, <5>], [<6>, <2>, <1>, <3>, <5>, <4>, <0>], [<6>, <2>, <5>, <4>, <3>, <0>, <1>], [<6>, <2>, <5>, <4>, <0>, <1>, <3>]]',)",3,38
topological_sort,"[(<1>, <4>), (<1>, <3>), (<1>, <0>), (<4>, <0>), (<3>, <4>), (<2>, <3>)]","{<1>: [<4>, <3>, <0>],
<4>: [<0>],
<3>: [<4>],
<0>: [],
<2>: [<3>]}","Node <1> is connected to nodes <4>, <3>, <0>.
Node <4> is connected to node <0>.
Node <3> is connected to node <4>.
Node <2> is connected to node <3>.","[<0>, <1>, <2>, <3>, <4>]",5,6,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<1>, <2>, <3>, <4>, <0>]","Let's solve it step by step.
Nodes with 0 in-degree: [<1>, <2>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
So the result of topological sorting is ","('[[<1>, <2>, <0>, <3>, <4>], [<1>, <2>, <3>, <4>, <0>], [<1>, <0>, <2>, <3>, <4>], [<1>, <3>, <0>, <4>, <2>]]',)",1,39
topological_sort,"[(<0>, <4>), (<0>, <1>), (<1>, <4>), (<1>, <3>), (<2>, <4>), (<2>, <3>), (<2>, <0>), (<3>, <4>)]","{<0>: [<4>, <1>],
<4>: [],
<1>: [<4>, <3>],
<2>: [<4>, <3>, <0>],
<3>: [<4>]}","Node <0> is connected to nodes <4>, <1>.
Node <1> is connected to nodes <4>, <3>.
Node <2> is connected to nodes <4>, <3>, <0>.
Node <3> is connected to node <4>.","[<0>, <1>, <2>, <3>, <4>]",5,8,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<2>, <0>, <1>, <3>, <4>]","Let's solve it step by step.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
So the result of topological sorting is ","('[[<2>, <4>, <3>, <0>, <1>], [<2>, <4>, <0>, <1>, <3>], [<2>, <0>, <1>, <3>, <4>], [<2>, <0>, <4>, <3>, <1>]]',)",2,40
topological_sort,"[(<3>, <2>), (<3>, <5>), (<5>, <2>), (<4>, <3>), (<4>, <2>), (<4>, <5>), (<1>, <4>), (<1>, <3>), (<0>, <1>), (<0>, <2>)]","{<3>: [<2>, <5>],
<2>: [],
<5>: [<2>],
<4>: [<3>, <2>, <5>],
<1>: [<4>, <3>],
<0>: [<1>, <2>]}","Node <3> is connected to nodes <2>, <5>.
Node <5> is connected to node <2>.
Node <4> is connected to nodes <3>, <2>, <5>.
Node <1> is connected to nodes <4>, <3>.
Node <0> is connected to nodes <1>, <2>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,10,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<0>, <1>, <4>, <3>, <5>, <2>]","Let's solve it step by step.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
So the result of topological sorting is ","('[[<0>, <3>, <2>, <5>, <1>, <4>], [<0>, <1>, <5>, <2>, <4>, <3>], [<0>, <1>, <4>, <2>, <3>, <5>], [<0>, <1>, <4>, <3>, <5>, <2>]]',)",3,41
topological_sort,"[(<2>, <3>), (<2>, <4>), (<2>, <5>), (<4>, <3>), (<1>, <5>), (<1>, <2>), (<1>, <0>)]","{<2>: [<3>, <4>, <5>],
<3>: [],
<4>: [<3>],
<5>: [],
<1>: [<5>, <2>, <0>],
<0>: []}","Node <2> is connected to nodes <3>, <4>, <5>.
Node <4> is connected to node <3>.
Node <1> is connected to nodes <5>, <2>, <0>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,7,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<1>, <2>, <0>, <4>, <5>, <3>]","Let's solve it step by step.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <0>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <4>, <5>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <5>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <3>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
So the result of topological sorting is ","('[[<1>, <2>, <5>, <3>, <0>, <4>], [<1>, <4>, <3>, <2>, <0>, <5>], [<1>, <2>, <0>, <4>, <5>, <3>], [<1>, <2>, <0>, <4>, <5>, <3>]]',)",2,42
topological_sort,"[(<0>, <4>), (<4>, <3>), (<5>, <4>), (<2>, <1>), (<2>, <0>), (<2>, <6>), (<2>, <5>), (<2>, <4>), (<1>, <5>), (<1>, <3>), (<6>, <3>), (<6>, <1>)]","{<0>: [<4>],
<4>: [<3>],
<3>: [],
<5>: [<4>],
<2>: [<1>, <0>, <6>, <5>, <4>],
<1>: [<5>, <3>],
<6>: [<3>, <1>]}","Node <0> is connected to node <4>.
Node <4> is connected to node <3>.
Node <5> is connected to node <4>.
Node <2> is connected to nodes <1>, <0>, <6>, <5>, <4>.
Node <1> is connected to nodes <5>, <3>.
Node <6> is connected to nodes <3>, <1>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,12,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<2>, <0>, <6>, <1>, <5>, <4>, <3>]","Let's solve it step by step.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <6>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
So the result of topological sorting is ","('[[<2>, <3>, <5>, <1>, <6>, <0>, <4>], [<2>, <0>, <6>, <1>, <4>, <5>, <3>], [<2>, <0>, <4>, <3>, <6>, <1>, <5>], [<2>, <0>, <6>, <1>, <5>, <4>, <3>]]',)",3,43
topological_sort,"[(<0>, <3>), (<0>, <4>), (<4>, <1>), (<4>, <2>), (<4>, <3>), (<2>, <1>), (<1>, <3>)]","{<0>: [<3>, <4>],
<3>: [],
<4>: [<1>, <2>, <3>],
<2>: [<1>],
<1>: [<3>]}","Node <0> is connected to nodes <3>, <4>.
Node <4> is connected to nodes <1>, <2>, <3>.
Node <2> is connected to node <1>.
Node <1> is connected to node <3>.","[<0>, <1>, <2>, <3>, <4>]",5,7,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<0>, <4>, <2>, <1>, <3>]","Let's solve it step by step.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
So the result of topological sorting is ","('[[<0>, <4>, <2>, <3>, <1>], [<0>, <3>, <4>, <2>, <1>], [<0>, <3>, <4>, <2>, <1>], [<0>, <4>, <2>, <1>, <3>]]',)",3,44
topological_sort,"[(<3>, <5>), (<3>, <4>), (<3>, <0>), (<5>, <4>), (<5>, <1>), (<4>, <1>), (<0>, <2>), (<0>, <1>), (<2>, <4>)]","{<3>: [<5>, <4>, <0>],
<5>: [<4>, <1>],
<4>: [<1>],
<0>: [<2>, <1>],
<1>: [],
<2>: [<4>]}","Node <3> is connected to nodes <5>, <4>, <0>.
Node <5> is connected to nodes <4>, <1>.
Node <4> is connected to node <1>.
Node <0> is connected to nodes <2>, <1>.
Node <2> is connected to node <4>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,9,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<3>, <5>, <0>, <2>, <4>, <1>]","Let's solve it step by step.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <0>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
So the result of topological sorting is ","('[[<3>, <0>, <1>, <4>, <5>, <2>], [<3>, <5>, <0>, <2>, <4>, <1>], [<3>, <5>, <0>, <1>, <4>, <2>], [<3>, <5>, <4>, <1>, <0>, <2>]]',)",1,45
topological_sort,"[(<0>, <3>), (<4>, <1>), (<4>, <3>), (<2>, <3>), (<2>, <1>), (<2>, <4>)]","{<0>: [<3>],
<3>: [],
<4>: [<1>, <3>],
<1>: [],
<2>: [<3>, <1>, <4>]}","Node <0> is connected to node <3>.
Node <4> is connected to nodes <1>, <3>.
Node <2> is connected to nodes <3>, <1>, <4>.","[<0>, <1>, <2>, <3>, <4>]",5,6,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<0>, <2>, <4>, <1>, <3>]","Let's solve it step by step.
Nodes with 0 in-degree: [<0>, <2>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <3>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
So the result of topological sorting is ","('[[<0>, <2>, <1>, <4>, <3>], [<0>, <1>, <3>, <2>, <4>], [<0>, <3>, <2>, <4>, <1>], [<0>, <2>, <4>, <1>, <3>]]',)",3,46
topological_sort,"[(<1>, <6>), (<6>, <4>), (<4>, <3>), (<4>, <5>), (<2>, <3>), (<2>, <1>), (<2>, <5>), (<5>, <3>), (<0>, <2>)]","{<1>: [<6>],
<6>: [<4>],
<4>: [<3>, <5>],
<2>: [<3>, <1>, <5>],
<3>: [],
<5>: [<3>],
<0>: [<2>]}","Node <1> is connected to node <6>.
Node <6> is connected to node <4>.
Node <4> is connected to nodes <3>, <5>.
Node <2> is connected to nodes <3>, <1>, <5>.
Node <5> is connected to node <3>.
Node <0> is connected to node <2>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,9,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<0>, <2>, <1>, <6>, <4>, <5>, <3>]","Let's solve it step by step.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
So the result of topological sorting is ","('[[<0>, <2>, <1>, <6>, <4>, <5>, <3>], [<0>, <2>, <6>, <3>, <4>, <1>, <5>], [<0>, <2>, <1>, <4>, <6>, <3>, <5>], [<0>, <2>, <5>, <3>, <1>, <6>, <4>]]',)",0,47
topological_sort,"[(<3>, <1>), (<3>, <2>), (<3>, <4>), (<2>, <1>), (<4>, <0>), (<4>, <5>), (<0>, <2>), (<5>, <0>), (<5>, <2>)]","{<3>: [<1>, <2>, <4>],
<1>: [],
<2>: [<1>],
<4>: [<0>, <5>],
<0>: [<2>],
<5>: [<0>, <2>]}","Node <3> is connected to nodes <1>, <2>, <4>.
Node <2> is connected to node <1>.
Node <4> is connected to nodes <0>, <5>.
Node <0> is connected to node <2>.
Node <5> is connected to nodes <0>, <2>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,9,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<3>, <4>, <5>, <0>, <2>, <1>]","Let's solve it step by step.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
So the result of topological sorting is ","('[[<3>, <4>, <5>, <0>, <2>, <1>], [<3>, <4>, <2>, <1>, <5>, <0>], [<3>, <0>, <2>, <4>, <5>, <1>], [<3>, <4>, <5>, <2>, <1>, <0>]]',)",0,48
topological_sort,"[(<0>, <3>), (<0>, <5>), (<0>, <4>), (<5>, <3>), (<4>, <5>), (<4>, <3>), (<1>, <2>), (<2>, <4>), (<2>, <0>)]","{<0>: [<3>, <5>, <4>],
<3>: [],
<5>: [<3>],
<4>: [<5>, <3>],
<1>: [<2>],
<2>: [<4>, <0>]}","Node <0> is connected to nodes <3>, <5>, <4>.
Node <5> is connected to node <3>.
Node <4> is connected to nodes <5>, <3>.
Node <1> is connected to node <2>.
Node <2> is connected to nodes <4>, <0>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,9,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<1>, <2>, <0>, <4>, <5>, <3>]","Let's solve it step by step.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
So the result of topological sorting is ","('[[<1>, <2>, <5>, <3>, <0>, <4>], [<1>, <5>, <4>, <2>, <0>, <3>], [<1>, <2>, <0>, <5>, <3>, <4>], [<1>, <2>, <0>, <4>, <5>, <3>]]',)",3,49
topological_sort,"[(<5>, <2>), (<2>, <0>), (<2>, <4>), (<1>, <4>), (<1>, <3>), (<1>, <2>), (<3>, <0>)]","{<5>: [<2>],
<2>: [<0>, <4>],
<0>: [],
<4>: [],
<1>: [<4>, <3>, <2>],
<3>: [<0>]}","Node <5> is connected to node <2>.
Node <2> is connected to nodes <0>, <4>.
Node <1> is connected to nodes <4>, <3>, <2>.
Node <3> is connected to node <0>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,7,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<5>, <1>, <3>, <2>, <0>, <4>]","Let's solve it step by step.
Nodes with 0 in-degree: [<5>, <1>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <2>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <4>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
So the result of topological sorting is ","('[[<5>, <1>, <0>, <4>, <3>, <2>], [<5>, <1>, <3>, <2>, <0>, <4>], [<5>, <1>, <3>, <4>, <0>, <2>], [<5>, <2>, <4>, <0>, <3>, <1>]]',)",1,50
topological_sort,"[(<4>, <2>), (<4>, <3>), (<4>, <1>), (<2>, <1>), (<2>, <3>), (<3>, <0>), (<3>, <1>), (<0>, <1>)]","{<4>: [<2>, <3>, <1>],
<2>: [<1>, <3>],
<3>: [<0>, <1>],
<1>: [],
<0>: [<1>]}","Node <4> is connected to nodes <2>, <3>, <1>.
Node <2> is connected to nodes <1>, <3>.
Node <3> is connected to nodes <0>, <1>.
Node <0> is connected to node <1>.","[<0>, <1>, <2>, <3>, <4>]",5,8,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<4>, <2>, <3>, <0>, <1>]","Let's solve it step by step.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
So the result of topological sorting is ","('[[<4>, <1>, <3>, <0>, <2>], [<4>, <2>, <1>, <3>, <0>], [<4>, <1>, <2>, <3>, <0>], [<4>, <2>, <3>, <0>, <1>]]',)",3,51
topological_sort,"[(<3>, <0>), (<3>, <6>), (<3>, <1>), (<0>, <6>), (<0>, <5>), (<5>, <1>), (<4>, <3>), (<4>, <6>), (<2>, <6>), (<2>, <1>), (<2>, <3>), (<2>, <5>)]","{<3>: [<0>, <6>, <1>],
<0>: [<6>, <5>],
<6>: [],
<1>: [],
<5>: [<1>],
<4>: [<3>, <6>],
<2>: [<6>, <1>, <3>, <5>]}","Node <3> is connected to nodes <0>, <6>, <1>.
Node <0> is connected to nodes <6>, <5>.
Node <5> is connected to node <1>.
Node <4> is connected to nodes <3>, <6>.
Node <2> is connected to nodes <6>, <1>, <3>, <5>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,12,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<4>, <2>, <3>, <0>, <6>, <5>, <1>]","Let's solve it step by step.
Nodes with 0 in-degree: [<4>, <2>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <5>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
So the result of topological sorting is ","('[[<4>, <2>, <3>, <6>, <0>, <5>, <1>], [<4>, <5>, <6>, <2>, <1>, <0>, <3>], [<4>, <2>, <5>, <1>, <3>, <0>, <6>], [<4>, <2>, <3>, <0>, <6>, <5>, <1>]]',)",3,52
topological_sort,"[(<1>, <4>), (<1>, <3>), (<2>, <4>), (<2>, <0>), (<2>, <3>), (<2>, <1>), (<0>, <1>), (<5>, <3>), (<5>, <2>), (<5>, <1>), (<5>, <0>)]","{<1>: [<4>, <3>],
<4>: [],
<3>: [],
<2>: [<4>, <0>, <3>, <1>],
<0>: [<1>],
<5>: [<3>, <2>, <1>, <0>]}","Node <1> is connected to nodes <4>, <3>.
Node <2> is connected to nodes <4>, <0>, <3>, <1>.
Node <0> is connected to node <1>.
Node <5> is connected to nodes <3>, <2>, <1>, <0>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,11,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<5>, <2>, <0>, <1>, <4>, <3>]","Let's solve it step by step.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <3>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
So the result of topological sorting is ","('[[<5>, <2>, <4>, <3>, <0>, <1>], [<5>, <4>, <1>, <0>, <3>, <2>], [<5>, <2>, <0>, <1>, <4>, <3>], [<5>, <2>, <0>, <3>, <1>, <4>]]',)",2,53
topological_sort,"[(<4>, <0>), (<4>, <2>), (<4>, <5>), (<5>, <2>), (<5>, <0>), (<3>, <0>), (<3>, <4>), (<3>, <1>), (<3>, <5>), (<1>, <5>)]","{<4>: [<0>, <2>, <5>],
<0>: [],
<2>: [],
<5>: [<2>, <0>],
<3>: [<0>, <4>, <1>, <5>],
<1>: [<5>]}","Node <4> is connected to nodes <0>, <2>, <5>.
Node <5> is connected to nodes <2>, <0>.
Node <3> is connected to nodes <0>, <4>, <1>, <5>.
Node <1> is connected to node <5>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,10,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<3>, <4>, <1>, <5>, <2>, <0>]","Let's solve it step by step.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <1>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <0>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
So the result of topological sorting is ","('[[<3>, <0>, <5>, <1>, <2>, <4>], [<3>, <4>, <1>, <5>, <2>, <0>], [<3>, <4>, <2>, <0>, <1>, <5>], [<3>, <4>, <1>, <5>, <0>, <2>]]',)",1,54
topological_sort,"[(<2>, <4>), (<2>, <0>), (<4>, <0>), (<4>, <5>), (<0>, <5>), (<1>, <5>), (<1>, <4>), (<3>, <2>)]","{<2>: [<4>, <0>],
<4>: [<0>, <5>],
<0>: [<5>],
<5>: [],
<1>: [<5>, <4>],
<3>: [<2>]}","Node <2> is connected to nodes <4>, <0>.
Node <4> is connected to nodes <0>, <5>.
Node <0> is connected to node <5>.
Node <1> is connected to nodes <5>, <4>.
Node <3> is connected to node <2>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,8,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<1>, <3>, <2>, <4>, <0>, <5>]","Let's solve it step by step.
Nodes with 0 in-degree: [<1>, <3>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
So the result of topological sorting is ","('[[<1>, <3>, <0>, <5>, <2>, <4>], [<1>, <3>, <2>, <5>, <4>, <0>], [<1>, <4>, <5>, <0>, <2>, <3>], [<1>, <3>, <2>, <4>, <0>, <5>]]',)",3,55
topological_sort,"[(<3>, <0>), (<4>, <2>), (<2>, <1>), (<2>, <0>), (<2>, <3>), (<1>, <3>)]","{<3>: [<0>],
<0>: [],
<4>: [<2>],
<2>: [<1>, <0>, <3>],
<1>: [<3>]}","Node <3> is connected to node <0>.
Node <4> is connected to node <2>.
Node <2> is connected to nodes <1>, <0>, <3>.
Node <1> is connected to node <3>.","[<0>, <1>, <2>, <3>, <4>]",5,6,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<4>, <2>, <1>, <3>, <0>]","Let's solve it step by step.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
So the result of topological sorting is ","('[[<4>, <0>, <2>, <1>, <3>], [<4>, <0>, <3>, <2>, <1>], [<4>, <2>, <1>, <3>, <0>], [<4>, <2>, <3>, <1>, <0>]]',)",2,56
topological_sort,"[(<4>, <0>), (<4>, <3>), (<0>, <3>), (<1>, <2>), (<1>, <3>), (<2>, <4>), (<5>, <0>), (<5>, <4>)]","{<4>: [<0>, <3>],
<0>: [<3>],
<3>: [],
<1>: [<2>, <3>],
<2>: [<4>],
<5>: [<0>, <4>]}","Node <4> is connected to nodes <0>, <3>.
Node <0> is connected to node <3>.
Node <1> is connected to nodes <2>, <3>.
Node <2> is connected to node <4>.
Node <5> is connected to nodes <0>, <4>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,8,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<1>, <5>, <2>, <4>, <0>, <3>]","Let's solve it step by step.
Nodes with 0 in-degree: [<1>, <5>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <2>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
So the result of topological sorting is ","('[[<1>, <5>, <2>, <3>, <4>, <0>], [<1>, <5>, <2>, <4>, <0>, <3>], [<1>, <3>, <0>, <4>, <5>, <2>], [<1>, <5>, <0>, <3>, <2>, <4>]]',)",1,57
topological_sort,"[(<2>, <5>), (<2>, <1>), (<2>, <6>), (<2>, <3>), (<2>, <4>), (<5>, <6>), (<5>, <1>), (<5>, <3>), (<1>, <6>), (<3>, <6>), (<4>, <1>), (<4>, <6>), (<4>, <5>), (<0>, <2>)]","{<2>: [<5>, <1>, <6>, <3>, <4>],
<5>: [<6>, <1>, <3>],
<1>: [<6>],
<6>: [],
<3>: [<6>],
<4>: [<1>, <6>, <5>],
<0>: [<2>]}","Node <2> is connected to nodes <5>, <1>, <6>, <3>, <4>.
Node <5> is connected to nodes <6>, <1>, <3>.
Node <1> is connected to node <6>.
Node <3> is connected to node <6>.
Node <4> is connected to nodes <1>, <6>, <5>.
Node <0> is connected to node <2>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,14,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<0>, <2>, <4>, <5>, <1>, <3>, <6>]","Let's solve it step by step.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <3>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
So the result of topological sorting is ","('[[<0>, <2>, <4>, <5>, <3>, <1>, <6>], [<0>, <5>, <3>, <6>, <2>, <1>, <4>], [<0>, <2>, <3>, <6>, <4>, <5>, <1>], [<0>, <2>, <4>, <5>, <1>, <3>, <6>]]',)",3,58
topological_sort,"[(<1>, <5>), (<1>, <4>), (<5>, <2>), (<5>, <4>), (<2>, <3>), (<2>, <0>), (<3>, <4>), (<3>, <0>)]","{<1>: [<5>, <4>],
<5>: [<2>, <4>],
<4>: [],
<2>: [<3>, <0>],
<3>: [<4>, <0>],
<0>: []}","Node <1> is connected to nodes <5>, <4>.
Node <5> is connected to nodes <2>, <4>.
Node <2> is connected to nodes <3>, <0>.
Node <3> is connected to nodes <4>, <0>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,8,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<1>, <5>, <2>, <3>, <4>, <0>]","Let's solve it step by step.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <0>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
So the result of topological sorting is ","('[[<1>, <2>, <5>, <0>, <3>, <4>], [<1>, <5>, <2>, <0>, <4>, <3>], [<1>, <5>, <4>, <0>, <2>, <3>], [<1>, <5>, <2>, <3>, <4>, <0>]]',)",3,59
topological_sort,"[(<2>, <4>), (<2>, <6>), (<2>, <0>), (<2>, <5>), (<2>, <3>), (<4>, <3>), (<4>, <6>), (<4>, <0>), (<4>, <5>), (<6>, <0>), (<0>, <3>), (<5>, <3>), (<5>, <6>), (<1>, <0>), (<1>, <5>), (<1>, <4>), (<1>, <2>)]","{<2>: [<4>, <6>, <0>, <5>, <3>],
<4>: [<3>, <6>, <0>, <5>],
<6>: [<0>],
<0>: [<3>],
<5>: [<3>, <6>],
<3>: [],
<1>: [<0>, <5>, <4>, <2>]}","Node <2> is connected to nodes <4>, <6>, <0>, <5>, <3>.
Node <4> is connected to nodes <3>, <6>, <0>, <5>.
Node <6> is connected to node <0>.
Node <0> is connected to node <3>.
Node <5> is connected to nodes <3>, <6>.
Node <1> is connected to nodes <0>, <5>, <4>, <2>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,17,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<1>, <2>, <4>, <5>, <6>, <0>, <3>]","Let's solve it step by step.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
So the result of topological sorting is ","('[[<1>, <0>, <4>, <5>, <6>, <2>, <3>], [<1>, <2>, <4>, <5>, <6>, <0>, <3>], [<1>, <2>, <0>, <3>, <4>, <5>, <6>], [<1>, <2>, <4>, <3>, <5>, <0>, <6>]]',)",1,60
topological_sort,"[(<1>, <4>), (<1>, <0>), (<2>, <4>), (<2>, <3>), (<3>, <0>), (<3>, <1>)]","{<1>: [<4>, <0>],
<4>: [],
<0>: [],
<2>: [<4>, <3>],
<3>: [<0>, <1>]}","Node <1> is connected to nodes <4>, <0>.
Node <2> is connected to nodes <4>, <3>.
Node <3> is connected to nodes <0>, <1>.","[<0>, <1>, <2>, <3>, <4>]",5,6,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<2>, <3>, <1>, <4>, <0>]","Let's solve it step by step.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <0>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
So the result of topological sorting is ","('[[<2>, <0>, <3>, <1>, <4>], [<2>, <4>, <1>, <0>, <3>], [<2>, <3>, <1>, <4>, <0>], [<2>, <3>, <4>, <1>, <0>]]',)",2,61
topological_sort,"[(<5>, <4>), (<5>, <2>), (<2>, <3>), (<2>, <4>), (<1>, <3>), (<3>, <4>), (<0>, <3>), (<0>, <1>)]","{<5>: [<4>, <2>],
<4>: [],
<2>: [<3>, <4>],
<1>: [<3>],
<3>: [<4>],
<0>: [<3>, <1>]}","Node <5> is connected to nodes <4>, <2>.
Node <2> is connected to nodes <3>, <4>.
Node <1> is connected to node <3>.
Node <3> is connected to node <4>.
Node <0> is connected to nodes <3>, <1>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,8,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<5>, <0>, <2>, <1>, <3>, <4>]","Let's solve it step by step.
Nodes with 0 in-degree: [<5>, <0>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <2>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <1>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
So the result of topological sorting is ","('[[<5>, <0>, <3>, <4>, <2>, <1>], [<5>, <0>, <2>, <4>, <3>, <1>], [<5>, <0>, <2>, <1>, <3>, <4>], [<5>, <3>, <4>, <0>, <1>, <2>]]',)",2,62
topological_sort,"[(<1>, <3>), (<1>, <6>), (<1>, <5>), (<3>, <6>), (<3>, <0>), (<6>, <0>), (<5>, <3>), (<5>, <6>), (<5>, <0>), (<4>, <6>), (<4>, <0>), (<4>, <5>), (<4>, <2>), (<2>, <0>), (<2>, <6>), (<2>, <5>)]","{<1>: [<3>, <6>, <5>],
<3>: [<6>, <0>],
<6>: [<0>],
<5>: [<3>, <6>, <0>],
<0>: [],
<4>: [<6>, <0>, <5>, <2>],
<2>: [<0>, <6>, <5>]}","Node <1> is connected to nodes <3>, <6>, <5>.
Node <3> is connected to nodes <6>, <0>.
Node <6> is connected to node <0>.
Node <5> is connected to nodes <3>, <6>, <0>.
Node <4> is connected to nodes <6>, <0>, <5>, <2>.
Node <2> is connected to nodes <0>, <6>, <5>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,16,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<1>, <4>, <2>, <5>, <3>, <6>, <0>]","Let's solve it step by step.
Nodes with 0 in-degree: [<1>, <4>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
So the result of topological sorting is ","('[[<1>, <4>, <2>, <5>, <3>, <6>, <0>], [<1>, <4>, <6>, <0>, <2>, <5>, <3>], [<1>, <4>, <2>, <5>, <0>, <6>, <3>], [<1>, <3>, <0>, <2>, <5>, <4>, <6>]]',)",0,63
topological_sort,"[(<1>, <2>), (<1>, <0>), (<2>, <0>), (<3>, <1>), (<4>, <3>)]","{<1>: [<2>, <0>],
<2>: [<0>],
<0>: [],
<3>: [<1>],
<4>: [<3>]}","Node <1> is connected to nodes <2>, <0>.
Node <2> is connected to node <0>.
Node <3> is connected to node <1>.
Node <4> is connected to node <3>.","[<0>, <1>, <2>, <3>, <4>]",5,5,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<4>, <3>, <1>, <2>, <0>]","Let's solve it step by step.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
So the result of topological sorting is ","('[[<4>, <3>, <1>, <2>, <0>], [<4>, <0>, <3>, <1>, <2>], [<4>, <3>, <2>, <1>, <0>], [<4>, <0>, <2>, <1>, <3>]]',)",0,64
topological_sort,"[(<1>, <0>), (<1>, <2>), (<0>, <3>), (<0>, <2>), (<2>, <4>), (<3>, <4>)]","{<1>: [<0>, <2>],
<0>: [<3>, <2>],
<2>: [<4>],
<3>: [<4>],
<4>: []}","Node <1> is connected to nodes <0>, <2>.
Node <0> is connected to nodes <3>, <2>.
Node <2> is connected to node <4>.
Node <3> is connected to node <4>.","[<0>, <1>, <2>, <3>, <4>]",5,6,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<1>, <0>, <3>, <2>, <4>]","Let's solve it step by step.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <2>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
So the result of topological sorting is ","('[[<1>, <4>, <0>, <3>, <2>], [<1>, <0>, <2>, <4>, <3>], [<1>, <3>, <4>, <2>, <0>], [<1>, <0>, <3>, <2>, <4>]]',)",3,65
topological_sort,"[(<2>, <4>), (<2>, <1>), (<2>, <3>), (<4>, <0>), (<4>, <3>), (<1>, <4>), (<1>, <0>), (<0>, <3>), (<6>, <4>), (<6>, <0>), (<6>, <5>), (<5>, <1>), (<5>, <4>)]","{<2>: [<4>, <1>, <3>],
<4>: [<0>, <3>],
<1>: [<4>, <0>],
<3>: [],
<0>: [<3>],
<6>: [<4>, <0>, <5>],
<5>: [<1>, <4>]}","Node <2> is connected to nodes <4>, <1>, <3>.
Node <4> is connected to nodes <0>, <3>.
Node <1> is connected to nodes <4>, <0>.
Node <0> is connected to node <3>.
Node <6> is connected to nodes <4>, <0>, <5>.
Node <5> is connected to nodes <1>, <4>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,13,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<2>, <6>, <5>, <1>, <4>, <0>, <3>]","Let's solve it step by step.
Nodes with 0 in-degree: [<2>, <6>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
So the result of topological sorting is ","('[[<2>, <6>, <5>, <0>, <4>, <1>, <3>], [<2>, <3>, <4>, <0>, <5>, <1>, <6>], [<2>, <6>, <0>, <3>, <5>, <1>, <4>], [<2>, <6>, <5>, <1>, <4>, <0>, <3>]]',)",3,66
topological_sort,"[(<3>, <1>), (<3>, <5>), (<3>, <4>), (<5>, <0>), (<5>, <1>), (<0>, <4>), (<0>, <1>), (<2>, <0>), (<2>, <3>), (<2>, <4>)]","{<3>: [<1>, <5>, <4>],
<1>: [],
<5>: [<0>, <1>],
<4>: [],
<0>: [<4>, <1>],
<2>: [<0>, <3>, <4>]}","Node <3> is connected to nodes <1>, <5>, <4>.
Node <5> is connected to nodes <0>, <1>.
Node <0> is connected to nodes <4>, <1>.
Node <2> is connected to nodes <0>, <3>, <4>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,10,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<2>, <3>, <5>, <0>, <4>, <1>]","Let's solve it step by step.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <1>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
So the result of topological sorting is ","('[[<2>, <3>, <5>, <0>, <4>, <1>], [<2>, <3>, <4>, <1>, <5>, <0>], [<2>, <1>, <5>, <0>, <4>, <3>], [<2>, <3>, <5>, <0>, <4>, <1>]]',)",0,67
topological_sort,"[(<0>, <3>), (<0>, <1>), (<0>, <4>), (<3>, <4>), (<4>, <1>), (<2>, <0>), (<2>, <3>), (<2>, <4>)]","{<0>: [<3>, <1>, <4>],
<3>: [<4>],
<1>: [],
<4>: [<1>],
<2>: [<0>, <3>, <4>]}","Node <0> is connected to nodes <3>, <1>, <4>.
Node <3> is connected to node <4>.
Node <4> is connected to node <1>.
Node <2> is connected to nodes <0>, <3>, <4>.","[<0>, <1>, <2>, <3>, <4>]",5,8,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<2>, <0>, <3>, <4>, <1>]","Let's solve it step by step.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
So the result of topological sorting is ","('[[<2>, <1>, <0>, <3>, <4>], [<2>, <0>, <3>, <4>, <1>], [<2>, <4>, <0>, <1>, <3>], [<2>, <0>, <3>, <4>, <1>]]',)",1,68
topological_sort,"[(<1>, <0>), (<1>, <4>), (<0>, <5>), (<4>, <5>), (<6>, <2>), (<6>, <5>), (<6>, <1>), (<2>, <5>), (<3>, <4>), (<3>, <1>), (<3>, <5>), (<3>, <2>)]","{<1>: [<0>, <4>],
<0>: [<5>],
<4>: [<5>],
<5>: [],
<6>: [<2>, <5>, <1>],
<2>: [<5>],
<3>: [<4>, <1>, <5>, <2>]}","Node <1> is connected to nodes <0>, <4>.
Node <0> is connected to node <5>.
Node <4> is connected to node <5>.
Node <6> is connected to nodes <2>, <5>, <1>.
Node <2> is connected to node <5>.
Node <3> is connected to nodes <4>, <1>, <5>, <2>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,12,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<6>, <3>, <1>, <2>, <0>, <4>, <5>]","Let's solve it step by step.
Nodes with 0 in-degree: [<6>, <3>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <2>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <0>, <4>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <4>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
So the result of topological sorting is ","('[[<6>, <3>, <1>, <2>, <0>, <4>, <5>], [<6>, <3>, <1>, <2>, <5>, <4>, <0>], [<6>, <5>, <0>, <4>, <3>, <1>, <2>], [<6>, <3>, <4>, <5>, <1>, <2>, <0>]]',)",0,69
topological_sort,"[(<6>, <0>), (<6>, <5>), (<0>, <5>), (<3>, <2>), (<3>, <0>), (<3>, <1>), (<3>, <6>), (<1>, <0>), (<1>, <6>), (<4>, <1>), (<4>, <0>)]","{<6>: [<0>, <5>],
<0>: [<5>],
<5>: [],
<3>: [<2>, <0>, <1>, <6>],
<2>: [],
<1>: [<0>, <6>],
<4>: [<1>, <0>]}","Node <6> is connected to nodes <0>, <5>.
Node <0> is connected to node <5>.
Node <3> is connected to nodes <2>, <0>, <1>, <6>.
Node <1> is connected to nodes <0>, <6>.
Node <4> is connected to nodes <1>, <0>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,11,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<3>, <4>, <2>, <1>, <6>, <0>, <5>]","Let's solve it step by step.
Nodes with 0 in-degree: [<3>, <4>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <2>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <1>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
So the result of topological sorting is ","('[[<3>, <1>, <0>, <2>, <4>, <5>, <6>], [<3>, <4>, <2>, <1>, <6>, <0>, <5>], [<3>, <4>, <2>, <6>, <5>, <0>, <1>], [<3>, <4>, <0>, <5>, <2>, <1>, <6>]]',)",1,70
topological_sort,"[(<5>, <2>), (<5>, <1>), (<5>, <0>), (<2>, <1>), (<0>, <4>), (<0>, <2>), (<4>, <2>), (<3>, <4>), (<3>, <5>)]","{<5>: [<2>, <1>, <0>],
<2>: [<1>],
<1>: [],
<0>: [<4>, <2>],
<4>: [<2>],
<3>: [<4>, <5>]}","Node <5> is connected to nodes <2>, <1>, <0>.
Node <2> is connected to node <1>.
Node <0> is connected to nodes <4>, <2>.
Node <4> is connected to node <2>.
Node <3> is connected to nodes <4>, <5>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,9,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<3>, <5>, <0>, <4>, <2>, <1>]","Let's solve it step by step.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
So the result of topological sorting is ","('[[<3>, <5>, <0>, <4>, <2>, <1>], [<3>, <5>, <4>, <1>, <0>, <2>], [<3>, <5>, <0>, <4>, <2>, <1>], [<3>, <5>, <2>, <1>, <0>, <4>]]',)",2,71
topological_sort,"[(<5>, <2>), (<5>, <0>), (<5>, <4>), (<5>, <1>), (<0>, <1>), (<4>, <1>), (<1>, <3>), (<1>, <2>)]","{<5>: [<2>, <0>, <4>, <1>],
<2>: [],
<0>: [<1>],
<4>: [<1>],
<1>: [<3>, <2>],
<3>: []}","Node <5> is connected to nodes <2>, <0>, <4>, <1>.
Node <0> is connected to node <1>.
Node <4> is connected to node <1>.
Node <1> is connected to nodes <3>, <2>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,8,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<5>, <0>, <4>, <1>, <3>, <2>]","Let's solve it step by step.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <4>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <2>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
So the result of topological sorting is ","('[[<5>, <0>, <1>, <4>, <2>, <3>], [<5>, <0>, <3>, <2>, <4>, <1>], [<5>, <0>, <4>, <1>, <3>, <2>], [<5>, <0>, <4>, <2>, <1>, <3>]]',)",2,72
topological_sort,"[(<2>, <3>), (<3>, <1>), (<0>, <3>), (<0>, <2>), (<0>, <1>), (<4>, <2>)]","{<2>: [<3>],
<3>: [<1>],
<1>: [],
<0>: [<3>, <2>, <1>],
<4>: [<2>]}","Node <2> is connected to node <3>.
Node <3> is connected to node <1>.
Node <0> is connected to nodes <3>, <2>, <1>.
Node <4> is connected to node <2>.","[<0>, <1>, <2>, <3>, <4>]",5,6,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<0>, <4>, <2>, <3>, <1>]","Let's solve it step by step.
Nodes with 0 in-degree: [<0>, <4>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
So the result of topological sorting is ","('[[<0>, <1>, <4>, <2>, <3>], [<0>, <4>, <1>, <2>, <3>], [<0>, <4>, <2>, <3>, <1>], [<0>, <3>, <4>, <1>, <2>]]',)",2,73
topological_sort,"[(<2>, <0>), (<2>, <1>), (<1>, <5>), (<1>, <6>), (<1>, <3>), (<4>, <2>), (<4>, <1>), (<5>, <0>), (<3>, <5>), (<3>, <0>)]","{<2>: [<0>, <1>],
<0>: [],
<1>: [<5>, <6>, <3>],
<4>: [<2>, <1>],
<5>: [<0>],
<6>: [],
<3>: [<5>, <0>]}","Node <2> is connected to nodes <0>, <1>.
Node <1> is connected to nodes <5>, <6>, <3>.
Node <4> is connected to nodes <2>, <1>.
Node <5> is connected to node <0>.
Node <3> is connected to nodes <5>, <0>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,10,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<4>, <2>, <1>, <6>, <3>, <5>, <0>]","Let's solve it step by step.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <3>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
So the result of topological sorting is ","('[[<4>, <6>, <3>, <2>, <0>, <1>, <5>], [<4>, <2>, <1>, <0>, <6>, <5>, <3>], [<4>, <2>, <5>, <0>, <1>, <6>, <3>], [<4>, <2>, <1>, <6>, <3>, <5>, <0>]]',)",3,74
topological_sort,"[(<2>, <0>), (<1>, <3>), (<1>, <2>), (<3>, <4>), (<3>, <0>)]","{<2>: [<0>],
<0>: [],
<1>: [<3>, <2>],
<3>: [<4>, <0>],
<4>: []}","Node <2> is connected to node <0>.
Node <1> is connected to nodes <3>, <2>.
Node <3> is connected to nodes <4>, <0>.","[<0>, <1>, <2>, <3>, <4>]",5,5,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<1>, <3>, <2>, <4>, <0>]","Let's solve it step by step.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <2>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <4>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <0>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
So the result of topological sorting is ","('[[<1>, <0>, <3>, <2>, <4>], [<1>, <3>, <2>, <4>, <0>], [<1>, <3>, <4>, <0>, <2>], [<1>, <4>, <2>, <3>, <0>]]',)",1,75
topological_sort,"[(<4>, <0>), (<4>, <5>), (<4>, <2>), (<0>, <2>), (<5>, <1>), (<5>, <2>), (<5>, <0>), (<5>, <3>), (<1>, <0>), (<3>, <2>)]","{<4>: [<0>, <5>, <2>],
<0>: [<2>],
<5>: [<1>, <2>, <0>, <3>],
<2>: [],
<1>: [<0>],
<3>: [<2>]}","Node <4> is connected to nodes <0>, <5>, <2>.
Node <0> is connected to node <2>.
Node <5> is connected to nodes <1>, <2>, <0>, <3>.
Node <1> is connected to node <0>.
Node <3> is connected to node <2>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,10,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<4>, <5>, <1>, <3>, <0>, <2>]","Let's solve it step by step.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <3>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <0>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
So the result of topological sorting is ","('[[<4>, <5>, <0>, <2>, <1>, <3>], [<4>, <5>, <1>, <2>, <0>, <3>], [<4>, <5>, <1>, <3>, <0>, <2>], [<4>, <3>, <2>, <1>, <5>, <0>]]',)",2,76
topological_sort,"[(<2>, <4>), (<0>, <4>), (<0>, <1>), (<0>, <3>), (<3>, <6>), (<3>, <5>), (<6>, <2>), (<6>, <1>), (<5>, <1>), (<5>, <2>)]","{<2>: [<4>],
<4>: [],
<0>: [<4>, <1>, <3>],
<1>: [],
<3>: [<6>, <5>],
<6>: [<2>, <1>],
<5>: [<1>, <2>]}","Node <2> is connected to node <4>.
Node <0> is connected to nodes <4>, <1>, <3>.
Node <3> is connected to nodes <6>, <5>.
Node <6> is connected to nodes <2>, <1>.
Node <5> is connected to nodes <1>, <2>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,10,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<0>, <3>, <6>, <5>, <1>, <2>, <4>]","Let's solve it step by step.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <5>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <2>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
So the result of topological sorting is ","('[[<0>, <3>, <6>, <5>, <1>, <2>, <4>], [<0>, <3>, <6>, <2>, <5>, <1>, <4>], [<0>, <4>, <2>, <6>, <1>, <5>, <3>], [<0>, <3>, <2>, <4>, <6>, <5>, <1>]]',)",0,77
topological_sort,"[(<4>, <2>), (<0>, <4>), (<0>, <3>), (<5>, <0>), (<1>, <5>), (<1>, <3>)]","{<4>: [<2>],
<2>: [],
<0>: [<4>, <3>],
<3>: [],
<5>: [<0>],
<1>: [<5>, <3>]}","Node <4> is connected to node <2>.
Node <0> is connected to nodes <4>, <3>.
Node <5> is connected to node <0>.
Node <1> is connected to nodes <5>, <3>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,6,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<1>, <5>, <0>, <4>, <3>, <2>]","Let's solve it step by step.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <3>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <2>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
So the result of topological sorting is ","('[[<1>, <5>, <3>, <2>, <0>, <4>], [<1>, <3>, <0>, <2>, <4>, <5>], [<1>, <5>, <0>, <4>, <3>, <2>], [<1>, <5>, <0>, <4>, <3>, <2>]]',)",3,78
topological_sort,"[(<4>, <1>), (<1>, <3>), (<0>, <1>), (<0>, <4>), (<2>, <1>), (<5>, <2>)]","{<4>: [<1>],
<1>: [<3>],
<3>: [],
<0>: [<1>, <4>],
<2>: [<1>],
<5>: [<2>]}","Node <4> is connected to node <1>.
Node <1> is connected to node <3>.
Node <0> is connected to nodes <1>, <4>.
Node <2> is connected to node <1>.
Node <5> is connected to node <2>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,6,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<0>, <5>, <4>, <2>, <1>, <3>]","Let's solve it step by step.
Nodes with 0 in-degree: [<0>, <5>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <4>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <2>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
So the result of topological sorting is ","('[[<0>, <5>, <1>, <3>, <4>, <2>], [<0>, <5>, <4>, <2>, <1>, <3>], [<0>, <5>, <4>, <2>, <1>, <3>], [<0>, <2>, <3>, <1>, <4>, <5>]]',)",1,79
topological_sort,"[(<0>, <1>), (<1>, <2>), (<3>, <1>), (<4>, <2>), (<4>, <0>), (<4>, <3>)]","{<0>: [<1>],
<1>: [<2>],
<2>: [],
<3>: [<1>],
<4>: [<2>, <0>, <3>]}","Node <0> is connected to node <1>.
Node <1> is connected to node <2>.
Node <3> is connected to node <1>.
Node <4> is connected to nodes <2>, <0>, <3>.","[<0>, <1>, <2>, <3>, <4>]",5,6,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<4>, <0>, <3>, <1>, <2>]","Let's solve it step by step.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <3>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
So the result of topological sorting is ","('[[<4>, <0>, <3>, <1>, <2>], [<4>, <0>, <2>, <1>, <3>], [<4>, <2>, <0>, <1>, <3>], [<4>, <2>, <0>, <3>, <1>]]',)",0,80
topological_sort,"[(<2>, <1>), (<2>, <3>), (<2>, <0>), (<1>, <0>), (<1>, <3>), (<4>, <3>), (<4>, <1>)]","{<2>: [<1>, <3>, <0>],
<1>: [<0>, <3>],
<3>: [],
<0>: [],
<4>: [<3>, <1>]}","Node <2> is connected to nodes <1>, <3>, <0>.
Node <1> is connected to nodes <0>, <3>.
Node <4> is connected to nodes <3>, <1>.","[<0>, <1>, <2>, <3>, <4>]",5,7,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<2>, <4>, <1>, <0>, <3>]","Let's solve it step by step.
Nodes with 0 in-degree: [<2>, <4>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <3>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
So the result of topological sorting is ","('[[<2>, <4>, <1>, <0>, <3>], [<2>, <3>, <4>, <1>, <0>], [<2>, <1>, <4>, <3>, <0>], [<2>, <4>, <1>, <0>, <3>]]',)",3,81
topological_sort,"[(<2>, <6>), (<6>, <4>), (<0>, <4>), (<0>, <2>), (<0>, <6>), (<0>, <3>), (<3>, <2>), (<3>, <1>), (<5>, <0>), (<5>, <3>), (<5>, <4>), (<5>, <1>)]","{<2>: [<6>],
<6>: [<4>],
<4>: [],
<0>: [<4>, <2>, <6>, <3>],
<3>: [<2>, <1>],
<1>: [],
<5>: [<0>, <3>, <4>, <1>]}","Node <2> is connected to node <6>.
Node <6> is connected to node <4>.
Node <0> is connected to nodes <4>, <2>, <6>, <3>.
Node <3> is connected to nodes <2>, <1>.
Node <5> is connected to nodes <0>, <3>, <4>, <1>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,12,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<5>, <0>, <3>, <2>, <1>, <6>, <4>]","Let's solve it step by step.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <1>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <6>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
So the result of topological sorting is ","('[[<5>, <0>, <3>, <2>, <1>, <6>, <4>], [<5>, <0>, <3>, <6>, <1>, <4>, <2>], [<5>, <0>, <6>, <4>, <3>, <2>, <1>], [<5>, <0>, <6>, <1>, <3>, <2>, <4>]]',)",0,82
topological_sort,"[(<2>, <3>), (<0>, <4>), (<0>, <1>), (<1>, <2>), (<1>, <4>)]","{<2>: [<3>],
<3>: [],
<0>: [<4>, <1>],
<4>: [],
<1>: [<2>, <4>]}","Node <2> is connected to node <3>.
Node <0> is connected to nodes <4>, <1>.
Node <1> is connected to nodes <2>, <4>.","[<0>, <1>, <2>, <3>, <4>]",5,5,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<0>, <1>, <2>, <4>, <3>]","Let's solve it step by step.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <4>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <3>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
So the result of topological sorting is ","('[[<0>, <1>, <4>, <3>, <2>], [<0>, <1>, <2>, <4>, <3>], [<0>, <3>, <1>, <2>, <4>], [<0>, <3>, <2>, <4>, <1>]]',)",1,83
topological_sort,"[(<1>, <0>), (<1>, <3>), (<1>, <2>), (<0>, <6>), (<0>, <2>), (<3>, <2>), (<3>, <6>), (<4>, <2>), (<4>, <5>), (<5>, <0>), (<5>, <3>)]","{<1>: [<0>, <3>, <2>],
<0>: [<6>, <2>],
<3>: [<2>, <6>],
<2>: [],
<6>: [],
<4>: [<2>, <5>],
<5>: [<0>, <3>]}","Node <1> is connected to nodes <0>, <3>, <2>.
Node <0> is connected to nodes <6>, <2>.
Node <3> is connected to nodes <2>, <6>.
Node <4> is connected to nodes <2>, <5>.
Node <5> is connected to nodes <0>, <3>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,11,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<1>, <4>, <5>, <0>, <3>, <2>, <6>]","Let's solve it step by step.
Nodes with 0 in-degree: [<1>, <4>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <3>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <6>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
So the result of topological sorting is ","('[[<1>, <4>, <5>, <3>, <6>, <0>, <2>], [<1>, <4>, <3>, <2>, <0>, <5>, <6>], [<1>, <4>, <2>, <6>, <5>, <0>, <3>], [<1>, <4>, <5>, <0>, <3>, <2>, <6>]]',)",3,84
topological_sort,"[(<2>, <5>), (<5>, <4>), (<4>, <3>), (<0>, <2>), (<3>, <1>)]","{<2>: [<5>],
<5>: [<4>],
<4>: [<3>],
<0>: [<2>],
<3>: [<1>],
<1>: []}","Node <2> is connected to node <5>.
Node <5> is connected to node <4>.
Node <4> is connected to node <3>.
Node <0> is connected to node <2>.
Node <3> is connected to node <1>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,5,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<0>, <2>, <5>, <4>, <3>, <1>]","Let's solve it step by step.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
So the result of topological sorting is ","('[[<0>, <2>, <5>, <3>, <4>, <1>], [<0>, <2>, <5>, <4>, <3>, <1>], [<0>, <2>, <3>, <1>, <5>, <4>], [<0>, <3>, <4>, <1>, <5>, <2>]]',)",1,85
topological_sort,"[(<2>, <4>), (<2>, <3>), (<4>, <1>), (<4>, <0>), (<0>, <3>)]","{<2>: [<4>, <3>],
<4>: [<1>, <0>],
<3>: [],
<1>: [],
<0>: [<3>]}","Node <2> is connected to nodes <4>, <3>.
Node <4> is connected to nodes <1>, <0>.
Node <0> is connected to node <3>.","[<0>, <1>, <2>, <3>, <4>]",5,5,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<2>, <4>, <1>, <0>, <3>]","Let's solve it step by step.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <0>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
So the result of topological sorting is ","('[[<2>, <3>, <4>, <1>, <0>], [<2>, <4>, <1>, <3>, <0>], [<2>, <4>, <1>, <0>, <3>], [<2>, <0>, <4>, <3>, <1>]]',)",2,86
topological_sort,"[(<2>, <1>), (<1>, <4>), (<1>, <0>), (<1>, <3>), (<0>, <3>), (<3>, <5>)]","{<2>: [<1>],
<1>: [<4>, <0>, <3>],
<4>: [],
<0>: [<3>],
<3>: [<5>],
<5>: []}","Node <2> is connected to node <1>.
Node <1> is connected to nodes <4>, <0>, <3>.
Node <0> is connected to node <3>.
Node <3> is connected to node <5>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,6,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<2>, <1>, <4>, <0>, <3>, <5>]","Let's solve it step by step.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <0>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
So the result of topological sorting is ","('[[<2>, <1>, <4>, <0>, <3>, <5>], [<2>, <1>, <4>, <5>, <3>, <0>], [<2>, <1>, <3>, <5>, <4>, <0>], [<2>, <4>, <3>, <0>, <1>, <5>]]',)",0,87
topological_sort,"[(<2>, <3>), (<2>, <4>), (<3>, <0>), (<4>, <3>), (<1>, <0>), (<1>, <2>)]","{<2>: [<3>, <4>],
<3>: [<0>],
<4>: [<3>],
<0>: [],
<1>: [<0>, <2>]}","Node <2> is connected to nodes <3>, <4>.
Node <3> is connected to node <0>.
Node <4> is connected to node <3>.
Node <1> is connected to nodes <0>, <2>.","[<0>, <1>, <2>, <3>, <4>]",5,6,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<1>, <2>, <4>, <3>, <0>]","Let's solve it step by step.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
So the result of topological sorting is ","('[[<1>, <0>, <2>, <4>, <3>], [<1>, <2>, <4>, <3>, <0>], [<1>, <2>, <4>, <3>, <0>], [<1>, <2>, <0>, <3>, <4>]]',)",2,88
topological_sort,"[(<0>, <2>), (<0>, <1>), (<3>, <4>), (<4>, <1>), (<4>, <0>)]","{<0>: [<2>, <1>],
<2>: [],
<1>: [],
<3>: [<4>],
<4>: [<1>, <0>]}","Node <0> is connected to nodes <2>, <1>.
Node <3> is connected to node <4>.
Node <4> is connected to nodes <1>, <0>.","[<0>, <1>, <2>, <3>, <4>]",5,5,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<3>, <4>, <0>, <2>, <1>]","Let's solve it step by step.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <1>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
So the result of topological sorting is ","('[[<3>, <4>, <0>, <2>, <1>], [<3>, <4>, <2>, <0>, <1>], [<3>, <1>, <2>, <0>, <4>], [<3>, <1>, <4>, <0>, <2>]]',)",0,89
topological_sort,"[(<3>, <2>), (<3>, <0>), (<0>, <1>), (<0>, <2>), (<1>, <2>), (<5>, <2>), (<5>, <4>)]","{<3>: [<2>, <0>],
<2>: [],
<0>: [<1>, <2>],
<1>: [<2>],
<5>: [<2>, <4>],
<4>: []}","Node <3> is connected to nodes <2>, <0>.
Node <0> is connected to nodes <1>, <2>.
Node <1> is connected to node <2>.
Node <5> is connected to nodes <2>, <4>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,7,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<3>, <5>, <0>, <4>, <1>, <2>]","Let's solve it step by step.
Nodes with 0 in-degree: [<3>, <5>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <0>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <4>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <1>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
So the result of topological sorting is ","('[[<3>, <0>, <5>, <4>, <1>, <2>], [<3>, <5>, <1>, <2>, <0>, <4>], [<3>, <5>, <0>, <2>, <1>, <4>], [<3>, <5>, <0>, <4>, <1>, <2>]]',)",3,90
topological_sort,"[(<5>, <3>), (<5>, <4>), (<5>, <1>), (<5>, <0>), (<5>, <2>), (<3>, <2>), (<3>, <1>), (<3>, <0>), (<4>, <3>), (<0>, <2>), (<2>, <1>)]","{<5>: [<3>, <4>, <1>, <0>, <2>],
<3>: [<2>, <1>, <0>],
<4>: [<3>],
<1>: [],
<0>: [<2>],
<2>: [<1>]}","Node <5> is connected to nodes <3>, <4>, <1>, <0>, <2>.
Node <3> is connected to nodes <2>, <1>, <0>.
Node <4> is connected to node <3>.
Node <0> is connected to node <2>.
Node <2> is connected to node <1>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,11,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<5>, <4>, <3>, <0>, <2>, <1>]","Let's solve it step by step.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
So the result of topological sorting is ","('[[<5>, <4>, <3>, <0>, <2>, <1>], [<5>, <4>, <2>, <1>, <3>, <0>], [<5>, <4>, <3>, <0>, <1>, <2>], [<5>, <4>, <3>, <1>, <2>, <0>]]',)",0,91
topological_sort,"[(<0>, <4>), (<0>, <5>), (<5>, <4>), (<1>, <2>), (<1>, <4>), (<3>, <2>), (<3>, <5>), (<3>, <1>)]","{<0>: [<4>, <5>],
<4>: [],
<5>: [<4>],
<1>: [<2>, <4>],
<2>: [],
<3>: [<2>, <5>, <1>]}","Node <0> is connected to nodes <4>, <5>.
Node <5> is connected to node <4>.
Node <1> is connected to nodes <2>, <4>.
Node <3> is connected to nodes <2>, <5>, <1>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,8,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<0>, <3>, <5>, <1>, <2>, <4>]","Let's solve it step by step.
Nodes with 0 in-degree: [<0>, <3>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <1>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <4>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
So the result of topological sorting is ","('[[<0>, <3>, <5>, <4>, <1>, <2>], [<0>, <3>, <2>, <4>, <5>, <1>], [<0>, <3>, <4>, <5>, <2>, <1>], [<0>, <3>, <5>, <1>, <2>, <4>]]',)",3,92
topological_sort,"[(<3>, <4>), (<3>, <1>), (<4>, <1>), (<0>, <1>), (<0>, <3>), (<0>, <4>), (<2>, <0>)]","{<3>: [<4>, <1>],
<4>: [<1>],
<1>: [],
<0>: [<1>, <3>, <4>],
<2>: [<0>]}","Node <3> is connected to nodes <4>, <1>.
Node <4> is connected to node <1>.
Node <0> is connected to nodes <1>, <3>, <4>.
Node <2> is connected to node <0>.","[<0>, <1>, <2>, <3>, <4>]",5,7,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<2>, <0>, <3>, <4>, <1>]","Let's solve it step by step.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
So the result of topological sorting is ","('[[<2>, <0>, <3>, <4>, <1>], [<2>, <1>, <0>, <3>, <4>], [<2>, <0>, <3>, <1>, <4>], [<2>, <1>, <0>, <4>, <3>]]',)",0,93
topological_sort,"[(<2>, <4>), (<2>, <0>), (<4>, <0>), (<1>, <4>), (<1>, <3>), (<3>, <2>), (<3>, <4>)]","{<2>: [<4>, <0>],
<4>: [<0>],
<0>: [],
<1>: [<4>, <3>],
<3>: [<2>, <4>]}","Node <2> is connected to nodes <4>, <0>.
Node <4> is connected to node <0>.
Node <1> is connected to nodes <4>, <3>.
Node <3> is connected to nodes <2>, <4>.","[<0>, <1>, <2>, <3>, <4>]",5,7,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<1>, <3>, <2>, <4>, <0>]","Let's solve it step by step.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
So the result of topological sorting is ","('[[<1>, <3>, <2>, <4>, <0>], [<1>, <0>, <3>, <2>, <4>], [<1>, <2>, <3>, <4>, <0>], [<1>, <3>, <2>, <4>, <0>]]',)",3,94
topological_sort,"[(<2>, <4>), (<2>, <1>), (<1>, <4>), (<3>, <4>), (<3>, <0>), (<0>, <1>)]","{<2>: [<4>, <1>],
<4>: [],
<1>: [<4>],
<3>: [<4>, <0>],
<0>: [<1>]}","Node <2> is connected to nodes <4>, <1>.
Node <1> is connected to node <4>.
Node <3> is connected to nodes <4>, <0>.
Node <0> is connected to node <1>.","[<0>, <1>, <2>, <3>, <4>]",5,6,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<2>, <3>, <0>, <1>, <4>]","Let's solve it step by step.
Nodes with 0 in-degree: [<2>, <3>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
So the result of topological sorting is ","('[[<2>, <3>, <0>, <1>, <4>], [<2>, <4>, <3>, <0>, <1>], [<2>, <3>, <1>, <0>, <4>], [<2>, <3>, <1>, <0>, <4>]]',)",0,95
topological_sort,"[(<0>, <1>), (<0>, <6>), (<1>, <6>), (<4>, <3>), (<4>, <6>), (<4>, <0>), (<4>, <1>), (<4>, <5>), (<3>, <1>), (<3>, <6>), (<3>, <5>), (<5>, <6>), (<5>, <0>), (<5>, <2>), (<5>, <1>), (<2>, <1>), (<2>, <0>), (<2>, <6>)]","{<0>: [<1>, <6>],
<1>: [<6>],
<6>: [],
<4>: [<3>, <6>, <0>, <1>, <5>],
<3>: [<1>, <6>, <5>],
<5>: [<6>, <0>, <2>, <1>],
<2>: [<1>, <0>, <6>]}","Node <0> is connected to nodes <1>, <6>.
Node <1> is connected to node <6>.
Node <4> is connected to nodes <3>, <6>, <0>, <1>, <5>.
Node <3> is connected to nodes <1>, <6>, <5>.
Node <5> is connected to nodes <6>, <0>, <2>, <1>.
Node <2> is connected to nodes <1>, <0>, <6>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,18,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<4>, <3>, <5>, <2>, <0>, <1>, <6>]","Let's solve it step by step.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
So the result of topological sorting is ","('[[<4>, <3>, <0>, <5>, <1>, <6>, <2>], [<4>, <3>, <5>, <2>, <0>, <6>, <1>], [<4>, <3>, <5>, <2>, <0>, <1>, <6>], [<4>, <3>, <1>, <6>, <5>, <2>, <0>]]',)",2,96
topological_sort,"[(<0>, <4>), (<0>, <3>), (<0>, <2>), (<0>, <1>), (<4>, <3>), (<3>, <1>), (<2>, <3>), (<2>, <4>)]","{<0>: [<4>, <3>, <2>, <1>],
<4>: [<3>],
<3>: [<1>],
<2>: [<3>, <4>],
<1>: []}","Node <0> is connected to nodes <4>, <3>, <2>, <1>.
Node <4> is connected to node <3>.
Node <3> is connected to node <1>.
Node <2> is connected to nodes <3>, <4>.","[<0>, <1>, <2>, <3>, <4>]",5,8,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<0>, <2>, <4>, <3>, <1>]","Let's solve it step by step.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
So the result of topological sorting is ","('[[<0>, <2>, <4>, <3>, <1>], [<0>, <2>, <4>, <3>, <1>], [<0>, <4>, <3>, <2>, <1>], [<0>, <1>, <2>, <4>, <3>]]',)",1,97
topological_sort,"[(<1>, <4>), (<1>, <0>), (<1>, <6>), (<1>, <2>), (<1>, <3>), (<4>, <5>), (<0>, <5>), (<6>, <2>), (<6>, <5>), (<6>, <3>), (<6>, <4>), (<2>, <3>), (<3>, <4>)]","{<1>: [<4>, <0>, <6>, <2>, <3>],
<4>: [<5>],
<0>: [<5>],
<6>: [<2>, <5>, <3>, <4>],
<2>: [<3>],
<3>: [<4>],
<5>: []}","Node <1> is connected to nodes <4>, <0>, <6>, <2>, <3>.
Node <4> is connected to node <5>.
Node <0> is connected to node <5>.
Node <6> is connected to nodes <2>, <5>, <3>, <4>.
Node <2> is connected to node <3>.
Node <3> is connected to node <4>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,13,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<1>, <0>, <6>, <2>, <3>, <4>, <5>]","Let's solve it step by step.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <6>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
So the result of topological sorting is ","('[[<1>, <0>, <6>, <2>, <3>, <4>, <5>], [<1>, <0>, <4>, <5>, <6>, <2>, <3>], [<1>, <5>, <4>, <6>, <3>, <2>, <0>], [<1>, <0>, <6>, <2>, <5>, <4>, <3>]]',)",0,98
topological_sort,"[(<0>, <4>), (<0>, <5>), (<5>, <4>), (<2>, <0>), (<2>, <3>), (<2>, <5>), (<3>, <4>), (<1>, <3>), (<1>, <5>)]","{<0>: [<4>, <5>],
<4>: [],
<5>: [<4>],
<2>: [<0>, <3>, <5>],
<3>: [<4>],
<1>: [<3>, <5>]}","Node <0> is connected to nodes <4>, <5>.
Node <5> is connected to node <4>.
Node <2> is connected to nodes <0>, <3>, <5>.
Node <3> is connected to node <4>.
Node <1> is connected to nodes <3>, <5>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,9,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<2>, <1>, <0>, <3>, <5>, <4>]","Let's solve it step by step.
Nodes with 0 in-degree: [<2>, <1>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <0>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <3>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <5>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
So the result of topological sorting is ","('[[<2>, <1>, <5>, <4>, <0>, <3>], [<2>, <1>, <0>, <4>, <5>, <3>], [<2>, <4>, <3>, <5>, <0>, <1>], [<2>, <1>, <0>, <3>, <5>, <4>]]',)",3,99
topological_sort,"[(<3>, <0>), (<3>, <4>), (<0>, <2>), (<2>, <1>)]","{<3>: [<0>, <4>],
<0>: [<2>],
<4>: [],
<2>: [<1>],
<1>: []}","Node <3> is connected to nodes <0>, <4>.
Node <0> is connected to node <2>.
Node <2> is connected to node <1>.","[<0>, <1>, <2>, <3>, <4>]",5,4,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<3>, <0>, <4>, <2>, <1>]","Let's solve it step by step.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <4>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <2>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
So the result of topological sorting is ","('[[<3>, <2>, <0>, <4>, <1>], [<3>, <0>, <4>, <2>, <1>], [<3>, <0>, <2>, <4>, <1>], [<3>, <1>, <0>, <4>, <2>]]',)",1,100
topological_sort,"[(<3>, <1>), (<1>, <2>), (<2>, <5>), (<2>, <0>), (<6>, <3>), (<4>, <6>)]","{<3>: [<1>],
<1>: [<2>],
<2>: [<5>, <0>],
<5>: [],
<0>: [],
<6>: [<3>],
<4>: [<6>]}","Node <3> is connected to node <1>.
Node <1> is connected to node <2>.
Node <2> is connected to nodes <5>, <0>.
Node <6> is connected to node <3>.
Node <4> is connected to node <6>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,6,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<4>, <6>, <3>, <1>, <2>, <5>, <0>]","Let's solve it step by step.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <0>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
So the result of topological sorting is ","('[[<4>, <6>, <5>, <0>, <3>, <1>, <2>], [<4>, <6>, <3>, <1>, <2>, <5>, <0>], [<4>, <6>, <3>, <2>, <0>, <1>, <5>], [<4>, <5>, <2>, <0>, <6>, <1>, <3>]]',)",1,101
topological_sort,"[(<4>, <3>), (<4>, <5>), (<4>, <2>), (<3>, <5>), (<3>, <0>), (<3>, <2>), (<2>, <0>), (<2>, <1>)]","{<4>: [<3>, <5>, <2>],
<3>: [<5>, <0>, <2>],
<5>: [],
<2>: [<0>, <1>],
<0>: [],
<1>: []}","Node <4> is connected to nodes <3>, <5>, <2>.
Node <3> is connected to nodes <5>, <0>, <2>.
Node <2> is connected to nodes <0>, <1>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,8,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<4>, <3>, <5>, <2>, <0>, <1>]","Let's solve it step by step.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <2>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <1>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
So the result of topological sorting is ","('[[<4>, <3>, <5>, <2>, <0>, <1>], [<4>, <3>, <5>, <0>, <2>, <1>], [<4>, <3>, <0>, <1>, <5>, <2>], [<4>, <0>, <2>, <5>, <1>, <3>]]',)",0,102
topological_sort,"[(<0>, <5>), (<0>, <3>), (<0>, <1>), (<0>, <2>), (<5>, <3>), (<1>, <3>), (<1>, <5>), (<2>, <1>), (<2>, <5>), (<4>, <1>), (<4>, <0>), (<4>, <2>)]","{<0>: [<5>, <3>, <1>, <2>],
<5>: [<3>],
<3>: [],
<1>: [<3>, <5>],
<2>: [<1>, <5>],
<4>: [<1>, <0>, <2>]}","Node <0> is connected to nodes <5>, <3>, <1>, <2>.
Node <5> is connected to node <3>.
Node <1> is connected to nodes <3>, <5>.
Node <2> is connected to nodes <1>, <5>.
Node <4> is connected to nodes <1>, <0>, <2>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,12,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<4>, <0>, <2>, <1>, <5>, <3>]","Let's solve it step by step.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
So the result of topological sorting is ","('[[<4>, <3>, <1>, <5>, <0>, <2>], [<4>, <0>, <5>, <3>, <2>, <1>], [<4>, <0>, <2>, <1>, <5>, <3>], [<4>, <0>, <2>, <3>, <5>, <1>]]',)",2,103
topological_sort,"[(<5>, <1>), (<5>, <3>), (<5>, <4>), (<5>, <2>), (<1>, <2>), (<3>, <2>), (<3>, <1>), (<3>, <0>), (<3>, <6>), (<4>, <1>), (<4>, <3>), (<4>, <6>), (<0>, <2>), (<0>, <1>), (<6>, <0>)]","{<5>: [<1>, <3>, <4>, <2>],
<1>: [<2>],
<3>: [<2>, <1>, <0>, <6>],
<4>: [<1>, <3>, <6>],
<2>: [],
<0>: [<2>, <1>],
<6>: [<0>]}","Node <5> is connected to nodes <1>, <3>, <4>, <2>.
Node <1> is connected to node <2>.
Node <3> is connected to nodes <2>, <1>, <0>, <6>.
Node <4> is connected to nodes <1>, <3>, <6>.
Node <0> is connected to nodes <2>, <1>.
Node <6> is connected to node <0>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,15,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<5>, <4>, <3>, <6>, <0>, <1>, <2>]","Let's solve it step by step.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
So the result of topological sorting is ","('[[<5>, <4>, <3>, <2>, <6>, <0>, <1>], [<5>, <4>, <1>, <3>, <0>, <2>, <6>], [<5>, <4>, <3>, <6>, <0>, <1>, <2>], [<5>, <4>, <1>, <2>, <3>, <6>, <0>]]',)",2,104
topological_sort,"[(<1>, <4>), (<4>, <2>), (<4>, <0>), (<4>, <5>), (<4>, <6>), (<2>, <0>), (<5>, <3>), (<6>, <5>), (<6>, <2>), (<3>, <2>)]","{<1>: [<4>],
<4>: [<2>, <0>, <5>, <6>],
<2>: [<0>],
<0>: [],
<5>: [<3>],
<6>: [<5>, <2>],
<3>: [<2>]}","Node <1> is connected to node <4>.
Node <4> is connected to nodes <2>, <0>, <5>, <6>.
Node <2> is connected to node <0>.
Node <5> is connected to node <3>.
Node <6> is connected to nodes <5>, <2>.
Node <3> is connected to node <2>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,10,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<1>, <4>, <6>, <5>, <3>, <2>, <0>]","Let's solve it step by step.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
So the result of topological sorting is ","('[[<1>, <4>, <6>, <5>, <3>, <2>, <0>], [<1>, <4>, <2>, <0>, <6>, <5>, <3>], [<1>, <3>, <0>, <4>, <6>, <5>, <2>], [<1>, <4>, <6>, <2>, <3>, <5>, <0>]]',)",0,105
topological_sort,"[(<0>, <2>), (<2>, <3>), (<1>, <0>), (<1>, <3>), (<4>, <3>)]","{<0>: [<2>],
<2>: [<3>],
<3>: [],
<1>: [<0>, <3>],
<4>: [<3>]}","Node <0> is connected to node <2>.
Node <2> is connected to node <3>.
Node <1> is connected to nodes <0>, <3>.
Node <4> is connected to node <3>.","[<0>, <1>, <2>, <3>, <4>]",5,5,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<1>, <4>, <0>, <2>, <3>]","Let's solve it step by step.
Nodes with 0 in-degree: [<1>, <4>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <0>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
So the result of topological sorting is ","('[[<1>, <4>, <0>, <2>, <3>], [<1>, <4>, <2>, <0>, <3>], [<1>, <3>, <4>, <2>, <0>], [<1>, <3>, <4>, <0>, <2>]]',)",0,106
topological_sort,"[(<2>, <4>), (<4>, <1>), (<4>, <0>), (<0>, <1>), (<0>, <3>)]","{<2>: [<4>],
<4>: [<1>, <0>],
<1>: [],
<0>: [<1>, <3>],
<3>: []}","Node <2> is connected to node <4>.
Node <4> is connected to nodes <1>, <0>.
Node <0> is connected to nodes <1>, <3>.","[<0>, <1>, <2>, <3>, <4>]",5,5,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<2>, <4>, <0>, <1>, <3>]","Let's solve it step by step.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <3>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
So the result of topological sorting is ","('[[<2>, <3>, <4>, <0>, <1>], [<2>, <4>, <0>, <1>, <3>], [<2>, <4>, <1>, <0>, <3>], [<2>, <1>, <0>, <4>, <3>]]',)",1,107
topological_sort,"[(<4>, <6>), (<5>, <4>), (<5>, <1>), (<3>, <6>), (<3>, <2>), (<2>, <1>), (<2>, <6>), (<0>, <2>), (<0>, <6>)]","{<4>: [<6>],
<6>: [],
<5>: [<4>, <1>],
<1>: [],
<3>: [<6>, <2>],
<2>: [<1>, <6>],
<0>: [<2>, <6>]}","Node <4> is connected to node <6>.
Node <5> is connected to nodes <4>, <1>.
Node <3> is connected to nodes <6>, <2>.
Node <2> is connected to nodes <1>, <6>.
Node <0> is connected to nodes <2>, <6>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,9,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<5>, <3>, <0>, <4>, <2>, <1>, <6>]","Let's solve it step by step.
Nodes with 0 in-degree: [<5>, <3>, <0>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <0>, <4>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <4>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <2>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <6>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
So the result of topological sorting is ","('[[<5>, <3>, <0>, <1>, <2>, <4>, <6>], [<5>, <3>, <0>, <4>, <2>, <1>, <6>], [<5>, <3>, <1>, <6>, <0>, <4>, <2>], [<5>, <0>, <4>, <1>, <3>, <2>, <6>]]',)",1,108
topological_sort,"[(<4>, <2>), (<4>, <3>), (<0>, <1>), (<0>, <5>), (<5>, <3>), (<5>, <4>), (<6>, <4>), (<6>, <2>), (<6>, <1>)]","{<4>: [<2>, <3>],
<2>: [],
<3>: [],
<0>: [<1>, <5>],
<1>: [],
<5>: [<3>, <4>],
<6>: [<4>, <2>, <1>]}","Node <4> is connected to nodes <2>, <3>.
Node <0> is connected to nodes <1>, <5>.
Node <5> is connected to nodes <3>, <4>.
Node <6> is connected to nodes <4>, <2>, <1>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,9,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<0>, <6>, <5>, <1>, <4>, <2>, <3>]","Let's solve it step by step.
Nodes with 0 in-degree: [<0>, <6>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <5>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <1>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <4>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <3>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
So the result of topological sorting is ","('[[<0>, <6>, <5>, <1>, <4>, <2>, <3>], [<0>, <6>, <5>, <3>, <2>, <1>, <4>], [<0>, <4>, <5>, <6>, <1>, <3>, <2>], [<0>, <6>, <2>, <3>, <5>, <1>, <4>]]',)",0,109
topological_sort,"[(<1>, <5>), (<1>, <3>), (<1>, <4>), (<3>, <4>), (<0>, <2>), (<0>, <5>), (<2>, <3>), (<2>, <5>)]","{<1>: [<5>, <3>, <4>],
<5>: [],
<3>: [<4>],
<4>: [],
<0>: [<2>, <5>],
<2>: [<3>, <5>]}","Node <1> is connected to nodes <5>, <3>, <4>.
Node <3> is connected to node <4>.
Node <0> is connected to nodes <2>, <5>.
Node <2> is connected to nodes <3>, <5>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,8,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<1>, <0>, <2>, <3>, <5>, <4>]","Let's solve it step by step.
Nodes with 0 in-degree: [<1>, <0>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <5>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <4>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
So the result of topological sorting is ","('[[<1>, <0>, <2>, <3>, <5>, <4>], [<1>, <0>, <5>, <4>, <2>, <3>], [<1>, <0>, <4>, <5>, <2>, <3>], [<1>, <0>, <2>, <3>, <5>, <4>]]',)",3,110
topological_sort,"[(<2>, <0>), (<4>, <1>), (<1>, <2>), (<3>, <1>), (<3>, <0>), (<3>, <2>)]","{<2>: [<0>],
<0>: [],
<4>: [<1>],
<1>: [<2>],
<3>: [<1>, <0>, <2>]}","Node <2> is connected to node <0>.
Node <4> is connected to node <1>.
Node <1> is connected to node <2>.
Node <3> is connected to nodes <1>, <0>, <2>.","[<0>, <1>, <2>, <3>, <4>]",5,6,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<4>, <3>, <1>, <2>, <0>]","Let's solve it step by step.
Nodes with 0 in-degree: [<4>, <3>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
So the result of topological sorting is ","('[[<4>, <3>, <1>, <2>, <0>], [<4>, <0>, <3>, <1>, <2>], [<4>, <3>, <1>, <2>, <0>], [<4>, <1>, <0>, <2>, <3>]]',)",2,111
topological_sort,"[(<0>, <2>), (<0>, <1>), (<0>, <4>), (<2>, <1>), (<4>, <2>), (<3>, <4>), (<3>, <2>)]","{<0>: [<2>, <1>, <4>],
<2>: [<1>],
<1>: [],
<4>: [<2>],
<3>: [<4>, <2>]}","Node <0> is connected to nodes <2>, <1>, <4>.
Node <2> is connected to node <1>.
Node <4> is connected to node <2>.
Node <3> is connected to nodes <4>, <2>.","[<0>, <1>, <2>, <3>, <4>]",5,7,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<0>, <3>, <4>, <2>, <1>]","Let's solve it step by step.
Nodes with 0 in-degree: [<0>, <3>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
So the result of topological sorting is ","('[[<0>, <3>, <2>, <1>, <4>], [<0>, <1>, <3>, <4>, <2>], [<0>, <3>, <4>, <2>, <1>], [<0>, <1>, <2>, <4>, <3>]]',)",2,112
topological_sort,"[(<0>, <3>), (<0>, <6>), (<3>, <4>), (<6>, <4>), (<2>, <4>), (<2>, <0>), (<1>, <6>), (<1>, <5>), (<1>, <4>), (<1>, <0>), (<5>, <0>), (<5>, <2>), (<5>, <6>)]","{<0>: [<3>, <6>],
<3>: [<4>],
<6>: [<4>],
<4>: [],
<2>: [<4>, <0>],
<1>: [<6>, <5>, <4>, <0>],
<5>: [<0>, <2>, <6>]}","Node <0> is connected to nodes <3>, <6>.
Node <3> is connected to node <4>.
Node <6> is connected to node <4>.
Node <2> is connected to nodes <4>, <0>.
Node <1> is connected to nodes <6>, <5>, <4>, <0>.
Node <5> is connected to nodes <0>, <2>, <6>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,13,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<1>, <5>, <2>, <0>, <3>, <6>, <4>]","Let's solve it step by step.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <6>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
So the result of topological sorting is ","('[[<1>, <5>, <2>, <0>, <3>, <4>, <6>], [<1>, <6>, <0>, <5>, <3>, <2>, <4>], [<1>, <5>, <6>, <4>, <2>, <0>, <3>], [<1>, <5>, <2>, <0>, <3>, <6>, <4>]]',)",3,113
topological_sort,"[(<3>, <1>), (<3>, <0>), (<0>, <1>), (<4>, <2>), (<5>, <1>)]","{<3>: [<1>, <0>],
<1>: [],
<0>: [<1>],
<4>: [<2>],
<2>: [],
<5>: [<1>]}","Node <3> is connected to nodes <1>, <0>.
Node <0> is connected to node <1>.
Node <4> is connected to node <2>.
Node <5> is connected to node <1>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,5,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<3>, <4>, <5>, <0>, <2>, <1>]","Let's solve it step by step.
Nodes with 0 in-degree: [<3>, <4>, <5>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <5>, <0>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <0>, <2>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <2>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <1>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
So the result of topological sorting is ","('[[<3>, <4>, <5>, <0>, <2>, <1>], [<3>, <4>, <5>, <0>, <2>, <1>], [<3>, <2>, <1>, <5>, <4>, <0>], [<3>, <4>, <2>, <1>, <5>, <0>]]',)",0,114
topological_sort,"[(<4>, <3>), (<0>, <3>), (<0>, <1>), (<0>, <2>), (<1>, <2>), (<2>, <3>), (<2>, <4>), (<5>, <0>), (<5>, <4>)]","{<4>: [<3>],
<3>: [],
<0>: [<3>, <1>, <2>],
<1>: [<2>],
<2>: [<3>, <4>],
<5>: [<0>, <4>]}","Node <4> is connected to node <3>.
Node <0> is connected to nodes <3>, <1>, <2>.
Node <1> is connected to node <2>.
Node <2> is connected to nodes <3>, <4>.
Node <5> is connected to nodes <0>, <4>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,9,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<5>, <0>, <1>, <2>, <4>, <3>]","Let's solve it step by step.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
So the result of topological sorting is ","('[[<5>, <0>, <1>, <4>, <3>, <2>], [<5>, <3>, <0>, <1>, <4>, <2>], [<5>, <0>, <4>, <3>, <1>, <2>], [<5>, <0>, <1>, <2>, <4>, <3>]]',)",3,115
topological_sort,"[(<0>, <1>), (<1>, <3>), (<1>, <4>), (<4>, <5>), (<5>, <3>), (<2>, <1>)]","{<0>: [<1>],
<1>: [<3>, <4>],
<3>: [],
<4>: [<5>],
<5>: [<3>],
<2>: [<1>]}","Node <0> is connected to node <1>.
Node <1> is connected to nodes <3>, <4>.
Node <4> is connected to node <5>.
Node <5> is connected to node <3>.
Node <2> is connected to node <1>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,6,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<0>, <2>, <1>, <4>, <5>, <3>]","Let's solve it step by step.
Nodes with 0 in-degree: [<0>, <2>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
So the result of topological sorting is ","('[[<0>, <4>, <1>, <3>, <2>, <5>], [<0>, <2>, <1>, <4>, <5>, <3>], [<0>, <2>, <1>, <5>, <4>, <3>], [<0>, <2>, <5>, <3>, <1>, <4>]]',)",1,116
topological_sort,"[(<1>, <5>), (<5>, <0>), (<4>, <5>), (<4>, <2>), (<2>, <1>), (<2>, <0>), (<2>, <5>), (<3>, <0>), (<3>, <1>)]","{<1>: [<5>],
<5>: [<0>],
<0>: [],
<4>: [<5>, <2>],
<2>: [<1>, <0>, <5>],
<3>: [<0>, <1>]}","Node <1> is connected to node <5>.
Node <5> is connected to node <0>.
Node <4> is connected to nodes <5>, <2>.
Node <2> is connected to nodes <1>, <0>, <5>.
Node <3> is connected to nodes <0>, <1>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,9,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<4>, <3>, <2>, <1>, <5>, <0>]","Let's solve it step by step.
Nodes with 0 in-degree: [<4>, <3>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <2>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
So the result of topological sorting is ","('[[<4>, <3>, <2>, <1>, <5>, <0>], [<4>, <5>, <0>, <1>, <3>, <2>], [<4>, <3>, <2>, <1>, <5>, <0>], [<4>, <3>, <5>, <0>, <2>, <1>]]',)",2,117
topological_sort,"[(<1>, <3>), (<4>, <0>), (<4>, <6>), (<4>, <5>), (<0>, <2>), (<0>, <1>), (<6>, <3>), (<5>, <0>), (<5>, <6>), (<5>, <2>), (<2>, <6>), (<2>, <3>)]","{<1>: [<3>],
<3>: [],
<4>: [<0>, <6>, <5>],
<0>: [<2>, <1>],
<6>: [<3>],
<5>: [<0>, <6>, <2>],
<2>: [<6>, <3>]}","Node <1> is connected to node <3>.
Node <4> is connected to nodes <0>, <6>, <5>.
Node <0> is connected to nodes <2>, <1>.
Node <6> is connected to node <3>.
Node <5> is connected to nodes <0>, <6>, <2>.
Node <2> is connected to nodes <6>, <3>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,12,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<4>, <5>, <0>, <2>, <1>, <6>, <3>]","Let's solve it step by step.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <1>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <6>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
So the result of topological sorting is ","('[[<4>, <5>, <0>, <6>, <3>, <2>, <1>], [<4>, <5>, <6>, <3>, <0>, <2>, <1>], [<4>, <3>, <5>, <0>, <1>, <2>, <6>], [<4>, <5>, <0>, <2>, <1>, <6>, <3>]]',)",3,118
topological_sort,"[(<1>, <5>), (<1>, <2>), (<1>, <3>), (<1>, <0>), (<2>, <5>), (<2>, <4>), (<3>, <5>), (<3>, <2>), (<0>, <3>), (<4>, <5>)]","{<1>: [<5>, <2>, <3>, <0>],
<5>: [],
<2>: [<5>, <4>],
<3>: [<5>, <2>],
<0>: [<3>],
<4>: [<5>]}","Node <1> is connected to nodes <5>, <2>, <3>, <0>.
Node <2> is connected to nodes <5>, <4>.
Node <3> is connected to nodes <5>, <2>.
Node <0> is connected to node <3>.
Node <4> is connected to node <5>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,10,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<1>, <0>, <3>, <2>, <4>, <5>]","Let's solve it step by step.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
So the result of topological sorting is ","('[[<1>, <0>, <3>, <4>, <2>, <5>], [<1>, <0>, <3>, <2>, <4>, <5>], [<1>, <0>, <4>, <5>, <3>, <2>], [<1>, <3>, <2>, <0>, <5>, <4>]]',)",1,119
topological_sort,"[(<3>, <2>), (<3>, <6>), (<3>, <5>), (<2>, <4>), (<5>, <0>), (<5>, <6>), (<5>, <2>), (<4>, <6>), (<0>, <2>), (<0>, <6>), (<1>, <3>), (<1>, <0>)]","{<3>: [<2>, <6>, <5>],
<2>: [<4>],
<6>: [],
<5>: [<0>, <6>, <2>],
<4>: [<6>],
<0>: [<2>, <6>],
<1>: [<3>, <0>]}","Node <3> is connected to nodes <2>, <6>, <5>.
Node <2> is connected to node <4>.
Node <5> is connected to nodes <0>, <6>, <2>.
Node <4> is connected to node <6>.
Node <0> is connected to nodes <2>, <6>.
Node <1> is connected to nodes <3>, <0>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,12,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<1>, <3>, <5>, <0>, <2>, <4>, <6>]","Let's solve it step by step.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
So the result of topological sorting is ","('[[<1>, <3>, <4>, <6>, <5>, <0>, <2>], [<1>, <3>, <5>, <0>, <2>, <4>, <6>], [<1>, <6>, <5>, <4>, <2>, <0>, <3>], [<1>, <3>, <5>, <4>, <2>, <0>, <6>]]',)",1,120
topological_sort,"[(<0>, <4>), (<0>, <3>), (<4>, <2>), (<3>, <1>), (<3>, <2>), (<2>, <1>)]","{<0>: [<4>, <3>],
<4>: [<2>],
<3>: [<1>, <2>],
<2>: [<1>],
<1>: []}","Node <0> is connected to nodes <4>, <3>.
Node <4> is connected to node <2>.
Node <3> is connected to nodes <1>, <2>.
Node <2> is connected to node <1>.","[<0>, <1>, <2>, <3>, <4>]",5,6,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<0>, <4>, <3>, <2>, <1>]","Let's solve it step by step.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <3>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
So the result of topological sorting is ","('[[<0>, <3>, <2>, <4>, <1>], [<0>, <4>, <2>, <1>, <3>], [<0>, <1>, <4>, <3>, <2>], [<0>, <4>, <3>, <2>, <1>]]',)",3,121
topological_sort,"[(<2>, <4>), (<2>, <1>), (<2>, <0>), (<4>, <1>), (<0>, <1>), (<3>, <4>), (<3>, <2>), (<3>, <1>), (<5>, <1>), (<5>, <3>)]","{<2>: [<4>, <1>, <0>],
<4>: [<1>],
<1>: [],
<0>: [<1>],
<3>: [<4>, <2>, <1>],
<5>: [<1>, <3>]}","Node <2> is connected to nodes <4>, <1>, <0>.
Node <4> is connected to node <1>.
Node <0> is connected to node <1>.
Node <3> is connected to nodes <4>, <2>, <1>.
Node <5> is connected to nodes <1>, <3>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,10,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<5>, <3>, <2>, <4>, <0>, <1>]","Let's solve it step by step.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <0>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
So the result of topological sorting is ","('[[<5>, <2>, <3>, <0>, <4>, <1>], [<5>, <3>, <2>, <4>, <1>, <0>], [<5>, <3>, <2>, <4>, <0>, <1>], [<5>, <3>, <0>, <1>, <2>, <4>]]',)",2,122
topological_sort,"[(<4>, <3>), (<4>, <2>), (<4>, <1>), (<3>, <2>), (<2>, <5>), (<0>, <1>), (<0>, <3>), (<0>, <4>)]","{<4>: [<3>, <2>, <1>],
<3>: [<2>],
<2>: [<5>],
<1>: [],
<0>: [<1>, <3>, <4>],
<5>: []}","Node <4> is connected to nodes <3>, <2>, <1>.
Node <3> is connected to node <2>.
Node <2> is connected to node <5>.
Node <0> is connected to nodes <1>, <3>, <4>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,8,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<0>, <4>, <3>, <1>, <2>, <5>]","Let's solve it step by step.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <1>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <2>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
So the result of topological sorting is ","('[[<0>, <4>, <3>, <1>, <2>, <5>], [<0>, <4>, <2>, <5>, <3>, <1>], [<0>, <5>, <4>, <3>, <1>, <2>], [<0>, <4>, <3>, <1>, <2>, <5>]]',)",3,123
topological_sort,"[(<5>, <2>), (<5>, <4>), (<2>, <6>), (<2>, <4>), (<0>, <5>), (<0>, <3>), (<0>, <2>), (<3>, <4>), (<3>, <1>), (<1>, <2>), (<1>, <6>), (<1>, <5>)]","{<5>: [<2>, <4>],
<2>: [<6>, <4>],
<4>: [],
<6>: [],
<0>: [<5>, <3>, <2>],
<3>: [<4>, <1>],
<1>: [<2>, <6>, <5>]}","Node <5> is connected to nodes <2>, <4>.
Node <2> is connected to nodes <6>, <4>.
Node <0> is connected to nodes <5>, <3>, <2>.
Node <3> is connected to nodes <4>, <1>.
Node <1> is connected to nodes <2>, <6>, <5>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,12,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<0>, <3>, <1>, <5>, <2>, <6>, <4>]","Let's solve it step by step.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <4>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
So the result of topological sorting is ","('[[<0>, <2>, <6>, <3>, <5>, <1>, <4>], [<0>, <3>, <6>, <4>, <1>, <5>, <2>], [<0>, <3>, <1>, <5>, <2>, <6>, <4>], [<0>, <3>, <1>, <6>, <5>, <2>, <4>]]',)",2,124
topological_sort,"[(<4>, <5>), (<0>, <4>), (<0>, <2>), (<0>, <3>), (<0>, <5>), (<0>, <1>), (<2>, <4>), (<2>, <1>), (<2>, <5>), (<3>, <2>), (<3>, <5>)]","{<4>: [<5>],
<5>: [],
<0>: [<4>, <2>, <3>, <5>, <1>],
<2>: [<4>, <1>, <5>],
<3>: [<2>, <5>],
<1>: []}","Node <4> is connected to node <5>.
Node <0> is connected to nodes <4>, <2>, <3>, <5>, <1>.
Node <2> is connected to nodes <4>, <1>, <5>.
Node <3> is connected to nodes <2>, <5>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,11,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<0>, <3>, <2>, <4>, <1>, <5>]","Let's solve it step by step.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <1>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <5>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
So the result of topological sorting is ","('[[<0>, <3>, <2>, <4>, <1>, <5>], [<0>, <3>, <1>, <5>, <2>, <4>], [<0>, <3>, <2>, <4>, <1>, <5>], [<0>, <5>, <1>, <2>, <4>, <3>]]',)",2,125
topological_sort,"[(<3>, <4>), (<3>, <0>), (<4>, <5>), (<0>, <5>), (<0>, <2>), (<0>, <1>), (<5>, <2>)]","{<3>: [<4>, <0>],
<4>: [<5>],
<0>: [<5>, <2>, <1>],
<5>: [<2>],
<2>: [],
<1>: []}","Node <3> is connected to nodes <4>, <0>.
Node <4> is connected to node <5>.
Node <0> is connected to nodes <5>, <2>, <1>.
Node <5> is connected to node <2>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,7,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<3>, <4>, <0>, <5>, <1>, <2>]","Let's solve it step by step.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <0>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <1>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <2>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
So the result of topological sorting is ","('[[<3>, <1>, <0>, <4>, <2>, <5>], [<3>, <4>, <1>, <2>, <0>, <5>], [<3>, <4>, <0>, <5>, <1>, <2>], [<3>, <4>, <0>, <1>, <5>, <2>]]',)",2,126
topological_sort,"[(<1>, <4>), (<1>, <5>), (<1>, <0>), (<1>, <3>), (<1>, <6>), (<5>, <4>), (<3>, <0>), (<6>, <3>), (<2>, <1>), (<2>, <3>)]","{<1>: [<4>, <5>, <0>, <3>, <6>],
<4>: [],
<5>: [<4>],
<0>: [],
<3>: [<0>],
<6>: [<3>],
<2>: [<1>, <3>]}","Node <1> is connected to nodes <4>, <5>, <0>, <3>, <6>.
Node <5> is connected to node <4>.
Node <3> is connected to node <0>.
Node <6> is connected to node <3>.
Node <2> is connected to nodes <1>, <3>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,10,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<2>, <1>, <5>, <6>, <4>, <3>, <0>]","Let's solve it step by step.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <6>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <4>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <3>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
So the result of topological sorting is ","('[[<2>, <1>, <5>, <6>, <4>, <3>, <0>], [<2>, <1>, <5>, <6>, <3>, <0>, <4>], [<2>, <1>, <4>, <6>, <0>, <5>, <3>], [<2>, <1>, <3>, <0>, <5>, <6>, <4>]]',)",0,127
topological_sort,"[(<2>, <4>), (<2>, <0>), (<2>, <3>), (<4>, <5>), (<3>, <0>), (<5>, <1>), (<5>, <3>)]","{<2>: [<4>, <0>, <3>],
<4>: [<5>],
<0>: [],
<3>: [<0>],
<5>: [<1>, <3>],
<1>: []}","Node <2> is connected to nodes <4>, <0>, <3>.
Node <4> is connected to node <5>.
Node <3> is connected to node <0>.
Node <5> is connected to nodes <1>, <3>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,7,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<2>, <4>, <5>, <1>, <3>, <0>]","Let's solve it step by step.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <3>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
So the result of topological sorting is ","('[[<2>, <4>, <5>, <1>, <3>, <0>], [<2>, <5>, <1>, <3>, <0>, <4>], [<2>, <4>, <3>, <0>, <5>, <1>], [<2>, <4>, <5>, <1>, <3>, <0>]]',)",3,128
topological_sort,"[(<3>, <4>), (<3>, <1>), (<3>, <0>), (<4>, <0>), (<4>, <2>), (<1>, <4>), (<0>, <2>)]","{<3>: [<4>, <1>, <0>],
<4>: [<0>, <2>],
<1>: [<4>],
<0>: [<2>],
<2>: []}","Node <3> is connected to nodes <4>, <1>, <0>.
Node <4> is connected to nodes <0>, <2>.
Node <1> is connected to node <4>.
Node <0> is connected to node <2>.","[<0>, <1>, <2>, <3>, <4>]",5,7,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<3>, <1>, <4>, <0>, <2>]","Let's solve it step by step.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
So the result of topological sorting is ","('[[<3>, <2>, <1>, <4>, <0>], [<3>, <1>, <4>, <0>, <2>], [<3>, <0>, <1>, <2>, <4>], [<3>, <1>, <4>, <2>, <0>]]',)",1,129
topological_sort,"[(<0>, <3>), (<0>, <1>), (<2>, <0>), (<5>, <4>), (<5>, <0>)]","{<0>: [<3>, <1>],
<3>: [],
<1>: [],
<2>: [<0>],
<5>: [<4>, <0>],
<4>: []}","Node <0> is connected to nodes <3>, <1>.
Node <2> is connected to node <0>.
Node <5> is connected to nodes <4>, <0>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,5,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<2>, <5>, <4>, <0>, <3>, <1>]","Let's solve it step by step.
Nodes with 0 in-degree: [<2>, <5>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <0>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <1>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
So the result of topological sorting is ","('[[<2>, <5>, <3>, <1>, <4>, <0>], [<2>, <5>, <4>, <0>, <3>, <1>], [<2>, <5>, <4>, <0>, <1>, <3>], [<2>, <1>, <0>, <5>, <3>, <4>]]',)",1,130
topological_sort,"[(<6>, <2>), (<6>, <4>), (<6>, <1>), (<2>, <1>), (<4>, <0>), (<1>, <4>), (<5>, <4>), (<5>, <2>), (<5>, <0>), (<3>, <1>)]","{<6>: [<2>, <4>, <1>],
<2>: [<1>],
<4>: [<0>],
<1>: [<4>],
<0>: [],
<5>: [<4>, <2>, <0>],
<3>: [<1>]}","Node <6> is connected to nodes <2>, <4>, <1>.
Node <2> is connected to node <1>.
Node <4> is connected to node <0>.
Node <1> is connected to node <4>.
Node <5> is connected to nodes <4>, <2>, <0>.
Node <3> is connected to node <1>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,10,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<6>, <5>, <3>, <2>, <1>, <4>, <0>]","Let's solve it step by step.
Nodes with 0 in-degree: [<6>, <5>, <3>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <3>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <2>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
So the result of topological sorting is ","('[[<6>, <5>, <4>, <0>, <3>, <2>, <1>], [<6>, <5>, <3>, <4>, <1>, <2>, <0>], [<6>, <5>, <3>, <2>, <1>, <4>, <0>], [<6>, <5>, <3>, <2>, <1>, <0>, <4>]]',)",2,131
topological_sort,"[(<6>, <0>), (<6>, <4>), (<6>, <2>), (<6>, <5>), (<6>, <3>), (<0>, <3>), (<0>, <5>), (<4>, <3>), (<5>, <2>), (<5>, <3>), (<1>, <6>), (<1>, <0>), (<1>, <3>)]","{<6>: [<0>, <4>, <2>, <5>, <3>],
<0>: [<3>, <5>],
<4>: [<3>],
<2>: [],
<5>: [<2>, <3>],
<3>: [],
<1>: [<6>, <0>, <3>]}","Node <6> is connected to nodes <0>, <4>, <2>, <5>, <3>.
Node <0> is connected to nodes <3>, <5>.
Node <4> is connected to node <3>.
Node <5> is connected to nodes <2>, <3>.
Node <1> is connected to nodes <6>, <0>, <3>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,13,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<1>, <6>, <0>, <4>, <5>, <2>, <3>]","Let's solve it step by step.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <4>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <5>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <3>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
So the result of topological sorting is ","('[[<1>, <0>, <5>, <2>, <6>, <3>, <4>], [<1>, <6>, <2>, <3>, <0>, <4>, <5>], [<1>, <6>, <0>, <4>, <5>, <2>, <3>], [<1>, <6>, <0>, <3>, <2>, <5>, <4>]]',)",2,132
topological_sort,"[(<3>, <4>), (<3>, <2>), (<4>, <2>), (<4>, <1>), (<1>, <2>), (<5>, <3>), (<5>, <1>), (<0>, <4>), (<0>, <1>), (<0>, <2>)]","{<3>: [<4>, <2>],
<4>: [<2>, <1>],
<2>: [],
<1>: [<2>],
<5>: [<3>, <1>],
<0>: [<4>, <1>, <2>]}","Node <3> is connected to nodes <4>, <2>.
Node <4> is connected to nodes <2>, <1>.
Node <1> is connected to node <2>.
Node <5> is connected to nodes <3>, <1>.
Node <0> is connected to nodes <4>, <1>, <2>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,10,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<5>, <0>, <3>, <4>, <1>, <2>]","Let's solve it step by step.
Nodes with 0 in-degree: [<5>, <0>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <3>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
So the result of topological sorting is ","('[[<5>, <0>, <3>, <4>, <1>, <2>], [<5>, <0>, <2>, <1>, <3>, <4>], [<5>, <0>, <3>, <4>, <1>, <2>], [<5>, <0>, <1>, <2>, <3>, <4>]]',)",0,133
topological_sort,"[(<3>, <5>), (<1>, <5>), (<1>, <0>), (<1>, <2>), (<0>, <4>), (<0>, <3>), (<2>, <3>), (<4>, <3>), (<4>, <2>)]","{<3>: [<5>],
<5>: [],
<1>: [<5>, <0>, <2>],
<0>: [<4>, <3>],
<2>: [<3>],
<4>: [<3>, <2>]}","Node <3> is connected to node <5>.
Node <1> is connected to nodes <5>, <0>, <2>.
Node <0> is connected to nodes <4>, <3>.
Node <2> is connected to node <3>.
Node <4> is connected to nodes <3>, <2>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,9,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<1>, <0>, <4>, <2>, <3>, <5>]","Let's solve it step by step.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
So the result of topological sorting is ","('[[<1>, <0>, <3>, <4>, <2>, <5>], [<1>, <0>, <3>, <5>, <4>, <2>], [<1>, <0>, <4>, <5>, <3>, <2>], [<1>, <0>, <4>, <2>, <3>, <5>]]',)",3,134
topological_sort,"[(<0>, <5>), (<0>, <4>), (<0>, <1>), (<4>, <5>), (<4>, <1>), (<1>, <5>), (<2>, <3>), (<2>, <4>), (<2>, <1>), (<3>, <0>), (<3>, <5>), (<6>, <5>), (<6>, <2>), (<6>, <3>)]","{<0>: [<5>, <4>, <1>],
<5>: [],
<4>: [<5>, <1>],
<1>: [<5>],
<2>: [<3>, <4>, <1>],
<3>: [<0>, <5>],
<6>: [<5>, <2>, <3>]}","Node <0> is connected to nodes <5>, <4>, <1>.
Node <4> is connected to nodes <5>, <1>.
Node <1> is connected to node <5>.
Node <2> is connected to nodes <3>, <4>, <1>.
Node <3> is connected to nodes <0>, <5>.
Node <6> is connected to nodes <5>, <2>, <3>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,14,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<6>, <2>, <3>, <0>, <4>, <1>, <5>]","Let's solve it step by step.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
So the result of topological sorting is ","('[[<6>, <2>, <3>, <0>, <5>, <4>, <1>], [<6>, <2>, <1>, <5>, <3>, <0>, <4>], [<6>, <1>, <3>, <0>, <4>, <2>, <5>], [<6>, <2>, <3>, <0>, <4>, <1>, <5>]]',)",3,135
topological_sort,"[(<3>, <5>), (<1>, <3>), (<1>, <4>), (<1>, <0>), (<0>, <5>), (<0>, <3>), (<2>, <1>)]","{<3>: [<5>],
<5>: [],
<1>: [<3>, <4>, <0>],
<4>: [],
<0>: [<5>, <3>],
<2>: [<1>]}","Node <3> is connected to node <5>.
Node <1> is connected to nodes <3>, <4>, <0>.
Node <0> is connected to nodes <5>, <3>.
Node <2> is connected to node <1>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,7,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<2>, <1>, <4>, <0>, <3>, <5>]","Let's solve it step by step.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <0>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
So the result of topological sorting is ","('[[<2>, <1>, <4>, <0>, <3>, <5>], [<2>, <1>, <4>, <5>, <3>, <0>], [<2>, <1>, <3>, <5>, <4>, <0>], [<2>, <1>, <5>, <0>, <3>, <4>]]',)",0,136
topological_sort,"[(<0>, <3>), (<0>, <1>), (<1>, <3>), (<2>, <3>), (<2>, <0>), (<2>, <1>), (<4>, <0>), (<4>, <3>), (<4>, <1>)]","{<0>: [<3>, <1>],
<3>: [],
<1>: [<3>],
<2>: [<3>, <0>, <1>],
<4>: [<0>, <3>, <1>]}","Node <0> is connected to nodes <3>, <1>.
Node <1> is connected to node <3>.
Node <2> is connected to nodes <3>, <0>, <1>.
Node <4> is connected to nodes <0>, <3>, <1>.","[<0>, <1>, <2>, <3>, <4>]",5,9,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<2>, <4>, <0>, <1>, <3>]","Let's solve it step by step.
Nodes with 0 in-degree: [<2>, <4>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
So the result of topological sorting is ","('[[<2>, <0>, <3>, <4>, <1>], [<2>, <4>, <0>, <1>, <3>], [<2>, <4>, <0>, <1>, <3>], [<2>, <3>, <4>, <0>, <1>]]',)",1,137
topological_sort,"[(<3>, <0>), (<1>, <4>), (<1>, <0>), (<1>, <2>), (<4>, <0>), (<4>, <2>), (<4>, <3>), (<2>, <0>), (<2>, <3>)]","{<3>: [<0>],
<0>: [],
<1>: [<4>, <0>, <2>],
<4>: [<0>, <2>, <3>],
<2>: [<0>, <3>]}","Node <3> is connected to node <0>.
Node <1> is connected to nodes <4>, <0>, <2>.
Node <4> is connected to nodes <0>, <2>, <3>.
Node <2> is connected to nodes <0>, <3>.","[<0>, <1>, <2>, <3>, <4>]",5,9,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<1>, <4>, <2>, <3>, <0>]","Let's solve it step by step.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
So the result of topological sorting is ","('[[<1>, <4>, <2>, <3>, <0>], [<1>, <3>, <0>, <2>, <4>], [<1>, <0>, <4>, <2>, <3>], [<1>, <4>, <0>, <2>, <3>]]',)",0,138
topological_sort,"[(<0>, <5>), (<1>, <0>), (<1>, <3>), (<3>, <0>), (<3>, <5>), (<4>, <1>), (<2>, <3>), (<2>, <5>)]","{<0>: [<5>],
<5>: [],
<1>: [<0>, <3>],
<3>: [<0>, <5>],
<4>: [<1>],
<2>: [<3>, <5>]}","Node <0> is connected to node <5>.
Node <1> is connected to nodes <0>, <3>.
Node <3> is connected to nodes <0>, <5>.
Node <4> is connected to node <1>.
Node <2> is connected to nodes <3>, <5>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,8,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<4>, <2>, <1>, <3>, <0>, <5>]","Let's solve it step by step.
Nodes with 0 in-degree: [<4>, <2>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <1>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
So the result of topological sorting is ","('[[<4>, <2>, <1>, <3>, <0>, <5>], [<4>, <3>, <2>, <0>, <5>, <1>], [<4>, <2>, <1>, <3>, <5>, <0>], [<4>, <2>, <0>, <5>, <1>, <3>]]',)",0,139
topological_sort,"[(<3>, <0>), (<3>, <1>), (<1>, <0>), (<2>, <0>), (<2>, <1>), (<6>, <4>), (<6>, <3>), (<6>, <0>), (<6>, <2>), (<4>, <0>), (<4>, <1>), (<4>, <2>), (<5>, <6>), (<5>, <0>)]","{<3>: [<0>, <1>],
<0>: [],
<1>: [<0>],
<2>: [<0>, <1>],
<6>: [<4>, <3>, <0>, <2>],
<4>: [<0>, <1>, <2>],
<5>: [<6>, <0>]}","Node <3> is connected to nodes <0>, <1>.
Node <1> is connected to node <0>.
Node <2> is connected to nodes <0>, <1>.
Node <6> is connected to nodes <4>, <3>, <0>, <2>.
Node <4> is connected to nodes <0>, <1>, <2>.
Node <5> is connected to nodes <6>, <0>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,14,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<5>, <6>, <4>, <3>, <2>, <1>, <0>]","Let's solve it step by step.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <3>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <2>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
So the result of topological sorting is ","('[[<5>, <6>, <4>, <3>, <1>, <0>, <2>], [<5>, <2>, <3>, <0>, <1>, <4>, <6>], [<5>, <6>, <4>, <3>, <2>, <1>, <0>], [<5>, <6>, <1>, <0>, <4>, <3>, <2>]]',)",2,140
topological_sort,"[(<4>, <2>), (<0>, <2>), (<0>, <4>), (<0>, <1>), (<1>, <3>), (<1>, <2>)]","{<4>: [<2>],
<2>: [],
<0>: [<2>, <4>, <1>],
<1>: [<3>, <2>],
<3>: []}","Node <4> is connected to node <2>.
Node <0> is connected to nodes <2>, <4>, <1>.
Node <1> is connected to nodes <3>, <2>.","[<0>, <1>, <2>, <3>, <4>]",5,6,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<0>, <4>, <1>, <3>, <2>]","Let's solve it step by step.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <1>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <2>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
So the result of topological sorting is ","('[[<0>, <4>, <1>, <3>, <2>], [<0>, <2>, <4>, <1>, <3>], [<0>, <4>, <3>, <1>, <2>], [<0>, <4>, <1>, <3>, <2>]]',)",3,141
topological_sort,"[(<3>, <4>), (<3>, <2>), (<0>, <4>), (<0>, <3>), (<1>, <3>)]","{<3>: [<4>, <2>],
<4>: [],
<2>: [],
<0>: [<4>, <3>],
<1>: [<3>]}","Node <3> is connected to nodes <4>, <2>.
Node <0> is connected to nodes <4>, <3>.
Node <1> is connected to node <3>.","[<0>, <1>, <2>, <3>, <4>]",5,5,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<0>, <1>, <3>, <4>, <2>]","Let's solve it step by step.
Nodes with 0 in-degree: [<0>, <1>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <2>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
So the result of topological sorting is ","('[[<0>, <2>, <1>, <3>, <4>], [<0>, <1>, <2>, <4>, <3>], [<0>, <1>, <3>, <4>, <2>], [<0>, <3>, <1>, <2>, <4>]]',)",2,142
topological_sort,"[(<5>, <2>), (<5>, <6>), (<2>, <6>), (<1>, <3>), (<1>, <2>), (<1>, <5>), (<3>, <6>), (<3>, <5>), (<0>, <5>), (<0>, <1>), (<0>, <6>), (<0>, <2>), (<4>, <3>), (<4>, <2>)]","{<5>: [<2>, <6>],
<2>: [<6>],
<6>: [],
<1>: [<3>, <2>, <5>],
<3>: [<6>, <5>],
<0>: [<5>, <1>, <6>, <2>],
<4>: [<3>, <2>]}","Node <5> is connected to nodes <2>, <6>.
Node <2> is connected to node <6>.
Node <1> is connected to nodes <3>, <2>, <5>.
Node <3> is connected to nodes <6>, <5>.
Node <0> is connected to nodes <5>, <1>, <6>, <2>.
Node <4> is connected to nodes <3>, <2>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,14,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<0>, <4>, <1>, <3>, <5>, <2>, <6>]","Let's solve it step by step.
Nodes with 0 in-degree: [<0>, <4>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <1>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
So the result of topological sorting is ","('[[<0>, <3>, <5>, <4>, <1>, <2>, <6>], [<0>, <4>, <2>, <6>, <1>, <3>, <5>], [<0>, <4>, <1>, <3>, <5>, <2>, <6>], [<0>, <4>, <1>, <2>, <3>, <5>, <6>]]',)",2,143
topological_sort,"[(<4>, <2>), (<4>, <1>), (<2>, <0>), (<1>, <0>), (<1>, <2>), (<1>, <3>), (<0>, <3>)]","{<4>: [<2>, <1>],
<2>: [<0>],
<1>: [<0>, <2>, <3>],
<0>: [<3>],
<3>: []}","Node <4> is connected to nodes <2>, <1>.
Node <2> is connected to node <0>.
Node <1> is connected to nodes <0>, <2>, <3>.
Node <0> is connected to node <3>.","[<0>, <1>, <2>, <3>, <4>]",5,7,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<4>, <1>, <2>, <0>, <3>]","Let's solve it step by step.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
So the result of topological sorting is ","('[[<4>, <1>, <2>, <0>, <3>], [<4>, <1>, <0>, <3>, <2>], [<4>, <2>, <1>, <0>, <3>], [<4>, <3>, <1>, <2>, <0>]]',)",0,144
topological_sort,"[(<3>, <4>), (<3>, <1>), (<1>, <2>), (<1>, <4>), (<2>, <0>), (<0>, <4>)]","{<3>: [<4>, <1>],
<4>: [],
<1>: [<2>, <4>],
<2>: [<0>],
<0>: [<4>]}","Node <3> is connected to nodes <4>, <1>.
Node <1> is connected to nodes <2>, <4>.
Node <2> is connected to node <0>.
Node <0> is connected to node <4>.","[<0>, <1>, <2>, <3>, <4>]",5,6,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<3>, <1>, <2>, <0>, <4>]","Let's solve it step by step.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
So the result of topological sorting is ","('[[<3>, <1>, <0>, <4>, <2>], [<3>, <1>, <2>, <0>, <4>], [<3>, <4>, <1>, <2>, <0>], [<3>, <1>, <2>, <4>, <0>]]',)",1,145
topological_sort,"[(<2>, <4>), (<4>, <0>), (<0>, <3>), (<0>, <1>), (<1>, <3>)]","{<2>: [<4>],
<4>: [<0>],
<0>: [<3>, <1>],
<3>: [],
<1>: [<3>]}","Node <2> is connected to node <4>.
Node <4> is connected to node <0>.
Node <0> is connected to nodes <3>, <1>.
Node <1> is connected to node <3>.","[<0>, <1>, <2>, <3>, <4>]",5,5,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<2>, <4>, <0>, <1>, <3>]","Let's solve it step by step.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
So the result of topological sorting is ","('[[<2>, <3>, <0>, <4>, <1>], [<2>, <4>, <0>, <1>, <3>], [<2>, <3>, <4>, <0>, <1>], [<2>, <4>, <1>, <3>, <0>]]',)",1,146
topological_sort,"[(<3>, <2>), (<2>, <4>), (<2>, <0>), (<4>, <0>), (<4>, <5>), (<1>, <2>), (<1>, <3>)]","{<3>: [<2>],
<2>: [<4>, <0>],
<4>: [<0>, <5>],
<0>: [],
<5>: [],
<1>: [<2>, <3>]}","Node <3> is connected to node <2>.
Node <2> is connected to nodes <4>, <0>.
Node <4> is connected to nodes <0>, <5>.
Node <1> is connected to nodes <2>, <3>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,7,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<1>, <3>, <2>, <4>, <0>, <5>]","Let's solve it step by step.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <5>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
So the result of topological sorting is ","('[[<1>, <2>, <3>, <4>, <5>, <0>], [<1>, <3>, <0>, <5>, <2>, <4>], [<1>, <3>, <2>, <4>, <0>, <5>], [<1>, <3>, <2>, <5>, <0>, <4>]]',)",2,147
topological_sort,"[(<3>, <1>), (<3>, <0>), (<0>, <1>), (<0>, <4>), (<2>, <1>), (<2>, <0>), (<2>, <4>), (<2>, <5>), (<5>, <0>), (<5>, <4>)]","{<3>: [<1>, <0>],
<1>: [],
<0>: [<1>, <4>],
<2>: [<1>, <0>, <4>, <5>],
<4>: [],
<5>: [<0>, <4>]}","Node <3> is connected to nodes <1>, <0>.
Node <0> is connected to nodes <1>, <4>.
Node <2> is connected to nodes <1>, <0>, <4>, <5>.
Node <5> is connected to nodes <0>, <4>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,10,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<3>, <2>, <5>, <0>, <1>, <4>]","Let's solve it step by step.
Nodes with 0 in-degree: [<3>, <2>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <4>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
So the result of topological sorting is ","('[[<3>, <2>, <5>, <1>, <4>, <0>], [<3>, <1>, <0>, <2>, <5>, <4>], [<3>, <2>, <5>, <0>, <1>, <4>], [<3>, <2>, <1>, <4>, <5>, <0>]]',)",2,148
topological_sort,"[(<2>, <3>), (<2>, <1>), (<2>, <4>), (<1>, <5>), (<4>, <1>), (<4>, <3>), (<0>, <3>), (<0>, <2>), (<0>, <1>)]","{<2>: [<3>, <1>, <4>],
<3>: [],
<1>: [<5>],
<4>: [<1>, <3>],
<0>: [<3>, <2>, <1>],
<5>: []}","Node <2> is connected to nodes <3>, <1>, <4>.
Node <1> is connected to node <5>.
Node <4> is connected to nodes <1>, <3>.
Node <0> is connected to nodes <3>, <2>, <1>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,9,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<0>, <2>, <4>, <1>, <3>, <5>]","Let's solve it step by step.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <3>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <5>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
So the result of topological sorting is ","('[[<0>, <2>, <3>, <5>, <4>, <1>], [<0>, <4>, <5>, <2>, <1>, <3>], [<0>, <2>, <4>, <5>, <3>, <1>], [<0>, <2>, <4>, <1>, <3>, <5>]]',)",3,149
topological_sort,"[(<0>, <5>), (<0>, <1>), (<3>, <5>), (<2>, <3>), (<2>, <0>), (<4>, <2>)]","{<0>: [<5>, <1>],
<5>: [],
<1>: [],
<3>: [<5>],
<2>: [<3>, <0>],
<4>: [<2>]}","Node <0> is connected to nodes <5>, <1>.
Node <3> is connected to node <5>.
Node <2> is connected to nodes <3>, <0>.
Node <4> is connected to node <2>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,6,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<4>, <2>, <3>, <0>, <5>, <1>]","Let's solve it step by step.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <0>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <1>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
So the result of topological sorting is ","('[[<4>, <2>, <3>, <5>, <0>, <1>], [<4>, <2>, <5>, <1>, <3>, <0>], [<4>, <0>, <2>, <1>, <5>, <3>], [<4>, <2>, <3>, <0>, <5>, <1>]]',)",3,150
topological_sort,"[(<3>, <0>), (<1>, <2>), (<1>, <0>), (<1>, <4>), (<2>, <0>), (<2>, <3>), (<4>, <3>), (<4>, <0>), (<4>, <2>)]","{<3>: [<0>],
<0>: [],
<1>: [<2>, <0>, <4>],
<2>: [<0>, <3>],
<4>: [<3>, <0>, <2>]}","Node <3> is connected to node <0>.
Node <1> is connected to nodes <2>, <0>, <4>.
Node <2> is connected to nodes <0>, <3>.
Node <4> is connected to nodes <3>, <0>, <2>.","[<0>, <1>, <2>, <3>, <4>]",5,9,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<1>, <4>, <2>, <3>, <0>]","Let's solve it step by step.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
So the result of topological sorting is ","('[[<1>, <2>, <3>, <0>, <4>], [<1>, <0>, <4>, <2>, <3>], [<1>, <4>, <2>, <3>, <0>], [<1>, <4>, <0>, <2>, <3>]]',)",2,151
topological_sort,"[(<0>, <2>), (<0>, <1>), (<4>, <2>), (<4>, <0>), (<3>, <2>), (<3>, <4>)]","{<0>: [<2>, <1>],
<2>: [],
<1>: [],
<4>: [<2>, <0>],
<3>: [<2>, <4>]}","Node <0> is connected to nodes <2>, <1>.
Node <4> is connected to nodes <2>, <0>.
Node <3> is connected to nodes <2>, <4>.","[<0>, <1>, <2>, <3>, <4>]",5,6,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<3>, <4>, <0>, <2>, <1>]","Let's solve it step by step.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <1>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
So the result of topological sorting is ","('[[<3>, <4>, <0>, <2>, <1>], [<3>, <4>, <1>, <0>, <2>], [<3>, <1>, <4>, <0>, <2>], [<3>, <4>, <2>, <1>, <0>]]',)",0,152
topological_sort,"[(<4>, <3>), (<1>, <4>), (<2>, <3>), (<0>, <2>)]","{<4>: [<3>],
<3>: [],
<1>: [<4>],
<2>: [<3>],
<0>: [<2>]}","Node <4> is connected to node <3>.
Node <1> is connected to node <4>.
Node <2> is connected to node <3>.
Node <0> is connected to node <2>.","[<0>, <1>, <2>, <3>, <4>]",5,4,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<1>, <0>, <4>, <2>, <3>]","Let's solve it step by step.
Nodes with 0 in-degree: [<1>, <0>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <4>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <2>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
So the result of topological sorting is ","('[[<1>, <3>, <0>, <4>, <2>], [<1>, <4>, <2>, <3>, <0>], [<1>, <0>, <4>, <2>, <3>], [<1>, <0>, <4>, <3>, <2>]]',)",2,153
topological_sort,"[(<5>, <2>), (<5>, <3>), (<2>, <3>), (<1>, <5>), (<1>, <2>), (<0>, <2>), (<4>, <3>), (<4>, <0>), (<4>, <2>)]","{<5>: [<2>, <3>],
<2>: [<3>],
<3>: [],
<1>: [<5>, <2>],
<0>: [<2>],
<4>: [<3>, <0>, <2>]}","Node <5> is connected to nodes <2>, <3>.
Node <2> is connected to node <3>.
Node <1> is connected to nodes <5>, <2>.
Node <0> is connected to node <2>.
Node <4> is connected to nodes <3>, <0>, <2>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,9,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<1>, <4>, <5>, <0>, <2>, <3>]","Let's solve it step by step.
Nodes with 0 in-degree: [<1>, <4>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <5>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <0>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
So the result of topological sorting is ","('[[<1>, <4>, <5>, <2>, <0>, <3>], [<1>, <4>, <2>, <3>, <5>, <0>], [<1>, <4>, <5>, <0>, <2>, <3>], [<1>, <3>, <4>, <2>, <0>, <5>]]',)",2,154
topological_sort,"[(<2>, <4>), (<4>, <3>), (<0>, <4>), (<0>, <2>), (<1>, <4>), (<1>, <2>)]","{<2>: [<4>],
<4>: [<3>],
<3>: [],
<0>: [<4>, <2>],
<1>: [<4>, <2>]}","Node <2> is connected to node <4>.
Node <4> is connected to node <3>.
Node <0> is connected to nodes <4>, <2>.
Node <1> is connected to nodes <4>, <2>.","[<0>, <1>, <2>, <3>, <4>]",5,6,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<0>, <1>, <2>, <4>, <3>]","Let's solve it step by step.
Nodes with 0 in-degree: [<0>, <1>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
So the result of topological sorting is ","('[[<0>, <1>, <2>, <4>, <3>], [<0>, <1>, <4>, <3>, <2>], [<0>, <3>, <1>, <2>, <4>], [<0>, <4>, <3>, <1>, <2>]]',)",0,155
topological_sort,"[(<2>, <0>), (<2>, <6>), (<2>, <5>), (<2>, <4>), (<0>, <3>), (<6>, <4>), (<6>, <5>), (<6>, <0>), (<5>, <0>), (<5>, <4>), (<3>, <4>), (<1>, <0>), (<1>, <3>), (<1>, <2>)]","{<2>: [<0>, <6>, <5>, <4>],
<0>: [<3>],
<6>: [<4>, <5>, <0>],
<5>: [<0>, <4>],
<4>: [],
<3>: [<4>],
<1>: [<0>, <3>, <2>]}","Node <2> is connected to nodes <0>, <6>, <5>, <4>.
Node <0> is connected to node <3>.
Node <6> is connected to nodes <4>, <5>, <0>.
Node <5> is connected to nodes <0>, <4>.
Node <3> is connected to node <4>.
Node <1> is connected to nodes <0>, <3>, <2>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,14,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<1>, <2>, <6>, <5>, <0>, <3>, <4>]","Let's solve it step by step.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
So the result of topological sorting is ","('[[<1>, <3>, <6>, <4>, <0>, <5>, <2>], [<1>, <2>, <6>, <5>, <0>, <3>, <4>], [<1>, <2>, <6>, <0>, <5>, <4>, <3>], [<1>, <2>, <3>, <4>, <6>, <5>, <0>]]',)",1,156
topological_sort,"[(<2>, <5>), (<2>, <0>), (<3>, <5>), (<3>, <1>), (<3>, <6>), (<3>, <0>), (<1>, <2>), (<6>, <2>), (<6>, <1>), (<4>, <3>), (<4>, <5>)]","{<2>: [<5>, <0>],
<5>: [],
<0>: [],
<3>: [<5>, <1>, <6>, <0>],
<1>: [<2>],
<6>: [<2>, <1>],
<4>: [<3>, <5>]}","Node <2> is connected to nodes <5>, <0>.
Node <3> is connected to nodes <5>, <1>, <6>, <0>.
Node <1> is connected to node <2>.
Node <6> is connected to nodes <2>, <1>.
Node <4> is connected to nodes <3>, <5>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,11,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<4>, <3>, <6>, <1>, <2>, <5>, <0>]","Let's solve it step by step.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <0>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
So the result of topological sorting is ","('[[<4>, <0>, <1>, <5>, <6>, <2>, <3>], [<4>, <3>, <5>, <0>, <6>, <1>, <2>], [<4>, <3>, <6>, <1>, <2>, <5>, <0>], [<4>, <3>, <6>, <0>, <1>, <5>, <2>]]',)",2,157
topological_sort,"[(<1>, <3>), (<1>, <0>), (<1>, <2>), (<3>, <2>), (<0>, <4>), (<0>, <3>), (<4>, <3>)]","{<1>: [<3>, <0>, <2>],
<3>: [<2>],
<0>: [<4>, <3>],
<2>: [],
<4>: [<3>]}","Node <1> is connected to nodes <3>, <0>, <2>.
Node <3> is connected to node <2>.
Node <0> is connected to nodes <4>, <3>.
Node <4> is connected to node <3>.","[<0>, <1>, <2>, <3>, <4>]",5,7,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<1>, <0>, <4>, <3>, <2>]","Let's solve it step by step.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
So the result of topological sorting is ","('[[<1>, <0>, <4>, <3>, <2>], [<1>, <2>, <0>, <4>, <3>], [<1>, <3>, <4>, <0>, <2>], [<1>, <0>, <4>, <3>, <2>]]',)",3,158
topological_sort,"[(<5>, <2>), (<5>, <4>), (<2>, <0>), (<4>, <0>), (<4>, <2>), (<1>, <5>), (<1>, <2>), (<1>, <3>), (<3>, <2>), (<3>, <0>)]","{<5>: [<2>, <4>],
<2>: [<0>],
<4>: [<0>, <2>],
<0>: [],
<1>: [<5>, <2>, <3>],
<3>: [<2>, <0>]}","Node <5> is connected to nodes <2>, <4>.
Node <2> is connected to node <0>.
Node <4> is connected to nodes <0>, <2>.
Node <1> is connected to nodes <5>, <2>, <3>.
Node <3> is connected to nodes <2>, <0>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,10,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<1>, <5>, <3>, <4>, <2>, <0>]","Let's solve it step by step.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <3>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <4>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
So the result of topological sorting is ","('[[<1>, <5>, <3>, <4>, <2>, <0>], [<1>, <5>, <3>, <0>, <2>, <4>], [<1>, <4>, <5>, <2>, <3>, <0>], [<1>, <5>, <2>, <0>, <3>, <4>]]',)",0,159
topological_sort,"[(<5>, <0>), (<5>, <4>), (<5>, <1>), (<4>, <2>), (<4>, <0>), (<1>, <2>), (<1>, <0>), (<1>, <4>), (<3>, <2>), (<3>, <1>), (<3>, <6>), (<3>, <5>), (<3>, <4>), (<2>, <0>), (<6>, <5>), (<6>, <1>)]","{<5>: [<0>, <4>, <1>],
<0>: [],
<4>: [<2>, <0>],
<1>: [<2>, <0>, <4>],
<3>: [<2>, <1>, <6>, <5>, <4>],
<2>: [<0>],
<6>: [<5>, <1>]}","Node <5> is connected to nodes <0>, <4>, <1>.
Node <4> is connected to nodes <2>, <0>.
Node <1> is connected to nodes <2>, <0>, <4>.
Node <3> is connected to nodes <2>, <1>, <6>, <5>, <4>.
Node <2> is connected to node <0>.
Node <6> is connected to nodes <5>, <1>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,16,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<3>, <6>, <5>, <1>, <4>, <2>, <0>]","Let's solve it step by step.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
So the result of topological sorting is ","('[[<3>, <6>, <2>, <0>, <5>, <1>, <4>], [<3>, <4>, <5>, <2>, <1>, <6>, <0>], [<3>, <6>, <5>, <1>, <4>, <2>, <0>], [<3>, <6>, <5>, <1>, <0>, <2>, <4>]]',)",2,160
topological_sort,"[(<5>, <4>), (<4>, <0>), (<0>, <3>), (<1>, <0>), (<1>, <2>), (<2>, <0>)]","{<5>: [<4>],
<4>: [<0>],
<0>: [<3>],
<1>: [<0>, <2>],
<2>: [<0>],
<3>: []}","Node <5> is connected to node <4>.
Node <4> is connected to node <0>.
Node <0> is connected to node <3>.
Node <1> is connected to nodes <0>, <2>.
Node <2> is connected to node <0>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,6,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<5>, <1>, <4>, <2>, <0>, <3>]","Let's solve it step by step.
Nodes with 0 in-degree: [<5>, <1>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <4>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <2>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
So the result of topological sorting is ","('[[<5>, <1>, <4>, <3>, <2>, <0>], [<5>, <1>, <4>, <2>, <0>, <3>], [<5>, <1>, <0>, <3>, <4>, <2>], [<5>, <4>, <2>, <3>, <0>, <1>]]',)",1,161
topological_sort,"[(<2>, <4>), (<2>, <1>), (<2>, <3>), (<4>, <5>), (<1>, <3>), (<5>, <3>), (<0>, <4>), (<0>, <2>), (<0>, <3>)]","{<2>: [<4>, <1>, <3>],
<4>: [<5>],
<1>: [<3>],
<3>: [],
<5>: [<3>],
<0>: [<4>, <2>, <3>]}","Node <2> is connected to nodes <4>, <1>, <3>.
Node <4> is connected to node <5>.
Node <1> is connected to node <3>.
Node <5> is connected to node <3>.
Node <0> is connected to nodes <4>, <2>, <3>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,9,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<0>, <2>, <4>, <1>, <5>, <3>]","Let's solve it step by step.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <1>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <5>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
So the result of topological sorting is ","('[[<0>, <2>, <4>, <1>, <5>, <3>], [<0>, <2>, <4>, <5>, <3>, <1>], [<0>, <2>, <5>, <3>, <4>, <1>], [<0>, <2>, <3>, <1>, <4>, <5>]]',)",0,162
topological_sort,"[(<4>, <2>), (<4>, <0>), (<2>, <3>), (<0>, <2>), (<1>, <2>), (<1>, <0>)]","{<4>: [<2>, <0>],
<2>: [<3>],
<0>: [<2>],
<3>: [],
<1>: [<2>, <0>]}","Node <4> is connected to nodes <2>, <0>.
Node <2> is connected to node <3>.
Node <0> is connected to node <2>.
Node <1> is connected to nodes <2>, <0>.","[<0>, <1>, <2>, <3>, <4>]",5,6,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<4>, <1>, <0>, <2>, <3>]","Let's solve it step by step.
Nodes with 0 in-degree: [<4>, <1>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
So the result of topological sorting is ","('[[<4>, <3>, <1>, <0>, <2>], [<4>, <1>, <2>, <3>, <0>], [<4>, <1>, <0>, <2>, <3>], [<4>, <2>, <1>, <0>, <3>]]',)",2,163
topological_sort,"[(<3>, <5>), (<1>, <2>), (<1>, <4>), (<1>, <3>), (<2>, <5>), (<4>, <5>), (<4>, <0>), (<0>, <2>), (<0>, <5>), (<0>, <3>)]","{<3>: [<5>],
<5>: [],
<1>: [<2>, <4>, <3>],
<2>: [<5>],
<4>: [<5>, <0>],
<0>: [<2>, <5>, <3>]}","Node <3> is connected to node <5>.
Node <1> is connected to nodes <2>, <4>, <3>.
Node <2> is connected to node <5>.
Node <4> is connected to nodes <5>, <0>.
Node <0> is connected to nodes <2>, <5>, <3>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,10,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<1>, <4>, <0>, <2>, <3>, <5>]","Let's solve it step by step.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <3>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
So the result of topological sorting is ","('[[<1>, <4>, <0>, <2>, <3>, <5>], [<1>, <4>, <0>, <2>, <3>, <5>], [<1>, <5>, <2>, <3>, <4>, <0>], [<1>, <4>, <3>, <5>, <0>, <2>]]',)",1,164
topological_sort,"[(<2>, <4>), (<0>, <3>), (<3>, <1>), (<3>, <2>), (<1>, <4>), (<1>, <2>)]","{<2>: [<4>],
<4>: [],
<0>: [<3>],
<3>: [<1>, <2>],
<1>: [<4>, <2>]}","Node <2> is connected to node <4>.
Node <0> is connected to node <3>.
Node <3> is connected to nodes <1>, <2>.
Node <1> is connected to nodes <4>, <2>.","[<0>, <1>, <2>, <3>, <4>]",5,6,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<0>, <3>, <1>, <2>, <4>]","Let's solve it step by step.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
So the result of topological sorting is ","('[[<0>, <4>, <3>, <1>, <2>], [<0>, <1>, <2>, <4>, <3>], [<0>, <3>, <1>, <2>, <4>], [<0>, <3>, <4>, <1>, <2>]]',)",2,165
topological_sort,"[(<3>, <4>), (<3>, <0>), (<0>, <4>), (<2>, <4>), (<2>, <0>), (<1>, <2>), (<1>, <0>)]","{<3>: [<4>, <0>],
<4>: [],
<0>: [<4>],
<2>: [<4>, <0>],
<1>: [<2>, <0>]}","Node <3> is connected to nodes <4>, <0>.
Node <0> is connected to node <4>.
Node <2> is connected to nodes <4>, <0>.
Node <1> is connected to nodes <2>, <0>.","[<0>, <1>, <2>, <3>, <4>]",5,7,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<3>, <1>, <2>, <0>, <4>]","Let's solve it step by step.
Nodes with 0 in-degree: [<3>, <1>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
So the result of topological sorting is ","('[[<3>, <1>, <2>, <0>, <4>], [<3>, <4>, <0>, <1>, <2>], [<3>, <1>, <2>, <4>, <0>], [<3>, <4>, <1>, <2>, <0>]]',)",0,166
topological_sort,"[(<2>, <0>), (<2>, <4>), (<2>, <1>), (<0>, <3>), (<4>, <3>), (<4>, <0>), (<1>, <0>)]","{<2>: [<0>, <4>, <1>],
<0>: [<3>],
<4>: [<3>, <0>],
<1>: [<0>],
<3>: []}","Node <2> is connected to nodes <0>, <4>, <1>.
Node <0> is connected to node <3>.
Node <4> is connected to nodes <3>, <0>.
Node <1> is connected to node <0>.","[<0>, <1>, <2>, <3>, <4>]",5,7,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<2>, <4>, <1>, <0>, <3>]","Let's solve it step by step.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <1>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
So the result of topological sorting is ","('[[<2>, <4>, <1>, <0>, <3>], [<2>, <4>, <1>, <0>, <3>], [<2>, <4>, <1>, <0>, <3>], [<2>, <3>, <4>, <1>, <0>]]',)",2,167
topological_sort,"[(<1>, <4>), (<1>, <6>), (<1>, <2>), (<6>, <2>), (<6>, <5>), (<6>, <4>), (<6>, <0>), (<2>, <4>), (<2>, <5>), (<0>, <5>), (<0>, <4>), (<0>, <2>), (<0>, <3>), (<3>, <5>), (<3>, <4>)]","{<1>: [<4>, <6>, <2>],
<4>: [],
<6>: [<2>, <5>, <4>, <0>],
<2>: [<4>, <5>],
<0>: [<5>, <4>, <2>, <3>],
<5>: [],
<3>: [<5>, <4>]}","Node <1> is connected to nodes <4>, <6>, <2>.
Node <6> is connected to nodes <2>, <5>, <4>, <0>.
Node <2> is connected to nodes <4>, <5>.
Node <0> is connected to nodes <5>, <4>, <2>, <3>.
Node <3> is connected to nodes <5>, <4>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,15,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<1>, <6>, <0>, <2>, <3>, <5>, <4>]","Let's solve it step by step.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <3>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <4>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
So the result of topological sorting is ","('[[<1>, <6>, <0>, <2>, <3>, <5>, <4>], [<1>, <6>, <0>, <2>, <4>, <3>, <5>], [<1>, <6>, <4>, <3>, <2>, <5>, <0>], [<1>, <6>, <5>, <4>, <0>, <2>, <3>]]',)",0,168
topological_sort,"[(<4>, <2>), (<2>, <1>), (<0>, <2>), (<0>, <3>), (<3>, <4>), (<3>, <2>)]","{<4>: [<2>],
<2>: [<1>],
<1>: [],
<0>: [<2>, <3>],
<3>: [<4>, <2>]}","Node <4> is connected to node <2>.
Node <2> is connected to node <1>.
Node <0> is connected to nodes <2>, <3>.
Node <3> is connected to nodes <4>, <2>.","[<0>, <1>, <2>, <3>, <4>]",5,6,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<0>, <3>, <4>, <2>, <1>]","Let's solve it step by step.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
So the result of topological sorting is ","('[[<0>, <4>, <3>, <2>, <1>], [<0>, <3>, <1>, <2>, <4>], [<0>, <1>, <3>, <4>, <2>], [<0>, <3>, <4>, <2>, <1>]]',)",3,169
topological_sort,"[(<0>, <3>), (<0>, <4>), (<0>, <2>), (<3>, <2>), (<4>, <2>), (<2>, <5>), (<1>, <5>), (<1>, <3>), (<1>, <2>)]","{<0>: [<3>, <4>, <2>],
<3>: [<2>],
<4>: [<2>],
<2>: [<5>],
<5>: [],
<1>: [<5>, <3>, <2>]}","Node <0> is connected to nodes <3>, <4>, <2>.
Node <3> is connected to node <2>.
Node <4> is connected to node <2>.
Node <2> is connected to node <5>.
Node <1> is connected to nodes <5>, <3>, <2>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,9,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<0>, <1>, <4>, <3>, <2>, <5>]","Let's solve it step by step.
Nodes with 0 in-degree: [<0>, <1>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <4>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <3>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
So the result of topological sorting is ","('[[<0>, <4>, <1>, <5>, <2>, <3>], [<0>, <1>, <2>, <5>, <4>, <3>], [<0>, <1>, <4>, <3>, <5>, <2>], [<0>, <1>, <4>, <3>, <2>, <5>]]',)",3,170
topological_sort,"[(<4>, <6>), (<0>, <6>), (<0>, <1>), (<0>, <2>), (<1>, <4>), (<1>, <3>), (<1>, <5>), (<2>, <6>), (<2>, <1>), (<2>, <4>), (<2>, <3>), (<3>, <5>)]","{<4>: [<6>],
<6>: [],
<0>: [<6>, <1>, <2>],
<1>: [<4>, <3>, <5>],
<2>: [<6>, <1>, <4>, <3>],
<3>: [<5>],
<5>: []}","Node <4> is connected to node <6>.
Node <0> is connected to nodes <6>, <1>, <2>.
Node <1> is connected to nodes <4>, <3>, <5>.
Node <2> is connected to nodes <6>, <1>, <4>, <3>.
Node <3> is connected to node <5>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,12,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<0>, <2>, <1>, <4>, <3>, <6>, <5>]","Let's solve it step by step.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <3>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <6>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <5>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
So the result of topological sorting is ","('[[<0>, <2>, <1>, <4>, <3>, <6>, <5>], [<0>, <2>, <6>, <5>, <1>, <4>, <3>], [<0>, <4>, <6>, <3>, <5>, <2>, <1>], [<0>, <2>, <1>, <6>, <3>, <5>, <4>]]',)",0,171
topological_sort,"[(<0>, <1>), (<0>, <2>), (<5>, <0>), (<5>, <1>), (<3>, <5>), (<3>, <0>), (<4>, <2>)]","{<0>: [<1>, <2>],
<1>: [],
<2>: [],
<5>: [<0>, <1>],
<3>: [<5>, <0>],
<4>: [<2>]}","Node <0> is connected to nodes <1>, <2>.
Node <5> is connected to nodes <0>, <1>.
Node <3> is connected to nodes <5>, <0>.
Node <4> is connected to node <2>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,7,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<3>, <4>, <5>, <0>, <1>, <2>]","Let's solve it step by step.
Nodes with 0 in-degree: [<3>, <4>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <5>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <2>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
So the result of topological sorting is ","('[[<3>, <4>, <5>, <0>, <1>, <2>], [<3>, <4>, <1>, <2>, <5>, <0>], [<3>, <4>, <5>, <2>, <0>, <1>], [<3>, <5>, <0>, <2>, <1>, <4>]]',)",0,172
topological_sort,"[(<4>, <3>), (<4>, <0>), (<3>, <1>), (<3>, <2>), (<3>, <0>), (<0>, <2>)]","{<4>: [<3>, <0>],
<3>: [<1>, <2>, <0>],
<0>: [<2>],
<1>: [],
<2>: []}","Node <4> is connected to nodes <3>, <0>.
Node <3> is connected to nodes <1>, <2>, <0>.
Node <0> is connected to node <2>.","[<0>, <1>, <2>, <3>, <4>]",5,6,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<4>, <3>, <1>, <0>, <2>]","Let's solve it step by step.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <0>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
So the result of topological sorting is ","('[[<4>, <2>, <3>, <1>, <0>], [<4>, <3>, <0>, <2>, <1>], [<4>, <3>, <1>, <0>, <2>], [<4>, <0>, <3>, <2>, <1>]]',)",2,173
topological_sort,"[(<1>, <0>), (<0>, <3>), (<0>, <4>), (<3>, <2>), (<3>, <5>), (<3>, <4>), (<4>, <2>), (<4>, <5>)]","{<1>: [<0>],
<0>: [<3>, <4>],
<3>: [<2>, <5>, <4>],
<4>: [<2>, <5>],
<2>: [],
<5>: []}","Node <1> is connected to node <0>.
Node <0> is connected to nodes <3>, <4>.
Node <3> is connected to nodes <2>, <5>, <4>.
Node <4> is connected to nodes <2>, <5>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,8,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<1>, <0>, <3>, <4>, <2>, <5>]","Let's solve it step by step.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <5>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
So the result of topological sorting is ","('[[<1>, <5>, <3>, <2>, <4>, <0>], [<1>, <0>, <3>, <5>, <4>, <2>], [<1>, <0>, <2>, <5>, <3>, <4>], [<1>, <0>, <3>, <4>, <2>, <5>]]',)",3,174
topological_sort,"[(<2>, <5>), (<2>, <6>), (<5>, <0>), (<5>, <3>), (<6>, <4>), (<6>, <5>), (<6>, <3>), (<3>, <1>), (<4>, <0>), (<4>, <5>)]","{<2>: [<5>, <6>],
<5>: [<0>, <3>],
<6>: [<4>, <5>, <3>],
<0>: [],
<3>: [<1>],
<4>: [<0>, <5>],
<1>: []}","Node <2> is connected to nodes <5>, <6>.
Node <5> is connected to nodes <0>, <3>.
Node <6> is connected to nodes <4>, <5>, <3>.
Node <3> is connected to node <1>.
Node <4> is connected to nodes <0>, <5>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,10,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<2>, <6>, <4>, <5>, <0>, <3>, <1>]","Let's solve it step by step.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <3>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
So the result of topological sorting is ","('[[<2>, <6>, <4>, <3>, <1>, <0>, <5>], [<2>, <0>, <6>, <3>, <5>, <1>, <4>], [<2>, <6>, <3>, <1>, <4>, <5>, <0>], [<2>, <6>, <4>, <5>, <0>, <3>, <1>]]',)",3,175
topological_sort,"[(<1>, <5>), (<1>, <6>), (<1>, <3>), (<1>, <0>), (<5>, <4>), (<6>, <4>), (<6>, <0>), (<3>, <4>), (<3>, <5>), (<0>, <5>), (<0>, <4>), (<2>, <1>), (<2>, <5>)]","{<1>: [<5>, <6>, <3>, <0>],
<5>: [<4>],
<6>: [<4>, <0>],
<3>: [<4>, <5>],
<0>: [<5>, <4>],
<4>: [],
<2>: [<1>, <5>]}","Node <1> is connected to nodes <5>, <6>, <3>, <0>.
Node <5> is connected to node <4>.
Node <6> is connected to nodes <4>, <0>.
Node <3> is connected to nodes <4>, <5>.
Node <0> is connected to nodes <5>, <4>.
Node <2> is connected to nodes <1>, <5>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,13,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<2>, <1>, <6>, <3>, <0>, <5>, <4>]","Let's solve it step by step.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <3>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <0>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
So the result of topological sorting is ","('[[<2>, <1>, <6>, <0>, <4>, <5>, <3>], [<2>, <1>, <5>, <4>, <6>, <3>, <0>], [<2>, <4>, <1>, <0>, <6>, <3>, <5>], [<2>, <1>, <6>, <3>, <0>, <5>, <4>]]',)",3,176
topological_sort,"[(<0>, <3>), (<0>, <2>), (<0>, <5>), (<1>, <2>), (<1>, <4>), (<1>, <0>), (<4>, <2>), (<4>, <3>)]","{<0>: [<3>, <2>, <5>],
<3>: [],
<2>: [],
<5>: [],
<1>: [<2>, <4>, <0>],
<4>: [<2>, <3>]}","Node <0> is connected to nodes <3>, <2>, <5>.
Node <1> is connected to nodes <2>, <4>, <0>.
Node <4> is connected to nodes <2>, <3>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,8,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<1>, <4>, <0>, <3>, <2>, <5>]","Let's solve it step by step.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <0>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <2>, <5>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <5>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
So the result of topological sorting is ","('[[<1>, <4>, <2>, <5>, <0>, <3>], [<1>, <2>, <3>, <5>, <0>, <4>], [<1>, <4>, <0>, <3>, <2>, <5>], [<1>, <4>, <0>, <3>, <2>, <5>]]',)",3,177
topological_sort,"[(<0>, <1>), (<0>, <3>), (<0>, <4>), (<3>, <4>), (<3>, <2>), (<4>, <1>), (<2>, <1>)]","{<0>: [<1>, <3>, <4>],
<1>: [],
<3>: [<4>, <2>],
<4>: [<1>],
<2>: [<1>]}","Node <0> is connected to nodes <1>, <3>, <4>.
Node <3> is connected to nodes <4>, <2>.
Node <4> is connected to node <1>.
Node <2> is connected to node <1>.","[<0>, <1>, <2>, <3>, <4>]",5,7,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<0>, <3>, <4>, <2>, <1>]","Let's solve it step by step.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <2>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
So the result of topological sorting is ","('[[<0>, <1>, <3>, <4>, <2>], [<0>, <1>, <2>, <4>, <3>], [<0>, <3>, <2>, <4>, <1>], [<0>, <3>, <4>, <2>, <1>]]',)",3,178
topological_sort,"[(<2>, <1>), (<2>, <3>), (<2>, <4>), (<2>, <5>), (<3>, <5>), (<3>, <1>), (<4>, <1>), (<4>, <3>), (<5>, <1>), (<0>, <2>), (<0>, <3>), (<0>, <4>)]","{<2>: [<1>, <3>, <4>, <5>],
<1>: [],
<3>: [<5>, <1>],
<4>: [<1>, <3>],
<5>: [<1>],
<0>: [<2>, <3>, <4>]}","Node <2> is connected to nodes <1>, <3>, <4>, <5>.
Node <3> is connected to nodes <5>, <1>.
Node <4> is connected to nodes <1>, <3>.
Node <5> is connected to node <1>.
Node <0> is connected to nodes <2>, <3>, <4>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,12,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<0>, <2>, <4>, <3>, <5>, <1>]","Let's solve it step by step.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
So the result of topological sorting is ","('[[<0>, <2>, <5>, <1>, <4>, <3>], [<0>, <5>, <3>, <4>, <1>, <2>], [<0>, <2>, <4>, <1>, <5>, <3>], [<0>, <2>, <4>, <3>, <5>, <1>]]',)",3,179
topological_sort,"[(<4>, <2>), (<4>, <0>), (<4>, <1>), (<4>, <3>), (<2>, <3>), (<0>, <2>), (<0>, <3>)]","{<4>: [<2>, <0>, <1>, <3>],
<2>: [<3>],
<0>: [<2>, <3>],
<1>: [],
<3>: []}","Node <4> is connected to nodes <2>, <0>, <1>, <3>.
Node <2> is connected to node <3>.
Node <0> is connected to nodes <2>, <3>.","[<0>, <1>, <2>, <3>, <4>]",5,7,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<4>, <0>, <1>, <2>, <3>]","Let's solve it step by step.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <1>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <2>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
So the result of topological sorting is ","('[[<4>, <0>, <1>, <3>, <2>], [<4>, <3>, <0>, <1>, <2>], [<4>, <1>, <3>, <0>, <2>], [<4>, <0>, <1>, <2>, <3>]]',)",3,180
topological_sort,"[(<3>, <2>), (<3>, <1>), (<1>, <2>), (<4>, <3>), (<0>, <4>), (<0>, <1>)]","{<3>: [<2>, <1>],
<2>: [],
<1>: [<2>],
<4>: [<3>],
<0>: [<4>, <1>]}","Node <3> is connected to nodes <2>, <1>.
Node <1> is connected to node <2>.
Node <4> is connected to node <3>.
Node <0> is connected to nodes <4>, <1>.","[<0>, <1>, <2>, <3>, <4>]",5,6,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<0>, <4>, <3>, <1>, <2>]","Let's solve it step by step.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
So the result of topological sorting is ","('[[<0>, <2>, <4>, <3>, <1>], [<0>, <1>, <2>, <3>, <4>], [<0>, <4>, <2>, <1>, <3>], [<0>, <4>, <3>, <1>, <2>]]',)",3,181
topological_sort,"[(<4>, <2>), (<3>, <4>), (<3>, <2>), (<1>, <3>), (<0>, <4>), (<0>, <1>), (<0>, <2>)]","{<4>: [<2>],
<2>: [],
<3>: [<4>, <2>],
<1>: [<3>],
<0>: [<4>, <1>, <2>]}","Node <4> is connected to node <2>.
Node <3> is connected to nodes <4>, <2>.
Node <1> is connected to node <3>.
Node <0> is connected to nodes <4>, <1>, <2>.","[<0>, <1>, <2>, <3>, <4>]",5,7,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<0>, <1>, <3>, <4>, <2>]","Let's solve it step by step.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
So the result of topological sorting is ","('[[<0>, <1>, <3>, <4>, <2>], [<0>, <1>, <3>, <4>, <2>], [<0>, <2>, <1>, <3>, <4>], [<0>, <4>, <3>, <2>, <1>]]',)",0,182
topological_sort,"[(<0>, <1>), (<1>, <3>), (<1>, <2>), (<3>, <2>), (<3>, <6>), (<6>, <2>), (<6>, <4>), (<5>, <1>), (<5>, <4>)]","{<0>: [<1>],
<1>: [<3>, <2>],
<3>: [<2>, <6>],
<2>: [],
<6>: [<2>, <4>],
<4>: [],
<5>: [<1>, <4>]}","Node <0> is connected to node <1>.
Node <1> is connected to nodes <3>, <2>.
Node <3> is connected to nodes <2>, <6>.
Node <6> is connected to nodes <2>, <4>.
Node <5> is connected to nodes <1>, <4>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,9,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<0>, <5>, <1>, <3>, <6>, <2>, <4>]","Let's solve it step by step.
Nodes with 0 in-degree: [<0>, <5>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <4>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
So the result of topological sorting is ","('[[<0>, <5>, <1>, <2>, <3>, <6>, <4>], [<0>, <4>, <5>, <3>, <1>, <2>, <6>], [<0>, <5>, <1>, <3>, <6>, <2>, <4>], [<0>, <5>, <2>, <4>, <1>, <3>, <6>]]',)",2,183
topological_sort,"[(<5>, <3>), (<5>, <2>), (<3>, <2>), (<3>, <0>), (<2>, <1>), (<0>, <2>), (<4>, <3>), (<4>, <1>), (<4>, <0>)]","{<5>: [<3>, <2>],
<3>: [<2>, <0>],
<2>: [<1>],
<0>: [<2>],
<1>: [],
<4>: [<3>, <1>, <0>]}","Node <5> is connected to nodes <3>, <2>.
Node <3> is connected to nodes <2>, <0>.
Node <2> is connected to node <1>.
Node <0> is connected to node <2>.
Node <4> is connected to nodes <3>, <1>, <0>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,9,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<5>, <4>, <3>, <0>, <2>, <1>]","Let's solve it step by step.
Nodes with 0 in-degree: [<5>, <4>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
So the result of topological sorting is ","('[[<5>, <4>, <3>, <0>, <2>, <1>], [<5>, <4>, <3>, <0>, <2>, <1>], [<5>, <4>, <2>, <1>, <3>, <0>], [<5>, <0>, <3>, <4>, <1>, <2>]]',)",1,184
topological_sort,"[(<5>, <2>), (<5>, <0>), (<5>, <3>), (<2>, <0>), (<2>, <4>), (<0>, <1>), (<0>, <4>), (<3>, <0>), (<3>, <1>)]","{<5>: [<2>, <0>, <3>],
<2>: [<0>, <4>],
<0>: [<1>, <4>],
<3>: [<0>, <1>],
<4>: [],
<1>: []}","Node <5> is connected to nodes <2>, <0>, <3>.
Node <2> is connected to nodes <0>, <4>.
Node <0> is connected to nodes <1>, <4>.
Node <3> is connected to nodes <0>, <1>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,9,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<5>, <2>, <3>, <0>, <1>, <4>]","Let's solve it step by step.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <3>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <4>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
So the result of topological sorting is ","('[[<5>, <0>, <4>, <1>, <3>, <2>], [<5>, <2>, <3>, <0>, <1>, <4>], [<5>, <2>, <3>, <4>, <1>, <0>], [<5>, <2>, <1>, <4>, <3>, <0>]]',)",1,185
topological_sort,"[(<1>, <4>), (<1>, <5>), (<4>, <5>), (<2>, <5>), (<2>, <0>), (<0>, <1>), (<3>, <2>)]","{<1>: [<4>, <5>],
<4>: [<5>],
<5>: [],
<2>: [<5>, <0>],
<0>: [<1>],
<3>: [<2>]}","Node <1> is connected to nodes <4>, <5>.
Node <4> is connected to node <5>.
Node <2> is connected to nodes <5>, <0>.
Node <0> is connected to node <1>.
Node <3> is connected to node <2>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,7,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<3>, <2>, <0>, <1>, <4>, <5>]","Let's solve it step by step.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
So the result of topological sorting is ","('[[<3>, <2>, <0>, <5>, <4>, <1>], [<3>, <2>, <0>, <1>, <4>, <5>], [<3>, <2>, <4>, <5>, <0>, <1>], [<3>, <2>, <1>, <4>, <5>, <0>]]',)",1,186
topological_sort,"[(<1>, <2>), (<4>, <3>), (<3>, <5>), (<5>, <1>), (<0>, <3>), (<0>, <1>)]","{<1>: [<2>],
<2>: [],
<4>: [<3>],
<3>: [<5>],
<5>: [<1>],
<0>: [<3>, <1>]}","Node <1> is connected to node <2>.
Node <4> is connected to node <3>.
Node <3> is connected to node <5>.
Node <5> is connected to node <1>.
Node <0> is connected to nodes <3>, <1>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,6,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<4>, <0>, <3>, <5>, <1>, <2>]","Let's solve it step by step.
Nodes with 0 in-degree: [<4>, <0>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
So the result of topological sorting is ","('[[<4>, <0>, <1>, <2>, <3>, <5>], [<4>, <0>, <3>, <5>, <1>, <2>], [<4>, <3>, <0>, <2>, <1>, <5>], [<4>, <0>, <3>, <1>, <2>, <5>]]',)",1,187
topological_sort,"[(<0>, <4>), (<0>, <5>), (<4>, <1>), (<4>, <2>), (<5>, <4>), (<3>, <2>), (<3>, <4>), (<3>, <0>), (<3>, <1>), (<3>, <5>)]","{<0>: [<4>, <5>],
<4>: [<1>, <2>],
<5>: [<4>],
<1>: [],
<2>: [],
<3>: [<2>, <4>, <0>, <1>, <5>]}","Node <0> is connected to nodes <4>, <5>.
Node <4> is connected to nodes <1>, <2>.
Node <5> is connected to node <4>.
Node <3> is connected to nodes <2>, <4>, <0>, <1>, <5>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,10,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<3>, <0>, <5>, <4>, <1>, <2>]","Let's solve it step by step.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <2>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
So the result of topological sorting is ","('[[<3>, <2>, <4>, <0>, <5>, <1>], [<3>, <0>, <5>, <4>, <1>, <2>], [<3>, <0>, <1>, <2>, <5>, <4>], [<3>, <0>, <5>, <4>, <1>, <2>]]',)",3,188
topological_sort,"[(<1>, <0>), (<2>, <4>), (<4>, <0>), (<3>, <2>), (<3>, <1>)]","{<1>: [<0>],
<0>: [],
<2>: [<4>],
<4>: [<0>],
<3>: [<2>, <1>]}","Node <1> is connected to node <0>.
Node <2> is connected to node <4>.
Node <4> is connected to node <0>.
Node <3> is connected to nodes <2>, <1>.","[<0>, <1>, <2>, <3>, <4>]",5,5,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<3>, <2>, <1>, <4>, <0>]","Let's solve it step by step.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <1>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <4>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
So the result of topological sorting is ","('[[<3>, <0>, <2>, <1>, <4>], [<3>, <0>, <2>, <4>, <1>], [<3>, <2>, <1>, <4>, <0>], [<3>, <2>, <1>, <4>, <0>]]',)",2,189
topological_sort,"[(<3>, <1>), (<3>, <2>), (<3>, <5>), (<3>, <4>), (<1>, <5>), (<5>, <4>), (<5>, <2>), (<0>, <5>), (<0>, <2>), (<0>, <3>)]","{<3>: [<1>, <2>, <5>, <4>],
<1>: [<5>],
<2>: [],
<5>: [<4>, <2>],
<4>: [],
<0>: [<5>, <2>, <3>]}","Node <3> is connected to nodes <1>, <2>, <5>, <4>.
Node <1> is connected to node <5>.
Node <5> is connected to nodes <4>, <2>.
Node <0> is connected to nodes <5>, <2>, <3>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,10,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<0>, <3>, <1>, <5>, <4>, <2>]","Let's solve it step by step.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <2>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
So the result of topological sorting is ","('[[<0>, <3>, <4>, <2>, <1>, <5>], [<0>, <3>, <1>, <5>, <4>, <2>], [<0>, <1>, <4>, <2>, <5>, <3>], [<0>, <3>, <1>, <4>, <5>, <2>]]',)",1,190
topological_sort,"[(<0>, <3>), (<5>, <0>), (<1>, <5>), (<2>, <1>), (<2>, <0>), (<4>, <3>), (<4>, <1>)]","{<0>: [<3>],
<3>: [],
<5>: [<0>],
<1>: [<5>],
<2>: [<1>, <0>],
<4>: [<3>, <1>]}","Node <0> is connected to node <3>.
Node <5> is connected to node <0>.
Node <1> is connected to node <5>.
Node <2> is connected to nodes <1>, <0>.
Node <4> is connected to nodes <3>, <1>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,7,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<2>, <4>, <1>, <5>, <0>, <3>]","Let's solve it step by step.
Nodes with 0 in-degree: [<2>, <4>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
So the result of topological sorting is ","('[[<2>, <4>, <0>, <3>, <1>, <5>], [<2>, <4>, <1>, <5>, <0>, <3>], [<2>, <3>, <1>, <5>, <4>, <0>], [<2>, <4>, <1>, <3>, <0>, <5>]]',)",1,191
topological_sort,"[(<3>, <0>), (<5>, <0>), (<5>, <3>), (<5>, <4>), (<1>, <2>), (<1>, <5>), (<1>, <0>), (<2>, <3>), (<2>, <4>)]","{<3>: [<0>],
<0>: [],
<5>: [<0>, <3>, <4>],
<4>: [],
<1>: [<2>, <5>, <0>],
<2>: [<3>, <4>]}","Node <3> is connected to node <0>.
Node <5> is connected to nodes <0>, <3>, <4>.
Node <1> is connected to nodes <2>, <5>, <0>.
Node <2> is connected to nodes <3>, <4>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,9,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<1>, <2>, <5>, <3>, <4>, <0>]","Let's solve it step by step.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <5>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <4>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <0>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
So the result of topological sorting is ","('[[<1>, <5>, <3>, <0>, <2>, <4>], [<1>, <2>, <4>, <0>, <5>, <3>], [<1>, <2>, <5>, <3>, <4>, <0>], [<1>, <2>, <5>, <3>, <4>, <0>]]',)",3,192
topological_sort,"[(<5>, <0>), (<5>, <4>), (<5>, <1>), (<0>, <4>), (<1>, <4>), (<2>, <0>), (<2>, <5>), (<3>, <4>)]","{<5>: [<0>, <4>, <1>],
<0>: [<4>],
<4>: [],
<1>: [<4>],
<2>: [<0>, <5>],
<3>: [<4>]}","Node <5> is connected to nodes <0>, <4>, <1>.
Node <0> is connected to node <4>.
Node <1> is connected to node <4>.
Node <2> is connected to nodes <0>, <5>.
Node <3> is connected to node <4>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,8,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<2>, <3>, <5>, <0>, <1>, <4>]","Let's solve it step by step.
Nodes with 0 in-degree: [<2>, <3>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <5>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <1>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
So the result of topological sorting is ","('[[<2>, <3>, <5>, <0>, <4>, <1>], [<2>, <3>, <5>, <4>, <1>, <0>], [<2>, <3>, <1>, <4>, <5>, <0>], [<2>, <3>, <5>, <0>, <1>, <4>]]',)",3,193
topological_sort,"[(<2>, <0>), (<2>, <5>), (<0>, <5>), (<5>, <3>), (<1>, <0>), (<1>, <5>), (<4>, <2>)]","{<2>: [<0>, <5>],
<0>: [<5>],
<5>: [<3>],
<1>: [<0>, <5>],
<3>: [],
<4>: [<2>]}","Node <2> is connected to nodes <0>, <5>.
Node <0> is connected to node <5>.
Node <5> is connected to node <3>.
Node <1> is connected to nodes <0>, <5>.
Node <4> is connected to node <2>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,7,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<1>, <4>, <2>, <0>, <5>, <3>]","Let's solve it step by step.
Nodes with 0 in-degree: [<1>, <4>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
So the result of topological sorting is ","('[[<1>, <4>, <2>, <0>, <5>, <3>], [<1>, <4>, <2>, <0>, <5>, <3>], [<1>, <4>, <5>, <3>, <0>, <2>], [<1>, <4>, <5>, <3>, <2>, <0>]]',)",0,194
topological_sort,"[(<5>, <0>), (<5>, <1>), (<2>, <3>), (<2>, <4>), (<2>, <1>), (<3>, <5>), (<4>, <5>)]","{<5>: [<0>, <1>],
<0>: [],
<1>: [],
<2>: [<3>, <4>, <1>],
<3>: [<5>],
<4>: [<5>]}","Node <5> is connected to nodes <0>, <1>.
Node <2> is connected to nodes <3>, <4>, <1>.
Node <3> is connected to node <5>.
Node <4> is connected to node <5>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,7,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<2>, <3>, <4>, <5>, <0>, <1>]","Let's solve it step by step.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <4>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <1>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
So the result of topological sorting is ","('[[<2>, <4>, <0>, <1>, <5>, <3>], [<2>, <3>, <4>, <5>, <1>, <0>], [<2>, <3>, <0>, <1>, <4>, <5>], [<2>, <3>, <4>, <5>, <0>, <1>]]',)",3,195
topological_sort,"[(<2>, <0>), (<2>, <4>), (<2>, <1>), (<0>, <4>), (<0>, <3>), (<1>, <4>), (<3>, <1>)]","{<2>: [<0>, <4>, <1>],
<0>: [<4>, <3>],
<4>: [],
<1>: [<4>],
<3>: [<1>]}","Node <2> is connected to nodes <0>, <4>, <1>.
Node <0> is connected to nodes <4>, <3>.
Node <1> is connected to node <4>.
Node <3> is connected to node <1>.","[<0>, <1>, <2>, <3>, <4>]",5,7,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<2>, <0>, <3>, <1>, <4>]","Let's solve it step by step.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
So the result of topological sorting is ","('[[<2>, <0>, <3>, <1>, <4>], [<2>, <4>, <0>, <3>, <1>], [<2>, <0>, <4>, <1>, <3>], [<2>, <0>, <3>, <1>, <4>]]',)",0,196
topological_sort,"[(<6>, <4>), (<6>, <2>), (<4>, <0>), (<0>, <2>), (<0>, <5>), (<3>, <2>), (<3>, <5>), (<3>, <6>), (<1>, <6>), (<1>, <3>), (<1>, <5>)]","{<6>: [<4>, <2>],
<4>: [<0>],
<2>: [],
<0>: [<2>, <5>],
<5>: [],
<3>: [<2>, <5>, <6>],
<1>: [<6>, <3>, <5>]}","Node <6> is connected to nodes <4>, <2>.
Node <4> is connected to node <0>.
Node <0> is connected to nodes <2>, <5>.
Node <3> is connected to nodes <2>, <5>, <6>.
Node <1> is connected to nodes <6>, <3>, <5>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,11,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<1>, <3>, <6>, <4>, <0>, <2>, <5>]","Let's solve it step by step.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <5>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
So the result of topological sorting is ","('[[<1>, <3>, <2>, <5>, <6>, <4>, <0>], [<1>, <3>, <6>, <4>, <0>, <2>, <5>], [<1>, <3>, <0>, <6>, <2>, <4>, <5>], [<1>, <3>, <6>, <4>, <2>, <0>, <5>]]',)",1,197
topological_sort,"[(<2>, <1>), (<2>, <5>), (<1>, <6>), (<6>, <4>), (<6>, <5>), (<3>, <1>), (<3>, <2>), (<0>, <5>), (<0>, <1>), (<0>, <3>)]","{<2>: [<1>, <5>],
<1>: [<6>],
<5>: [],
<6>: [<4>, <5>],
<4>: [],
<3>: [<1>, <2>],
<0>: [<5>, <1>, <3>]}","Node <2> is connected to nodes <1>, <5>.
Node <1> is connected to node <6>.
Node <6> is connected to nodes <4>, <5>.
Node <3> is connected to nodes <1>, <2>.
Node <0> is connected to nodes <5>, <1>, <3>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,10,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<0>, <3>, <2>, <1>, <6>, <4>, <5>]","Let's solve it step by step.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <5>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
So the result of topological sorting is ","('[[<0>, <6>, <1>, <3>, <2>, <4>, <5>], [<0>, <3>, <2>, <4>, <6>, <5>, <1>], [<0>, <3>, <2>, <1>, <6>, <4>, <5>], [<0>, <3>, <4>, <5>, <2>, <1>, <6>]]',)",2,198
topological_sort,"[(<2>, <4>), (<2>, <1>), (<2>, <3>), (<4>, <1>), (<4>, <3>), (<3>, <0>), (<3>, <1>), (<0>, <1>)]","{<2>: [<4>, <1>, <3>],
<4>: [<1>, <3>],
<1>: [],
<3>: [<0>, <1>],
<0>: [<1>]}","Node <2> is connected to nodes <4>, <1>, <3>.
Node <4> is connected to nodes <1>, <3>.
Node <3> is connected to nodes <0>, <1>.
Node <0> is connected to node <1>.","[<0>, <1>, <2>, <3>, <4>]",5,8,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<2>, <4>, <3>, <0>, <1>]","Let's solve it step by step.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
So the result of topological sorting is ","('[[<2>, <1>, <4>, <3>, <0>], [<2>, <4>, <3>, <0>, <1>], [<2>, <4>, <1>, <0>, <3>], [<2>, <0>, <4>, <1>, <3>]]',)",1,199
topological_sort,"[(<2>, <3>), (<2>, <0>), (<2>, <4>), (<2>, <1>), (<3>, <0>), (<4>, <0>), (<4>, <3>), (<1>, <3>), (<1>, <0>), (<5>, <2>), (<5>, <4>)]","{<2>: [<3>, <0>, <4>, <1>],
<3>: [<0>],
<0>: [],
<4>: [<0>, <3>],
<1>: [<3>, <0>],
<5>: [<2>, <4>]}","Node <2> is connected to nodes <3>, <0>, <4>, <1>.
Node <3> is connected to node <0>.
Node <4> is connected to nodes <0>, <3>.
Node <1> is connected to nodes <3>, <0>.
Node <5> is connected to nodes <2>, <4>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,11,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<5>, <2>, <4>, <1>, <3>, <0>]","Let's solve it step by step.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <1>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
So the result of topological sorting is ","('[[<5>, <0>, <1>, <3>, <2>, <4>], [<5>, <2>, <4>, <3>, <1>, <0>], [<5>, <2>, <4>, <1>, <3>, <0>], [<5>, <2>, <3>, <0>, <4>, <1>]]',)",2,200
topological_sort,"[(<5>, <1>), (<5>, <4>), (<5>, <6>), (<4>, <1>), (<6>, <4>), (<2>, <6>), (<2>, <5>), (<2>, <4>), (<3>, <6>), (<3>, <2>), (<3>, <5>), (<0>, <3>), (<0>, <1>)]","{<5>: [<1>, <4>, <6>],
<1>: [],
<4>: [<1>],
<6>: [<4>],
<2>: [<6>, <5>, <4>],
<3>: [<6>, <2>, <5>],
<0>: [<3>, <1>]}","Node <5> is connected to nodes <1>, <4>, <6>.
Node <4> is connected to node <1>.
Node <6> is connected to node <4>.
Node <2> is connected to nodes <6>, <5>, <4>.
Node <3> is connected to nodes <6>, <2>, <5>.
Node <0> is connected to nodes <3>, <1>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,13,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<0>, <3>, <2>, <5>, <6>, <4>, <1>]","Let's solve it step by step.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
So the result of topological sorting is ","('[[<0>, <3>, <2>, <5>, <1>, <4>, <6>], [<0>, <3>, <2>, <5>, <6>, <4>, <1>], [<0>, <6>, <4>, <3>, <2>, <5>, <1>], [<0>, <3>, <4>, <1>, <2>, <5>, <6>]]',)",1,201
topological_sort,"[(<2>, <0>), (<2>, <1>), (<0>, <3>), (<0>, <1>), (<1>, <3>), (<4>, <3>), (<4>, <1>)]","{<2>: [<0>, <1>],
<0>: [<3>, <1>],
<1>: [<3>],
<3>: [],
<4>: [<3>, <1>]}","Node <2> is connected to nodes <0>, <1>.
Node <0> is connected to nodes <3>, <1>.
Node <1> is connected to node <3>.
Node <4> is connected to nodes <3>, <1>.","[<0>, <1>, <2>, <3>, <4>]",5,7,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<2>, <4>, <0>, <1>, <3>]","Let's solve it step by step.
Nodes with 0 in-degree: [<2>, <4>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <0>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
So the result of topological sorting is ","('[[<2>, <4>, <3>, <1>, <0>], [<2>, <3>, <4>, <0>, <1>], [<2>, <4>, <1>, <0>, <3>], [<2>, <4>, <0>, <1>, <3>]]',)",3,202
topological_sort,"[(<5>, <0>), (<5>, <3>), (<5>, <2>), (<0>, <3>), (<3>, <4>), (<3>, <2>), (<4>, <2>), (<1>, <0>)]","{<5>: [<0>, <3>, <2>],
<0>: [<3>],
<3>: [<4>, <2>],
<2>: [],
<4>: [<2>],
<1>: [<0>]}","Node <5> is connected to nodes <0>, <3>, <2>.
Node <0> is connected to node <3>.
Node <3> is connected to nodes <4>, <2>.
Node <4> is connected to node <2>.
Node <1> is connected to node <0>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,8,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<5>, <1>, <0>, <3>, <4>, <2>]","Let's solve it step by step.
Nodes with 0 in-degree: [<5>, <1>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
So the result of topological sorting is ","('[[<5>, <2>, <0>, <1>, <3>, <4>], [<5>, <1>, <0>, <3>, <4>, <2>], [<5>, <1>, <0>, <2>, <3>, <4>], [<5>, <1>, <4>, <2>, <0>, <3>]]',)",1,203
topological_sort,"[(<2>, <1>), (<2>, <3>), (<3>, <0>), (<3>, <1>), (<0>, <1>), (<5>, <4>), (<5>, <3>), (<4>, <0>)]","{<2>: [<1>, <3>],
<1>: [],
<3>: [<0>, <1>],
<0>: [<1>],
<5>: [<4>, <3>],
<4>: [<0>]}","Node <2> is connected to nodes <1>, <3>.
Node <3> is connected to nodes <0>, <1>.
Node <0> is connected to node <1>.
Node <5> is connected to nodes <4>, <3>.
Node <4> is connected to node <0>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,8,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<2>, <5>, <4>, <3>, <0>, <1>]","Let's solve it step by step.
Nodes with 0 in-degree: [<2>, <5>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <3>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
So the result of topological sorting is ","('[[<2>, <5>, <4>, <3>, <0>, <1>], [<2>, <5>, <4>, <3>, <0>, <1>], [<2>, <5>, <0>, <1>, <4>, <3>], [<2>, <1>, <5>, <0>, <3>, <4>]]',)",0,204
topological_sort,"[(<6>, <4>), (<0>, <5>), (<5>, <1>), (<5>, <4>), (<1>, <6>), (<2>, <4>), (<3>, <0>), (<3>, <5>), (<3>, <2>)]","{<6>: [<4>],
<4>: [],
<0>: [<5>],
<5>: [<1>, <4>],
<1>: [<6>],
<2>: [<4>],
<3>: [<0>, <5>, <2>]}","Node <6> is connected to node <4>.
Node <0> is connected to node <5>.
Node <5> is connected to nodes <1>, <4>.
Node <1> is connected to node <6>.
Node <2> is connected to node <4>.
Node <3> is connected to nodes <0>, <5>, <2>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,9,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<3>, <0>, <2>, <5>, <1>, <6>, <4>]","Let's solve it step by step.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <2>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <5>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
So the result of topological sorting is ","('[[<3>, <0>, <6>, <4>, <2>, <5>, <1>], [<3>, <0>, <2>, <1>, <6>, <4>, <5>], [<3>, <0>, <2>, <5>, <1>, <6>, <4>], [<3>, <5>, <4>, <0>, <2>, <6>, <1>]]',)",2,205
topological_sort,"[(<2>, <5>), (<2>, <4>), (<2>, <0>), (<4>, <5>), (<0>, <5>), (<3>, <5>), (<3>, <2>), (<1>, <2>), (<1>, <0>)]","{<2>: [<5>, <4>, <0>],
<5>: [],
<4>: [<5>],
<0>: [<5>],
<3>: [<5>, <2>],
<1>: [<2>, <0>]}","Node <2> is connected to nodes <5>, <4>, <0>.
Node <4> is connected to node <5>.
Node <0> is connected to node <5>.
Node <3> is connected to nodes <5>, <2>.
Node <1> is connected to nodes <2>, <0>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,9,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<3>, <1>, <2>, <4>, <0>, <5>]","Let's solve it step by step.
Nodes with 0 in-degree: [<3>, <1>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <0>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
So the result of topological sorting is ","('[[<3>, <1>, <0>, <5>, <2>, <4>], [<3>, <1>, <2>, <0>, <5>, <4>], [<3>, <1>, <2>, <4>, <0>, <5>], [<3>, <2>, <5>, <1>, <0>, <4>]]',)",2,206
topological_sort,"[(<4>, <6>), (<4>, <3>), (<6>, <5>), (<6>, <2>), (<3>, <5>), (<2>, <1>), (<0>, <1>), (<0>, <4>), (<0>, <2>), (<0>, <5>), (<1>, <5>), (<1>, <3>)]","{<4>: [<6>, <3>],
<6>: [<5>, <2>],
<3>: [<5>],
<5>: [],
<2>: [<1>],
<0>: [<1>, <4>, <2>, <5>],
<1>: [<5>, <3>]}","Node <4> is connected to nodes <6>, <3>.
Node <6> is connected to nodes <5>, <2>.
Node <3> is connected to node <5>.
Node <2> is connected to node <1>.
Node <0> is connected to nodes <1>, <4>, <2>, <5>.
Node <1> is connected to nodes <5>, <3>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,12,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<0>, <4>, <6>, <2>, <1>, <3>, <5>]","Let's solve it step by step.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
So the result of topological sorting is ","('[[<0>, <4>, <6>, <2>, <1>, <3>, <5>], [<0>, <4>, <2>, <3>, <1>, <6>, <5>], [<0>, <4>, <6>, <5>, <3>, <1>, <2>], [<0>, <4>, <3>, <5>, <6>, <2>, <1>]]',)",0,207
topological_sort,"[(<1>, <0>), (<1>, <3>), (<0>, <3>), (<4>, <1>), (<4>, <0>), (<4>, <3>), (<2>, <3>), (<2>, <4>)]","{<1>: [<0>, <3>],
<0>: [<3>],
<3>: [],
<4>: [<1>, <0>, <3>],
<2>: [<3>, <4>]}","Node <1> is connected to nodes <0>, <3>.
Node <0> is connected to node <3>.
Node <4> is connected to nodes <1>, <0>, <3>.
Node <2> is connected to nodes <3>, <4>.","[<0>, <1>, <2>, <3>, <4>]",5,8,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<2>, <4>, <1>, <0>, <3>]","Let's solve it step by step.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
So the result of topological sorting is ","('[[<2>, <3>, <4>, <1>, <0>], [<2>, <4>, <1>, <0>, <3>], [<2>, <4>, <1>, <0>, <3>], [<2>, <4>, <3>, <1>, <0>]]',)",2,208
topological_sort,"[(<4>, <6>), (<4>, <2>), (<6>, <2>), (<6>, <5>), (<2>, <0>), (<0>, <3>), (<0>, <1>), (<3>, <1>), (<1>, <5>)]","{<4>: [<6>, <2>],
<6>: [<2>, <5>],
<2>: [<0>],
<5>: [],
<0>: [<3>, <1>],
<3>: [<1>],
<1>: [<5>]}","Node <4> is connected to nodes <6>, <2>.
Node <6> is connected to nodes <2>, <5>.
Node <2> is connected to node <0>.
Node <0> is connected to nodes <3>, <1>.
Node <3> is connected to node <1>.
Node <1> is connected to node <5>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,9,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<4>, <6>, <2>, <0>, <3>, <1>, <5>]","Let's solve it step by step.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
So the result of topological sorting is ","('[[<4>, <5>, <6>, <1>, <2>, <0>, <3>], [<4>, <6>, <2>, <1>, <3>, <0>, <5>], [<4>, <6>, <2>, <0>, <3>, <1>, <5>], [<4>, <6>, <1>, <5>, <2>, <0>, <3>]]',)",2,209
topological_sort,"[(<1>, <0>), (<1>, <2>), (<1>, <3>), (<0>, <4>), (<0>, <3>), (<2>, <3>)]","{<1>: [<0>, <2>, <3>],
<0>: [<4>, <3>],
<2>: [<3>],
<3>: [],
<4>: []}","Node <1> is connected to nodes <0>, <2>, <3>.
Node <0> is connected to nodes <4>, <3>.
Node <2> is connected to node <3>.","[<0>, <1>, <2>, <3>, <4>]",5,6,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<1>, <0>, <2>, <4>, <3>]","Let's solve it step by step.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <2>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <4>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <3>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
So the result of topological sorting is ","('[[<1>, <0>, <2>, <4>, <3>], [<1>, <0>, <2>, <3>, <4>], [<1>, <3>, <0>, <2>, <4>], [<1>, <4>, <0>, <2>, <3>]]',)",0,210
topological_sort,"[(<2>, <1>), (<2>, <3>), (<2>, <4>), (<1>, <4>), (<1>, <0>), (<3>, <0>), (<3>, <4>), (<4>, <0>)]","{<2>: [<1>, <3>, <4>],
<1>: [<4>, <0>],
<3>: [<0>, <4>],
<4>: [<0>],
<0>: []}","Node <2> is connected to nodes <1>, <3>, <4>.
Node <1> is connected to nodes <4>, <0>.
Node <3> is connected to nodes <0>, <4>.
Node <4> is connected to node <0>.","[<0>, <1>, <2>, <3>, <4>]",5,8,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<2>, <1>, <3>, <4>, <0>]","Let's solve it step by step.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <3>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
So the result of topological sorting is ","('[[<2>, <1>, <0>, <3>, <4>], [<2>, <1>, <3>, <4>, <0>], [<2>, <0>, <1>, <3>, <4>], [<2>, <1>, <3>, <4>, <0>]]',)",3,211
topological_sort,"[(<2>, <3>), (<2>, <0>), (<3>, <6>), (<3>, <0>), (<1>, <5>), (<1>, <3>), (<5>, <0>), (<5>, <4>), (<4>, <3>)]","{<2>: [<3>, <0>],
<3>: [<6>, <0>],
<0>: [],
<6>: [],
<1>: [<5>, <3>],
<5>: [<0>, <4>],
<4>: [<3>]}","Node <2> is connected to nodes <3>, <0>.
Node <3> is connected to nodes <6>, <0>.
Node <1> is connected to nodes <5>, <3>.
Node <5> is connected to nodes <0>, <4>.
Node <4> is connected to node <3>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,9,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<2>, <1>, <5>, <4>, <3>, <6>, <0>]","Let's solve it step by step.
Nodes with 0 in-degree: [<2>, <1>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <0>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
So the result of topological sorting is ","('[[<2>, <1>, <5>, <6>, <4>, <0>, <3>], [<2>, <1>, <5>, <4>, <3>, <6>, <0>], [<2>, <3>, <5>, <1>, <4>, <0>, <6>], [<2>, <1>, <6>, <0>, <5>, <4>, <3>]]',)",1,212
topological_sort,"[(<4>, <0>), (<4>, <3>), (<3>, <1>), (<3>, <2>), (<1>, <0>), (<2>, <1>)]","{<4>: [<0>, <3>],
<0>: [],
<3>: [<1>, <2>],
<1>: [<0>],
<2>: [<1>]}","Node <4> is connected to nodes <0>, <3>.
Node <3> is connected to nodes <1>, <2>.
Node <1> is connected to node <0>.
Node <2> is connected to node <1>.","[<0>, <1>, <2>, <3>, <4>]",5,6,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<4>, <3>, <2>, <1>, <0>]","Let's solve it step by step.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
So the result of topological sorting is ","('[[<4>, <2>, <3>, <0>, <1>], [<4>, <0>, <3>, <2>, <1>], [<4>, <3>, <0>, <1>, <2>], [<4>, <3>, <2>, <1>, <0>]]',)",3,213
topological_sort,"[(<3>, <1>), (<3>, <4>), (<1>, <4>), (<0>, <4>), (<2>, <4>), (<2>, <3>), (<2>, <1>), (<2>, <5>), (<5>, <4>), (<5>, <3>), (<5>, <1>)]","{<3>: [<1>, <4>],
<1>: [<4>],
<4>: [],
<0>: [<4>],
<2>: [<4>, <3>, <1>, <5>],
<5>: [<4>, <3>, <1>]}","Node <3> is connected to nodes <1>, <4>.
Node <1> is connected to node <4>.
Node <0> is connected to node <4>.
Node <2> is connected to nodes <4>, <3>, <1>, <5>.
Node <5> is connected to nodes <4>, <3>, <1>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,11,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<0>, <2>, <5>, <3>, <1>, <4>]","Let's solve it step by step.
Nodes with 0 in-degree: [<0>, <2>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
So the result of topological sorting is ","('[[<0>, <2>, <5>, <3>, <1>, <4>], [<0>, <2>, <1>, <4>, <5>, <3>], [<0>, <2>, <5>, <1>, <3>, <4>], [<0>, <5>, <3>, <4>, <1>, <2>]]',)",0,214
topological_sort,"[(<4>, <3>), (<3>, <5>), (<3>, <2>), (<1>, <4>), (<0>, <1>), (<0>, <4>), (<0>, <3>)]","{<4>: [<3>],
<3>: [<5>, <2>],
<5>: [],
<2>: [],
<1>: [<4>],
<0>: [<1>, <4>, <3>]}","Node <4> is connected to node <3>.
Node <3> is connected to nodes <5>, <2>.
Node <1> is connected to node <4>.
Node <0> is connected to nodes <1>, <4>, <3>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,7,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<0>, <1>, <4>, <3>, <5>, <2>]","Let's solve it step by step.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <2>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
So the result of topological sorting is ","('[[<0>, <1>, <5>, <2>, <4>, <3>], [<0>, <1>, <4>, <3>, <5>, <2>], [<0>, <1>, <4>, <5>, <2>, <3>], [<0>, <5>, <4>, <2>, <3>, <1>]]',)",1,215
topological_sort,"[(<6>, <5>), (<6>, <3>), (<6>, <4>), (<3>, <5>), (<4>, <3>), (<4>, <5>), (<0>, <3>), (<1>, <2>), (<1>, <3>), (<2>, <4>)]","{<6>: [<5>, <3>, <4>],
<5>: [],
<3>: [<5>],
<4>: [<3>, <5>],
<0>: [<3>],
<1>: [<2>, <3>],
<2>: [<4>]}","Node <6> is connected to nodes <5>, <3>, <4>.
Node <3> is connected to node <5>.
Node <4> is connected to nodes <3>, <5>.
Node <0> is connected to node <3>.
Node <1> is connected to nodes <2>, <3>.
Node <2> is connected to node <4>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,10,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<6>, <0>, <1>, <2>, <4>, <3>, <5>]","Let's solve it step by step.
Nodes with 0 in-degree: [<6>, <0>, <1>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <1>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
So the result of topological sorting is ","('[[<6>, <4>, <0>, <2>, <1>, <5>, <3>], [<6>, <0>, <1>, <2>, <4>, <3>, <5>], [<6>, <0>, <3>, <5>, <1>, <2>, <4>], [<6>, <0>, <1>, <3>, <2>, <4>, <5>]]',)",1,216
topological_sort,"[(<1>, <3>), (<1>, <5>), (<1>, <2>), (<3>, <0>), (<3>, <5>), (<2>, <5>), (<4>, <1>), (<6>, <4>), (<6>, <1>)]","{<1>: [<3>, <5>, <2>],
<3>: [<0>, <5>],
<5>: [],
<2>: [<5>],
<0>: [],
<4>: [<1>],
<6>: [<4>, <1>]}","Node <1> is connected to nodes <3>, <5>, <2>.
Node <3> is connected to nodes <0>, <5>.
Node <2> is connected to node <5>.
Node <4> is connected to node <1>.
Node <6> is connected to nodes <4>, <1>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,9,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<6>, <4>, <1>, <3>, <2>, <0>, <5>]","Let's solve it step by step.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <2>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <0>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <5>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
So the result of topological sorting is ","('[[<6>, <4>, <0>, <5>, <1>, <3>, <2>], [<6>, <4>, <1>, <2>, <3>, <5>, <0>], [<6>, <4>, <1>, <3>, <2>, <0>, <5>], [<6>, <4>, <1>, <5>, <3>, <2>, <0>]]',)",2,217
topological_sort,"[(<1>, <3>), (<1>, <4>), (<3>, <4>), (<3>, <2>), (<3>, <5>), (<4>, <5>), (<0>, <2>), (<0>, <4>)]","{<1>: [<3>, <4>],
<3>: [<4>, <2>, <5>],
<4>: [<5>],
<2>: [],
<5>: [],
<0>: [<2>, <4>]}","Node <1> is connected to nodes <3>, <4>.
Node <3> is connected to nodes <4>, <2>, <5>.
Node <4> is connected to node <5>.
Node <0> is connected to nodes <2>, <4>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,8,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<1>, <0>, <3>, <4>, <2>, <5>]","Let's solve it step by step.
Nodes with 0 in-degree: [<1>, <0>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <3>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <2>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <5>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
So the result of topological sorting is ","('[[<1>, <0>, <2>, <5>, <3>, <4>], [<1>, <4>, <5>, <3>, <2>, <0>], [<1>, <0>, <3>, <4>, <2>, <5>], [<1>, <0>, <3>, <4>, <5>, <2>]]',)",2,218
topological_sort,"[(<2>, <5>), (<2>, <3>), (<5>, <4>), (<5>, <6>), (<3>, <5>), (<3>, <6>), (<3>, <0>), (<4>, <0>), (<6>, <4>), (<1>, <2>), (<1>, <3>), (<1>, <6>)]","{<2>: [<5>, <3>],
<5>: [<4>, <6>],
<3>: [<5>, <6>, <0>],
<4>: [<0>],
<6>: [<4>],
<1>: [<2>, <3>, <6>],
<0>: []}","Node <2> is connected to nodes <5>, <3>.
Node <5> is connected to nodes <4>, <6>.
Node <3> is connected to nodes <5>, <6>, <0>.
Node <4> is connected to node <0>.
Node <6> is connected to node <4>.
Node <1> is connected to nodes <2>, <3>, <6>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,12,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<1>, <2>, <3>, <5>, <6>, <4>, <0>]","Let's solve it step by step.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
So the result of topological sorting is ","('[[<1>, <2>, <3>, <5>, <6>, <4>, <0>], [<1>, <5>, <3>, <0>, <4>, <6>, <2>], [<1>, <2>, <4>, <0>, <3>, <5>, <6>], [<1>, <2>, <3>, <5>, <0>, <4>, <6>]]',)",0,219
topological_sort,"[(<5>, <4>), (<5>, <2>), (<5>, <1>), (<4>, <3>), (<4>, <2>), (<2>, <0>), (<1>, <2>), (<3>, <0>)]","{<5>: [<4>, <2>, <1>],
<4>: [<3>, <2>],
<2>: [<0>],
<1>: [<2>],
<3>: [<0>],
<0>: []}","Node <5> is connected to nodes <4>, <2>, <1>.
Node <4> is connected to nodes <3>, <2>.
Node <2> is connected to node <0>.
Node <1> is connected to node <2>.
Node <3> is connected to node <0>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,8,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<5>, <4>, <1>, <3>, <2>, <0>]","Let's solve it step by step.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <1>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <3>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <2>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
So the result of topological sorting is ","('[[<5>, <4>, <2>, <0>, <1>, <3>], [<5>, <3>, <0>, <2>, <1>, <4>], [<5>, <4>, <1>, <3>, <2>, <0>], [<5>, <4>, <1>, <3>, <2>, <0>]]',)",2,220
topological_sort,"[(<4>, <1>), (<4>, <0>), (<4>, <2>), (<0>, <1>), (<0>, <2>), (<2>, <1>), (<3>, <4>), (<3>, <1>), (<3>, <0>)]","{<4>: [<1>, <0>, <2>],
<1>: [],
<0>: [<1>, <2>],
<2>: [<1>],
<3>: [<4>, <1>, <0>]}","Node <4> is connected to nodes <1>, <0>, <2>.
Node <0> is connected to nodes <1>, <2>.
Node <2> is connected to node <1>.
Node <3> is connected to nodes <4>, <1>, <0>.","[<0>, <1>, <2>, <3>, <4>]",5,9,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<3>, <4>, <0>, <2>, <1>]","Let's solve it step by step.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
So the result of topological sorting is ","('[[<3>, <0>, <1>, <4>, <2>], [<3>, <1>, <4>, <0>, <2>], [<3>, <4>, <1>, <0>, <2>], [<3>, <4>, <0>, <2>, <1>]]',)",3,221
topological_sort,"[(<1>, <4>), (<1>, <2>), (<2>, <5>), (<3>, <0>), (<5>, <0>), (<5>, <3>)]","{<1>: [<4>, <2>],
<4>: [],
<2>: [<5>],
<3>: [<0>],
<0>: [],
<5>: [<0>, <3>]}","Node <1> is connected to nodes <4>, <2>.
Node <2> is connected to node <5>.
Node <3> is connected to node <0>.
Node <5> is connected to nodes <0>, <3>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,6,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<1>, <4>, <2>, <5>, <3>, <0>]","Let's solve it step by step.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <2>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
So the result of topological sorting is ","('[[<1>, <4>, <2>, <5>, <0>, <3>], [<1>, <2>, <5>, <4>, <3>, <0>], [<1>, <4>, <2>, <5>, <3>, <0>], [<1>, <4>, <3>, <0>, <2>, <5>]]',)",2,222
topological_sort,"[(<2>, <3>), (<0>, <2>), (<0>, <3>), (<1>, <2>), (<1>, <3>), (<1>, <0>), (<4>, <3>), (<4>, <2>), (<4>, <0>)]","{<2>: [<3>],
<3>: [],
<0>: [<2>, <3>],
<1>: [<2>, <3>, <0>],
<4>: [<3>, <2>, <0>]}","Node <2> is connected to node <3>.
Node <0> is connected to nodes <2>, <3>.
Node <1> is connected to nodes <2>, <3>, <0>.
Node <4> is connected to nodes <3>, <2>, <0>.","[<0>, <1>, <2>, <3>, <4>]",5,9,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<1>, <4>, <0>, <2>, <3>]","Let's solve it step by step.
Nodes with 0 in-degree: [<1>, <4>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
So the result of topological sorting is ","('[[<1>, <4>, <0>, <2>, <3>], [<1>, <0>, <4>, <3>, <2>], [<1>, <3>, <4>, <0>, <2>], [<1>, <4>, <2>, <3>, <0>]]',)",0,223
topological_sort,"[(<1>, <3>), (<1>, <4>), (<1>, <2>), (<3>, <5>), (<5>, <2>), (<5>, <0>), (<0>, <2>)]","{<1>: [<3>, <4>, <2>],
<3>: [<5>],
<4>: [],
<2>: [],
<5>: [<2>, <0>],
<0>: [<2>]}","Node <1> is connected to nodes <3>, <4>, <2>.
Node <3> is connected to node <5>.
Node <5> is connected to nodes <2>, <0>.
Node <0> is connected to node <2>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,7,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<1>, <3>, <4>, <5>, <0>, <2>]","Let's solve it step by step.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <4>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <5>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
So the result of topological sorting is ","('[[<1>, <3>, <0>, <2>, <4>, <5>], [<1>, <4>, <2>, <0>, <5>, <3>], [<1>, <3>, <4>, <0>, <5>, <2>], [<1>, <3>, <4>, <5>, <0>, <2>]]',)",3,224
topological_sort,"[(<1>, <5>), (<5>, <0>), (<5>, <3>), (<0>, <4>), (<3>, <2>), (<2>, <4>), (<6>, <1>)]","{<1>: [<5>],
<5>: [<0>, <3>],
<0>: [<4>],
<3>: [<2>],
<4>: [],
<2>: [<4>],
<6>: [<1>]}","Node <1> is connected to node <5>.
Node <5> is connected to nodes <0>, <3>.
Node <0> is connected to node <4>.
Node <3> is connected to node <2>.
Node <2> is connected to node <4>.
Node <6> is connected to node <1>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,7,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<6>, <1>, <5>, <0>, <3>, <2>, <4>]","Let's solve it step by step.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <3>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
So the result of topological sorting is ","('[[<6>, <1>, <2>, <4>, <5>, <0>, <3>], [<6>, <1>, <5>, <4>, <2>, <3>, <0>], [<6>, <1>, <5>, <0>, <3>, <2>, <4>], [<6>, <3>, <0>, <2>, <1>, <5>, <4>]]',)",2,225
topological_sort,"[(<0>, <3>), (<0>, <2>), (<3>, <1>), (<2>, <3>), (<4>, <3>), (<4>, <0>)]","{<0>: [<3>, <2>],
<3>: [<1>],
<2>: [<3>],
<1>: [],
<4>: [<3>, <0>]}","Node <0> is connected to nodes <3>, <2>.
Node <3> is connected to node <1>.
Node <2> is connected to node <3>.
Node <4> is connected to nodes <3>, <0>.","[<0>, <1>, <2>, <3>, <4>]",5,6,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<4>, <0>, <2>, <3>, <1>]","Let's solve it step by step.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
So the result of topological sorting is ","('[[<4>, <0>, <2>, <3>, <1>], [<4>, <0>, <2>, <1>, <3>], [<4>, <1>, <3>, <2>, <0>], [<4>, <1>, <0>, <2>, <3>]]',)",0,226
topological_sort,"[(<3>, <0>), (<3>, <4>), (<3>, <1>), (<4>, <1>), (<1>, <0>), (<1>, <5>), (<2>, <5>), (<2>, <0>), (<2>, <1>), (<2>, <4>)]","{<3>: [<0>, <4>, <1>],
<0>: [],
<4>: [<1>],
<1>: [<0>, <5>],
<5>: [],
<2>: [<5>, <0>, <1>, <4>]}","Node <3> is connected to nodes <0>, <4>, <1>.
Node <4> is connected to node <1>.
Node <1> is connected to nodes <0>, <5>.
Node <2> is connected to nodes <5>, <0>, <1>, <4>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,10,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<3>, <2>, <4>, <1>, <0>, <5>]","Let's solve it step by step.
Nodes with 0 in-degree: [<3>, <2>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <5>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
So the result of topological sorting is ","('[[<3>, <2>, <4>, <5>, <1>, <0>], [<3>, <2>, <0>, <5>, <4>, <1>], [<3>, <5>, <1>, <2>, <4>, <0>], [<3>, <2>, <4>, <1>, <0>, <5>]]',)",3,227
topological_sort,"[(<1>, <4>), (<0>, <1>), (<0>, <4>), (<2>, <1>), (<2>, <0>), (<3>, <1>)]","{<1>: [<4>],
<4>: [],
<0>: [<1>, <4>],
<2>: [<1>, <0>],
<3>: [<1>]}","Node <1> is connected to node <4>.
Node <0> is connected to nodes <1>, <4>.
Node <2> is connected to nodes <1>, <0>.
Node <3> is connected to node <1>.","[<0>, <1>, <2>, <3>, <4>]",5,6,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<2>, <3>, <0>, <1>, <4>]","Let's solve it step by step.
Nodes with 0 in-degree: [<2>, <3>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <0>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
So the result of topological sorting is ","('[[<2>, <0>, <1>, <4>, <3>], [<2>, <3>, <0>, <1>, <4>], [<2>, <3>, <0>, <4>, <1>], [<2>, <4>, <3>, <0>, <1>]]',)",1,228
topological_sort,"[(<5>, <0>), (<5>, <4>), (<5>, <1>), (<4>, <3>), (<1>, <4>), (<2>, <3>), (<2>, <1>), (<2>, <6>), (<6>, <3>), (<6>, <5>), (<6>, <1>), (<6>, <0>)]","{<5>: [<0>, <4>, <1>],
<0>: [],
<4>: [<3>],
<1>: [<4>],
<2>: [<3>, <1>, <6>],
<3>: [],
<6>: [<3>, <5>, <1>, <0>]}","Node <5> is connected to nodes <0>, <4>, <1>.
Node <4> is connected to node <3>.
Node <1> is connected to node <4>.
Node <2> is connected to nodes <3>, <1>, <6>.
Node <6> is connected to nodes <3>, <5>, <1>, <0>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,12,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<2>, <6>, <5>, <0>, <1>, <4>, <3>]","Let's solve it step by step.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <1>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
So the result of topological sorting is ","('[[<2>, <6>, <4>, <3>, <5>, <0>, <1>], [<2>, <6>, <5>, <0>, <1>, <4>, <3>], [<2>, <4>, <5>, <6>, <1>, <0>, <3>], [<2>, <6>, <5>, <0>, <1>, <3>, <4>]]',)",1,229
topological_sort,"[(<4>, <2>), (<4>, <1>), (<1>, <3>), (<1>, <2>), (<0>, <2>), (<0>, <1>), (<0>, <4>)]","{<4>: [<2>, <1>],
<2>: [],
<1>: [<3>, <2>],
<0>: [<2>, <1>, <4>],
<3>: []}","Node <4> is connected to nodes <2>, <1>.
Node <1> is connected to nodes <3>, <2>.
Node <0> is connected to nodes <2>, <1>, <4>.","[<0>, <1>, <2>, <3>, <4>]",5,7,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<0>, <4>, <1>, <3>, <2>]","Let's solve it step by step.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <2>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
So the result of topological sorting is ","('[[<0>, <4>, <1>, <3>, <2>], [<0>, <4>, <3>, <1>, <2>], [<0>, <1>, <2>, <4>, <3>], [<0>, <2>, <4>, <1>, <3>]]',)",0,230
topological_sort,"[(<0>, <4>), (<0>, <2>), (<0>, <6>), (<2>, <1>), (<2>, <4>), (<6>, <5>), (<6>, <2>), (<6>, <1>), (<5>, <2>), (<1>, <4>), (<3>, <4>), (<3>, <6>), (<3>, <2>), (<3>, <5>)]","{<0>: [<4>, <2>, <6>],
<4>: [],
<2>: [<1>, <4>],
<6>: [<5>, <2>, <1>],
<5>: [<2>],
<1>: [<4>],
<3>: [<4>, <6>, <2>, <5>]}","Node <0> is connected to nodes <4>, <2>, <6>.
Node <2> is connected to nodes <1>, <4>.
Node <6> is connected to nodes <5>, <2>, <1>.
Node <5> is connected to node <2>.
Node <1> is connected to node <4>.
Node <3> is connected to nodes <4>, <6>, <2>, <5>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,14,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<0>, <3>, <6>, <5>, <2>, <1>, <4>]","Let's solve it step by step.
Nodes with 0 in-degree: [<0>, <3>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
So the result of topological sorting is ","('[[<0>, <3>, <6>, <5>, <2>, <1>, <4>], [<0>, <4>, <6>, <2>, <3>, <1>, <5>], [<0>, <3>, <6>, <5>, <2>, <1>, <4>], [<0>, <3>, <1>, <4>, <6>, <5>, <2>]]',)",2,231
topological_sort,"[(<2>, <0>), (<0>, <5>), (<4>, <1>), (<4>, <0>), (<1>, <3>), (<3>, <0>)]","{<2>: [<0>],
<0>: [<5>],
<5>: [],
<4>: [<1>, <0>],
<1>: [<3>],
<3>: [<0>]}","Node <2> is connected to node <0>.
Node <0> is connected to node <5>.
Node <4> is connected to nodes <1>, <0>.
Node <1> is connected to node <3>.
Node <3> is connected to node <0>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,6,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<2>, <4>, <1>, <3>, <0>, <5>]","Let's solve it step by step.
Nodes with 0 in-degree: [<2>, <4>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
So the result of topological sorting is ","('[[<2>, <5>, <0>, <1>, <3>, <4>], [<2>, <4>, <0>, <5>, <1>, <3>], [<2>, <4>, <1>, <0>, <3>, <5>], [<2>, <4>, <1>, <3>, <0>, <5>]]',)",3,232
topological_sort,"[(<4>, <2>), (<4>, <1>), (<4>, <0>), (<2>, <3>), (<1>, <2>), (<3>, <0>)]","{<4>: [<2>, <1>, <0>],
<2>: [<3>],
<1>: [<2>],
<0>: [],
<3>: [<0>]}","Node <4> is connected to nodes <2>, <1>, <0>.
Node <2> is connected to node <3>.
Node <1> is connected to node <2>.
Node <3> is connected to node <0>.","[<0>, <1>, <2>, <3>, <4>]",5,6,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<4>, <1>, <2>, <3>, <0>]","Let's solve it step by step.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
So the result of topological sorting is ","('[[<4>, <0>, <1>, <2>, <3>], [<4>, <1>, <2>, <3>, <0>], [<4>, <1>, <0>, <3>, <2>], [<4>, <1>, <0>, <2>, <3>]]',)",1,233
topological_sort,"[(<1>, <0>), (<1>, <4>), (<1>, <2>), (<1>, <5>), (<4>, <2>), (<2>, <0>), (<2>, <3>), (<3>, <5>), (<3>, <0>)]","{<1>: [<0>, <4>, <2>, <5>],
<0>: [],
<4>: [<2>],
<2>: [<0>, <3>],
<5>: [],
<3>: [<5>, <0>]}","Node <1> is connected to nodes <0>, <4>, <2>, <5>.
Node <4> is connected to node <2>.
Node <2> is connected to nodes <0>, <3>.
Node <3> is connected to nodes <5>, <0>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,9,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<1>, <4>, <2>, <3>, <5>, <0>]","Let's solve it step by step.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <0>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
So the result of topological sorting is ","('[[<1>, <4>, <2>, <3>, <5>, <0>], [<1>, <0>, <3>, <4>, <2>, <5>], [<1>, <4>, <2>, <0>, <3>, <5>], [<1>, <4>, <5>, <0>, <2>, <3>]]',)",0,234
topological_sort,"[(<2>, <5>), (<1>, <5>), (<6>, <5>), (<6>, <1>), (<4>, <6>), (<3>, <1>), (<3>, <4>), (<3>, <2>), (<0>, <5>)]","{<2>: [<5>],
<5>: [],
<1>: [<5>],
<6>: [<5>, <1>],
<4>: [<6>],
<3>: [<1>, <4>, <2>],
<0>: [<5>]}","Node <2> is connected to node <5>.
Node <1> is connected to node <5>.
Node <6> is connected to nodes <5>, <1>.
Node <4> is connected to node <6>.
Node <3> is connected to nodes <1>, <4>, <2>.
Node <0> is connected to node <5>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,9,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<3>, <0>, <4>, <2>, <6>, <1>, <5>]","Let's solve it step by step.
Nodes with 0 in-degree: [<3>, <0>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <4>, <2>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <2>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <6>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
So the result of topological sorting is ","('[[<3>, <0>, <4>, <2>, <1>, <5>, <6>], [<3>, <0>, <1>, <5>, <4>, <2>, <6>], [<3>, <4>, <0>, <6>, <1>, <5>, <2>], [<3>, <0>, <4>, <2>, <6>, <1>, <5>]]',)",3,235
topological_sort,"[(<1>, <0>), (<1>, <4>), (<0>, <3>), (<0>, <4>), (<0>, <2>), (<4>, <2>), (<3>, <2>), (<3>, <4>)]","{<1>: [<0>, <4>],
<0>: [<3>, <4>, <2>],
<4>: [<2>],
<3>: [<2>, <4>],
<2>: []}","Node <1> is connected to nodes <0>, <4>.
Node <0> is connected to nodes <3>, <4>, <2>.
Node <4> is connected to node <2>.
Node <3> is connected to nodes <2>, <4>.","[<0>, <1>, <2>, <3>, <4>]",5,8,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<1>, <0>, <3>, <4>, <2>]","Let's solve it step by step.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
So the result of topological sorting is ","('[[<1>, <0>, <2>, <4>, <3>], [<1>, <2>, <0>, <3>, <4>], [<1>, <0>, <3>, <4>, <2>], [<1>, <0>, <2>, <4>, <3>]]',)",2,236
topological_sort,"[(<5>, <2>), (<5>, <6>), (<5>, <3>), (<5>, <0>), (<2>, <6>), (<6>, <3>), (<6>, <0>), (<0>, <3>), (<1>, <5>), (<1>, <0>), (<1>, <4>), (<4>, <6>), (<4>, <2>)]","{<5>: [<2>, <6>, <3>, <0>],
<2>: [<6>],
<6>: [<3>, <0>],
<3>: [],
<0>: [<3>],
<1>: [<5>, <0>, <4>],
<4>: [<6>, <2>]}","Node <5> is connected to nodes <2>, <6>, <3>, <0>.
Node <2> is connected to node <6>.
Node <6> is connected to nodes <3>, <0>.
Node <0> is connected to node <3>.
Node <1> is connected to nodes <5>, <0>, <4>.
Node <4> is connected to nodes <6>, <2>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,13,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<1>, <5>, <4>, <2>, <6>, <0>, <3>]","Let's solve it step by step.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <4>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
So the result of topological sorting is ","('[[<1>, <4>, <6>, <2>, <3>, <0>, <5>], [<1>, <5>, <4>, <2>, <6>, <3>, <0>], [<1>, <5>, <4>, <2>, <6>, <0>, <3>], [<1>, <5>, <0>, <3>, <4>, <2>, <6>]]',)",2,237
topological_sort,"[(<0>, <2>), (<0>, <5>), (<5>, <1>), (<5>, <2>), (<3>, <1>), (<3>, <0>), (<3>, <2>), (<1>, <2>), (<4>, <5>), (<4>, <2>)]","{<0>: [<2>, <5>],
<2>: [],
<5>: [<1>, <2>],
<3>: [<1>, <0>, <2>],
<1>: [<2>],
<4>: [<5>, <2>]}","Node <0> is connected to nodes <2>, <5>.
Node <5> is connected to nodes <1>, <2>.
Node <3> is connected to nodes <1>, <0>, <2>.
Node <1> is connected to node <2>.
Node <4> is connected to nodes <5>, <2>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,10,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<3>, <4>, <0>, <5>, <1>, <2>]","Let's solve it step by step.
Nodes with 0 in-degree: [<3>, <4>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <0>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
So the result of topological sorting is ","('[[<3>, <0>, <2>, <1>, <5>, <4>], [<3>, <4>, <1>, <2>, <0>, <5>], [<3>, <4>, <0>, <5>, <1>, <2>], [<3>, <4>, <0>, <5>, <2>, <1>]]',)",2,238
topological_sort,"[(<4>, <0>), (<2>, <0>), (<2>, <3>), (<3>, <0>), (<1>, <4>), (<1>, <3>)]","{<4>: [<0>],
<0>: [],
<2>: [<0>, <3>],
<3>: [<0>],
<1>: [<4>, <3>]}","Node <4> is connected to node <0>.
Node <2> is connected to nodes <0>, <3>.
Node <3> is connected to node <0>.
Node <1> is connected to nodes <4>, <3>.","[<0>, <1>, <2>, <3>, <4>]",5,6,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<2>, <1>, <4>, <3>, <0>]","Let's solve it step by step.
Nodes with 0 in-degree: [<2>, <1>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <3>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
So the result of topological sorting is ","('[[<2>, <1>, <0>, <4>, <3>], [<2>, <1>, <4>, <3>, <0>], [<2>, <0>, <1>, <4>, <3>], [<2>, <4>, <3>, <0>, <1>]]',)",1,239
topological_sort,"[(<6>, <5>), (<6>, <2>), (<5>, <2>), (<5>, <4>), (<5>, <1>), (<5>, <3>), (<2>, <3>), (<4>, <1>), (<4>, <3>), (<4>, <2>), (<1>, <3>), (<0>, <5>), (<0>, <4>), (<0>, <3>), (<0>, <2>)]","{<6>: [<5>, <2>],
<5>: [<2>, <4>, <1>, <3>],
<2>: [<3>],
<4>: [<1>, <3>, <2>],
<1>: [<3>],
<3>: [],
<0>: [<5>, <4>, <3>, <2>]}","Node <6> is connected to nodes <5>, <2>.
Node <5> is connected to nodes <2>, <4>, <1>, <3>.
Node <2> is connected to node <3>.
Node <4> is connected to nodes <1>, <3>, <2>.
Node <1> is connected to node <3>.
Node <0> is connected to nodes <5>, <4>, <3>, <2>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,15,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<6>, <0>, <5>, <4>, <1>, <2>, <3>]","Let's solve it step by step.
Nodes with 0 in-degree: [<6>, <0>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <2>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
So the result of topological sorting is ","('[[<6>, <1>, <4>, <5>, <0>, <2>, <3>], [<6>, <0>, <5>, <1>, <3>, <4>, <2>], [<6>, <0>, <5>, <4>, <1>, <2>, <3>], [<6>, <0>, <2>, <3>, <5>, <4>, <1>]]',)",2,240
topological_sort,"[(<1>, <4>), (<1>, <6>), (<1>, <2>), (<6>, <2>), (<6>, <4>), (<3>, <0>), (<3>, <2>), (<3>, <1>), (<0>, <1>), (<5>, <0>), (<5>, <1>), (<5>, <3>), (<5>, <6>), (<5>, <2>)]","{<1>: [<4>, <6>, <2>],
<4>: [],
<6>: [<2>, <4>],
<2>: [],
<3>: [<0>, <2>, <1>],
<0>: [<1>],
<5>: [<0>, <1>, <3>, <6>, <2>]}","Node <1> is connected to nodes <4>, <6>, <2>.
Node <6> is connected to nodes <2>, <4>.
Node <3> is connected to nodes <0>, <2>, <1>.
Node <0> is connected to node <1>.
Node <5> is connected to nodes <0>, <1>, <3>, <6>, <2>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,14,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<5>, <3>, <0>, <1>, <6>, <2>, <4>]","Let's solve it step by step.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <4>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
So the result of topological sorting is ","('[[<5>, <3>, <2>, <4>, <0>, <1>, <6>], [<5>, <4>, <6>, <2>, <0>, <3>, <1>], [<5>, <3>, <0>, <1>, <6>, <2>, <4>], [<5>, <3>, <0>, <1>, <6>, <4>, <2>]]',)",2,241
topological_sort,"[(<0>, <1>), (<0>, <3>), (<1>, <3>), (<1>, <2>), (<1>, <5>), (<3>, <4>), (<2>, <5>), (<2>, <4>), (<5>, <3>)]","{<0>: [<1>, <3>],
<1>: [<3>, <2>, <5>],
<3>: [<4>],
<2>: [<5>, <4>],
<5>: [<3>],
<4>: []}","Node <0> is connected to nodes <1>, <3>.
Node <1> is connected to nodes <3>, <2>, <5>.
Node <3> is connected to node <4>.
Node <2> is connected to nodes <5>, <4>.
Node <5> is connected to node <3>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,9,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<0>, <1>, <2>, <5>, <3>, <4>]","Let's solve it step by step.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
So the result of topological sorting is ","('[[<0>, <1>, <3>, <4>, <2>, <5>], [<0>, <5>, <1>, <2>, <4>, <3>], [<0>, <1>, <2>, <5>, <3>, <4>], [<0>, <1>, <2>, <4>, <5>, <3>]]',)",2,242
topological_sort,"[(<0>, <4>), (<0>, <1>), (<4>, <1>), (<1>, <3>), (<2>, <1>), (<2>, <4>)]","{<0>: [<4>, <1>],
<4>: [<1>],
<1>: [<3>],
<3>: [],
<2>: [<1>, <4>]}","Node <0> is connected to nodes <4>, <1>.
Node <4> is connected to node <1>.
Node <1> is connected to node <3>.
Node <2> is connected to nodes <1>, <4>.","[<0>, <1>, <2>, <3>, <4>]",5,6,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<0>, <2>, <4>, <1>, <3>]","Let's solve it step by step.
Nodes with 0 in-degree: [<0>, <2>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
So the result of topological sorting is ","('[[<0>, <3>, <2>, <4>, <1>], [<0>, <1>, <3>, <2>, <4>], [<0>, <2>, <1>, <4>, <3>], [<0>, <2>, <4>, <1>, <3>]]',)",3,243
topological_sort,"[(<3>, <4>), (<3>, <1>), (<4>, <0>), (<4>, <2>), (<0>, <2>), (<0>, <1>)]","{<3>: [<4>, <1>],
<4>: [<0>, <2>],
<1>: [],
<0>: [<2>, <1>],
<2>: []}","Node <3> is connected to nodes <4>, <1>.
Node <4> is connected to nodes <0>, <2>.
Node <0> is connected to nodes <2>, <1>.","[<0>, <1>, <2>, <3>, <4>]",5,6,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<3>, <4>, <0>, <2>, <1>]","Let's solve it step by step.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <1>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
So the result of topological sorting is ","('[[<3>, <4>, <0>, <2>, <1>], [<3>, <4>, <1>, <0>, <2>], [<3>, <1>, <4>, <0>, <2>], [<3>, <0>, <2>, <1>, <4>]]',)",0,244
topological_sort,"[(<2>, <6>), (<2>, <4>), (<2>, <5>), (<6>, <1>), (<6>, <4>), (<5>, <1>), (<1>, <4>), (<1>, <0>), (<0>, <4>), (<3>, <6>), (<3>, <2>)]","{<2>: [<6>, <4>, <5>],
<6>: [<1>, <4>],
<4>: [],
<5>: [<1>],
<1>: [<4>, <0>],
<0>: [<4>],
<3>: [<6>, <2>]}","Node <2> is connected to nodes <6>, <4>, <5>.
Node <6> is connected to nodes <1>, <4>.
Node <5> is connected to node <1>.
Node <1> is connected to nodes <4>, <0>.
Node <0> is connected to node <4>.
Node <3> is connected to nodes <6>, <2>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,11,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<3>, <2>, <6>, <5>, <1>, <0>, <4>]","Let's solve it step by step.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <5>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
So the result of topological sorting is ","('[[<3>, <2>, <0>, <4>, <6>, <5>, <1>], [<3>, <0>, <6>, <1>, <5>, <4>, <2>], [<3>, <2>, <6>, <0>, <1>, <4>, <5>], [<3>, <2>, <6>, <5>, <1>, <0>, <4>]]',)",3,245
topological_sort,"[(<3>, <4>), (<3>, <1>), (<1>, <2>), (<2>, <4>), (<0>, <1>)]","{<3>: [<4>, <1>],
<4>: [],
<1>: [<2>],
<2>: [<4>],
<0>: [<1>]}","Node <3> is connected to nodes <4>, <1>.
Node <1> is connected to node <2>.
Node <2> is connected to node <4>.
Node <0> is connected to node <1>.","[<0>, <1>, <2>, <3>, <4>]",5,5,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<3>, <0>, <1>, <2>, <4>]","Let's solve it step by step.
Nodes with 0 in-degree: [<3>, <0>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
So the result of topological sorting is ","('[[<3>, <0>, <1>, <2>, <4>], [<3>, <1>, <2>, <0>, <4>], [<3>, <0>, <1>, <4>, <2>], [<3>, <4>, <0>, <1>, <2>]]',)",0,246
topological_sort,"[(<2>, <3>), (<2>, <0>), (<2>, <1>), (<1>, <3>), (<4>, <3>)]","{<2>: [<3>, <0>, <1>],
<3>: [],
<0>: [],
<1>: [<3>],
<4>: [<3>]}","Node <2> is connected to nodes <3>, <0>, <1>.
Node <1> is connected to node <3>.
Node <4> is connected to node <3>.","[<0>, <1>, <2>, <3>, <4>]",5,5,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<2>, <4>, <0>, <1>, <3>]","Let's solve it step by step.
Nodes with 0 in-degree: [<2>, <4>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <0>, <1>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <1>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
So the result of topological sorting is ","('[[<2>, <4>, <1>, <0>, <3>], [<2>, <4>, <1>, <3>, <0>], [<2>, <4>, <0>, <1>, <3>], [<2>, <3>, <4>, <0>, <1>]]',)",2,247
topological_sort,"[(<3>, <1>), (<3>, <5>), (<1>, <5>), (<2>, <0>), (<2>, <5>), (<4>, <1>), (<4>, <0>)]","{<3>: [<1>, <5>],
<1>: [<5>],
<5>: [],
<2>: [<0>, <5>],
<0>: [],
<4>: [<1>, <0>]}","Node <3> is connected to nodes <1>, <5>.
Node <1> is connected to node <5>.
Node <2> is connected to nodes <0>, <5>.
Node <4> is connected to nodes <1>, <0>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,7,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<3>, <2>, <4>, <1>, <0>, <5>]","Let's solve it step by step.
Nodes with 0 in-degree: [<3>, <2>, <4>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <4>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <0>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <5>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
So the result of topological sorting is ","('[[<3>, <2>, <4>, <1>, <0>, <5>], [<3>, <5>, <2>, <0>, <4>, <1>], [<3>, <2>, <0>, <5>, <4>, <1>], [<3>, <2>, <4>, <1>, <0>, <5>]]',)",0,248
topological_sort,"[(<1>, <4>), (<1>, <5>), (<1>, <3>), (<5>, <0>), (<5>, <2>), (<3>, <2>), (<0>, <4>), (<2>, <4>), (<2>, <0>)]","{<1>: [<4>, <5>, <3>],
<4>: [],
<5>: [<0>, <2>],
<3>: [<2>],
<0>: [<4>],
<2>: [<4>, <0>]}","Node <1> is connected to nodes <4>, <5>, <3>.
Node <5> is connected to nodes <0>, <2>.
Node <3> is connected to node <2>.
Node <0> is connected to node <4>.
Node <2> is connected to nodes <4>, <0>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,9,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<1>, <5>, <3>, <2>, <0>, <4>]","Let's solve it step by step.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <3>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
So the result of topological sorting is ","('[[<1>, <5>, <3>, <2>, <0>, <4>], [<1>, <5>, <0>, <4>, <3>, <2>], [<1>, <5>, <3>, <2>, <4>, <0>], [<1>, <4>, <2>, <0>, <3>, <5>]]',)",0,249
topological_sort,"[(<6>, <2>), (<6>, <5>), (<6>, <4>), (<2>, <5>), (<2>, <3>), (<1>, <2>), (<1>, <5>), (<0>, <1>)]","{<6>: [<2>, <5>, <4>],
<2>: [<5>, <3>],
<5>: [],
<4>: [],
<3>: [],
<1>: [<2>, <5>],
<0>: [<1>]}","Node <6> is connected to nodes <2>, <5>, <4>.
Node <2> is connected to nodes <5>, <3>.
Node <1> is connected to nodes <2>, <5>.
Node <0> is connected to node <1>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,8,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<6>, <0>, <4>, <1>, <2>, <5>, <3>]","Let's solve it step by step.
Nodes with 0 in-degree: [<6>, <0>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <4>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <1>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <3>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
So the result of topological sorting is ","('[[<6>, <0>, <4>, <1>, <2>, <5>, <3>], [<6>, <0>, <5>, <3>, <4>, <1>, <2>], [<6>, <0>, <4>, <2>, <3>, <5>, <1>], [<6>, <5>, <3>, <1>, <0>, <4>, <2>]]',)",0,250
topological_sort,"[(<6>, <2>), (<2>, <3>), (<1>, <4>), (<1>, <0>), (<1>, <3>), (<1>, <2>), (<4>, <6>), (<4>, <3>), (<0>, <2>), (<0>, <4>), (<0>, <3>), (<5>, <3>), (<5>, <0>)]","{<6>: [<2>],
<2>: [<3>],
<3>: [],
<1>: [<4>, <0>, <3>, <2>],
<4>: [<6>, <3>],
<0>: [<2>, <4>, <3>],
<5>: [<3>, <0>]}","Node <6> is connected to node <2>.
Node <2> is connected to node <3>.
Node <1> is connected to nodes <4>, <0>, <3>, <2>.
Node <4> is connected to nodes <6>, <3>.
Node <0> is connected to nodes <2>, <4>, <3>.
Node <5> is connected to nodes <3>, <0>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,13,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<1>, <5>, <0>, <4>, <6>, <2>, <3>]","Let's solve it step by step.
Nodes with 0 in-degree: [<1>, <5>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
So the result of topological sorting is ","('[[<1>, <5>, <2>, <3>, <0>, <4>, <6>], [<1>, <5>, <0>, <3>, <4>, <6>, <2>], [<1>, <5>, <0>, <4>, <6>, <2>, <3>], [<1>, <3>, <5>, <2>, <6>, <0>, <4>]]',)",2,251
topological_sort,"[(<3>, <4>), (<3>, <1>), (<3>, <6>), (<4>, <6>), (<4>, <1>), (<4>, <0>), (<6>, <0>), (<6>, <1>), (<0>, <1>), (<2>, <3>), (<2>, <6>), (<2>, <5>), (<2>, <4>), (<2>, <1>), (<5>, <6>), (<5>, <0>)]","{<3>: [<4>, <1>, <6>],
<4>: [<6>, <1>, <0>],
<1>: [],
<6>: [<0>, <1>],
<0>: [<1>],
<2>: [<3>, <6>, <5>, <4>, <1>],
<5>: [<6>, <0>]}","Node <3> is connected to nodes <4>, <1>, <6>.
Node <4> is connected to nodes <6>, <1>, <0>.
Node <6> is connected to nodes <0>, <1>.
Node <0> is connected to node <1>.
Node <2> is connected to nodes <3>, <6>, <5>, <4>, <1>.
Node <5> is connected to nodes <6>, <0>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,16,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<2>, <3>, <5>, <4>, <6>, <0>, <1>]","Let's solve it step by step.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <5>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <4>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
So the result of topological sorting is ","('[[<2>, <3>, <5>, <4>, <6>, <1>, <0>], [<2>, <3>, <5>, <4>, <6>, <0>, <1>], [<2>, <4>, <1>, <6>, <3>, <5>, <0>], [<2>, <3>, <0>, <1>, <5>, <4>, <6>]]',)",1,252
topological_sort,"[(<1>, <0>), (<1>, <3>), (<1>, <5>), (<0>, <5>), (<3>, <5>), (<3>, <0>), (<3>, <2>), (<3>, <4>), (<4>, <5>), (<2>, <0>), (<2>, <4>), (<2>, <5>), (<6>, <4>), (<6>, <3>), (<6>, <1>), (<6>, <2>)]","{<1>: [<0>, <3>, <5>],
<0>: [<5>],
<3>: [<5>, <0>, <2>, <4>],
<5>: [],
<4>: [<5>],
<2>: [<0>, <4>, <5>],
<6>: [<4>, <3>, <1>, <2>]}","Node <1> is connected to nodes <0>, <3>, <5>.
Node <0> is connected to node <5>.
Node <3> is connected to nodes <5>, <0>, <2>, <4>.
Node <4> is connected to node <5>.
Node <2> is connected to nodes <0>, <4>, <5>.
Node <6> is connected to nodes <4>, <3>, <1>, <2>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,16,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<6>, <1>, <3>, <2>, <0>, <4>, <5>]","Let's solve it step by step.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <4>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
So the result of topological sorting is ","('[[<6>, <1>, <3>, <0>, <2>, <5>, <4>], [<6>, <1>, <3>, <2>, <0>, <4>, <5>], [<6>, <2>, <0>, <4>, <1>, <3>, <5>], [<6>, <1>, <4>, <5>, <3>, <2>, <0>]]',)",1,253
topological_sort,"[(<0>, <3>), (<0>, <5>), (<0>, <4>), (<3>, <5>), (<3>, <2>), (<5>, <4>), (<5>, <2>), (<1>, <4>), (<1>, <2>)]","{<0>: [<3>, <5>, <4>],
<3>: [<5>, <2>],
<5>: [<4>, <2>],
<4>: [],
<2>: [],
<1>: [<4>, <2>]}","Node <0> is connected to nodes <3>, <5>, <4>.
Node <3> is connected to nodes <5>, <2>.
Node <5> is connected to nodes <4>, <2>.
Node <1> is connected to nodes <4>, <2>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,9,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<0>, <1>, <3>, <5>, <4>, <2>]","Let's solve it step by step.
Nodes with 0 in-degree: [<0>, <1>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <3>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <2>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
So the result of topological sorting is ","('[[<0>, <1>, <4>, <2>, <3>, <5>], [<0>, <3>, <1>, <4>, <2>, <5>], [<0>, <1>, <3>, <5>, <2>, <4>], [<0>, <1>, <3>, <5>, <4>, <2>]]',)",3,254
topological_sort,"[(<4>, <1>), (<4>, <5>), (<1>, <5>), (<3>, <0>), (<3>, <5>), (<2>, <3>), (<2>, <4>)]","{<4>: [<1>, <5>],
<1>: [<5>],
<5>: [],
<3>: [<0>, <5>],
<0>: [],
<2>: [<3>, <4>]}","Node <4> is connected to nodes <1>, <5>.
Node <1> is connected to node <5>.
Node <3> is connected to nodes <0>, <5>.
Node <2> is connected to nodes <3>, <4>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,7,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<2>, <3>, <4>, <0>, <1>, <5>]","Let's solve it step by step.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <4>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <0>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <1>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
So the result of topological sorting is ","('[[<2>, <3>, <4>, <0>, <1>, <5>], [<2>, <1>, <4>, <0>, <3>, <5>], [<2>, <3>, <1>, <5>, <4>, <0>], [<2>, <3>, <4>, <5>, <0>, <1>]]',)",0,255
topological_sort,"[(<1>, <4>), (<1>, <0>), (<0>, <2>), (<0>, <3>), (<2>, <3>), (<3>, <4>)]","{<1>: [<4>, <0>],
<4>: [],
<0>: [<2>, <3>],
<2>: [<3>],
<3>: [<4>]}","Node <1> is connected to nodes <4>, <0>.
Node <0> is connected to nodes <2>, <3>.
Node <2> is connected to node <3>.
Node <3> is connected to node <4>.","[<0>, <1>, <2>, <3>, <4>]",5,6,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<1>, <0>, <2>, <3>, <4>]","Let's solve it step by step.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
So the result of topological sorting is ","('[[<1>, <0>, <4>, <3>, <2>], [<1>, <4>, <0>, <2>, <3>], [<1>, <0>, <3>, <2>, <4>], [<1>, <0>, <2>, <3>, <4>]]',)",3,256
topological_sort,"[(<2>, <0>), (<2>, <3>), (<2>, <4>), (<0>, <1>), (<0>, <4>), (<3>, <4>), (<3>, <0>), (<3>, <1>), (<4>, <1>)]","{<2>: [<0>, <3>, <4>],
<0>: [<1>, <4>],
<3>: [<4>, <0>, <1>],
<4>: [<1>],
<1>: []}","Node <2> is connected to nodes <0>, <3>, <4>.
Node <0> is connected to nodes <1>, <4>.
Node <3> is connected to nodes <4>, <0>, <1>.
Node <4> is connected to node <1>.","[<0>, <1>, <2>, <3>, <4>]",5,9,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<2>, <3>, <0>, <4>, <1>]","Let's solve it step by step.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
So the result of topological sorting is ","('[[<2>, <1>, <3>, <0>, <4>], [<2>, <3>, <0>, <1>, <4>], [<2>, <3>, <4>, <0>, <1>], [<2>, <3>, <0>, <4>, <1>]]',)",3,257
topological_sort,"[(<0>, <4>), (<0>, <5>), (<5>, <2>), (<1>, <4>), (<1>, <5>), (<1>, <0>), (<1>, <2>), (<1>, <3>), (<2>, <6>), (<3>, <4>), (<6>, <3>)]","{<0>: [<4>, <5>],
<4>: [],
<5>: [<2>],
<1>: [<4>, <5>, <0>, <2>, <3>],
<2>: [<6>],
<3>: [<4>],
<6>: [<3>]}","Node <0> is connected to nodes <4>, <5>.
Node <5> is connected to node <2>.
Node <1> is connected to nodes <4>, <5>, <0>, <2>, <3>.
Node <2> is connected to node <6>.
Node <3> is connected to node <4>.
Node <6> is connected to node <3>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,11,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<1>, <0>, <5>, <2>, <6>, <3>, <4>]","Let's solve it step by step.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
So the result of topological sorting is ","('[[<1>, <0>, <5>, <2>, <3>, <4>, <6>], [<1>, <0>, <5>, <2>, <6>, <3>, <4>], [<1>, <0>, <3>, <4>, <2>, <6>, <5>], [<1>, <0>, <3>, <4>, <5>, <2>, <6>]]',)",1,258
topological_sort,"[(<1>, <0>), (<0>, <3>), (<0>, <2>), (<4>, <1>)]","{<1>: [<0>],
<0>: [<3>, <2>],
<3>: [],
<2>: [],
<4>: [<1>]}","Node <1> is connected to node <0>.
Node <0> is connected to nodes <3>, <2>.
Node <4> is connected to node <1>.","[<0>, <1>, <2>, <3>, <4>]",5,4,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<4>, <1>, <0>, <3>, <2>]","Let's solve it step by step.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <2>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
So the result of topological sorting is ","('[[<4>, <1>, <0>, <3>, <2>], [<4>, <3>, <0>, <1>, <2>], [<4>, <2>, <1>, <0>, <3>], [<4>, <1>, <0>, <2>, <3>]]',)",0,259
topological_sort,"[(<0>, <1>), (<4>, <3>), (<4>, <1>), (<3>, <0>), (<2>, <1>), (<2>, <0>), (<2>, <4>)]","{<0>: [<1>],
<1>: [],
<4>: [<3>, <1>],
<3>: [<0>],
<2>: [<1>, <0>, <4>]}","Node <0> is connected to node <1>.
Node <4> is connected to nodes <3>, <1>.
Node <3> is connected to node <0>.
Node <2> is connected to nodes <1>, <0>, <4>.","[<0>, <1>, <2>, <3>, <4>]",5,7,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<2>, <4>, <3>, <0>, <1>]","Let's solve it step by step.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
So the result of topological sorting is ","('[[<2>, <1>, <4>, <3>, <0>], [<2>, <4>, <3>, <0>, <1>], [<2>, <4>, <3>, <0>, <1>], [<2>, <4>, <3>, <0>, <1>]]',)",2,260
topological_sort,"[(<0>, <5>), (<6>, <5>), (<2>, <5>), (<2>, <4>), (<2>, <0>), (<2>, <6>), (<4>, <6>), (<4>, <3>), (<4>, <1>), (<1>, <3>), (<1>, <5>)]","{<0>: [<5>],
<5>: [],
<6>: [<5>],
<2>: [<5>, <4>, <0>, <6>],
<4>: [<6>, <3>, <1>],
<3>: [],
<1>: [<3>, <5>]}","Node <0> is connected to node <5>.
Node <6> is connected to node <5>.
Node <2> is connected to nodes <5>, <4>, <0>, <6>.
Node <4> is connected to nodes <6>, <3>, <1>.
Node <1> is connected to nodes <3>, <5>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,11,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<2>, <4>, <0>, <6>, <1>, <3>, <5>]","Let's solve it step by step.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <0>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <6>, <1>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <1>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <5>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
So the result of topological sorting is ","('[[<2>, <4>, <0>, <3>, <5>, <1>, <6>], [<2>, <4>, <0>, <6>, <1>, <3>, <5>], [<2>, <4>, <3>, <5>, <0>, <6>, <1>], [<2>, <4>, <5>, <1>, <0>, <3>, <6>]]',)",1,261
topological_sort,"[(<0>, <1>), (<4>, <2>), (<2>, <0>), (<3>, <0>), (<3>, <2>)]","{<0>: [<1>],
<1>: [],
<4>: [<2>],
<2>: [<0>],
<3>: [<0>, <2>]}","Node <0> is connected to node <1>.
Node <4> is connected to node <2>.
Node <2> is connected to node <0>.
Node <3> is connected to nodes <0>, <2>.","[<0>, <1>, <2>, <3>, <4>]",5,5,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<4>, <3>, <2>, <0>, <1>]","Let's solve it step by step.
Nodes with 0 in-degree: [<4>, <3>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
So the result of topological sorting is ","('[[<4>, <2>, <0>, <1>, <3>], [<4>, <3>, <2>, <0>, <1>], [<4>, <1>, <3>, <2>, <0>], [<4>, <3>, <1>, <2>, <0>]]',)",1,262
topological_sort,"[(<3>, <1>), (<3>, <6>), (<3>, <2>), (<1>, <5>), (<6>, <5>), (<2>, <0>), (<0>, <4>), (<4>, <1>)]","{<3>: [<1>, <6>, <2>],
<1>: [<5>],
<6>: [<5>],
<2>: [<0>],
<5>: [],
<0>: [<4>],
<4>: [<1>]}","Node <3> is connected to nodes <1>, <6>, <2>.
Node <1> is connected to node <5>.
Node <6> is connected to node <5>.
Node <2> is connected to node <0>.
Node <0> is connected to node <4>.
Node <4> is connected to node <1>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,8,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<3>, <6>, <2>, <0>, <4>, <1>, <5>]","Let's solve it step by step.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <2>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
So the result of topological sorting is ","('[[<3>, <6>, <2>, <1>, <5>, <4>, <0>], [<3>, <6>, <2>, <0>, <4>, <1>, <5>], [<3>, <1>, <0>, <4>, <5>, <2>, <6>], [<3>, <6>, <1>, <5>, <2>, <0>, <4>]]',)",1,263
topological_sort,"[(<5>, <1>), (<5>, <2>), (<5>, <3>), (<5>, <4>), (<1>, <3>), (<2>, <3>), (<2>, <4>), (<4>, <1>), (<4>, <0>), (<0>, <3>)]","{<5>: [<1>, <2>, <3>, <4>],
<1>: [<3>],
<2>: [<3>, <4>],
<3>: [],
<4>: [<1>, <0>],
<0>: [<3>]}","Node <5> is connected to nodes <1>, <2>, <3>, <4>.
Node <1> is connected to node <3>.
Node <2> is connected to nodes <3>, <4>.
Node <4> is connected to nodes <1>, <0>.
Node <0> is connected to node <3>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,10,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<5>, <2>, <4>, <1>, <0>, <3>]","Let's solve it step by step.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <0>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
So the result of topological sorting is ","('[[<5>, <2>, <4>, <3>, <1>, <0>], [<5>, <4>, <3>, <0>, <1>, <2>], [<5>, <2>, <0>, <3>, <4>, <1>], [<5>, <2>, <4>, <1>, <0>, <3>]]',)",3,264
topological_sort,"[(<3>, <2>), (<3>, <5>), (<2>, <0>), (<5>, <0>), (<5>, <2>), (<4>, <2>), (<4>, <3>), (<4>, <0>), (<1>, <0>), (<1>, <6>), (<6>, <4>), (<6>, <2>), (<6>, <0>)]","{<3>: [<2>, <5>],
<2>: [<0>],
<5>: [<0>, <2>],
<0>: [],
<4>: [<2>, <3>, <0>],
<1>: [<0>, <6>],
<6>: [<4>, <2>, <0>]}","Node <3> is connected to nodes <2>, <5>.
Node <2> is connected to node <0>.
Node <5> is connected to nodes <0>, <2>.
Node <4> is connected to nodes <2>, <3>, <0>.
Node <1> is connected to nodes <0>, <6>.
Node <6> is connected to nodes <4>, <2>, <0>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,13,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<1>, <6>, <4>, <3>, <5>, <2>, <0>]","Let's solve it step by step.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
So the result of topological sorting is ","('[[<1>, <6>, <4>, <3>, <5>, <2>, <0>], [<1>, <6>, <2>, <0>, <4>, <3>, <5>], [<1>, <6>, <4>, <0>, <5>, <2>, <3>], [<1>, <6>, <4>, <3>, <2>, <0>, <5>]]',)",0,265
topological_sort,"[(<2>, <1>), (<2>, <5>), (<1>, <0>), (<5>, <0>), (<3>, <1>), (<3>, <5>), (<3>, <2>), (<4>, <1>)]","{<2>: [<1>, <5>],
<1>: [<0>],
<5>: [<0>],
<0>: [],
<3>: [<1>, <5>, <2>],
<4>: [<1>]}","Node <2> is connected to nodes <1>, <5>.
Node <1> is connected to node <0>.
Node <5> is connected to node <0>.
Node <3> is connected to nodes <1>, <5>, <2>.
Node <4> is connected to node <1>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,8,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<3>, <4>, <2>, <1>, <5>, <0>]","Let's solve it step by step.
Nodes with 0 in-degree: [<3>, <4>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <2>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <5>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
So the result of topological sorting is ","('[[<3>, <2>, <5>, <1>, <0>, <4>], [<3>, <4>, <2>, <1>, <5>, <0>], [<3>, <4>, <2>, <5>, <0>, <1>], [<3>, <4>, <5>, <0>, <2>, <1>]]',)",1,266
topological_sort,"[(<1>, <0>), (<1>, <5>), (<1>, <4>), (<0>, <5>), (<0>, <2>), (<4>, <0>), (<3>, <2>), (<3>, <1>), (<3>, <5>), (<3>, <4>)]","{<1>: [<0>, <5>, <4>],
<0>: [<5>, <2>],
<5>: [],
<4>: [<0>],
<2>: [],
<3>: [<2>, <1>, <5>, <4>]}","Node <1> is connected to nodes <0>, <5>, <4>.
Node <0> is connected to nodes <5>, <2>.
Node <4> is connected to node <0>.
Node <3> is connected to nodes <2>, <1>, <5>, <4>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,10,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<3>, <1>, <4>, <0>, <5>, <2>]","Let's solve it step by step.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <2>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
So the result of topological sorting is ","('[[<3>, <1>, <5>, <2>, <4>, <0>], [<3>, <1>, <4>, <2>, <0>, <5>], [<3>, <1>, <4>, <2>, <0>, <5>], [<3>, <1>, <4>, <0>, <5>, <2>]]',)",3,267
topological_sort,"[(<5>, <3>), (<5>, <1>), (<5>, <0>), (<3>, <4>), (<3>, <1>), (<3>, <6>), (<1>, <0>), (<4>, <1>), (<4>, <2>), (<2>, <6>)]","{<5>: [<3>, <1>, <0>],
<3>: [<4>, <1>, <6>],
<1>: [<0>],
<0>: [],
<4>: [<1>, <2>],
<6>: [],
<2>: [<6>]}","Node <5> is connected to nodes <3>, <1>, <0>.
Node <3> is connected to nodes <4>, <1>, <6>.
Node <1> is connected to node <0>.
Node <4> is connected to nodes <1>, <2>.
Node <2> is connected to node <6>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,10,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<5>, <3>, <4>, <1>, <2>, <0>, <6>]","Let's solve it step by step.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <2>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <0>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <6>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
So the result of topological sorting is ","('[[<5>, <3>, <0>, <6>, <4>, <1>, <2>], [<5>, <3>, <0>, <4>, <2>, <1>, <6>], [<5>, <3>, <4>, <0>, <2>, <6>, <1>], [<5>, <3>, <4>, <1>, <2>, <0>, <6>]]',)",3,268
topological_sort,"[(<2>, <1>), (<2>, <5>), (<2>, <6>), (<2>, <4>), (<5>, <6>), (<6>, <1>), (<4>, <6>), (<4>, <1>), (<0>, <2>), (<3>, <6>), (<3>, <0>), (<3>, <4>)]","{<2>: [<1>, <5>, <6>, <4>],
<1>: [],
<5>: [<6>],
<6>: [<1>],
<4>: [<6>, <1>],
<0>: [<2>],
<3>: [<6>, <0>, <4>]}","Node <2> is connected to nodes <1>, <5>, <6>, <4>.
Node <5> is connected to node <6>.
Node <6> is connected to node <1>.
Node <4> is connected to nodes <6>, <1>.
Node <0> is connected to node <2>.
Node <3> is connected to nodes <6>, <0>, <4>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,12,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<3>, <0>, <2>, <5>, <4>, <6>, <1>]","Let's solve it step by step.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <4>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
So the result of topological sorting is ","('[[<3>, <0>, <2>, <5>, <4>, <1>, <6>], [<3>, <0>, <6>, <1>, <2>, <5>, <4>], [<3>, <5>, <6>, <0>, <4>, <2>, <1>], [<3>, <0>, <2>, <5>, <4>, <6>, <1>]]',)",3,269
topological_sort,"[(<4>, <6>), (<4>, <5>), (<4>, <1>), (<4>, <2>), (<6>, <2>), (<6>, <1>), (<5>, <2>), (<5>, <0>), (<1>, <5>), (<1>, <3>), (<3>, <5>)]","{<4>: [<6>, <5>, <1>, <2>],
<6>: [<2>, <1>],
<5>: [<2>, <0>],
<1>: [<5>, <3>],
<2>: [],
<3>: [<5>],
<0>: []}","Node <4> is connected to nodes <6>, <5>, <1>, <2>.
Node <6> is connected to nodes <2>, <1>.
Node <5> is connected to nodes <2>, <0>.
Node <1> is connected to nodes <5>, <3>.
Node <3> is connected to node <5>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,11,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<4>, <6>, <1>, <3>, <5>, <2>, <0>]","Let's solve it step by step.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <0>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
So the result of topological sorting is ","('[[<4>, <6>, <1>, <2>, <3>, <5>, <0>], [<4>, <6>, <1>, <3>, <5>, <2>, <0>], [<4>, <6>, <2>, <0>, <1>, <3>, <5>], [<4>, <2>, <6>, <3>, <5>, <1>, <0>]]',)",1,270
topological_sort,"[(<0>, <3>), (<0>, <5>), (<3>, <5>), (<3>, <6>), (<6>, <5>), (<2>, <3>), (<2>, <1>), (<2>, <6>), (<2>, <0>), (<1>, <3>), (<1>, <0>), (<4>, <2>), (<4>, <3>), (<4>, <1>)]","{<0>: [<3>, <5>],
<3>: [<5>, <6>],
<5>: [],
<6>: [<5>],
<2>: [<3>, <1>, <6>, <0>],
<1>: [<3>, <0>],
<4>: [<2>, <3>, <1>]}","Node <0> is connected to nodes <3>, <5>.
Node <3> is connected to nodes <5>, <6>.
Node <6> is connected to node <5>.
Node <2> is connected to nodes <3>, <1>, <6>, <0>.
Node <1> is connected to nodes <3>, <0>.
Node <4> is connected to nodes <2>, <3>, <1>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,14,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<4>, <2>, <1>, <0>, <3>, <6>, <5>]","Let's solve it step by step.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
So the result of topological sorting is ","('[[<4>, <2>, <1>, <0>, <3>, <6>, <5>], [<4>, <2>, <6>, <5>, <1>, <0>, <3>], [<4>, <2>, <1>, <5>, <6>, <3>, <0>], [<4>, <3>, <1>, <2>, <0>, <6>, <5>]]',)",0,271
topological_sort,"[(<4>, <5>), (<4>, <0>), (<5>, <0>), (<5>, <1>), (<5>, <2>), (<1>, <3>), (<1>, <2>), (<6>, <1>), (<6>, <0>)]","{<4>: [<5>, <0>],
<5>: [<0>, <1>, <2>],
<0>: [],
<1>: [<3>, <2>],
<2>: [],
<3>: [],
<6>: [<1>, <0>]}","Node <4> is connected to nodes <5>, <0>.
Node <5> is connected to nodes <0>, <1>, <2>.
Node <1> is connected to nodes <3>, <2>.
Node <6> is connected to nodes <1>, <0>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,9,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<4>, <6>, <5>, <0>, <1>, <3>, <2>]","Let's solve it step by step.
Nodes with 0 in-degree: [<4>, <6>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <5>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <1>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <2>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
So the result of topological sorting is ","('[[<4>, <6>, <5>, <0>, <1>, <3>, <2>], [<4>, <1>, <2>, <5>, <0>, <6>, <3>], [<4>, <6>, <5>, <1>, <3>, <0>, <2>], [<4>, <6>, <3>, <2>, <5>, <0>, <1>]]',)",0,272
topological_sort,"[(<4>, <1>), (<4>, <0>), (<4>, <3>), (<4>, <5>), (<0>, <1>), (<3>, <0>), (<3>, <1>), (<2>, <3>), (<2>, <5>)]","{<4>: [<1>, <0>, <3>, <5>],
<1>: [],
<0>: [<1>],
<3>: [<0>, <1>],
<5>: [],
<2>: [<3>, <5>]}","Node <4> is connected to nodes <1>, <0>, <3>, <5>.
Node <0> is connected to node <1>.
Node <3> is connected to nodes <0>, <1>.
Node <2> is connected to nodes <3>, <5>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,9,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<4>, <2>, <3>, <5>, <0>, <1>]","Let's solve it step by step.
Nodes with 0 in-degree: [<4>, <2>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <5>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <0>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
So the result of topological sorting is ","('[[<4>, <2>, <3>, <5>, <0>, <1>], [<4>, <2>, <3>, <5>, <0>, <1>], [<4>, <2>, <0>, <1>, <3>, <5>], [<4>, <5>, <3>, <0>, <2>, <1>]]',)",0,273
topological_sort,"[(<5>, <2>), (<5>, <0>), (<5>, <4>), (<5>, <3>), (<5>, <1>), (<4>, <3>), (<4>, <6>), (<4>, <0>), (<3>, <2>), (<3>, <0>), (<1>, <4>), (<1>, <6>), (<1>, <3>), (<1>, <2>), (<1>, <0>), (<6>, <3>), (<6>, <0>)]","{<5>: [<2>, <0>, <4>, <3>, <1>],
<2>: [],
<0>: [],
<4>: [<3>, <6>, <0>],
<3>: [<2>, <0>],
<1>: [<4>, <6>, <3>, <2>, <0>],
<6>: [<3>, <0>]}","Node <5> is connected to nodes <2>, <0>, <4>, <3>, <1>.
Node <4> is connected to nodes <3>, <6>, <0>.
Node <3> is connected to nodes <2>, <0>.
Node <1> is connected to nodes <4>, <6>, <3>, <2>, <0>.
Node <6> is connected to nodes <3>, <0>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,17,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<5>, <1>, <4>, <6>, <3>, <2>, <0>]","Let's solve it step by step.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <0>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
So the result of topological sorting is ","('[[<5>, <1>, <2>, <0>, <4>, <6>, <3>], [<5>, <1>, <4>, <3>, <0>, <6>, <2>], [<5>, <1>, <4>, <6>, <3>, <2>, <0>], [<5>, <1>, <4>, <2>, <6>, <3>, <0>]]',)",2,274
topological_sort,"[(<2>, <0>), (<2>, <5>), (<2>, <1>), (<0>, <5>), (<0>, <3>), (<5>, <3>), (<1>, <4>), (<4>, <5>), (<4>, <3>)]","{<2>: [<0>, <5>, <1>],
<0>: [<5>, <3>],
<5>: [<3>],
<1>: [<4>],
<3>: [],
<4>: [<5>, <3>]}","Node <2> is connected to nodes <0>, <5>, <1>.
Node <0> is connected to nodes <5>, <3>.
Node <5> is connected to node <3>.
Node <1> is connected to node <4>.
Node <4> is connected to nodes <5>, <3>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,9,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<2>, <0>, <1>, <4>, <5>, <3>]","Let's solve it step by step.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <1>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
So the result of topological sorting is ","('[[<2>, <0>, <1>, <4>, <5>, <3>], [<2>, <0>, <4>, <1>, <5>, <3>], [<2>, <0>, <1>, <4>, <5>, <3>], [<2>, <0>, <5>, <3>, <1>, <4>]]',)",2,275
topological_sort,"[(<3>, <5>), (<0>, <5>), (<0>, <6>), (<0>, <3>), (<0>, <2>), (<6>, <3>), (<6>, <2>), (<2>, <5>), (<2>, <3>), (<1>, <5>), (<1>, <3>), (<1>, <0>), (<4>, <6>), (<4>, <0>), (<4>, <1>)]","{<3>: [<5>],
<5>: [],
<0>: [<5>, <6>, <3>, <2>],
<6>: [<3>, <2>],
<2>: [<5>, <3>],
<1>: [<5>, <3>, <0>],
<4>: [<6>, <0>, <1>]}","Node <3> is connected to node <5>.
Node <0> is connected to nodes <5>, <6>, <3>, <2>.
Node <6> is connected to nodes <3>, <2>.
Node <2> is connected to nodes <5>, <3>.
Node <1> is connected to nodes <5>, <3>, <0>.
Node <4> is connected to nodes <6>, <0>, <1>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,15,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<4>, <1>, <0>, <6>, <2>, <3>, <5>]","Let's solve it step by step.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
So the result of topological sorting is ","('[[<4>, <0>, <2>, <5>, <6>, <1>, <3>], [<4>, <1>, <0>, <6>, <2>, <3>, <5>], [<4>, <1>, <3>, <5>, <0>, <6>, <2>], [<4>, <1>, <0>, <6>, <3>, <2>, <5>]]',)",1,276
topological_sort,"[(<0>, <2>), (<0>, <3>), (<0>, <4>), (<2>, <5>), (<3>, <1>), (<5>, <3>), (<5>, <1>)]","{<0>: [<2>, <3>, <4>],
<2>: [<5>],
<3>: [<1>],
<4>: [],
<5>: [<3>, <1>],
<1>: []}","Node <0> is connected to nodes <2>, <3>, <4>.
Node <2> is connected to node <5>.
Node <3> is connected to node <1>.
Node <5> is connected to nodes <3>, <1>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,7,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<0>, <2>, <4>, <5>, <3>, <1>]","Let's solve it step by step.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <4>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <5>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
So the result of topological sorting is ","('[[<0>, <2>, <3>, <1>, <4>, <5>], [<0>, <2>, <4>, <1>, <3>, <5>], [<0>, <2>, <3>, <4>, <5>, <1>], [<0>, <2>, <4>, <5>, <3>, <1>]]',)",3,277
topological_sort,"[(<2>, <1>), (<2>, <3>), (<2>, <4>), (<2>, <0>), (<1>, <0>), (<3>, <1>), (<4>, <1>), (<4>, <0>)]","{<2>: [<1>, <3>, <4>, <0>],
<1>: [<0>],
<3>: [<1>],
<4>: [<1>, <0>],
<0>: []}","Node <2> is connected to nodes <1>, <3>, <4>, <0>.
Node <1> is connected to node <0>.
Node <3> is connected to node <1>.
Node <4> is connected to nodes <1>, <0>.","[<0>, <1>, <2>, <3>, <4>]",5,8,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<2>, <3>, <4>, <1>, <0>]","Let's solve it step by step.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <4>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
So the result of topological sorting is ","('[[<2>, <0>, <1>, <4>, <3>], [<2>, <0>, <3>, <4>, <1>], [<2>, <3>, <4>, <1>, <0>], [<2>, <3>, <0>, <1>, <4>]]',)",2,278
topological_sort,"[(<4>, <2>), (<4>, <1>), (<4>, <5>), (<4>, <0>), (<4>, <6>), (<2>, <3>), (<2>, <6>), (<2>, <1>), (<1>, <3>), (<5>, <6>), (<5>, <0>), (<5>, <2>), (<0>, <6>), (<0>, <3>), (<3>, <6>)]","{<4>: [<2>, <1>, <5>, <0>, <6>],
<2>: [<3>, <6>, <1>],
<1>: [<3>],
<5>: [<6>, <0>, <2>],
<0>: [<6>, <3>],
<6>: [],
<3>: [<6>]}","Node <4> is connected to nodes <2>, <1>, <5>, <0>, <6>.
Node <2> is connected to nodes <3>, <6>, <1>.
Node <1> is connected to node <3>.
Node <5> is connected to nodes <6>, <0>, <2>.
Node <0> is connected to nodes <6>, <3>.
Node <3> is connected to node <6>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,15,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<4>, <5>, <0>, <2>, <1>, <3>, <6>]","Let's solve it step by step.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <2>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
So the result of topological sorting is ","('[[<4>, <5>, <3>, <6>, <0>, <2>, <1>], [<4>, <5>, <0>, <2>, <1>, <3>, <6>], [<4>, <5>, <0>, <2>, <1>, <6>, <3>], [<4>, <3>, <2>, <5>, <0>, <6>, <1>]]',)",1,279
topological_sort,"[(<4>, <5>), (<4>, <0>), (<4>, <3>), (<5>, <3>), (<0>, <5>), (<1>, <6>), (<1>, <3>), (<1>, <4>), (<6>, <4>), (<6>, <3>), (<6>, <0>), (<2>, <5>), (<2>, <4>), (<2>, <1>), (<2>, <3>)]","{<4>: [<5>, <0>, <3>],
<5>: [<3>],
<0>: [<5>],
<3>: [],
<1>: [<6>, <3>, <4>],
<6>: [<4>, <3>, <0>],
<2>: [<5>, <4>, <1>, <3>]}","Node <4> is connected to nodes <5>, <0>, <3>.
Node <5> is connected to node <3>.
Node <0> is connected to node <5>.
Node <1> is connected to nodes <6>, <3>, <4>.
Node <6> is connected to nodes <4>, <3>, <0>.
Node <2> is connected to nodes <5>, <4>, <1>, <3>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,15,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<2>, <1>, <6>, <4>, <0>, <5>, <3>]","Let's solve it step by step.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
So the result of topological sorting is ","('[[<2>, <5>, <3>, <1>, <6>, <0>, <4>], [<2>, <1>, <5>, <3>, <6>, <4>, <0>], [<2>, <1>, <6>, <3>, <0>, <4>, <5>], [<2>, <1>, <6>, <4>, <0>, <5>, <3>]]',)",3,280
topological_sort,"[(<3>, <0>), (<3>, <5>), (<3>, <6>), (<6>, <1>), (<2>, <5>), (<2>, <1>), (<2>, <3>), (<2>, <6>), (<1>, <5>), (<4>, <0>), (<4>, <1>), (<4>, <5>)]","{<3>: [<0>, <5>, <6>],
<0>: [],
<5>: [],
<6>: [<1>],
<2>: [<5>, <1>, <3>, <6>],
<1>: [<5>],
<4>: [<0>, <1>, <5>]}","Node <3> is connected to nodes <0>, <5>, <6>.
Node <6> is connected to node <1>.
Node <2> is connected to nodes <5>, <1>, <3>, <6>.
Node <1> is connected to node <5>.
Node <4> is connected to nodes <0>, <1>, <5>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,12,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<2>, <4>, <3>, <0>, <6>, <1>, <5>]","Let's solve it step by step.
Nodes with 0 in-degree: [<2>, <4>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>, <3>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <6>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
So the result of topological sorting is ","('[[<2>, <6>, <0>, <5>, <3>, <4>, <1>], [<2>, <4>, <3>, <0>, <6>, <1>, <5>], [<2>, <4>, <3>, <5>, <1>, <6>, <0>], [<2>, <4>, <1>, <5>, <3>, <0>, <6>]]',)",1,281
topological_sort,"[(<6>, <5>), (<6>, <4>), (<6>, <2>), (<6>, <1>), (<5>, <1>), (<5>, <2>), (<2>, <4>), (<3>, <6>), (<3>, <2>), (<3>, <5>), (<0>, <3>), (<0>, <5>), (<0>, <2>), (<0>, <4>)]","{<6>: [<5>, <4>, <2>, <1>],
<5>: [<1>, <2>],
<4>: [],
<2>: [<4>],
<1>: [],
<3>: [<6>, <2>, <5>],
<0>: [<3>, <5>, <2>, <4>]}","Node <6> is connected to nodes <5>, <4>, <2>, <1>.
Node <5> is connected to nodes <1>, <2>.
Node <2> is connected to node <4>.
Node <3> is connected to nodes <6>, <2>, <5>.
Node <0> is connected to nodes <3>, <5>, <2>, <4>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,14,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<0>, <3>, <6>, <5>, <1>, <2>, <4>]","Let's solve it step by step.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <2>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
So the result of topological sorting is ","('[[<0>, <3>, <6>, <5>, <1>, <2>, <4>], [<0>, <3>, <6>, <5>, <1>, <2>, <4>], [<0>, <5>, <1>, <4>, <6>, <3>, <2>], [<0>, <3>, <2>, <4>, <6>, <5>, <1>]]',)",1,282
topological_sort,"[(<0>, <6>), (<6>, <5>), (<2>, <4>), (<2>, <0>), (<2>, <3>), (<4>, <6>), (<3>, <4>), (<1>, <4>), (<1>, <3>)]","{<0>: [<6>],
<6>: [<5>],
<5>: [],
<2>: [<4>, <0>, <3>],
<4>: [<6>],
<3>: [<4>],
<1>: [<4>, <3>]}","Node <0> is connected to node <6>.
Node <6> is connected to node <5>.
Node <2> is connected to nodes <4>, <0>, <3>.
Node <4> is connected to node <6>.
Node <3> is connected to node <4>.
Node <1> is connected to nodes <4>, <3>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,9,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<2>, <1>, <0>, <3>, <4>, <6>, <5>]","Let's solve it step by step.
Nodes with 0 in-degree: [<2>, <1>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <0>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <3>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
So the result of topological sorting is ","('[[<2>, <1>, <0>, <6>, <5>, <4>, <3>], [<2>, <6>, <4>, <5>, <3>, <1>, <0>], [<2>, <1>, <0>, <3>, <4>, <6>, <5>], [<2>, <1>, <6>, <5>, <0>, <3>, <4>]]',)",2,283
topological_sort,"[(<4>, <2>), (<4>, <1>), (<4>, <5>), (<4>, <0>), (<4>, <3>), (<4>, <6>), (<2>, <5>), (<2>, <0>), (<2>, <3>), (<1>, <3>), (<1>, <2>), (<1>, <0>), (<1>, <5>), (<5>, <0>), (<0>, <3>), (<6>, <2>), (<6>, <3>), (<6>, <1>)]","{<4>: [<2>, <1>, <5>, <0>, <3>, <6>],
<2>: [<5>, <0>, <3>],
<1>: [<3>, <2>, <0>, <5>],
<5>: [<0>],
<0>: [<3>],
<3>: [],
<6>: [<2>, <3>, <1>]}","Node <4> is connected to nodes <2>, <1>, <5>, <0>, <3>, <6>.
Node <2> is connected to nodes <5>, <0>, <3>.
Node <1> is connected to nodes <3>, <2>, <0>, <5>.
Node <5> is connected to node <0>.
Node <0> is connected to node <3>.
Node <6> is connected to nodes <2>, <3>, <1>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,18,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<4>, <6>, <1>, <2>, <5>, <0>, <3>]","Let's solve it step by step.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
So the result of topological sorting is ","('[[<4>, <6>, <1>, <0>, <3>, <2>, <5>], [<4>, <2>, <6>, <5>, <1>, <3>, <0>], [<4>, <6>, <1>, <2>, <5>, <0>, <3>], [<4>, <6>, <0>, <3>, <1>, <2>, <5>]]',)",2,284
topological_sort,"[(<0>, <1>), (<0>, <2>), (<2>, <4>), (<3>, <4>)]","{<0>: [<1>, <2>],
<1>: [],
<2>: [<4>],
<3>: [<4>],
<4>: []}","Node <0> is connected to nodes <1>, <2>.
Node <2> is connected to node <4>.
Node <3> is connected to node <4>.","[<0>, <1>, <2>, <3>, <4>]",5,4,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<0>, <3>, <1>, <2>, <4>]","Let's solve it step by step.
Nodes with 0 in-degree: [<0>, <3>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <1>, <2>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <2>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
So the result of topological sorting is ","('[[<0>, <3>, <1>, <2>, <4>], [<0>, <1>, <4>, <2>, <3>], [<0>, <3>, <4>, <1>, <2>], [<0>, <4>, <3>, <1>, <2>]]',)",0,285
topological_sort,"[(<1>, <4>), (<4>, <2>), (<4>, <0>), (<2>, <3>), (<2>, <0>), (<5>, <1>)]","{<1>: [<4>],
<4>: [<2>, <0>],
<2>: [<3>, <0>],
<0>: [],
<3>: [],
<5>: [<1>]}","Node <1> is connected to node <4>.
Node <4> is connected to nodes <2>, <0>.
Node <2> is connected to nodes <3>, <0>.
Node <5> is connected to node <1>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,6,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<5>, <1>, <4>, <2>, <3>, <0>]","Let's solve it step by step.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <0>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
So the result of topological sorting is ","('[[<5>, <1>, <3>, <0>, <4>, <2>], [<5>, <0>, <1>, <4>, <3>, <2>], [<5>, <1>, <4>, <2>, <3>, <0>], [<5>, <1>, <4>, <2>, <3>, <0>]]',)",2,286
topological_sort,"[(<1>, <3>), (<3>, <0>), (<3>, <4>), (<4>, <0>), (<2>, <1>)]","{<1>: [<3>],
<3>: [<0>, <4>],
<0>: [],
<4>: [<0>],
<2>: [<1>]}","Node <1> is connected to node <3>.
Node <3> is connected to nodes <0>, <4>.
Node <4> is connected to node <0>.
Node <2> is connected to node <1>.","[<0>, <1>, <2>, <3>, <4>]",5,5,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<2>, <1>, <3>, <4>, <0>]","Let's solve it step by step.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
So the result of topological sorting is ","('[[<2>, <1>, <0>, <4>, <3>], [<2>, <0>, <1>, <3>, <4>], [<2>, <1>, <3>, <4>, <0>], [<2>, <4>, <0>, <1>, <3>]]',)",2,287
topological_sort,"[(<5>, <3>), (<5>, <6>), (<4>, <1>), (<4>, <6>), (<4>, <5>), (<1>, <6>), (<0>, <5>), (<2>, <0>), (<2>, <1>)]","{<5>: [<3>, <6>],
<3>: [],
<6>: [],
<4>: [<1>, <6>, <5>],
<1>: [<6>],
<0>: [<5>],
<2>: [<0>, <1>]}","Node <5> is connected to nodes <3>, <6>.
Node <4> is connected to nodes <1>, <6>, <5>.
Node <1> is connected to node <6>.
Node <0> is connected to node <5>.
Node <2> is connected to nodes <0>, <1>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,9,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<4>, <2>, <0>, <1>, <5>, <3>, <6>]","Let's solve it step by step.
Nodes with 0 in-degree: [<4>, <2>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <1>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <5>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <6>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
So the result of topological sorting is ","('[[<4>, <2>, <0>, <5>, <3>, <6>, <1>], [<4>, <5>, <2>, <1>, <3>, <6>, <0>], [<4>, <2>, <0>, <1>, <5>, <3>, <6>], [<4>, <2>, <3>, <6>, <0>, <1>, <5>]]',)",2,288
topological_sort,"[(<3>, <5>), (<3>, <1>), (<3>, <6>), (<3>, <2>), (<3>, <0>), (<5>, <4>), (<1>, <5>), (<2>, <6>), (<2>, <5>), (<0>, <1>), (<0>, <4>), (<0>, <2>)]","{<3>: [<5>, <1>, <6>, <2>, <0>],
<5>: [<4>],
<1>: [<5>],
<6>: [],
<2>: [<6>, <5>],
<0>: [<1>, <4>, <2>],
<4>: []}","Node <3> is connected to nodes <5>, <1>, <6>, <2>, <0>.
Node <5> is connected to node <4>.
Node <1> is connected to node <5>.
Node <2> is connected to nodes <6>, <5>.
Node <0> is connected to nodes <1>, <4>, <2>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,12,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<3>, <0>, <1>, <2>, <6>, <5>, <4>]","Let's solve it step by step.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <2>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<6>, <5>].
Visit node <6> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
So the result of topological sorting is ","('[[<3>, <0>, <1>, <5>, <2>, <6>, <4>], [<3>, <0>, <1>, <2>, <5>, <6>, <4>], [<3>, <0>, <5>, <4>, <1>, <2>, <6>], [<3>, <0>, <1>, <2>, <6>, <5>, <4>]]',)",3,289
topological_sort,"[(<2>, <5>), (<2>, <1>), (<2>, <4>), (<5>, <1>), (<5>, <0>), (<5>, <4>), (<0>, <3>), (<3>, <4>)]","{<2>: [<5>, <1>, <4>],
<5>: [<1>, <0>, <4>],
<1>: [],
<4>: [],
<0>: [<3>],
<3>: [<4>]}","Node <2> is connected to nodes <5>, <1>, <4>.
Node <5> is connected to nodes <1>, <0>, <4>.
Node <0> is connected to node <3>.
Node <3> is connected to node <4>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,8,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<2>, <5>, <1>, <0>, <3>, <4>]","Let's solve it step by step.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<1>, <0>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
So the result of topological sorting is ","('[[<2>, <0>, <4>, <3>, <5>, <1>], [<2>, <5>, <1>, <4>, <3>, <0>], [<2>, <5>, <3>, <4>, <1>, <0>], [<2>, <5>, <1>, <0>, <3>, <4>]]',)",3,290
topological_sort,"[(<0>, <6>), (<0>, <1>), (<0>, <3>), (<1>, <6>), (<3>, <1>), (<5>, <3>), (<5>, <6>), (<4>, <3>), (<4>, <2>), (<4>, <6>), (<4>, <1>), (<2>, <6>), (<2>, <5>)]","{<0>: [<6>, <1>, <3>],
<6>: [],
<1>: [<6>],
<3>: [<1>],
<5>: [<3>, <6>],
<4>: [<3>, <2>, <6>, <1>],
<2>: [<6>, <5>]}","Node <0> is connected to nodes <6>, <1>, <3>.
Node <1> is connected to node <6>.
Node <3> is connected to node <1>.
Node <5> is connected to nodes <3>, <6>.
Node <4> is connected to nodes <3>, <2>, <6>, <1>.
Node <2> is connected to nodes <6>, <5>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,13,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<0>, <4>, <2>, <5>, <3>, <1>, <6>]","Let's solve it step by step.
Nodes with 0 in-degree: [<0>, <4>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
So the result of topological sorting is ","('[[<0>, <6>, <5>, <3>, <2>, <1>, <4>], [<0>, <4>, <2>, <5>, <3>, <1>, <6>], [<0>, <4>, <2>, <5>, <3>, <6>, <1>], [<0>, <4>, <1>, <6>, <2>, <5>, <3>]]',)",1,291
topological_sort,"[(<5>, <1>), (<2>, <1>), (<2>, <5>), (<3>, <2>), (<3>, <4>), (<3>, <1>), (<4>, <5>), (<0>, <2>), (<0>, <5>), (<0>, <3>)]","{<5>: [<1>],
<1>: [],
<2>: [<1>, <5>],
<3>: [<2>, <4>, <1>],
<4>: [<5>],
<0>: [<2>, <5>, <3>]}","Node <5> is connected to node <1>.
Node <2> is connected to nodes <1>, <5>.
Node <3> is connected to nodes <2>, <4>, <1>.
Node <4> is connected to node <5>.
Node <0> is connected to nodes <2>, <5>, <3>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,10,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<0>, <3>, <2>, <4>, <5>, <1>]","Let's solve it step by step.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<2>, <4>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
So the result of topological sorting is ","('[[<0>, <3>, <5>, <1>, <2>, <4>], [<0>, <3>, <2>, <5>, <4>, <1>], [<0>, <3>, <2>, <4>, <5>, <1>], [<0>, <3>, <1>, <2>, <5>, <4>]]',)",2,292
topological_sort,"[(<3>, <4>), (<3>, <5>), (<3>, <2>), (<5>, <4>), (<5>, <0>), (<2>, <4>), (<1>, <0>), (<1>, <3>), (<1>, <2>), (<0>, <2>)]","{<3>: [<4>, <5>, <2>],
<4>: [],
<5>: [<4>, <0>],
<2>: [<4>],
<1>: [<0>, <3>, <2>],
<0>: [<2>]}","Node <3> is connected to nodes <4>, <5>, <2>.
Node <5> is connected to nodes <4>, <0>.
Node <2> is connected to node <4>.
Node <1> is connected to nodes <0>, <3>, <2>.
Node <0> is connected to node <2>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,10,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<1>, <3>, <5>, <0>, <2>, <4>]","Let's solve it step by step.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
So the result of topological sorting is ","('[[<1>, <3>, <5>, <0>, <2>, <4>], [<1>, <5>, <4>, <0>, <2>, <3>], [<1>, <3>, <2>, <4>, <5>, <0>], [<1>, <3>, <5>, <2>, <4>, <0>]]',)",0,293
topological_sort,"[(<4>, <2>), (<4>, <0>), (<4>, <3>), (<0>, <3>), (<0>, <2>), (<3>, <2>), (<1>, <0>), (<1>, <4>), (<1>, <2>)]","{<4>: [<2>, <0>, <3>],
<2>: [],
<0>: [<3>, <2>],
<3>: [<2>],
<1>: [<0>, <4>, <2>]}","Node <4> is connected to nodes <2>, <0>, <3>.
Node <0> is connected to nodes <3>, <2>.
Node <3> is connected to node <2>.
Node <1> is connected to nodes <0>, <4>, <2>.","[<0>, <1>, <2>, <3>, <4>]",5,9,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<1>, <4>, <0>, <3>, <2>]","Let's solve it step by step.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
So the result of topological sorting is ","('[[<1>, <2>, <4>, <0>, <3>], [<1>, <4>, <0>, <3>, <2>], [<1>, <4>, <2>, <3>, <0>], [<1>, <0>, <3>, <4>, <2>]]',)",1,294
topological_sort,"[(<3>, <0>), (<3>, <1>), (<3>, <5>), (<1>, <0>), (<1>, <5>), (<1>, <4>), (<4>, <0>), (<2>, <4>), (<2>, <3>), (<2>, <1>), (<2>, <0>)]","{<3>: [<0>, <1>, <5>],
<0>: [],
<1>: [<0>, <5>, <4>],
<5>: [],
<4>: [<0>],
<2>: [<4>, <3>, <1>, <0>]}","Node <3> is connected to nodes <0>, <1>, <5>.
Node <1> is connected to nodes <0>, <5>, <4>.
Node <4> is connected to node <0>.
Node <2> is connected to nodes <4>, <3>, <1>, <0>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,11,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<2>, <3>, <1>, <5>, <4>, <0>]","Let's solve it step by step.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <4>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
So the result of topological sorting is ","('[[<2>, <3>, <1>, <4>, <0>, <5>], [<2>, <5>, <3>, <1>, <0>, <4>], [<2>, <3>, <1>, <5>, <4>, <0>], [<2>, <3>, <4>, <0>, <1>, <5>]]',)",2,295
topological_sort,"[(<3>, <0>), (<3>, <4>), (<4>, <1>), (<2>, <0>), (<2>, <4>)]","{<3>: [<0>, <4>],
<0>: [],
<4>: [<1>],
<1>: [],
<2>: [<0>, <4>]}","Node <3> is connected to nodes <0>, <4>.
Node <4> is connected to node <1>.
Node <2> is connected to nodes <0>, <4>.","[<0>, <1>, <2>, <3>, <4>]",5,5,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<3>, <2>, <0>, <4>, <1>]","Let's solve it step by step.
Nodes with 0 in-degree: [<3>, <2>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <4>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
So the result of topological sorting is ","('[[<3>, <2>, <0>, <4>, <1>], [<3>, <2>, <0>, <4>, <1>], [<3>, <1>, <2>, <0>, <4>], [<3>, <0>, <1>, <2>, <4>]]',)",1,296
topological_sort,"[(<3>, <5>), (<3>, <1>), (<3>, <2>), (<5>, <4>), (<5>, <0>), (<2>, <5>), (<4>, <0>), (<4>, <1>)]","{<3>: [<5>, <1>, <2>],
<5>: [<4>, <0>],
<1>: [],
<2>: [<5>],
<4>: [<0>, <1>],
<0>: []}","Node <3> is connected to nodes <5>, <1>, <2>.
Node <5> is connected to nodes <4>, <0>.
Node <2> is connected to node <5>.
Node <4> is connected to nodes <0>, <1>.","[<0>, <1>, <2>, <3>, <4>, <5>]",6,8,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<3>, <2>, <5>, <4>, <0>, <1>]","Let's solve it step by step.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<5>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<0>, <1>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
So the result of topological sorting is ","('[[<3>, <0>, <2>, <1>, <4>, <5>], [<3>, <2>, <5>, <4>, <0>, <1>], [<3>, <2>, <5>, <1>, <0>, <4>], [<3>, <2>, <0>, <1>, <5>, <4>]]',)",1,297
topological_sort,"[(<4>, <0>), (<4>, <3>), (<0>, <1>), (<3>, <0>), (<2>, <0>), (<2>, <3>), (<2>, <4>)]","{<4>: [<0>, <3>],
<0>: [<1>],
<3>: [<0>],
<1>: [],
<2>: [<0>, <3>, <4>]}","Node <4> is connected to nodes <0>, <3>.
Node <0> is connected to node <1>.
Node <3> is connected to node <0>.
Node <2> is connected to nodes <0>, <3>, <4>.","[<0>, <1>, <2>, <3>, <4>]",5,7,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<2>, <4>, <3>, <0>, <1>]","Let's solve it step by step.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<3>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
So the result of topological sorting is ","('[[<2>, <1>, <4>, <3>, <0>], [<2>, <1>, <4>, <3>, <0>], [<2>, <4>, <3>, <0>, <1>], [<2>, <4>, <0>, <1>, <3>]]',)",2,298
topological_sort,"[(<2>, <3>), (<2>, <6>), (<2>, <5>), (<3>, <6>), (<0>, <5>), (<0>, <3>), (<0>, <6>), (<0>, <2>), (<1>, <2>), (<1>, <0>), (<1>, <6>), (<4>, <0>), (<4>, <6>), (<4>, <1>), (<4>, <2>), (<4>, <3>), (<4>, <5>)]","{<2>: [<3>, <6>, <5>],
<3>: [<6>],
<6>: [],
<5>: [],
<0>: [<5>, <3>, <6>, <2>],
<1>: [<2>, <0>, <6>],
<4>: [<0>, <6>, <1>, <2>, <3>, <5>]}","Node <2> is connected to nodes <3>, <6>, <5>.
Node <3> is connected to node <6>.
Node <0> is connected to nodes <5>, <3>, <6>, <2>.
Node <1> is connected to nodes <2>, <0>, <6>.
Node <4> is connected to nodes <0>, <6>, <1>, <2>, <3>, <5>.","[<0>, <1>, <2>, <3>, <4>, <5>, <6>]",7,17,True,"Output the topological sorting of this graph. Topological sorting is a linear ordering of the nodes of a directed acyclic graph (DAG) such that for every directed edge, the source node comes before the end nodes in the ordering.","[<4>, <1>, <0>, <2>, <3>, <5>, <6>]","Let's solve it step by step.
Nodes with 0 in-degree: [<4>].
Visit node <4> and remove it from the graph.
Nodes with 0 in-degree: [<1>].
Visit node <1> and remove it from the graph.
Nodes with 0 in-degree: [<0>].
Visit node <0> and remove it from the graph.
Nodes with 0 in-degree: [<2>].
Visit node <2> and remove it from the graph.
Nodes with 0 in-degree: [<3>, <5>].
Visit node <3> and remove it from the graph.
Nodes with 0 in-degree: [<5>, <6>].
Visit node <5> and remove it from the graph.
Nodes with 0 in-degree: [<6>].
Visit node <6> and remove it from the graph.
So the result of topological sorting is ","('[[<4>, <1>, <5>, <6>, <0>, <2>, <3>], [<4>, <1>, <0>, <2>, <3>, <5>, <6>], [<4>, <6>, <5>, <2>, <3>, <0>, <1>], [<4>, <1>, <0>, <6>, <2>, <3>, <5>]]',)",1,299
