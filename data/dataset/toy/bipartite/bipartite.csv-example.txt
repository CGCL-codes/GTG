####### sample 1 #######

>> task:

bipartite

>> graph:

[(<0>, <3>), (<0>, <4>), (<1>, <2>), (<1>, <4>), (<1>, <5>)]

>> graph_adj:

{<0>: [<3>, <4>],
<1>: [<2>, <4>, <5>],
<2>: [<1>],
<3>: [<0>],
<4>: [<0>, <1>],
<5>: [<1>]}

>> graph_nl:

Node <0> is connected to nodes <3>, <4>.
Node <1> is connected to nodes <2>, <4>, <5>.
Node <2> is connected to node <1>.
Node <3> is connected to node <0>.
Node <4> is connected to nodes <0>, <1>.
Node <5> is connected to node <1>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>]

>> num_nodes:

6

>> num_edges:

5

>> directed:

False

>> question:

Find a maximum matching in the bipartite graph.
Nodes set 1 contains: <0> <1>.
Nodes set 2 contains: <2> <3> <4> <5>.

>> answer:

[(<0>, <3>), (<1>, <2>)]

>> steps:

To find a maximum matching in the bipartite graph, let's run the Hungarian algorithm step by step.
Firstly, initialize an empty matching {}.
Iterate over nodes in set 1:
Search from node <0>. Updated matching: {<3>: <0>}.
Search from node <1>. Updated matching: {<3>: <0>, <2>: <1>}.
So the maximum matching is 

>> n1:

2

>> n2:

4

####### sample 2 #######

>> task:

bipartite

>> graph:

[(<0>, <4>), (<0>, <5>), (<0>, <6>), (<1>, <3>), (<1>, <5>), (<2>, <3>), (<2>, <4>), (<2>, <5>), (<2>, <6>)]

>> graph_adj:

{<0>: [<4>, <5>, <6>],
<1>: [<3>, <5>],
<2>: [<3>, <4>, <5>, <6>],
<3>: [<1>, <2>],
<4>: [<0>, <2>],
<5>: [<0>, <1>, <2>],
<6>: [<0>, <2>]}

>> graph_nl:

Node <0> is connected to nodes <4>, <5>, <6>.
Node <1> is connected to nodes <3>, <5>.
Node <2> is connected to nodes <3>, <4>, <5>, <6>.
Node <3> is connected to nodes <1>, <2>.
Node <4> is connected to nodes <0>, <2>.
Node <5> is connected to nodes <0>, <1>, <2>.
Node <6> is connected to nodes <0>, <2>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>, <6>]

>> num_nodes:

7

>> num_edges:

9

>> directed:

False

>> question:

Find a maximum matching in the bipartite graph.
Nodes set 1 contains: <0> <1> <2>.
Nodes set 2 contains: <3> <4> <5> <6>.

>> answer:

[(<0>, <4>), (<1>, <5>), (<2>, <3>)]

>> steps:

To find a maximum matching in the bipartite graph, let's run the Hungarian algorithm step by step.
Firstly, initialize an empty matching {}.
Iterate over nodes in set 1:
Search from node <0>. Updated matching: {<4>: <0>}.
Search from node <1>. Updated matching: {<4>: <0>, <3>: <1>}.
Search from node <2>. Updated matching: {<4>: <0>, <3>: <2>, <5>: <1>}.
So the maximum matching is 

>> n1:

3

>> n2:

4

####### sample 3 #######

>> task:

bipartite

>> graph:

[(<0>, <3>), (<0>, <5>), (<1>, <2>), (<1>, <4>), (<1>, <5>)]

>> graph_adj:

{<0>: [<3>, <5>],
<1>: [<2>, <4>, <5>],
<2>: [<1>],
<3>: [<0>],
<4>: [<1>],
<5>: [<0>, <1>]}

>> graph_nl:

Node <0> is connected to nodes <3>, <5>.
Node <1> is connected to nodes <2>, <4>, <5>.
Node <2> is connected to node <1>.
Node <3> is connected to node <0>.
Node <4> is connected to node <1>.
Node <5> is connected to nodes <0>, <1>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>]

>> num_nodes:

6

>> num_edges:

5

>> directed:

False

>> question:

Find a maximum matching in the bipartite graph.
Nodes set 1 contains: <0> <1>.
Nodes set 2 contains: <2> <3> <4> <5>.

>> answer:

[(<0>, <3>), (<1>, <2>)]

>> steps:

To find a maximum matching in the bipartite graph, let's run the Hungarian algorithm step by step.
Firstly, initialize an empty matching {}.
Iterate over nodes in set 1:
Search from node <0>. Updated matching: {<3>: <0>}.
Search from node <1>. Updated matching: {<3>: <0>, <2>: <1>}.
So the maximum matching is 

>> n1:

2

>> n2:

4

####### sample 4 #######

>> task:

bipartite

>> graph:

[(<0>, <4>), (<0>, <5>), (<1>, <3>), (<1>, <4>), (<2>, <3>), (<2>, <6>)]

>> graph_adj:

{<0>: [<4>, <5>],
<1>: [<3>, <4>],
<2>: [<3>, <6>],
<3>: [<1>, <2>],
<4>: [<0>, <1>],
<5>: [<0>],
<6>: [<2>]}

>> graph_nl:

Node <0> is connected to nodes <4>, <5>.
Node <1> is connected to nodes <3>, <4>.
Node <2> is connected to nodes <3>, <6>.
Node <3> is connected to nodes <1>, <2>.
Node <4> is connected to nodes <0>, <1>.
Node <5> is connected to node <0>.
Node <6> is connected to node <2>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>, <6>]

>> num_nodes:

7

>> num_edges:

6

>> directed:

False

>> question:

Find a maximum matching in the bipartite graph.
Nodes set 1 contains: <0> <1> <2>.
Nodes set 2 contains: <3> <4> <5> <6>.

>> answer:

[(<0>, <5>), (<1>, <4>), (<2>, <3>)]

>> steps:

To find a maximum matching in the bipartite graph, let's run the Hungarian algorithm step by step.
Firstly, initialize an empty matching {}.
Iterate over nodes in set 1:
Search from node <0>. Updated matching: {<4>: <0>}.
Search from node <1>. Updated matching: {<4>: <0>, <3>: <1>}.
Search from node <2>. Updated matching: {<4>: <1>, <3>: <2>, <5>: <0>}.
So the maximum matching is 

>> n1:

3

>> n2:

4

####### sample 5 #######

>> task:

bipartite

>> graph:

[(<0>, <3>), (<0>, <4>), (<1>, <2>), (<1>, <3>)]

>> graph_adj:

{<0>: [<3>, <4>],
<1>: [<2>, <3>],
<2>: [<1>],
<3>: [<0>, <1>],
<4>: [<0>]}

>> graph_nl:

Node <0> is connected to nodes <3>, <4>.
Node <1> is connected to nodes <2>, <3>.
Node <2> is connected to node <1>.
Node <3> is connected to nodes <0>, <1>.
Node <4> is connected to node <0>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>]

>> num_nodes:

5

>> num_edges:

4

>> directed:

False

>> question:

Find a maximum matching in the bipartite graph.
Nodes set 1 contains: <0> <1>.
Nodes set 2 contains: <2> <3> <4>.

>> answer:

[(<0>, <3>), (<1>, <2>)]

>> steps:

To find a maximum matching in the bipartite graph, let's run the Hungarian algorithm step by step.
Firstly, initialize an empty matching {}.
Iterate over nodes in set 1:
Search from node <0>. Updated matching: {<3>: <0>}.
Search from node <1>. Updated matching: {<3>: <0>, <2>: <1>}.
So the maximum matching is 

>> n1:

2

>> n2:

3

####### sample 6 #######

>> task:

bipartite

>> graph:

[(<0>, <4>), (<0>, <5>), (<1>, <3>), (<1>, <4>), (<1>, <6>), (<2>, <3>)]

>> graph_adj:

{<0>: [<4>, <5>],
<1>: [<3>, <4>, <6>],
<2>: [<3>],
<3>: [<1>, <2>],
<4>: [<0>, <1>],
<5>: [<0>],
<6>: [<1>]}

>> graph_nl:

Node <0> is connected to nodes <4>, <5>.
Node <1> is connected to nodes <3>, <4>, <6>.
Node <2> is connected to node <3>.
Node <3> is connected to nodes <1>, <2>.
Node <4> is connected to nodes <0>, <1>.
Node <5> is connected to node <0>.
Node <6> is connected to node <1>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>, <6>]

>> num_nodes:

7

>> num_edges:

6

>> directed:

False

>> question:

Find a maximum matching in the bipartite graph.
Nodes set 1 contains: <0> <1> <2>.
Nodes set 2 contains: <3> <4> <5> <6>.

>> answer:

[(<0>, <5>), (<1>, <4>), (<2>, <3>)]

>> steps:

To find a maximum matching in the bipartite graph, let's run the Hungarian algorithm step by step.
Firstly, initialize an empty matching {}.
Iterate over nodes in set 1:
Search from node <0>. Updated matching: {<4>: <0>}.
Search from node <1>. Updated matching: {<4>: <0>, <3>: <1>}.
Search from node <2>. Updated matching: {<4>: <1>, <3>: <2>, <5>: <0>}.
So the maximum matching is 

>> n1:

3

>> n2:

4

####### sample 7 #######

>> task:

bipartite

>> graph:

[(<0>, <4>), (<0>, <6>), (<1>, <3>), (<1>, <6>), (<2>, <4>), (<2>, <5>), (<2>, <6>)]

>> graph_adj:

{<0>: [<4>, <6>],
<1>: [<3>, <6>],
<2>: [<4>, <5>, <6>],
<3>: [<1>],
<4>: [<0>, <2>],
<5>: [<2>],
<6>: [<0>, <1>, <2>]}

>> graph_nl:

Node <0> is connected to nodes <4>, <6>.
Node <1> is connected to nodes <3>, <6>.
Node <2> is connected to nodes <4>, <5>, <6>.
Node <3> is connected to node <1>.
Node <4> is connected to nodes <0>, <2>.
Node <5> is connected to node <2>.
Node <6> is connected to nodes <0>, <1>, <2>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>, <6>]

>> num_nodes:

7

>> num_edges:

7

>> directed:

False

>> question:

Find a maximum matching in the bipartite graph.
Nodes set 1 contains: <0> <1> <2>.
Nodes set 2 contains: <3> <4> <5> <6>.

>> answer:

[(<0>, <6>), (<1>, <3>), (<2>, <4>)]

>> steps:

To find a maximum matching in the bipartite graph, let's run the Hungarian algorithm step by step.
Firstly, initialize an empty matching {}.
Iterate over nodes in set 1:
Search from node <0>. Updated matching: {<4>: <0>}.
Search from node <1>. Updated matching: {<4>: <0>, <3>: <1>}.
Search from node <2>. Updated matching: {<4>: <2>, <3>: <1>, <6>: <0>}.
So the maximum matching is 

>> n1:

3

>> n2:

4

####### sample 8 #######

>> task:

bipartite

>> graph:

[(<0>, <2>), (<0>, <4>), (<1>, <2>), (<1>, <3>)]

>> graph_adj:

{<0>: [<2>, <4>],
<1>: [<2>, <3>],
<2>: [<0>, <1>],
<3>: [<1>],
<4>: [<0>]}

>> graph_nl:

Node <0> is connected to nodes <2>, <4>.
Node <1> is connected to nodes <2>, <3>.
Node <2> is connected to nodes <0>, <1>.
Node <3> is connected to node <1>.
Node <4> is connected to node <0>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>]

>> num_nodes:

5

>> num_edges:

4

>> directed:

False

>> question:

Find a maximum matching in the bipartite graph.
Nodes set 1 contains: <0> <1>.
Nodes set 2 contains: <2> <3> <4>.

>> answer:

[(<0>, <4>), (<1>, <2>)]

>> steps:

To find a maximum matching in the bipartite graph, let's run the Hungarian algorithm step by step.
Firstly, initialize an empty matching {}.
Iterate over nodes in set 1:
Search from node <0>. Updated matching: {<2>: <0>}.
Search from node <1>. Updated matching: {<2>: <1>, <4>: <0>}.
So the maximum matching is 

>> n1:

2

>> n2:

3

####### sample 9 #######

>> task:

bipartite

>> graph:

[(<0>, <3>), (<0>, <4>), (<0>, <5>), (<0>, <6>), (<1>, <5>), (<1>, <6>), (<2>, <6>)]

>> graph_adj:

{<0>: [<3>, <4>, <5>, <6>],
<1>: [<5>, <6>],
<2>: [<6>],
<3>: [<0>],
<4>: [<0>],
<5>: [<0>, <1>],
<6>: [<0>, <1>, <2>]}

>> graph_nl:

Node <0> is connected to nodes <3>, <4>, <5>, <6>.
Node <1> is connected to nodes <5>, <6>.
Node <2> is connected to node <6>.
Node <3> is connected to node <0>.
Node <4> is connected to node <0>.
Node <5> is connected to nodes <0>, <1>.
Node <6> is connected to nodes <0>, <1>, <2>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>, <5>, <6>]

>> num_nodes:

7

>> num_edges:

7

>> directed:

False

>> question:

Find a maximum matching in the bipartite graph.
Nodes set 1 contains: <0> <1> <2>.
Nodes set 2 contains: <3> <4> <5> <6>.

>> answer:

[(<0>, <3>), (<1>, <5>), (<2>, <6>)]

>> steps:

To find a maximum matching in the bipartite graph, let's run the Hungarian algorithm step by step.
Firstly, initialize an empty matching {}.
Iterate over nodes in set 1:
Search from node <0>. Updated matching: {<3>: <0>}.
Search from node <1>. Updated matching: {<3>: <0>, <5>: <1>}.
Search from node <2>. Updated matching: {<3>: <0>, <5>: <1>, <6>: <2>}.
So the maximum matching is 

>> n1:

3

>> n2:

4

####### sample 10 #######

>> task:

bipartite

>> graph:

[(<0>, <2>), (<0>, <3>), (<0>, <4>), (<1>, <3>)]

>> graph_adj:

{<0>: [<2>, <3>, <4>],
<1>: [<3>],
<2>: [<0>],
<3>: [<0>, <1>],
<4>: [<0>]}

>> graph_nl:

Node <0> is connected to nodes <2>, <3>, <4>.
Node <1> is connected to node <3>.
Node <2> is connected to node <0>.
Node <3> is connected to nodes <0>, <1>.
Node <4> is connected to node <0>.

>> nodes:

[<0>, <1>, <2>, <3>, <4>]

>> num_nodes:

5

>> num_edges:

4

>> directed:

False

>> question:

Find a maximum matching in the bipartite graph.
Nodes set 1 contains: <0> <1>.
Nodes set 2 contains: <2> <3> <4>.

>> answer:

[(<0>, <2>), (<1>, <3>)]

>> steps:

To find a maximum matching in the bipartite graph, let's run the Hungarian algorithm step by step.
Firstly, initialize an empty matching {}.
Iterate over nodes in set 1:
Search from node <0>. Updated matching: {<2>: <0>}.
Search from node <1>. Updated matching: {<2>: <0>, <3>: <1>}.
So the maximum matching is 

>> n1:

2

>> n2:

3

